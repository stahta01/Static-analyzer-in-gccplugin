
;; Function atoi (atoi, funcdef_no=888, decl_uid=16946, cgraph_uid=222, symbol_order=224)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__nptr = &NONLOCAL
ESCAPED = __nptr
ESCAPED = &NULL
ESCAPED = &NONLOCAL
_1 = NONLOCAL
_6 = _1
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__nptr = { NONLOCAL }
strtol = { }
_1 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _1


Alias information for atoi

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

__nptr_4(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((__pure__, __leaf__, __gnu_inline__))
atoi (const char * __nptr)
{
  long int _1;
  void * _2;
  int _6;

  <bb 2> [0.00%]:
  _1 = strtol (__nptr_4(D), 0B, 10);
  _6 = (int) _1;
  return _6;

}



;; Function fprintf (fprintf, funcdef_no=928, decl_uid=1095, cgraph_uid=262, symbol_order=264)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__stream = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__fmt = &PARM_NOALIAS(11)
PARM_NOALIAS(11) = &NONLOCAL
ESCAPED = __stream
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_5 = NONLOCAL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) PARM_NOALIAS(11) }
NONLOCAL = { ESCAPED NONLOCAL } same as _5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__stream = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__fmt = { PARM_NOALIAS(11) }
PARM_NOALIAS(11) = { ESCAPED NONLOCAL }
__fprintf_chk = { }
_5 = { ESCAPED NONLOCAL }


Alias information for fprintf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.47785 D.47786 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__stream_2(D), points-to NULL, points-to vars: { D.47785 } (nonlocal, escaped, restrict)
__fmt_3(D), points-to NULL, points-to vars: { D.47786 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
fprintf (struct FILE * restrict __stream, const char * restrict __fmt)
{
  int _5;

  <bb 2> [0.00%]:
  _5 = __fprintf_chk (__stream_2(D), 1, __fmt_3(D), __builtin_va_arg_pack ());
  return _5;

}



;; Function vfprintf (vfprintf, funcdef_no=931, decl_uid=1158, cgraph_uid=265, symbol_order=267)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__stream = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__fmt = &PARM_NOALIAS(11)
PARM_NOALIAS(11) = &NONLOCAL
__ap = &NONLOCAL
ESCAPED = __stream
ESCAPED = &NONLOCAL
ESCAPED = __fmt
ESCAPED = __ap
_6 = NONLOCAL
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) PARM_NOALIAS(11) }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__stream = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__fmt = { PARM_NOALIAS(11) }
PARM_NOALIAS(11) = { ESCAPED NONLOCAL }
__ap = { NONLOCAL }
__vfprintf_chk = { }
_6 = { ESCAPED NONLOCAL }


Alias information for vfprintf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.47788 D.47789 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__stream_2(D), points-to NULL, points-to vars: { D.47788 } (nonlocal, escaped, restrict)
__fmt_3(D), points-to NULL, points-to vars: { D.47789 } (nonlocal, escaped, restrict)
__ap_4(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
vfprintf (struct FILE * restrict __stream, const char * restrict __fmt, struct  * __ap)
{
  int _6;

  <bb 2> [0.00%]:
  _6 = __vfprintf_chk (__stream_2(D), 1, __fmt_3(D), __ap_4(D));
  return _6;

}



;; Function fread (fread, funcdef_no=940, decl_uid=18045, cgraph_uid=274, symbol_order=276)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__ptr = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__size = &NONLOCAL
__n = &NONLOCAL
__stream = &PARM_NOALIAS(13)
PARM_NOALIAS(13) = &NONLOCAL
CALLUSED(15) = CALLUSED(15) + UNKNOWN
CALLUSED(15) = *CALLUSED(15) + UNKNOWN
CALLUSED(15) = __ptr
CALLUSED(15) = &NULL
_1 = CALLUSED(15)
_1 = NONLOCAL
callarg(19) = __size
_2 = callarg(19) + UNKNOWN
_2 = &NONLOCAL
callarg(21) = __n
_3 = callarg(21) + UNKNOWN
_3 = &NONLOCAL
_4 = __size
_4 = __n
CALLUSED(24) = CALLUSED(24) + UNKNOWN
CALLUSED(24) = *CALLUSED(24) + UNKNOWN
CALLUSED(24) = __ptr
CALLUSED(24) = &NULL
_5 = CALLUSED(24)
_5 = NONLOCAL
ESCAPED = __ptr
ESCAPED = _5
ESCAPED = __size
ESCAPED = __n
ESCAPED = __stream
_20 = NONLOCAL
_6 = __size
_6 = __n
CALLUSED(30) = CALLUSED(30) + UNKNOWN
CALLUSED(30) = *CALLUSED(30) + UNKNOWN
CALLUSED(30) = __ptr
CALLUSED(30) = &NULL
_7 = CALLUSED(30)
_7 = NONLOCAL
CALLUSED(33) = CALLUSED(33) + UNKNOWN
CALLUSED(33) = *CALLUSED(33) + UNKNOWN
CALLUSED(33) = __ptr
CALLUSED(33) = &NULL
_8 = CALLUSED(33)
_8 = NONLOCAL
ESCAPED = __ptr
ESCAPED = _8
ESCAPED = __size
ESCAPED = __n
ESCAPED = __stream
_17 = NONLOCAL
ESCAPED = __ptr
ESCAPED = __size
ESCAPED = __n
ESCAPED = __stream
_23 = NONLOCAL
_9 = _20
_9 = _17
_9 = _23
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) PARM_NOALIAS(13) }
NONLOCAL = { ESCAPED NONLOCAL } same as _20
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__ptr = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__size = { NONLOCAL }
__n = { NONLOCAL } same as __size
__stream = { PARM_NOALIAS(13) }
PARM_NOALIAS(13) = { ESCAPED NONLOCAL }
__builtin_object_size = { }
CALLUSED(15) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLCLOBBERED(16) = { }
_1 = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
__builtin_constant_p = { }
callarg(19) = { NONLOCAL } same as __size
_2 = { NONLOCAL }
callarg(21) = { NONLOCAL } same as __size
_3 = { NONLOCAL }
_4 = { NONLOCAL } same as __size
CALLUSED(24) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLCLOBBERED(25) = { }
_5 = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
__fread_chk = { }
_20 = { ESCAPED NONLOCAL }
_6 = { NONLOCAL } same as __size
CALLUSED(30) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLCLOBBERED(31) = { }
_7 = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(33) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLCLOBBERED(34) = { }
_8 = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
*__fread_chk = { }
_17 = { ESCAPED NONLOCAL } same as _20
*fread = { }
_23 = { ESCAPED NONLOCAL } same as _20
_9 = { ESCAPED NONLOCAL } same as _20


Alias information for fread

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.47791 D.47792 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__ptr_12(D), points-to NULL, points-to vars: { D.47791 } (nonlocal, escaped, restrict)
__stream_15(D), points-to NULL, points-to vars: { D.47792 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
fread (void * restrict __ptr, size_t __size, size_t __n, struct FILE * restrict __stream)
{
  long unsigned int _1;
  int _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  size_t _9;
  size_t _17;
  size_t _20;
  size_t _23;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__ptr_12(D), 0);
  if (_1 != 18446744073709551615)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  _2 = __builtin_constant_p (__size_13(D));
  if (_2 == 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [0.00%]:
  _3 = __builtin_constant_p (__n_14(D));
  if (_3 == 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _4 = __size_13(D) | __n_14(D);
  if (_4 > 4294967295)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _5 = __builtin_object_size (__ptr_12(D), 0);
  _20 = __fread_chk (__ptr_12(D), _5, __size_13(D), __n_14(D), __stream_15(D));
  goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  _6 = __size_13(D) * __n_14(D);
  _7 = __builtin_object_size (__ptr_12(D), 0);
  if (_6 > _7)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  _8 = __builtin_object_size (__ptr_12(D), 0);
  _17 = *__fread_chk (__ptr_12(D), _8, __size_13(D), __n_14(D), __stream_15(D));
  goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  _23 = *fread (__ptr_12(D), __size_13(D), __n_14(D), __stream_15(D));

  <bb 10> [0.00%]:
  # _9 = PHI <_20(6), _17(8), _23(9)>
  return _9;

}



;; Function read (read, funcdef_no=1052, decl_uid=25064, cgraph_uid=340, symbol_order=342)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fd = &NONLOCAL
__buf = &NONLOCAL
__nbytes = &NONLOCAL
CALLUSED(12) = CALLUSED(12) + UNKNOWN
CALLUSED(12) = *CALLUSED(12) + UNKNOWN
CALLUSED(12) = __buf
CALLUSED(12) = &NULL
_1 = CALLUSED(12)
_1 = NONLOCAL
callarg(16) = __nbytes
_2 = callarg(16) + UNKNOWN
_2 = &NONLOCAL
CALLUSED(18) = CALLUSED(18) + UNKNOWN
CALLUSED(18) = *CALLUSED(18) + UNKNOWN
CALLUSED(18) = __buf
CALLUSED(18) = &NULL
_3 = CALLUSED(18)
_3 = NONLOCAL
ESCAPED = __fd
ESCAPED = __buf
ESCAPED = __nbytes
ESCAPED = _3
_16 = NONLOCAL
CALLUSED(23) = CALLUSED(23) + UNKNOWN
CALLUSED(23) = *CALLUSED(23) + UNKNOWN
CALLUSED(23) = __buf
CALLUSED(23) = &NULL
_4 = CALLUSED(23)
_4 = NONLOCAL
CALLUSED(26) = CALLUSED(26) + UNKNOWN
CALLUSED(26) = *CALLUSED(26) + UNKNOWN
CALLUSED(26) = __buf
CALLUSED(26) = &NULL
_5 = CALLUSED(26)
_5 = NONLOCAL
ESCAPED = __fd
ESCAPED = __buf
ESCAPED = __nbytes
ESCAPED = _5
_13 = NONLOCAL
ESCAPED = __fd
ESCAPED = __buf
ESCAPED = __nbytes
_19 = NONLOCAL
_6 = _16
_6 = _13
_6 = _19
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _16
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fd = { NONLOCAL }
__buf = { NONLOCAL } same as __fd
__nbytes = { NONLOCAL } same as __fd
__builtin_object_size = { }
CALLUSED(12) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(13) = { }
_1 = { NULL ESCAPED NONLOCAL }
__builtin_constant_p = { }
callarg(16) = { NONLOCAL } same as __fd
_2 = { NONLOCAL }
CALLUSED(18) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(19) = { }
_3 = { NULL ESCAPED NONLOCAL }
__read_chk = { }
_16 = { ESCAPED NONLOCAL }
CALLUSED(23) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(24) = { }
_4 = { NULL ESCAPED NONLOCAL }
CALLUSED(26) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(27) = { }
_5 = { NULL ESCAPED NONLOCAL }
*__read_chk = { }
_13 = { ESCAPED NONLOCAL } same as _16
*read = { }
_19 = { ESCAPED NONLOCAL } same as _16
_6 = { ESCAPED NONLOCAL } same as _16


Alias information for read

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

__buf_9(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
read (int __fd, void * __buf, size_t __nbytes)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  ssize_t _6;
  ssize_t _13;
  ssize_t _16;
  ssize_t _19;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__buf_9(D), 0);
  if (_1 != 18446744073709551615)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 3> [0.00%]:
  _2 = __builtin_constant_p (__nbytes_10(D));
  if (_2 == 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _3 = __builtin_object_size (__buf_9(D), 0);
  _16 = __read_chk (__fd_11(D), __buf_9(D), __nbytes_10(D), _3);
  goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  _4 = __builtin_object_size (__buf_9(D), 0);
  if (_4 < __nbytes_10(D))
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _5 = __builtin_object_size (__buf_9(D), 0);
  _13 = *__read_chk (__fd_11(D), __buf_9(D), __nbytes_10(D), _5);
  goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _19 = *read (__fd_11(D), __buf_9(D), __nbytes_10(D));

  <bb 8> [0.00%]:
  # _6 = PHI <_16(4), _13(6), _19(7)>
  return _6;

}



;; Function *stat64 (*stat64, funcdef_no=1898, decl_uid=35993, cgraph_uid=639, symbol_order=641)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__path = &NONLOCAL
__statbuf = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __path
ESCAPED = __statbuf
_6 = NONLOCAL
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__path = { NONLOCAL }
__statbuf = { NONLOCAL } same as __path
*__xstat64 = { }
_6 = { ESCAPED NONLOCAL }


Alias information for *stat64

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__path_3(D), points-to non-local, points-to NULL, points-to vars: { }
__statbuf_4(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((__leaf__, __gnu_inline__))
*stat64 (const char * __path, struct stat * __statbuf)
{
  void * _1;
  int _6;

  <bb 2> [0.00%]:
  _6 = *__xstat64 (1, __path_3(D), __statbuf_4(D));
  return _6;

}



;; Function *fstat64 (*fstat64, funcdef_no=1900, decl_uid=35996, cgraph_uid=641, symbol_order=643)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fd = &NONLOCAL
__statbuf = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fd
ESCAPED = __statbuf
_6 = NONLOCAL
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fd = { NONLOCAL }
__statbuf = { NONLOCAL } same as __fd
*__fxstat64 = { }
_6 = { ESCAPED NONLOCAL }


Alias information for *fstat64

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__statbuf_4(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((__leaf__, __gnu_inline__))
*fstat64 (int __fd, struct stat * __statbuf)
{
  void * _1;
  int _6;

  <bb 2> [0.00%]:
  _6 = *__fxstat64 (1, __fd_3(D), __statbuf_4(D));
  return _6;

}



;; Function *open64 (*open64, funcdef_no=1908, decl_uid=36338, cgraph_uid=649, symbol_order=651)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__path = &NONLOCAL
__oflag = &NONLOCAL
_1 = NONLOCAL
__oflag.10_2 = __oflag
callarg(15) = __oflag
_3 = callarg(15) + UNKNOWN
_3 = &NONLOCAL
__oflag.11_4 = __oflag
_5 = __oflag
__oflag.12_6 = __oflag
_7 = __oflag
_8 = NONLOCAL
__oflag.13_9 = __oflag
ESCAPED = __path
ESCAPED = __oflag.13_9
_28 = NONLOCAL
__oflag.14_10 = __oflag
ESCAPED = __path
ESCAPED = __oflag.14_10
_31 = NONLOCAL
_11 = NONLOCAL
__oflag.15_12 = __oflag
ESCAPED = __path
ESCAPED = __oflag.15_12
_24 = NONLOCAL
__oflag.16_13 = __oflag
ESCAPED = __path
ESCAPED = __oflag.16_13
_21 = NONLOCAL
_14 = _28
_14 = _31
_14 = _24
_14 = _21
ESCAPED = _14

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__path = { NONLOCAL }
__oflag = { NONLOCAL } same as __path
__builtin_va_arg_pack_len = { }
_1 = { ESCAPED NONLOCAL }
__open_too_many_args = { }
__oflag.10_2 = { NONLOCAL } same as __path
__builtin_constant_p = { }
callarg(15) = { NONLOCAL } same as __path
_3 = { NONLOCAL }
__oflag.11_4 = { NONLOCAL } same as __path
_5 = { NONLOCAL } same as __path
__oflag.12_6 = { NONLOCAL } same as __path
_7 = { NONLOCAL } same as __path
_8 = { ESCAPED NONLOCAL } same as _1
__open_missing_mode = { }
__oflag.13_9 = { NONLOCAL } same as __path
*__open64_2 = { }
_28 = { ESCAPED NONLOCAL } same as _1
__oflag.14_10 = { NONLOCAL } same as __path
*open64 = { }
_31 = { ESCAPED NONLOCAL } same as _1
_11 = { ESCAPED NONLOCAL } same as _1
__oflag.15_12 = { NONLOCAL } same as __path
_24 = { ESCAPED NONLOCAL } same as _1
__oflag.16_13 = { NONLOCAL } same as __path
_21 = { ESCAPED NONLOCAL } same as _1
_14 = { ESCAPED NONLOCAL } same as _1


Alias information for *open64

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__path_19(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
*open64 (const char * __path, int __oflag)
{
  int _1;
  int __oflag.10_2;
  int _3;
  int __oflag.11_4;
  int _5;
  int __oflag.12_6;
  int _7;
  int _8;
  int __oflag.13_9;
  int __oflag.14_10;
  int _11;
  int __oflag.15_12;
  int __oflag.16_13;
  int _14;
  int _21;
  int _24;
  int _28;
  int _31;

  <bb 2> [0.00%]:
  _1 = __builtin_va_arg_pack_len ();
  if (_1 > 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  __open_too_many_args ();

  <bb 4> [0.00%]:
  __oflag.10_2 = __oflag_33(D);
  _3 = __builtin_constant_p (__oflag_33(D));
  if (_3 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 5> [0.00%]:
  __oflag.11_4 = __oflag_33(D);
  _5 = __oflag_33(D) & 64;
  if (_5 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  __oflag.12_6 = __oflag_33(D);
  _7 = __oflag_33(D) & 4259840;
  if (_7 == 4259840)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 7> [0.00%]:
  _8 = __builtin_va_arg_pack_len ();
  if (_8 <= 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  __open_missing_mode ();
  __oflag.13_9 = __oflag_33(D);
  _28 = *__open64_2 (__path_19(D), __oflag.13_9);
  goto <bb 13>; [0.00%]

  <bb 9> [0.00%]:
  __oflag.14_10 = __oflag_33(D);
  _31 = *open64 (__path_19(D), __oflag.14_10, __builtin_va_arg_pack ());
  goto <bb 13>; [0.00%]

  <bb 10> [0.00%]:
  _11 = __builtin_va_arg_pack_len ();
  if (_11 <= 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  __oflag.15_12 = __oflag_33(D);
  _24 = *__open64_2 (__path_19(D), __oflag.15_12);
  goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  __oflag.16_13 = __oflag_33(D);
  _21 = *open64 (__path_19(D), __oflag.16_13, __builtin_va_arg_pack ());

  <bb 13> [0.00%]:
  # _14 = PHI <_28(8), _31(9), _24(11), _21(12)>
  return _14;

}



;; Function *strstr (*strstr, funcdef_no=1920, decl_uid=37062, cgraph_uid=661, symbol_order=663)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__haystack = &NONLOCAL
__needle = &NONLOCAL
_5 = __haystack
_5 = &NULL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__haystack = { NONLOCAL }
__needle = { NONLOCAL } same as __haystack
_5 = { NULL NONLOCAL }


Alias information for *strstr

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

__haystack_3(D), points-to non-local, points-to NULL, points-to vars: { }
__needle_4(D), points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }

__attribute__((__pure__, __gnu_inline__, __always_inline__))
*strstr (char * __haystack, const char * __needle)
{
  void * _1;
  char * _5;

  <bb 2> [0.00%]:
  _5 = strstr (__haystack_3(D), __needle_4(D));
  return _5;

}



;; Function memset (memset, funcdef_no=1931, decl_uid=1032, cgraph_uid=672, symbol_order=674)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__dest = &NONLOCAL
__ch = &NONLOCAL
__len = &NONLOCAL
CALLUSED(12) = CALLUSED(12) + UNKNOWN
CALLUSED(12) = *CALLUSED(12) + UNKNOWN
CALLUSED(12) = __dest
CALLUSED(12) = &NULL
_1 = CALLUSED(12)
_1 = NONLOCAL
_8 = __dest
*__dest = INTEGER
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ANYTHING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { ESCAPED NONLOCAL }
INTEGER = { ANYTHING }
__dest = { NONLOCAL }
__ch = { NONLOCAL } same as __dest
__len = { NONLOCAL } same as __dest
__builtin_object_size = { }
CALLUSED(12) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(13) = { }
_1 = { NULL ESCAPED NONLOCAL }
_8 = { NONLOCAL } same as __dest


Alias information for memset

Aliased symbols


Call clobber information

ESCAPED, points-to anything, points-to non-local

Flow-insensitive points-to information

__dest_4(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }

__attribute__((nothrow, __artificial__, __gnu_inline__, __always_inline__, __leaf__))
memset (void * __dest, int __ch, size_t __len)
{
  long unsigned int _1;
  void * _2;
  void * _8;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest_4(D), 0);
  _8 = __memset_chk (__dest_4(D), __ch_5(D), __len_6(D), _1);
  return _8;

}



;; Function strcpy (strcpy, funcdef_no=1933, decl_uid=1056, cgraph_uid=674, symbol_order=676)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__dest = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__src = &PARM_NOALIAS(11)
PARM_NOALIAS(11) = &NONLOCAL
CALLUSED(13) = CALLUSED(13) + UNKNOWN
CALLUSED(13) = *CALLUSED(13) + UNKNOWN
CALLUSED(13) = __dest
CALLUSED(13) = &NONLOCAL
_1 = CALLUSED(13)
_1 = NONLOCAL
_7 = __dest
doubledereftmp(17) = *__src
*__dest = doubledereftmp(17)
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__dest = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__src = { PARM_NOALIAS(11) }
PARM_NOALIAS(11) = { NONLOCAL }
__builtin_object_size = { }
CALLUSED(13) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLCLOBBERED(14) = { }
_1 = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
_7 = { PARM_NOALIAS(9) } same as __dest
doubledereftmp(17) = { NONLOCAL }


Alias information for strcpy

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.47800 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__dest_4(D), points-to NULL, points-to vars: { D.47800 } (nonlocal, escaped, restrict)
__src_5(D), points-to NULL, points-to vars: { D.47801 } (nonlocal, restrict)
_7, points-to NULL, points-to vars: { D.47800 } (nonlocal, escaped, restrict)

__attribute__((nothrow, __artificial__, __gnu_inline__, __always_inline__, __leaf__))
strcpy (char * restrict __dest, const char * restrict __src)
{
  long unsigned int _1;
  void * _2;
  char * _7;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest_4(D), 1);
  _7 = __strcpy_chk (__dest_4(D), __src_5(D), _1);
  return _7;

}



;; Function strncpy (strncpy, funcdef_no=1935, decl_uid=1080, cgraph_uid=676, symbol_order=678)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__dest = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__src = &PARM_NOALIAS(11)
PARM_NOALIAS(11) = &NONLOCAL
__len = &NONLOCAL
CALLUSED(14) = CALLUSED(14) + UNKNOWN
CALLUSED(14) = *CALLUSED(14) + UNKNOWN
CALLUSED(14) = __dest
CALLUSED(14) = &NONLOCAL
_1 = CALLUSED(14)
_1 = NONLOCAL
_8 = __dest
doubledereftmp(18) = *__src
*__dest = doubledereftmp(18)
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__dest = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__src = { PARM_NOALIAS(11) }
PARM_NOALIAS(11) = { NONLOCAL }
__len = { NONLOCAL }
__builtin_object_size = { }
CALLUSED(14) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLCLOBBERED(15) = { }
_1 = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
_8 = { PARM_NOALIAS(9) } same as __dest
doubledereftmp(18) = { NONLOCAL }


Alias information for strncpy

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.47803 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__dest_4(D), points-to NULL, points-to vars: { D.47803 } (nonlocal, escaped, restrict)
__src_5(D), points-to NULL, points-to vars: { D.47804 } (nonlocal, restrict)
_8, points-to NULL, points-to vars: { D.47803 } (nonlocal, escaped, restrict)

__attribute__((nothrow, __artificial__, __gnu_inline__, __always_inline__, __leaf__))
strncpy (char * restrict __dest, const char * restrict __src, size_t __len)
{
  long unsigned int _1;
  void * _2;
  char * _8;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest_4(D), 1);
  _8 = __strncpy_chk (__dest_4(D), __src_5(D), __len_6(D), _1);
  return _8;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv, funcdef_no=2178, decl_uid=19046, cgraph_uid=918, symbol_order=966)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 64
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (const struct basic_string * const this)
{
  size_type _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_M_string_length;
  return _3;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv, funcdef_no=2268, decl_uid=19044, cgraph_uid=1008, symbol_order=1056)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 64
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (const struct basic_string * const this)
{
  size_type _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_M_string_length;
  return _3;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv, funcdef_no=2274, decl_uid=18749, cgraph_uid=1014, symbol_order=1062)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (const struct basic_string * const this)
{
  char * _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_M_dataplus._M_p;
  return _3;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv, funcdef_no=2009, decl_uid=19401, cgraph_uid=749, symbol_order=797)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const (const struct basic_string * const this)
{
  char * D.47810;
  char * _3;

  <bb 2> [100.00%]:
  _3 = this_2(D)->_M_dataplus._M_p;
  return _3;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv, funcdef_no=2280, decl_uid=18844, cgraph_uid=1020, symbol_order=1068)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this + UNKNOWN
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() (struct basic_string * const this)
{
  struct allocator_type & _2;

  <bb 2> [0.00%]:
  _2 = &this_1(D)->_M_dataplus;
  return _2;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc, funcdef_no=2286, decl_uid=18743, cgraph_uid=1026, symbol_order=1074)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__p = &NONLOCAL
*this = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__p = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__p_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*) (struct basic_string * const this, char * __p)
{
  <bb 2> [0.00%]:
  this_2(D)->_M_dataplus._M_p = __p_3(D);
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm, funcdef_no=2287, decl_uid=18755, cgraph_uid=1027, symbol_order=1075)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__capacity = &NONLOCAL
*this + 128 = __capacity

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__capacity = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long) (struct basic_string * const this, size_type __capacity)
{
  <bb 2> [0.00%]:
  this_2(D)->D.18739._M_allocated_capacity = __capacity_3(D);
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm, funcdef_no=2288, decl_uid=18746, cgraph_uid=1028, symbol_order=1076)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__length = &NONLOCAL
*this + 64 = __length

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__length = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long) (struct basic_string * const this, size_type __length)
{
  <bb 2> [0.00%]:
  this_2(D)->_M_string_length = __length_3(D);
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm, funcdef_no=2406, decl_uid=19068, cgraph_uid=1146, symbol_order=1194)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
_4 = *this
_7 = _4
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
_4 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _4


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const (const struct basic_string * const this, size_type __pos)
{
  char * D.47817;
  char * _4;
  const value_type & _7;

  <bb 2> [100.00%]:
  _4 = this_3(D)->_M_dataplus._M_p;
  _7 = _4 + __pos_6(D);
  return _7;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv, funcdef_no=2609, decl_uid=18846, cgraph_uid=1349, symbol_order=1397)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this + UNKNOWN
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const (const struct basic_string * const this)
{
  const struct allocator_type & _2;

  <bb 2> [0.00%]:
  _2 = &this_1(D)->_M_dataplus;
  return _2;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEm, funcdef_no=2269, decl_uid=19054, cgraph_uid=1009, symbol_order=1057)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
ESCAPED = this
ESCAPED = __n
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long) (struct basic_string * const this, size_type __n)
{
  <bb 2> [0.00%]:
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (this_2(D), __n_3(D), 0);
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_, funcdef_no=2408, decl_uid=19100, cgraph_uid=1148, symbol_order=1196)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__str = &NONLOCAL
_5 = *__str + 64
_6 = *__str
ESCAPED = this
ESCAPED = _6
ESCAPED = _5
_10 = NONLOCAL
ESCAPED = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _10
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__str = { NONLOCAL } same as this
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm = { }
_10 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__str_4(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_8(D), points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (struct basic_string * const this, const struct basic_string & __str)
{
  size_type D.47824;
  char * D.47822;
  long unsigned int _5;
  char * _6;
  struct basic_string & _10;

  <bb 2> [100.00%]:
  _5 = __str_4(D)->_M_string_length;
  _6 = __str_4(D)->_M_dataplus._M_p;
  _10 = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append (this_8(D), _6, _5);
  return _10;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_, funcdef_no=2271, decl_uid=19088, cgraph_uid=1011, symbol_order=1059)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__str = &NONLOCAL
_7 = *__str + 64
_8 = *__str
ESCAPED = this
ESCAPED = _8
ESCAPED = _7
_9 = NONLOCAL
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _9
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__str = { NONLOCAL } same as this
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm = { }
_9 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__str_3(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (struct basic_string * const this, const struct basic_string & __str)
{
  struct basic_string & D.47828;
  long unsigned int _7;
  char * _8;
  struct basic_string & _9;

  <bb 2> [100.00%]:
  _7 = __str_3(D)->_M_string_length;
  _8 = __str_3(D)->_M_dataplus._M_p;
  _9 = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append (this_2(D), _8, _7);
  return _9;

}



;; Function __gnu_cxx::__ops::__iter_equal_to_iter() (_ZN9__gnu_cxx5__ops20__iter_equal_to_iterEv, funcdef_no=205, decl_uid=8057, cgraph_uid=12, symbol_order=13)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = D.47302

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
D.47302 = { }


Alias information for __gnu_cxx::__ops::__iter_equal_to_iter()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::__ops::__iter_equal_to_iter() ()
{
  struct _Iter_equal_to_iter D.47302;

  <bb 2> [0.00%]:
  return D.47302;

}



;; Function std::char_traits<char>::assign(char&, char const&) (_ZNSt11char_traitsIcE6assignERcRKc, funcdef_no=358, decl_uid=10336, cgraph_uid=47, symbol_order=48)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__c1 = &NONLOCAL
__c2 = &NONLOCAL
_1 = *__c2
*__c1 = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__c1 = { NONLOCAL }
__c2 = { NONLOCAL } same as __c1
_1 = { ESCAPED NONLOCAL }


Alias information for std::char_traits<char>::assign(char&, char const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__c2_3(D), points-to non-local, points-to NULL, points-to vars: { }
__c1_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::char_traits<char>::assign(char&, char const&) (char_type & __c1, const char_type & __c2)
{
  char _1;

  <bb 2> [0.00%]:
  _1 = *__c2_3(D);
  *__c1_4(D) = _1;
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm, funcdef_no=2289, decl_uid=18758, cgraph_uid=1029, symbol_order=1077)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
*this + 64 = __n
_12 = *this
_2 = _12
derefaddrtmp(12) = &NULL
*_2 = derefaddrtmp(12)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
_12 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _12
derefaddrtmp(12) = { NULL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (struct basic_string * const this, size_type __n)
{
  char * D.47835;
  const char_type D.41909;
  char * _2;
  char * _12;

  <bb 2> [100.00%]:
  this_4(D)->_M_string_length = __n_5(D);
  _12 = MEM[(const struct basic_string *)this_4(D)]._M_dataplus._M_p;
  _2 = _12 + __n_5(D);
  MEM[(char_type &)_2] = 0;
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear() (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv, funcdef_no=2403, decl_uid=19064, cgraph_uid=1143, symbol_order=1191)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
derefaddrtmp(9) = &NULL
*this + 64 = derefaddrtmp(9)
_4 = *this
derefaddrtmp(11) = &NULL
*_4 = derefaddrtmp(11)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
derefaddrtmp(9) = { NULL }
_4 = { ESCAPED NONLOCAL }
derefaddrtmp(11) = { NULL } same as derefaddrtmp(9)


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()

Aliased symbols


Call clobber information

ESCAPED, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear() (struct basic_string * const this)
{
  char * _4;

  <bb 2> [100.00%]:
  this_2(D)->_M_string_length = 0;
  _4 = MEM[(const struct basic_string *)this_2(D)]._M_dataplus._M_p;
  MEM[(char_type &)_4] = 0;
  return;

}



;; Function std::char_traits<char>::length(char const*) (_ZNSt11char_traitsIcE6lengthEPKc, funcdef_no=362, decl_uid=10348, cgraph_uid=51, symbol_order=52)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s = &NONLOCAL
CALLUSED(10) = CALLUSED(10) + UNKNOWN
CALLUSED(10) = *CALLUSED(10) + UNKNOWN
CALLUSED(10) = __s
_3 = CALLUSED(10)
_3 = NONLOCAL
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s = { NONLOCAL }
strlen = { }
CALLUSED(10) = { ESCAPED NONLOCAL }
CALLCLOBBERED(11) = { }
_3 = { ESCAPED NONLOCAL }


Alias information for std::char_traits<char>::length(char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__s_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::char_traits<char>::length(char const*) (const char_type * __s)
{
  size_t _3;

  <bb 2> [0.00%]:
  _3 = strlen (__s_2(D));
  return _3;

}



;; Function std::char_traits<char>::copy(char*, char const*, unsigned long) (_ZNSt11char_traitsIcE4copyEPcPKcm, funcdef_no=365, decl_uid=10360, cgraph_uid=54, symbol_order=55)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s1 = &NONLOCAL
__s2 = &NONLOCAL
__n = &NONLOCAL
_8 = __s1
doubledereftmp(12) = *__s2
*__s1 = doubledereftmp(12)
_1 = __s1
_1 = _8
ESCAPED = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as doubledereftmp(12)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s1 = { NONLOCAL }
__s2 = { NONLOCAL } same as __s1
__n = { NONLOCAL } same as __s1
_8 = { NONLOCAL } same as __s1
doubledereftmp(12) = { ESCAPED NONLOCAL }
_1 = { NONLOCAL } same as __s1


Alias information for std::char_traits<char>::copy(char*, char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
__s1_5(D), points-to non-local, points-to NULL, points-to vars: { }
__s2_6(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }

std::char_traits<char>::copy(char*, char const*, unsigned long) (char_type * __s1, const char_type * __s2, size_t __n)
{
  char_type * _1;
  char_type * _8;

  <bb 2> [0.00%]:
  if (__n_3(D) == 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  _8 = memcpy (__s1_5(D), __s2_6(D), __n_3(D));

  <bb 4> [0.00%]:
  # _1 = PHI <__s1_5(D)(2), _8(3)>
  return _1;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm, funcdef_no=2400, decl_uid=18864, cgraph_uid=1140, symbol_order=1188)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__d = &NONLOCAL
__s = &NONLOCAL
__n = &NONLOCAL
_8 = *__s
*__d = _8
_9 = __d
doubledereftmp(13) = *__s
*__d = doubledereftmp(13)
_10 = __d
_10 = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__d = { NONLOCAL }
__s = { NONLOCAL } same as __d
__n = { NONLOCAL } same as __d
_8 = { ESCAPED NONLOCAL }
_9 = { NONLOCAL } same as __d
doubledereftmp(13) = { ESCAPED NONLOCAL } same as _8
_10 = { NONLOCAL } same as __d


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__d_4(D), points-to non-local, points-to NULL, points-to vars: { }
__s_5(D), points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (char * __d, const char * __s, size_type __n)
{
  char_type * D.47849;
  char _8;
  char_type * _9;
  char_type * _10;

  <bb 2> [0.00%]:
  if (__n_2(D) == 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _8 = MEM[(const char_type &)__s_5(D)];
  MEM[(char_type &)__d_4(D)] = _8;
  goto <bb 7>; [100.00%]

  <bb 4> [100.00%]:
  if (__n_2(D) == 0)
    goto <bb 6>; [63.36%]
  else
    goto <bb 5>; [36.64%]

  <bb 5> [36.64%]:
  _9 = memcpy (__d_4(D), __s_5(D), __n_2(D));

  <bb 6> [100.00%]:
  # _10 = PHI <__d_4(D)(4), _9(5)>

  <bb 7> [0.00%]:
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_, funcdef_no=2564, decl_uid=18900, cgraph_uid=1304, symbol_order=1352)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__p = &NONLOCAL
__k1 = &NONLOCAL
__k2 = &NONLOCAL
__k2.724_1 = __k2
__k1.725_2 = __k1
_3 = __k2.724_1
_3 = __k1.725_2
_4 = _3
_10 = *__k1
*__p = _10
doubledereftmp(16) = *__k1
*__p = doubledereftmp(16)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _10
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__p = { NONLOCAL }
__k1 = { NONLOCAL } same as __p
__k2 = { NONLOCAL } same as __p
__k2.724_1 = { NONLOCAL } same as __p
__k1.725_2 = { NONLOCAL } same as __p
_3 = { NONLOCAL } same as __p
_4 = { NONLOCAL } same as __p
_10 = { ESCAPED NONLOCAL }
doubledereftmp(16) = { ESCAPED NONLOCAL } same as _10


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__k2_5(D), points-to non-local, points-to NULL, points-to vars: { }
__k1_6(D), points-to non-local, points-to NULL, points-to vars: { }
__p_8(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*) (char * __p, const char * __k1, const char * __k2)
{
  long int __k2.724_1;
  long int __k1.725_2;
  long int _3;
  long unsigned int _4;
  char _10;

  <bb 2> [100.00%]:
  __k2.724_1 = (long int) __k2_5(D);
  __k1.725_2 = (long int) __k1_6(D);
  _3 = __k2.724_1 - __k1.725_2;
  _4 = (long unsigned int) _3;
  if (_4 == 1)
    goto <bb 3>; [30.50%]
  else
    goto <bb 4>; [69.50%]

  <bb 3> [30.50%]:
  _10 = MEM[(const char_type &)__k1_6(D)];
  MEM[(char_type &)__p_8(D)] = _10;
  goto <bb 6>; [100.00%]

  <bb 4> [69.50%]:
  if (_4 == 0)
    goto <bb 6>; [63.36%]
  else
    goto <bb 5>; [36.64%]

  <bb 5> [25.46%]:
  memcpy (__p_8(D), __k1_6(D), _4);

  <bb 6> [0.00%]:
  return;

}



;; Function operator new(unsigned long, void*) (_ZnwmPv, funcdef_no=465, decl_uid=11344, cgraph_uid=144, symbol_order=145)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
D.11342 = &NONLOCAL
__p = &NONLOCAL
ESCAPED = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
D.11342 = { NONLOCAL }
__p = { NONLOCAL } same as D.11342


Alias information for operator new(unsigned long, void*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__p_1(D), points-to non-local, points-to NULL, points-to vars: { }

operator new(unsigned long, void*) (size_t D.11342, void * __p)
{
  <bb 2> [0.00%]:
  return __p_1(D);

}



;; Function outBuff::outBuff(char*, unsigned int, int, int, unsigned int, bool, outBuff*) (_ZN7outBuffC2EPcjiijbPS_, funcdef_no=1070, decl_uid=26014, cgraph_uid=358, symbol_order=360)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
aBuf = &NONLOCAL
aBufSize = &NONLOCAL
aBlockNumber = &NONLOCAL
aSequenceNumber = &NONLOCAL
aInSize = &NONLOCAL
isLast = &NONLOCAL
aNext = &NONLOCAL
*this = aBuf
*this + 64 = aBufSize
*this + 96 = aBlockNumber
*this + 128 = aSequenceNumber
*this + 160 = aInSize
*this + 192 = isLast
*this + 256 = aNext

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
aBuf = { NONLOCAL } same as this
aBufSize = { NONLOCAL } same as this
aBlockNumber = { NONLOCAL } same as this
aSequenceNumber = { NONLOCAL } same as this
aInSize = { NONLOCAL } same as this
isLast = { NONLOCAL } same as this
aNext = { NONLOCAL } same as this


Alias information for outBuff::outBuff(char*, unsigned int, int, int, unsigned int, bool, outBuff*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
aBuf_4(D), points-to non-local, points-to NULL, points-to vars: { }
aNext_16(D), points-to non-local, points-to NULL, points-to vars: { }

outBuff::outBuff(char*, unsigned int, int, int, unsigned int, bool, outBuff*) (struct outBuff * const this, char * aBuf, unsigned int aBufSize, int aBlockNumber, int aSequenceNumber, unsigned int aInSize, bool isLast, struct outBuff * aNext)
{
  <bb 2> [0.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->buf = aBuf_4(D);
  this_2(D)->bufSize = aBufSize_6(D);
  this_2(D)->blockNumber = aBlockNumber_8(D);
  this_2(D)->sequenceNumber = aSequenceNumber_10(D);
  this_2(D)->inSize = aInSize_12(D);
  this_2(D)->isLastInSequence = isLast_14(D);
  this_2(D)->next = aNext_16(D);
  return;

}



;; Function queue::queue() (_ZN5queueC2Ev, funcdef_no=1073, decl_uid=26069, cgraph_uid=361, symbol_order=363)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
derefaddrtmp(9) = &NULL
*this + 128 = derefaddrtmp(9)
derefaddrtmp(10) = &NULL
*this + 704 = derefaddrtmp(10)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
derefaddrtmp(9) = { NULL }
derefaddrtmp(10) = { NULL } same as derefaddrtmp(9)


Alias information for queue::queue()

Aliased symbols


Call clobber information

ESCAPED, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

queue::queue() (struct queue * const this)
{
  <bb 2> [0.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->count = 0;
  this_2(D)->lastElement = 0B;
  return;

}



;; Function queue::clear() (_ZN5queue5clearEv, funcdef_no=1075, decl_uid=26059, cgraph_uid=363, symbol_order=365)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
derefaddrtmp(9) = &NONLOCAL
*this + 352 = derefaddrtmp(9)
derefaddrtmp(10) = &NULL
*this + 320 = derefaddrtmp(10)
derefaddrtmp(11) = &NULL
*this + 192 = derefaddrtmp(11)
derefaddrtmp(12) = &NULL
*this + 256 = derefaddrtmp(12)
derefaddrtmp(13) = &NULL
*this + 128 = derefaddrtmp(13)
derefaddrtmp(14) = &NULL
*this + 704 = derefaddrtmp(14)
derefaddrtmp(15) = &NULL
*this + 384 = derefaddrtmp(15)
derefaddrtmp(16) = &NONLOCAL
*this + 416 = derefaddrtmp(16)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
derefaddrtmp(9) = { NONLOCAL } same as this
derefaddrtmp(10) = { NULL }
derefaddrtmp(11) = { NULL } same as derefaddrtmp(10)
derefaddrtmp(12) = { NULL } same as derefaddrtmp(10)
derefaddrtmp(13) = { NULL } same as derefaddrtmp(10)
derefaddrtmp(14) = { NULL } same as derefaddrtmp(10)
derefaddrtmp(15) = { NULL } same as derefaddrtmp(10)
derefaddrtmp(16) = { NONLOCAL } same as this


Alias information for queue::clear()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

queue::clear() (struct queue * const this)
{
  <bb 2> [0.00%]:
  this_2(D)->empty = 1;
  this_2(D)->full = 0;
  this_2(D)->head = 0;
  this_2(D)->tail = 0;
  this_2(D)->count = 0;
  this_2(D)->lastElement = 0B;
  this_2(D)->topLevelFull = 0;
  this_2(D)->topLevelEmpty = 1;
  return;

}



;; Function queue::add(outBuff*) (_ZN5queue3addEP7outBuff, funcdef_no=1076, decl_uid=26062, cgraph_uid=364, symbol_order=366)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
element = &NONLOCAL
_1 = *element + 128
_2 = *this + 704
*_2 + 256 = element
_3 = *this
_4 = *this + 256
_5 = _4
_6 = _5
_6 = &NONLOCAL
_7 = _3
*_7 = element
_8 = *this + 256
_9 = _8
_9 = &NONLOCAL
*this + 256 = _9
_10 = *this + 256
_11 = *this + 64
derefaddrtmp(21) = &NULL
*this + 256 = derefaddrtmp(21)
_12 = *this + 256
_13 = *this + 192
derefaddrtmp(24) = &NONLOCAL
*this + 384 = derefaddrtmp(24)
derefaddrtmp(25) = &NULL
*this + 416 = derefaddrtmp(25)
*this + 704 = element
_14 = *this + 128
_15 = _14
_15 = &NONLOCAL
*this + 128 = _15
_16 = *this + 128
_17 = *this + 64
derefaddrtmp(30) = &NONLOCAL
*this + 320 = derefaddrtmp(30)
derefaddrtmp(31) = &NULL
*this + 352 = derefaddrtmp(31)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
element = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _3
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
derefaddrtmp(21) = { NULL }
_12 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL }
derefaddrtmp(24) = { NONLOCAL } same as this
derefaddrtmp(25) = { NULL } same as derefaddrtmp(21)
_14 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL }
derefaddrtmp(30) = { NONLOCAL } same as this
derefaddrtmp(31) = { NULL } same as derefaddrtmp(21)


Alias information for queue::add(outBuff*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
element_23(D), points-to non-local, points-to NULL, points-to vars: { }
this_24(D), points-to non-local, points-to NULL, points-to vars: { }

queue::add(outBuff*) (struct queue * const this, struct ElementType * element)
{
  int _1;
  struct ElementType * _2;
  struct ElementType * * _3;
  long int _4;
  long unsigned int _5;
  long unsigned int _6;
  struct ElementType * * _7;
  long int _8;
  long int _9;
  long int _10;
  long int _11;
  long int _12;
  long int _13;
  long int _14;
  long int _15;
  long int _16;
  long int _17;

  <bb 2> [0.00%]:
  _1 = element_23(D)->sequenceNumber;
  if (_1 > 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _2 = this_24(D)->lastElement;
  _2->next = element_23(D);
  goto <bb 9>; [0.00%]

  <bb 4> [0.00%]:
  _3 = this_24(D)->qData;
  _4 = this_24(D)->tail;
  _5 = (long unsigned int) _4;
  _6 = _5 * 8;
  _7 = _3 + _6;
  *_7 = element_23(D);
  _8 = this_24(D)->tail;
  _9 = _8 + 1;
  this_24(D)->tail = _9;
  _10 = this_24(D)->tail;
  _11 = this_24(D)->size;
  if (_10 == _11)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  this_24(D)->tail = 0;

  <bb 6> [0.00%]:
  _12 = this_24(D)->tail;
  _13 = this_24(D)->head;
  if (_12 == _13)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  this_24(D)->topLevelFull = 1;

  <bb 8> [0.00%]:
  this_24(D)->topLevelEmpty = 0;

  <bb 9> [0.00%]:
  this_24(D)->lastElement = element_23(D);
  _14 = this_24(D)->count;
  _15 = _14 + 1;
  this_24(D)->count = _15;
  _16 = this_24(D)->count;
  _17 = this_24(D)->size;
  if (_16 == _17)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  this_24(D)->full = 1;

  <bb 11> [0.00%]:
  this_24(D)->empty = 0;
  return;

}



;; Function queue::remove(outBuff*&) (_ZN5queue6removeERP7outBuff, funcdef_no=1077, decl_uid=26065, cgraph_uid=365, symbol_order=367)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
element = &NONLOCAL
_1 = *this
_2 = *this + 192
_3 = _2
_4 = _3
_4 = &NONLOCAL
headElem_32 = _1
_5 = *element
_6 = *element
_7 = *_6 + 192
_8 = _7
_9 = *element
_10 = *_9 + 256
_11 = *element
_12 = *_11 + 256
*element = _12
_13 = *this + 416
_14 = *headElem_32
*element = _14
_15 = *this + 192
_16 = _15
_16 = &NONLOCAL
*this + 192 = _16
_17 = *this + 192
_18 = *this + 64
derefaddrtmp(29) = &NULL
*this + 192 = derefaddrtmp(29)
_19 = *this + 192
_20 = *this + 256
derefaddrtmp(32) = &NONLOCAL
*this + 416 = derefaddrtmp(32)
derefaddrtmp(33) = &NULL
*this + 384 = derefaddrtmp(33)
_21 = *this + 128
_22 = _21
_22 = &NONLOCAL
*this + 128 = _22
_23 = *this + 128
derefaddrtmp(37) = &NONLOCAL
*this + 352 = derefaddrtmp(37)
derefaddrtmp(38) = &NULL
*this + 320 = derefaddrtmp(38)
_24 = &NULL
_24 = &NULL
_24 = &NONLOCAL
ESCAPED = _24

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
element = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
_4 = { ESCAPED NONLOCAL }
headElem_32 = { ESCAPED NONLOCAL } same as _1
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _5
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as _7
_9 = { ESCAPED NONLOCAL } same as _5
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _5
_12 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_18 = { ESCAPED NONLOCAL }
derefaddrtmp(29) = { NULL }
_19 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL }
derefaddrtmp(32) = { NONLOCAL } same as this
derefaddrtmp(33) = { NULL } same as derefaddrtmp(29)
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL }
derefaddrtmp(37) = { NONLOCAL } same as this
derefaddrtmp(38) = { NULL } same as derefaddrtmp(29)
_24 = { NULL NONLOCAL }


Alias information for queue::remove(outBuff*&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_31(D), points-to non-local, points-to NULL, points-to vars: { }
headElem_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
element_33(D), points-to non-local, points-to NULL, points-to vars: { }

queue::remove(outBuff*&) (struct queue * const this, struct ElementType * & element)
{
  struct ElementType * & headElem;
  struct ElementType * * _1;
  long int _2;
  long unsigned int _3;
  long unsigned int _4;
  struct ElementType * _5;
  struct ElementType * _6;
  bool _7;
  bool _8;
  struct ElementType * _9;
  struct outBuff * _10;
  struct ElementType * _11;
  struct outBuff * _12;
  int _13;
  struct ElementType * _14;
  long int _15;
  long int _16;
  long int _17;
  long int _18;
  long int _19;
  long int _20;
  long int _21;
  long int _22;
  long int _23;
  int _24;

  <bb 2> [0.00%]:
  _1 = this_31(D)->qData;
  _2 = this_31(D)->head;
  _3 = (long unsigned int) _2;
  _4 = _3 * 8;
  headElem_32 = _1 + _4;
  _5 = *element_33(D);
  if (_5 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _6 = *element_33(D);
  _7 = _6->isLastInSequence;
  _8 = ~_7;
  if (_7 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [0.00%]:
  _9 = *element_33(D);
  _10 = _9->next;
  if (_10 != 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 5> [0.00%]:
  _11 = *element_33(D);
  _12 = _11->next;
  *element_33(D) = _12;
  goto <bb 12>; [0.00%]

  <bb 6> [0.00%]:
  _13 = this_31(D)->topLevelEmpty;
  if (_13 != 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  _14 = *headElem_32;
  *element_33(D) = _14;
  _15 = this_31(D)->head;
  _16 = _15 + 1;
  this_31(D)->head = _16;
  _17 = this_31(D)->head;
  _18 = this_31(D)->size;
  if (_17 == _18)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  this_31(D)->head = 0;

  <bb 9> [0.00%]:
  _19 = this_31(D)->head;
  _20 = this_31(D)->tail;
  if (_19 == _20)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  this_31(D)->topLevelEmpty = 1;

  <bb 11> [0.00%]:
  this_31(D)->topLevelFull = 0;

  <bb 12> [0.00%]:
  _21 = this_31(D)->count;
  _22 = _21 + -1;
  this_31(D)->count = _22;
  _23 = this_31(D)->count;
  if (_23 == 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  this_31(D)->empty = 1;

  <bb 14> [0.00%]:
  this_31(D)->full = 0;

  <bb 15> [0.00%]:
  # _24 = PHI <0(4), 0(6), 1(14)>
  return _24;

}



;; Function pbzip2::BZ2StreamScanner::failed() (_ZN6pbzip216BZ2StreamScanner6failedEv, funcdef_no=1431, decl_uid=29323, cgraph_uid=440, symbol_order=442)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this + 1536
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_4 = { }


Alias information for pbzip2::BZ2StreamScanner::failed()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::failed() (struct BZ2StreamScanner * const this)
{
  unsigned int _1;
  bool _4;

  <bb 2> [0.00%]:
  _1 = this_3(D)->_errState;
  _4 = _1 != 0;
  return _4;

}



;; Function pbzip2::BZ2StreamScanner::isBz2HeaderFound() const (_ZNK6pbzip216BZ2StreamScanner16isBz2HeaderFoundEv, funcdef_no=1432, decl_uid=29325, cgraph_uid=441, symbol_order=443)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 640
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::isBz2HeaderFound() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::isBz2HeaderFound() const (const struct BZ2StreamScanner * const this)
{
  bool _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_bz2HeaderFound;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::eof() const (_ZNK6pbzip216BZ2StreamScanner3eofEv, funcdef_no=1434, decl_uid=29329, cgraph_uid=443, symbol_order=445)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 96
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::eof() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::eof() const (const struct BZ2StreamScanner * const this)
{
  bool _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_eof;
  return _3;

}



;; Function do_write(int, void const*, unsigned long) (_Z8do_writeiPKvm, funcdef_no=1945, decl_uid=26104, cgraph_uid=686, symbol_order=734)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fd = &NONLOCAL
buf = &NONLOCAL
count = &NONLOCAL
bytesRemaining_18 = count
bytesRemaining_6 = bytesRemaining_18
bytesRemaining_6 = bytesRemaining_35
nbytes_7 = &NULL
nbytes_7 = nbytes_19
pbuf_10 = buf
pbuf_10 = pbuf_36
bytesRemaining.2_1 = bytesRemaining_6
ESCAPED = fd
ESCAPED = pbuf_10
ESCAPED = bytesRemaining.2_1
_25 = NONLOCAL
nbytes_19 = _25
iftmp.1_21 = &NONLOCAL
bytesRemaining_35 = bytesRemaining_6
bytesRemaining_35 = nbytes_19
nbytes.3_2 = nbytes_19
pbuf_36 = pbuf_10
nbytes_8 = nbytes_7
nbytes_8 = _25
nbytes_27 = nbytes_8
iftmp.1_28 = &NULL
_32 = NONLOCAL
ESCAPED = _32
bytesRemaining.4_4 = bytesRemaining_6
_5 = count
_5 = bytesRemaining.4_4
_30 = _5
_12 = nbytes_27
_12 = _30
ESCAPED = _12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as bytesRemaining_6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fd = { NONLOCAL }
buf = { NONLOCAL } same as fd
count = { NONLOCAL } same as fd
bytesRemaining_18 = { NONLOCAL } same as fd
bytesRemaining_6 = { ESCAPED NONLOCAL }
bytesRemaining_35 = { ESCAPED NONLOCAL } same as bytesRemaining_6
nbytes_7 = { NULL ESCAPED NONLOCAL }
nbytes_19 = { ESCAPED NONLOCAL } same as bytesRemaining_6
pbuf_10 = { NONLOCAL } same as fd
pbuf_36 = { NONLOCAL } same as fd
bytesRemaining.2_1 = { ESCAPED NONLOCAL } same as bytesRemaining_6
write = { }
_25 = { ESCAPED NONLOCAL } same as bytesRemaining_6
iftmp.1_21 = { NONLOCAL } same as fd
nbytes.3_2 = { ESCAPED NONLOCAL } same as bytesRemaining_6
nbytes_8 = { NULL ESCAPED NONLOCAL } same as nbytes_7
nbytes_27 = { NULL ESCAPED NONLOCAL } same as nbytes_7
iftmp.1_28 = { NULL }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_32 = { ESCAPED NONLOCAL } same as bytesRemaining_6
_ZN6pbzip212ErrorContext9saveErrorEv = { }
bytesRemaining.4_4 = { ESCAPED NONLOCAL } same as bytesRemaining_6
_5 = { ESCAPED NONLOCAL } same as bytesRemaining_6
_30 = { ESCAPED NONLOCAL } same as bytesRemaining_6
_12 = { NULL ESCAPED NONLOCAL } same as nbytes_7


Alias information for do_write(int, void const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

pbuf_10, points-to non-local, points-to NULL, points-to vars: { }
buf_20(D), points-to non-local, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pbuf_36, points-to non-local, points-to NULL, points-to vars: { }

do_write(int, void const*, unsigned long) (int fd, const void * buf, size_t count)
{
  const char * pbuf;
  ssize_t nbytes;
  ssize_t bytesRemaining;
  long unsigned int bytesRemaining.2_1;
  sizetype nbytes.3_2;
  long unsigned int bytesRemaining.4_4;
  long unsigned int _5;
  ssize_t _12;
  bool iftmp.1_21;
  ssize_t _25;
  bool iftmp.1_28;
  ssize_t _30;
  struct ErrorContext * _32;

  <bb 2> [0.00%]:
  bytesRemaining_18 = (ssize_t) count_17(D);

  <bb 3> [0.00%]:
  # bytesRemaining_6 = PHI <bytesRemaining_18(2), bytesRemaining_35(5)>
  # nbytes_7 = PHI <0(2), nbytes_19(5)>
  # pbuf_10 = PHI <buf_20(D)(2), pbuf_36(5)>
  if (bytesRemaining_6 > 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  bytesRemaining.2_1 = (long unsigned int) bytesRemaining_6;
  _25 = write (fd_23(D), pbuf_10, bytesRemaining.2_1);
  if (_25 > 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  # nbytes_19 = PHI <_25(4)>
  # iftmp.1_21 = PHI <1(4)>
  bytesRemaining_35 = bytesRemaining_6 - nbytes_19;
  nbytes.3_2 = (sizetype) nbytes_19;
  pbuf_36 = pbuf_10 + nbytes.3_2;
  goto <bb 3>; [0.00%]

  <bb 6> [0.00%]:
  # nbytes_8 = PHI <nbytes_7(3), _25(4)>

  <bb 7> [0.00%]:
  # nbytes_27 = PHI <nbytes_8(6)>
  # iftmp.1_28 = PHI <0(6)>
  if (nbytes_27 < 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  _32 = pbzip2::ErrorContext::getInstance ();
  pbzip2::ErrorContext::saveError (_32);
  goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  bytesRemaining.4_4 = (long unsigned int) bytesRemaining_6;
  _5 = count_17(D) - bytesRemaining.4_4;
  _30 = (ssize_t) _5;

  <bb 10> [0.00%]:
  # _12 = PHI <nbytes_27(8), _30(9)>
  return _12;

}



;; Function do_read(int, void*, unsigned long) (_Z7do_readiPvm, funcdef_no=1946, decl_uid=26100, cgraph_uid=687, symbol_order=735)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fd = &NONLOCAL
buf = &NONLOCAL
count = &NONLOCAL
bytesRemaining_18 = count
bytesRemaining_6 = bytesRemaining_18
bytesRemaining_6 = bytesRemaining_35
nbytes_7 = &NULL
nbytes_7 = nbytes_19
pbuf_10 = buf
pbuf_10 = pbuf_36
bytesRemaining.7_1 = bytesRemaining_6
CALLUSED(20) = CALLUSED(20) + UNKNOWN
CALLUSED(20) = *CALLUSED(20) + UNKNOWN
CALLUSED(20) = pbuf_10
CALLUSED(20) = &NULL
_37 = CALLUSED(20)
_37 = NONLOCAL
callarg(24) = bytesRemaining.7_1
_38 = callarg(24) + UNKNOWN
_38 = &NONLOCAL
ESCAPED = fd
ESCAPED = pbuf_10
ESCAPED = bytesRemaining.7_1
ESCAPED = _37
_39 = NONLOCAL
ESCAPED = fd
ESCAPED = pbuf_10
ESCAPED = bytesRemaining.7_1
ESCAPED = _37
_40 = NONLOCAL
ESCAPED = fd
ESCAPED = pbuf_10
ESCAPED = bytesRemaining.7_1
_41 = NONLOCAL
_42 = _39
_42 = _40
_42 = _41
nbytes_19 = _42
iftmp.6_21 = &NONLOCAL
bytesRemaining_35 = bytesRemaining_6
bytesRemaining_35 = nbytes_19
nbytes.8_2 = nbytes_19
pbuf_36 = pbuf_10
nbytes_8 = nbytes_7
nbytes_8 = _42
nbytes_25 = nbytes_8
iftmp.6_26 = &NULL
_32 = NONLOCAL
ESCAPED = _32
bytesRemaining.9_4 = bytesRemaining_6
_5 = count
_5 = bytesRemaining.9_4
_30 = _5
_12 = nbytes_25
_12 = _30
ESCAPED = _12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as bytesRemaining_6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fd = { NONLOCAL }
buf = { NONLOCAL } same as fd
count = { NONLOCAL } same as fd
bytesRemaining_18 = { NONLOCAL } same as fd
bytesRemaining_6 = { ESCAPED NONLOCAL }
bytesRemaining_35 = { ESCAPED NONLOCAL } same as bytesRemaining_6
nbytes_7 = { NULL ESCAPED NONLOCAL }
nbytes_19 = { ESCAPED NONLOCAL } same as bytesRemaining_6
pbuf_10 = { NONLOCAL } same as fd
pbuf_36 = { NONLOCAL } same as fd
bytesRemaining.7_1 = { ESCAPED NONLOCAL } same as bytesRemaining_6
__builtin_object_size = { }
CALLUSED(20) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(21) = { }
_37 = { NULL ESCAPED NONLOCAL }
__builtin_constant_p = { }
callarg(24) = { ESCAPED NONLOCAL } same as bytesRemaining_6
_38 = { ESCAPED NONLOCAL }
__read_chk = { }
_39 = { ESCAPED NONLOCAL } same as bytesRemaining_6
*__read_chk = { }
_40 = { ESCAPED NONLOCAL } same as bytesRemaining_6
*read = { }
_41 = { ESCAPED NONLOCAL } same as bytesRemaining_6
_42 = { ESCAPED NONLOCAL } same as bytesRemaining_6
iftmp.6_21 = { NONLOCAL } same as fd
nbytes.8_2 = { ESCAPED NONLOCAL } same as bytesRemaining_6
nbytes_8 = { NULL ESCAPED NONLOCAL } same as nbytes_7
nbytes_25 = { NULL ESCAPED NONLOCAL } same as nbytes_7
iftmp.6_26 = { NULL }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_32 = { ESCAPED NONLOCAL } same as bytesRemaining_6
_ZN6pbzip212ErrorContext9saveErrorEv = { }
bytesRemaining.9_4 = { ESCAPED NONLOCAL } same as bytesRemaining_6
_5 = { ESCAPED NONLOCAL } same as bytesRemaining_6
_30 = { ESCAPED NONLOCAL } same as bytesRemaining_6
_12 = { NULL ESCAPED NONLOCAL } same as nbytes_7


Alias information for do_read(int, void*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

pbuf_10, points-to non-local, points-to NULL, points-to vars: { }
buf_20(D), points-to non-local, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pbuf_36, points-to non-local, points-to NULL, points-to vars: { }

do_read(int, void*, unsigned long) (int fd, void * buf, size_t count)
{
  ssize_t D.47868;
  char * pbuf;
  ssize_t nbytes;
  ssize_t bytesRemaining;
  long unsigned int bytesRemaining.7_1;
  sizetype nbytes.8_2;
  long unsigned int bytesRemaining.9_4;
  long unsigned int _5;
  ssize_t _12;
  bool iftmp.6_21;
  bool iftmp.6_26;
  ssize_t _30;
  struct ErrorContext * _32;
  long unsigned int _37;
  int _38;
  long int _39;
  long int _40;
  long int _41;
  long int _42;

  <bb 2> [0.00%]:
  bytesRemaining_18 = (ssize_t) count_17(D);

  <bb 3> [0.00%]:
  # bytesRemaining_6 = PHI <bytesRemaining_18(2), bytesRemaining_35(11)>
  # nbytes_7 = PHI <0(2), nbytes_19(11)>
  # pbuf_10 = PHI <buf_20(D)(2), pbuf_36(11)>
  if (bytesRemaining_6 > 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 4> [100.00%]:
  bytesRemaining.7_1 = (long unsigned int) bytesRemaining_6;
  _37 = __builtin_object_size (pbuf_10, 0);
  if (_37 != 18446744073709551615)
    goto <bb 5>; [79.76%]
  else
    goto <bb 9>; [20.24%]

  <bb 5> [79.76%]:
  _38 = __builtin_constant_p (bytesRemaining.7_1);
  if (_38 == 0)
    goto <bb 6>; [29.56%]
  else
    goto <bb 7>; [70.44%]

  <bb 6> [23.58%]:
  _39 = __read_chk (fd_23(D), pbuf_10, bytesRemaining.7_1, _37);
  goto <bb 10>; [100.00%]

  <bb 7> [56.18%]:
  if (bytesRemaining.7_1 > _37)
    goto <bb 8>; [29.56%]
  else
    goto <bb 9>; [70.44%]

  <bb 8> [16.61%]:
  _40 = *__read_chk (fd_23(D), pbuf_10, bytesRemaining.7_1, _37);
  goto <bb 10>; [100.00%]

  <bb 9> [59.82%]:
  _41 = *read (fd_23(D), pbuf_10, bytesRemaining.7_1);

  <bb 10> [100.00%]:
  # _42 = PHI <_39(6), _40(8), _41(9)>
  if (_42 > 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  # nbytes_19 = PHI <_42(10)>
  # iftmp.6_21 = PHI <1(10)>
  bytesRemaining_35 = bytesRemaining_6 - nbytes_19;
  nbytes.8_2 = (sizetype) nbytes_19;
  pbuf_36 = pbuf_10 + nbytes.8_2;
  goto <bb 3>; [0.00%]

  <bb 12> [0.00%]:
  # nbytes_8 = PHI <nbytes_7(3), _42(10)>

  <bb 13> [0.00%]:
  # nbytes_25 = PHI <nbytes_8(12)>
  # iftmp.6_26 = PHI <0(12)>
  if (nbytes_25 < 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  _32 = pbzip2::ErrorContext::getInstance ();
  pbzip2::ErrorContext::saveError (_32);
  goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  bytesRemaining.9_4 = (long unsigned int) bytesRemaining_6;
  _5 = count_17(D) - bytesRemaining.9_4;
  _30 = (ssize_t) _5;

  <bb 16> [0.00%]:
  # _12 = PHI <nbytes_25(14), _30(15)>
  return _12;

}



;; Function safe_open_output(char const*) (_Z16safe_open_outputPKc, funcdef_no=1947, decl_uid=39213, cgraph_uid=688, symbol_order=736)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
path = &NONLOCAL
ESCAPED = path
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_18 = NONLOCAL
_9 = NONLOCAL
ESCAPED = _9
ESCAPED = _18

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _18
STOREDANYTHING = { }
INTEGER = { ANYTHING }
path = { NONLOCAL }
*open64 = { }
_18 = { ESCAPED NONLOCAL }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_9 = { ESCAPED NONLOCAL } same as _18
_ZN6pbzip212ErrorContext9saveErrorEv = { }


Alias information for safe_open_output(char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

path_4(D), points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

safe_open_output(char const*) (const char * path)
{
  int D.47874;
  int D.47873;
  int D.47872;
  int ret;
  struct ErrorContext * _9;
  int _18;

  <bb 2> [100.00%]:
  _18 = *open64 (path_4(D), 193, 384);
  if (_18 == -1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _9 = pbzip2::ErrorContext::getInstance ();
  pbzip2::ErrorContext::saveError (_9);

  <bb 4> [0.00%]:
  return _18;

}



;; Function safe_fopen_output(char const*, char const*) (_Z17safe_fopen_outputPKcS0_, funcdef_no=1948, decl_uid=39218, cgraph_uid=689, symbol_order=737)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
path = &NONLOCAL
mode = &NONLOCAL
ESCAPED = path
_8 = NONLOCAL
ESCAPED = _8
ESCAPED = mode
fp_12 = NONLOCAL
_14 = NONLOCAL
ESCAPED = _14
ESCAPED = _8
_2 = &NULL
_2 = fp_12
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
path = { NONLOCAL }
mode = { NONLOCAL } same as path
_Z16safe_open_outputPKc = { }
_8 = { ESCAPED NONLOCAL }
fdopen = { }
fp_12 = { ESCAPED NONLOCAL } same as _8
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_14 = { ESCAPED NONLOCAL } same as _8
_ZN6pbzip212ErrorContext9saveErrorEv = { }
close = { }
_2 = { NULL ESCAPED NONLOCAL }


Alias information for safe_fopen_output(char const*, char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
path_6(D), points-to non-local, points-to NULL, points-to vars: { }
mode_10(D), points-to non-local, points-to NULL, points-to vars: { }
fp_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

safe_fopen_output(char const*, char const*) (const char * path, const char * mode)
{
  struct FILE * fp;
  int fh;
  struct FILE * _2;
  int _8;
  struct ErrorContext * _14;

  <bb 2> [0.00%]:
  _8 = safe_open_output (path_6(D));
  if (_8 == -1)
    goto <bb 6>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  fp_12 = fdopen (_8, mode_10(D));
  if (fp_12 == 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _14 = pbzip2::ErrorContext::getInstance ();
  pbzip2::ErrorContext::saveError (_14);
  close (_8);

  <bb 5> [0.00%]:

  <bb 6> [0.00%]:
  # _2 = PHI <0B(2), fp_12(5)>
  return _2;

}



;; Function do_close(int) (_Z8do_closei, funcdef_no=1949, decl_uid=39223, cgraph_uid=690, symbol_order=738)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fd = &NONLOCAL
ESCAPED = fd
_6 = NONLOCAL
_9 = NONLOCAL
ESCAPED = _9
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fd = { NONLOCAL }
close = { }
_6 = { ESCAPED NONLOCAL }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_9 = { ESCAPED NONLOCAL } same as _6
_ZN6pbzip212ErrorContext9saveErrorEv = { }


Alias information for do_close(int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

do_close(int) (int fd)
{
  int ret;
  int _6;
  struct ErrorContext * _9;

  <bb 2> [0.00%]:
  _6 = close (fd_4(D));
  if (_6 == -1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _9 = pbzip2::ErrorContext::getInstance ();
  pbzip2::ErrorContext::saveError (_9);

  <bb 4> [0.00%]:
  return _6;

}



;; Function do_fclose(_IO_FILE*) (_Z9do_fcloseP8_IO_FILE, funcdef_no=1950, decl_uid=39227, cgraph_uid=691, symbol_order=739)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
file = &NONLOCAL
ESCAPED = file
_6 = NONLOCAL
_9 = NONLOCAL
ESCAPED = _9
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
file = { NONLOCAL }
fclose = { }
_6 = { ESCAPED NONLOCAL }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_9 = { ESCAPED NONLOCAL } same as _6
_ZN6pbzip212ErrorContext9saveErrorEv = { }


Alias information for do_fclose(_IO_FILE*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

file_4(D), points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

do_fclose(_IO_FILE*) (struct FILE * file)
{
  int ret;
  int _6;
  struct ErrorContext * _9;

  <bb 2> [0.00%]:
  _6 = fclose (file_4(D));
  if (_6 == -1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _9 = pbzip2::ErrorContext::getInstance ();
  pbzip2::ErrorContext::saveError (_9);

  <bb 4> [0.00%]:
  return _6;

}



;; Function do_fflush(_IO_FILE*) (_Z9do_fflushP8_IO_FILE, funcdef_no=1951, decl_uid=39231, cgraph_uid=692, symbol_order=740)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
file = &NONLOCAL
ESCAPED = file
_6 = NONLOCAL
_9 = NONLOCAL
ESCAPED = _9
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
file = { NONLOCAL }
fflush = { }
_6 = { ESCAPED NONLOCAL }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_9 = { ESCAPED NONLOCAL } same as _6
_ZN6pbzip212ErrorContext9saveErrorEv = { }


Alias information for do_fflush(_IO_FILE*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

file_4(D), points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

do_fflush(_IO_FILE*) (struct FILE * file)
{
  int ret;
  int _6;
  struct ErrorContext * _9;

  <bb 2> [0.00%]:
  _6 = fflush (file_4(D));
  if (_6 == -1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _9 = pbzip2::ErrorContext::getInstance ();
  pbzip2::ErrorContext::saveError (_9);

  <bb 4> [0.00%]:
  return _6;

}



;; Function verbose_fclose(_IO_FILE*, char const*) (_Z14verbose_fcloseP8_IO_FILEPKc, funcdef_no=1952, decl_uid=39236, cgraph_uid=693, symbol_order=741)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
file = &NONLOCAL
fileName = &NONLOCAL
ESCAPED = file
_9 = NONLOCAL
_1 = &NONLOCAL
_2 = *_1
stderr = NONLOCAL
stderr.411_3 = stderr
ESCAPED = stderr.411_3
ESCAPED = _2
stderr.412_4 = stderr
ESCAPED = stderr.412_4
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = fileName
_16 = NONLOCAL
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _9
STOREDANYTHING = { }
INTEGER = { ANYTHING }
file = { NONLOCAL }
fileName = { NONLOCAL } same as file
fclose = { }
_9 = { ESCAPED NONLOCAL }
__errno_location = { }
_1 = { NONLOCAL } same as file
_2 = { ESCAPED NONLOCAL }
stderr.411_3 = { ESCAPED NONLOCAL } same as _9
stderr = { ESCAPED NONLOCAL } same as _9
_ZN6pbzip212ErrorContext17syncPrintErrnoMsgEP8_IO_FILEi = { }
stderr.412_4 = { ESCAPED NONLOCAL } same as _9
__fprintf_chk = { }
_16 = { ESCAPED NONLOCAL } same as _9


Alias information for verbose_fclose(_IO_FILE*, char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
stderr.411_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.412_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
file_7(D), points-to non-local, points-to NULL, points-to vars: { }
fileName_13(D), points-to non-local, points-to NULL, points-to vars: { }

verbose_fclose(_IO_FILE*, char const*) (struct FILE * file, const char * fileName)
{
  int D.47882;
  int ret;
  int * _1;
  int _2;
  struct FILE * stderr.411_3;
  struct FILE * stderr.412_4;
  int _9;
  int _16;

  <bb 2> [0.00%]:
  _9 = fclose (file_7(D));
  if (_9 == -1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _1 = __errno_location ();
  _2 = *_1;
  stderr.411_3 = stderr;
  pbzip2::ErrorContext::syncPrintErrnoMsg (stderr.411_3, _2);
  stderr.412_4 = stderr;
  _16 = __fprintf_chk (stderr.412_4, 1, "pbzip2: *ERROR: Failed to close file [%s]!\n", fileName_13(D));

  <bb 4> [0.00%]:
  return _9;

}



;; Function do_remove(char const*) (_Z9do_removePKc, funcdef_no=1953, decl_uid=39240, cgraph_uid=694, symbol_order=742)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
pathname = &NONLOCAL
ESCAPED = pathname
ret_6 = NONLOCAL
_8 = NONLOCAL
ESCAPED = _8
ESCAPED = ret_6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
pathname = { NONLOCAL }
remove = { }
ret_6 = { ESCAPED NONLOCAL }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_8 = { ESCAPED NONLOCAL } same as ret_6
_ZN6pbzip212ErrorContext9saveErrorEv = { }


Alias information for do_remove(char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

pathname_4(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

do_remove(char const*) (const char * pathname)
{
  int ret;
  struct ErrorContext * _8;

  <bb 2> [0.00%]:
  ret_6 = remove (pathname_4(D));
  if (ret_6 == -1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _8 = pbzip2::ErrorContext::getInstance ();
  pbzip2::ErrorContext::saveError (_8);

  <bb 4> [0.00%]:
  return ret_6;

}



;; Function check_file_exists(char const*) (_Z17check_file_existsPKc, funcdef_no=1954, decl_uid=39244, cgraph_uid=695, symbol_order=743)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
filename = &NONLOCAL
ESCAPED = filename
ESCAPED = &NULL
_21 = NONLOCAL
_12 = NONLOCAL
ESCAPED = _12
ESCAPED = _21
_2 = &NULL
_2 = &NONLOCAL
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _21
STOREDANYTHING = { }
INTEGER = { ANYTHING }
filename = { NONLOCAL }
*open64 = { }
_21 = { ESCAPED NONLOCAL }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_12 = { ESCAPED NONLOCAL } same as _21
_ZN6pbzip212ErrorContext9saveErrorEv = { }
close = { }
_2 = { NULL NONLOCAL }


Alias information for check_file_exists(char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

filename_5(D), points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

check_file_exists(char const*) (const char * filename)
{
  int D.47889;
  int D.47888;
  int D.47887;
  int hOutfile;
  bool _2;
  struct ErrorContext * _12;
  int _21;

  <bb 2> [100.00%]:
  _21 = *open64 (filename_5(D), 0);
  if (_21 == -1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _12 = pbzip2::ErrorContext::getInstance ();
  pbzip2::ErrorContext::saveError (_12);
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  close (_21);

  <bb 5> [0.00%]:
  # _2 = PHI <0(3), 1(4)>
  return _2;

}



;; Function isIgnoredTrailingGarbage() (_Z24isIgnoredTrailingGarbagev, funcdef_no=1963, decl_uid=39050, cgraph_uid=704, symbol_order=752)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZL25IgnoreTrailingGarbageFlag = NONLOCAL
IgnoreTrailingGarbageFlag.43_1 = _ZL25IgnoreTrailingGarbageFlag
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL25IgnoreTrailingGarbageFlag
STOREDANYTHING = { }
INTEGER = { ANYTHING }
IgnoreTrailingGarbageFlag.43_1 = { ESCAPED NONLOCAL } same as _ZL25IgnoreTrailingGarbageFlag
_ZL25IgnoreTrailingGarbageFlag = { ESCAPED NONLOCAL }
_3 = { }


Alias information for isIgnoredTrailingGarbage()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


isIgnoredTrailingGarbage() ()
{
  int IgnoreTrailingGarbageFlag.43_1;
  bool _3;

  <bb 2> [0.00%]:
  IgnoreTrailingGarbageFlag.43_1 = IgnoreTrailingGarbageFlag;
  _3 = IgnoreTrailingGarbageFlag.43_1 != 0;
  return _3;

}



;; Function getLastGoodBlockBeforeErr(int, int) (_Z25getLastGoodBlockBeforeErrii, funcdef_no=1966, decl_uid=39056, cgraph_uid=707, symbol_order=755)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
errBlockNumber = &NONLOCAL
outSequenceNumber = &NONLOCAL
_4 = errBlockNumber
_4 = &NONLOCAL
_1 = errBlockNumber
_1 = _4
ESCAPED = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
errBlockNumber = { NONLOCAL }
outSequenceNumber = { NONLOCAL } same as errBlockNumber
_4 = { NONLOCAL } same as errBlockNumber
_1 = { NONLOCAL } same as errBlockNumber


Alias information for getLastGoodBlockBeforeErr(int, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


getLastGoodBlockBeforeErr(int, int) (int errBlockNumber, int outSequenceNumber)
{
  int _1;
  int _4;

  <bb 2> [0.00%]:
  if (outSequenceNumber_2(D) != -1)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  _4 = errBlockNumber_3(D) + -1;

  <bb 4> [0.00%]:
  # _1 = PHI <errBlockNumber_3(D)(2), _4(3)>
  return _1;

}



;; Function hasTrailingGarbage(int, outBuff const*, bz_stream const&) (_Z18hasTrailingGarbageiPK7outBuffRK9bz_stream, funcdef_no=1969, decl_uid=39079, cgraph_uid=710, symbol_order=758)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
bzret = &NONLOCAL
fileData = &NONLOCAL
strm = &NONLOCAL
_1 = *strm + 64
_2 = *fileData + 192
_3 = _2
iftmp.59_4 = &NONLOCAL
iftmp.59_4 = &NULL
iftmp.59_4 = &NONLOCAL
ESCAPED = iftmp.59_4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
bzret = { NONLOCAL }
fileData = { NONLOCAL } same as bzret
strm = { NONLOCAL } same as bzret
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
iftmp.59_4 = { NULL NONLOCAL }


Alias information for hasTrailingGarbage(int, outBuff const*, bz_stream const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

strm_7(D), points-to non-local, points-to NULL, points-to vars: { }
fileData_8(D), points-to non-local, points-to NULL, points-to vars: { }

hasTrailingGarbage(int, outBuff const*, bz_stream const&) (int bzret, const struct outBuff * fileData, const struct bz_stream & strm)
{
  unsigned int _1;
  bool _2;
  bool _3;
  bool iftmp.59_4;

  <bb 2> [0.00%]:
  if (bzret_5(D) == 4)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  _1 = strm_7(D)->avail_in;
  if (_1 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [0.00%]:
  _2 = fileData_8(D)->isLastInSequence;
  _3 = ~_2;
  if (_2 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:

  <bb 6> [0.00%]:
  # iftmp.59_4 = PHI <1(4), 0(5), 1(3)>
  return iftmp.59_4;

}



;; Function initSignalMask() (_Z14initSignalMaskv, funcdef_no=1971, decl_uid=38978, cgraph_uid=712, symbol_order=760)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZL10SignalMask = NONLOCAL
ESCAPED = &_ZL10SignalMask
ret_12 = NONLOCAL
ESCAPED = &_ZL10SignalMask
ESCAPED = &NONLOCAL
_1 = NONLOCAL
ret_14 = _1
ret_14 = ret_12
ESCAPED = &_ZL10SignalMask
ESCAPED = &NONLOCAL
_2 = NONLOCAL
ret_16 = _2
ret_16 = ret_14
ESCAPED = &_ZL10SignalMask
ESCAPED = &NONLOCAL
_3 = NONLOCAL
ret_18 = _3
ret_18 = ret_16
_ZL23SIG_HANDLER_QUIT_SIGNAL = NONLOCAL
SIG_HANDLER_QUIT_SIGNAL.60_4 = _ZL23SIG_HANDLER_QUIT_SIGNAL
ESCAPED = &_ZL10SignalMask
ESCAPED = SIG_HANDLER_QUIT_SIGNAL.60_4
_5 = NONLOCAL
ret_20 = _5
ret_20 = ret_18
ESCAPED = &_ZL10SignalMask
ESCAPED = &NONLOCAL
_6 = NONLOCAL
ret_22 = _6
ret_22 = ret_20
ESCAPED = &NULL
ESCAPED = &_ZL10SignalMask
ESCAPED = &NULL
ret_24 = NONLOCAL
ret_7 = ret_22
ret_7 = ret_24
ESCAPED = ret_7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZL10SignalMask }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_12
STOREDANYTHING = { }
INTEGER = { ANYTHING }
sigemptyset = { }
_ZL10SignalMask = { ESCAPED NONLOCAL }
ret_12 = { ESCAPED NONLOCAL }
sigaddset = { }
_1 = { ESCAPED NONLOCAL } same as ret_12
ret_14 = { ESCAPED NONLOCAL } same as ret_12
_2 = { ESCAPED NONLOCAL } same as ret_12
ret_16 = { ESCAPED NONLOCAL } same as ret_12
_3 = { ESCAPED NONLOCAL } same as ret_12
ret_18 = { ESCAPED NONLOCAL } same as ret_12
SIG_HANDLER_QUIT_SIGNAL.60_4 = { ESCAPED NONLOCAL } same as ret_12
_ZL23SIG_HANDLER_QUIT_SIGNAL = { ESCAPED NONLOCAL } same as ret_12
_5 = { ESCAPED NONLOCAL } same as ret_12
ret_20 = { ESCAPED NONLOCAL } same as ret_12
_6 = { ESCAPED NONLOCAL } same as ret_12
ret_22 = { ESCAPED NONLOCAL } same as ret_12
pthread_sigmask = { }
ret_24 = { ESCAPED NONLOCAL } same as ret_12
ret_7 = { ESCAPED NONLOCAL } same as ret_12


Alias information for initSignalMask()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38927 } (nonlocal, escaped)

Flow-insensitive points-to information


initSignalMask() ()
{
  int ret;
  int _1;
  int _2;
  int _3;
  int SIG_HANDLER_QUIT_SIGNAL.60_4;
  int _5;
  int _6;

  <bb 2> [0.00%]:
  ret_12 = sigemptyset (&SignalMask);
  _1 = sigaddset (&SignalMask, 2);
  ret_14 = _1 | ret_12;
  _2 = sigaddset (&SignalMask, 15);
  ret_16 = _2 | ret_14;
  _3 = sigaddset (&SignalMask, 6);
  ret_18 = _3 | ret_16;
  SIG_HANDLER_QUIT_SIGNAL.60_4 = SIG_HANDLER_QUIT_SIGNAL;
  _5 = sigaddset (&SignalMask, SIG_HANDLER_QUIT_SIGNAL.60_4);
  ret_20 = _5 | ret_18;
  _6 = sigaddset (&SignalMask, 1);
  ret_22 = _6 | ret_20;
  if (ret_22 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  ret_24 = pthread_sigmask (0, &SignalMask, 0B);

  <bb 4> [0.00%]:
  # ret_7 = PHI <ret_22(2), ret_24(3)>
  return ret_7;

}



;; Function initChildThreadAttributes() (_Z25initChildThreadAttributesv, funcdef_no=1972, decl_uid=39323, cgraph_uid=713, symbol_order=761)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZL21ChildThreadAttributes = NONLOCAL
ESCAPED = &_ZL21ChildThreadAttributes
ret_10 = NONLOCAL
stderr = NONLOCAL
stderr.61_1 = stderr
ESCAPED = stderr.61_1
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_10
_17 = NONLOCAL
ESCAPED = &NONLOCAL
_ZL20ChildThreadStackSize = NONLOCAL
ChildThreadStackSize.62_2 = _ZL20ChildThreadStackSize
ChildThreadStackSize.63_3 = _ZL20ChildThreadStackSize
_4 = ChildThreadStackSize.63_3
ESCAPED = &_ZL21ChildThreadAttributes
ESCAPED = _4
ret_12 = NONLOCAL
stderr.64_5 = stderr
ESCAPED = stderr.64_5
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_12
_18 = NONLOCAL
ret_6 = ret_10
ret_6 = ret_12
ret_6 = ret_12
ESCAPED = ret_6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL _ZL21ChildThreadAttributes }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_10
STOREDANYTHING = { }
INTEGER = { ANYTHING }
pthread_attr_init = { }
_ZL21ChildThreadAttributes = { ESCAPED NONLOCAL }
ret_10 = { ESCAPED NONLOCAL }
stderr.61_1 = { ESCAPED NONLOCAL } same as ret_10
stderr = { ESCAPED NONLOCAL } same as ret_10
__fprintf_chk = { }
_17 = { ESCAPED NONLOCAL } same as ret_10
exit = { }
ChildThreadStackSize.62_2 = { ESCAPED NONLOCAL } same as ret_10
_ZL20ChildThreadStackSize = { ESCAPED NONLOCAL } same as ret_10
ChildThreadStackSize.63_3 = { ESCAPED NONLOCAL } same as ret_10
_4 = { ESCAPED NONLOCAL } same as ret_10
pthread_attr_setstacksize = { }
ret_12 = { ESCAPED NONLOCAL } same as ret_10
stderr.64_5 = { ESCAPED NONLOCAL } same as ret_10
_18 = { ESCAPED NONLOCAL } same as ret_10
ret_6 = { ESCAPED NONLOCAL } same as ret_10


Alias information for initChildThreadAttributes()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.38823 } (nonlocal, escaped)

Flow-insensitive points-to information

stderr.61_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.64_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

initChildThreadAttributes() ()
{
  int D.47900;
  int D.47897;
  int ret;
  struct FILE * stderr.61_1;
  int ChildThreadStackSize.62_2;
  int ChildThreadStackSize.63_3;
  long unsigned int _4;
  struct FILE * stderr.64_5;
  int _17;
  int _18;

  <bb 2> [0.00%]:
  ret_10 = pthread_attr_init (&ChildThreadAttributes);
  if (ret_10 < 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  stderr.61_1 = stderr;
  _17 = __fprintf_chk (stderr.61_1, 1, "Can\'t initialize thread atrributes [err=%d]! Aborting...\n", ret_10);
  exit (-1);

  <bb 4> [0.00%]:
  ChildThreadStackSize.62_2 = ChildThreadStackSize;
  if (ChildThreadStackSize.62_2 > 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 5> [0.00%]:
  ChildThreadStackSize.63_3 = ChildThreadStackSize;
  _4 = (long unsigned int) ChildThreadStackSize.63_3;
  ret_12 = pthread_attr_setstacksize (&ChildThreadAttributes, _4);
  if (ret_12 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [100.00%]:
  stderr.64_5 = stderr;
  _18 = __fprintf_chk (stderr.64_5, 1, "Can\'t set thread stacksize [err=%d]! Countinue with default one.\n", ret_12);

  <bb 7> [0.00%]:
  # ret_6 = PHI <ret_10(4), ret_12(6), ret_12(5)>
  return ret_6;

}



;; Function setupSignalHandling() (_Z19setupSignalHandlingv, funcdef_no=1973, decl_uid=38979, cgraph_uid=714, symbol_order=762)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ret_5 = NONLOCAL
_ZL19SignalHandlerThread = NONLOCAL
ESCAPED = &_ZL19SignalHandlerThread
_ZL21ChildThreadAttributes = NONLOCAL
ESCAPED = &_ZL21ChildThreadAttributes
ESCAPED = &signalHandlerProc
ESCAPED = &NULL
ret_7 = NONLOCAL
ret_1 = ret_5
ret_1 = ret_7
ESCAPED = ret_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZL19SignalHandlerThread _ZL21ChildThreadAttributes signalHandlerProc }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_Z14initSignalMaskv = { }
ret_5 = { ESCAPED NONLOCAL }
pthread_create = { }
_ZL19SignalHandlerThread = { ESCAPED NONLOCAL }
_ZL21ChildThreadAttributes = { ESCAPED NONLOCAL }
signalHandlerProc = { ESCAPED NONLOCAL }
ret_7 = { ESCAPED NONLOCAL } same as ret_5
ret_1 = { ESCAPED NONLOCAL } same as ret_5


Alias information for setupSignalHandling()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38823 D.38961 } (nonlocal, escaped)

Flow-insensitive points-to information


setupSignalHandling() ()
{
  int ret;

  <bb 2> [0.00%]:
  ret_5 = initSignalMask ();
  if (ret_5 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  ret_7 = pthread_create (&SignalHandlerThread, &ChildThreadAttributes, signalHandlerProc, 0B);

  <bb 4> [0.00%]:
  # ret_1 = PHI <ret_5(2), ret_7(3)>
  return ret_1;

}



;; Function setupTerminator() (_Z15setupTerminatorv, funcdef_no=1974, decl_uid=38980, cgraph_uid=715, symbol_order=763)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZL16TerminatorThread = NONLOCAL
ESCAPED = &_ZL16TerminatorThread
_ZL21ChildThreadAttributes = NONLOCAL
ESCAPED = &_ZL21ChildThreadAttributes
ESCAPED = &terminatorThreadProc
ESCAPED = &NULL
_3 = NONLOCAL
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZL16TerminatorThread _ZL21ChildThreadAttributes terminatorThreadProc }
NONLOCAL = { ESCAPED NONLOCAL } same as _3
STOREDANYTHING = { }
INTEGER = { ANYTHING }
pthread_create = { }
_ZL16TerminatorThread = { ESCAPED NONLOCAL }
_ZL21ChildThreadAttributes = { ESCAPED NONLOCAL }
terminatorThreadProc = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for setupTerminator()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38823 D.38962 } (nonlocal, escaped)

Flow-insensitive points-to information


setupTerminator() ()
{
  int _3;

  <bb 2> [0.00%]:
  _3 = pthread_create (&TerminatorThread, &ChildThreadAttributes, terminatorThreadProc, 0B);
  return _3;

}



;; Function cleanupUnfinishedWork() (_Z21cleanupUnfinishedWorkv, funcdef_no=1975, decl_uid=38975, cgraph_uid=716, symbol_order=764)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZL21unfinishedWorkCleaned = NONLOCAL
unfinishedWorkCleaned.65_1 = _ZL21unfinishedWorkCleaned
_ZL13sigInFilename = NONLOCAL
sigInFilename.66_2 = _ZL13sigInFilename
_ZL14sigOutFilename = NONLOCAL
sigOutFilename.67_3 = _ZL14sigOutFilename
_ZL12OutputStdOut = NONLOCAL
OutputStdOut.68_4 = _ZL12OutputStdOut
_ZL21unfinishedWorkCleaned = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL9QuietMode = NONLOCAL
QuietMode.69_5 = _ZL9QuietMode
sigOutFilename.70_6 = _ZL14sigOutFilename
stderr = NONLOCAL
stderr.71_7 = stderr
ESCAPED = stderr.71_7
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = sigOutFilename.70_6
_46 = NONLOCAL
sigInFilename.72_8 = _ZL13sigInFilename
ESCAPED = &NONLOCAL
ESCAPED = sigInFilename.72_8
ESCAPED = &statBuf
_47 = NONLOCAL
QuietMode.73_9 = _ZL9QuietMode
sigOutFilename.74_10 = _ZL14sigOutFilename
stderr.75_11 = stderr
ESCAPED = stderr.75_11
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = sigOutFilename.74_10
_48 = NONLOCAL
sigOutFilename.76_12 = _ZL14sigOutFilename
ESCAPED = sigOutFilename.76_12
ret_36 = NONLOCAL
_13 = &NONLOCAL
_14 = *_13
stderr.77_15 = stderr
ESCAPED = stderr.77_15
ESCAPED = _14
stderr.78_16 = stderr
ESCAPED = stderr.78_16
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_49 = NONLOCAL
stderr.79_17 = stderr
ESCAPED = stderr.79_17
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_50 = NONLOCAL
_ZL14sigOutFilename = &NULL
ESCAPED = &NULL
stderr.80_18 = stderr
ESCAPED = stderr.80_18
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_51 = NONLOCAL
sigOutFilename.81_19 = _ZL14sigOutFilename
stderr.82_20 = stderr
ESCAPED = stderr.82_20
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = sigOutFilename.81_19
_52 = NONLOCAL
_ZL21unfinishedWorkCleaned = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL statBuf }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
STOREDANYTHING = { }
INTEGER = { ANYTHING }
unfinishedWorkCleaned.65_1 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
_ZL21unfinishedWorkCleaned = { ESCAPED NONLOCAL }
sigInFilename.66_2 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
_ZL13sigInFilename = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
sigOutFilename.67_3 = { NULL ESCAPED NONLOCAL } same as _ZL14sigOutFilename
_ZL14sigOutFilename = { NULL ESCAPED NONLOCAL }
OutputStdOut.68_4 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
_ZL12OutputStdOut = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
QuietMode.69_5 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
_ZL9QuietMode = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
sigOutFilename.70_6 = { NULL ESCAPED NONLOCAL } same as _ZL14sigOutFilename
stderr.71_7 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
stderr = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
__fprintf_chk = { }
_46 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
sigInFilename.72_8 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
*__xstat64 = { }
statBuf = { ESCAPED NONLOCAL }
_47 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
QuietMode.73_9 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
sigOutFilename.74_10 = { NULL ESCAPED NONLOCAL } same as _ZL14sigOutFilename
stderr.75_11 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
_48 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
sigOutFilename.76_12 = { NULL ESCAPED NONLOCAL } same as _ZL14sigOutFilename
remove = { }
ret_36 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
__errno_location = { }
_13 = { NONLOCAL }
_14 = { ESCAPED NONLOCAL }
stderr.77_15 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
_ZN6pbzip212ErrorContext17syncPrintErrnoMsgEP8_IO_FILEi = { }
stderr.78_16 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
_49 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
stderr.79_17 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
_50 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
stderr.80_18 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
_51 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
sigOutFilename.81_19 = { NULL ESCAPED NONLOCAL } same as _ZL14sigOutFilename
stderr.82_20 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned
_52 = { ESCAPED NONLOCAL } same as _ZL21unfinishedWorkCleaned


Alias information for cleanupUnfinishedWork()

Aliased symbols

statBuf, UID D.39333, struct stat, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.39333 } (escaped)

Flow-insensitive points-to information

sigInFilename.66_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
sigOutFilename.67_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
sigOutFilename.70_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.71_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
sigInFilename.72_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
sigOutFilename.74_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.75_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
sigOutFilename.76_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
stderr.77_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.78_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.79_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.80_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
sigOutFilename.81_19, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.82_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

cleanupUnfinishedWork() ()
{
  int D.47924;
  int D.47921;
  int D.47918;
  int D.47915;
  int D.47912;
  int D.47909;
  int D.47906;
  int ret;
  struct stat statBuf;
  int unfinishedWorkCleaned.65_1;
  const char * sigInFilename.66_2;
  const char * sigOutFilename.67_3;
  int OutputStdOut.68_4;
  int QuietMode.69_5;
  const char * sigOutFilename.70_6;
  struct FILE * stderr.71_7;
  const char * sigInFilename.72_8;
  int QuietMode.73_9;
  const char * sigOutFilename.74_10;
  struct FILE * stderr.75_11;
  const char * sigOutFilename.76_12;
  int * _13;
  int _14;
  struct FILE * stderr.77_15;
  struct FILE * stderr.78_16;
  struct FILE * stderr.79_17;
  struct FILE * stderr.80_18;
  const char * sigOutFilename.81_19;
  struct FILE * stderr.82_20;
  int _46;
  int _47;
  int _48;
  int _49;
  int _50;
  int _51;
  int _52;

  <bb 2> [0.00%]:
  unfinishedWorkCleaned.65_1 = unfinishedWorkCleaned;
  if (unfinishedWorkCleaned.65_1 != 0)
    goto <bb 20>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  sigInFilename.66_2 = sigInFilename;
  if (sigInFilename.66_2 == 0B)
    goto <bb 6>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [0.00%]:
  sigOutFilename.67_3 = sigOutFilename;
  if (sigOutFilename.67_3 == 0B)
    goto <bb 6>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  OutputStdOut.68_4 = OutputStdOut;
  if (OutputStdOut.68_4 == 1)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  unfinishedWorkCleaned = 1;
  goto <bb 20>; [0.00%]

  <bb 7> [0.00%]:
  QuietMode.69_5 = QuietMode;
  if (QuietMode.69_5 != 1)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [100.00%]:
  sigOutFilename.70_6 = sigOutFilename;
  stderr.71_7 = stderr;
  _46 = __fprintf_chk (stderr.71_7, 1, "Cleanup unfinished work [Outfile: %s]...\n", sigOutFilename.70_6);

  <bb 9> [100.00%]:
  sigInFilename.72_8 = sigInFilename;
  _47 = *__xstat64 (1, sigInFilename.72_8, &statBuf);
  if (_47 == 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 10> [0.00%]:
  QuietMode.73_9 = QuietMode;
  if (QuietMode.73_9 != 1)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [100.00%]:
  sigOutFilename.74_10 = sigOutFilename;
  stderr.75_11 = stderr;
  _48 = __fprintf_chk (stderr.75_11, 1, "Deleting output file: %s, if it exists...\n", sigOutFilename.74_10);

  <bb 12> [0.00%]:
  sigOutFilename.76_12 = sigOutFilename;
  ret_36 = remove (sigOutFilename.76_12);
  if (ret_36 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 13> [0.00%]:
  _13 = __errno_location ();
  _14 = *_13;
  stderr.77_15 = stderr;
  pbzip2::ErrorContext::syncPrintErrnoMsg (stderr.77_15, _14);

  <bb 14> [100.00%]:
  stderr.78_16 = stderr;
  _49 = __fprintf_chk (stderr.78_16, 1, "pbzip2:  *WARNING: Deletion of output file (apparently) failed.\n");
  goto <bb 19>; [100.00%]

  <bb 15> [100.00%]:
  stderr.79_17 = stderr;
  _50 = __fprintf_chk (stderr.79_17, 1, "pbzip2:  *INFO: Deletion of output file succeeded.\n");

  <bb 16> [100.00%]:
  sigOutFilename = 0B;
  goto <bb 19>; [0.00%]

  <bb 17> [100.00%]:
  stderr.80_18 = stderr;
  _51 = __fprintf_chk (stderr.80_18, 1, "pbzip2:  *WARNING: Output file was not deleted since input file no longer exists.\n");

  <bb 18> [100.00%]:
  sigOutFilename.81_19 = sigOutFilename;
  stderr.82_20 = stderr;
  _52 = __fprintf_chk (stderr.82_20, 1, "pbzip2:  *WARNING: Output file: %s, may be incomplete!\n", sigOutFilename.81_19);

  <bb 19> [0.00%]:
  unfinishedWorkCleaned = 1;
  statBuf ={v} {CLOBBER};
  goto <bb 21>; [0.00%]

  <bb 20> [0.00%]:
  statBuf ={v} {CLOBBER};

  <bb 21> [0.00%]:
  return;

<L21> [0.00%]:
  statBuf ={v} {CLOBBER};
  resx 1

}



;; Function cleanupAndQuit(int) (_Z14cleanupAndQuiti, funcdef_no=1978, decl_uid=38977, cgraph_uid=719, symbol_order=767)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
exitCode = &NONLOCAL
_ZL17ErrorHandlerMutex = NONLOCAL
ESCAPED = &_ZL17ErrorHandlerMutex
ret_5 = NONLOCAL
stderr = NONLOCAL
stderr.94_1 = stderr
ESCAPED = stderr.94_1
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_11 = NONLOCAL
ESCAPED = &_ZL17ErrorHandlerMutex
ESCAPED = exitCode

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL _ZL17ErrorHandlerMutex }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
exitCode = { NONLOCAL }
pthread_mutex_lock = { }
_ZL17ErrorHandlerMutex = { ESCAPED NONLOCAL }
ret_5 = { ESCAPED NONLOCAL }
stderr.94_1 = { ESCAPED NONLOCAL } same as ret_5
stderr = { ESCAPED NONLOCAL } same as ret_5
__fprintf_chk = { }
_11 = { ESCAPED NONLOCAL } same as ret_5
_Z21cleanupUnfinishedWorkv = { }
pthread_mutex_unlock = { }
exit = { }


Alias information for cleanupAndQuit(int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.38585 } (nonlocal, escaped)

Flow-insensitive points-to information

stderr.94_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

cleanupAndQuit(int) (int exitCode)
{
  int D.47928;
  int ret;
  struct FILE * stderr.94_1;
  int _11;

  <bb 2> [0.00%]:
  ret_5 = pthread_mutex_lock (&ErrorHandlerMutex);
  if (ret_5 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  stderr.94_1 = stderr;
  _11 = __fprintf_chk (stderr.94_1, 1, "Cleanup Handler: Failed to lock ErrorHandlerMutex! May double cleanup...\n");

  <bb 4> [0.00%]:
  cleanupUnfinishedWork ();
  pthread_mutex_unlock (&ErrorHandlerMutex);
  exit (exitCode_9(D));

}



;; Function safe_mutex_lock(pthread_mutex_t*) (_Z15safe_mutex_lockP15pthread_mutex_t, funcdef_no=1939, decl_uid=38982, cgraph_uid=680, symbol_order=728)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
mutex = &NONLOCAL
ESCAPED = mutex
ret_6 = NONLOCAL
stderr = NONLOCAL
stderr.29_1 = stderr
ESCAPED = stderr.29_1
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_6
_9 = NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
mutex = { NONLOCAL }
pthread_mutex_lock = { }
ret_6 = { ESCAPED NONLOCAL }
stderr.29_1 = { ESCAPED NONLOCAL } same as ret_6
stderr = { ESCAPED NONLOCAL } same as ret_6
__fprintf_chk = { }
_9 = { ESCAPED NONLOCAL } same as ret_6
_Z14cleanupAndQuiti = { }


Alias information for safe_mutex_lock(pthread_mutex_t*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

stderr.29_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
mutex_4(D), points-to non-local, points-to NULL, points-to vars: { }

safe_mutex_lock(pthread_mutex_t*) (union pthread_mutex_t * mutex)
{
  int D.47932;
  int ret;
  struct FILE * stderr.29_1;
  int _9;

  <bb 2> [0.00%]:
  ret_6 = pthread_mutex_lock (mutex_4(D));
  if (ret_6 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  stderr.29_1 = stderr;
  _9 = __fprintf_chk (stderr.29_1, 1, "pthread_mutex_lock error [%d]! Aborting immediately!\n", ret_6);
  cleanupAndQuit (-5);

  <bb 4> [0.00%]:
  return;

}



;; Function safe_mutex_unlock(pthread_mutex_t*) (_Z17safe_mutex_unlockP15pthread_mutex_t, funcdef_no=1940, decl_uid=38984, cgraph_uid=681, symbol_order=729)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
mutex = &NONLOCAL
ESCAPED = mutex
ret_6 = NONLOCAL
stderr = NONLOCAL
stderr.30_1 = stderr
ESCAPED = stderr.30_1
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_6
_9 = NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
mutex = { NONLOCAL }
pthread_mutex_unlock = { }
ret_6 = { ESCAPED NONLOCAL }
stderr.30_1 = { ESCAPED NONLOCAL } same as ret_6
stderr = { ESCAPED NONLOCAL } same as ret_6
__fprintf_chk = { }
_9 = { ESCAPED NONLOCAL } same as ret_6
_Z14cleanupAndQuiti = { }


Alias information for safe_mutex_unlock(pthread_mutex_t*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

stderr.30_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
mutex_4(D), points-to non-local, points-to NULL, points-to vars: { }

safe_mutex_unlock(pthread_mutex_t*) (union pthread_mutex_t * mutex)
{
  int D.47936;
  int ret;
  struct FILE * stderr.30_1;
  int _9;

  <bb 2> [0.00%]:
  ret_6 = pthread_mutex_unlock (mutex_4(D));
  if (ret_6 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  stderr.30_1 = stderr;
  _9 = __fprintf_chk (stderr.30_1, 1, "pthread_mutex_unlock error [%d]! Aborting immediately!\n", ret_6);
  cleanupAndQuit (-6);

  <bb 4> [0.00%]:
  return;

}



;; Function syncSetTerminateFlag(int) (_Z20syncSetTerminateFlagi, funcdef_no=1958, decl_uid=38968, cgraph_uid=699, symbol_order=747)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
newValue = &NONLOCAL
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
_ZL13terminateFlag = newValue
ESCAPED = newValue
terminateFlag.20_1 = _ZL13terminateFlag
_ZL13TerminateCond = NONLOCAL
ESCAPED = &_ZL13TerminateCond
ESCAPED = &_ZL18TerminateFlagMutex
_ZL8OutMutex = NONLOCAL
OutMutex.21_2 = _ZL8OutMutex
ESCAPED = OutMutex.21_2
_ZL21notTooMuchNumBuffered = NONLOCAL
notTooMuchNumBuffered.22_3 = _ZL21notTooMuchNumBuffered
ESCAPED = notTooMuchNumBuffered.22_3
OutMutex.23_4 = _ZL8OutMutex
ESCAPED = OutMutex.23_4
_ZL9FifoQueue = NONLOCAL
FifoQueue.24_5 = _ZL9FifoQueue
FifoQueue.25_6 = _ZL9FifoQueue
_7 = *FifoQueue.25_6 + 448
ESCAPED = _7
FifoQueue.26_8 = _ZL9FifoQueue
_9 = *FifoQueue.26_8 + 512
ESCAPED = _9
FifoQueue.27_10 = _ZL9FifoQueue
_11 = *FifoQueue.27_10 + 576
ESCAPED = _11
FifoQueue.28_12 = _ZL9FifoQueue
_13 = *FifoQueue.28_12 + 448
ESCAPED = _13
ESCAPED = &_ZL18TerminateFlagMutex

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZL18TerminateFlagMutex _ZL13TerminateCond }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
STOREDANYTHING = { }
INTEGER = { ANYTHING }
newValue = { NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
_ZL13terminateFlag = { ESCAPED NONLOCAL }
terminateFlag.20_1 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
pthread_cond_signal = { }
_ZL13TerminateCond = { ESCAPED NONLOCAL }
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
OutMutex.21_2 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL8OutMutex = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
notTooMuchNumBuffered.22_3 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL21notTooMuchNumBuffered = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
pthread_cond_broadcast = { }
OutMutex.23_4 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
FifoQueue.24_5 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL9FifoQueue = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
FifoQueue.25_6 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_7 = { ESCAPED NONLOCAL }
FifoQueue.26_8 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_9 = { ESCAPED NONLOCAL }
FifoQueue.27_10 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_11 = { ESCAPED NONLOCAL }
FifoQueue.28_12 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_13 = { ESCAPED NONLOCAL }


Alias information for syncSetTerminateFlag(int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.38685 D.38688 } (nonlocal, escaped)

Flow-insensitive points-to information

OutMutex.21_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.22_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.23_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.24_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.25_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.26_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.27_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.28_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

syncSetTerminateFlag(int) (int newValue)
{
  int terminateFlag.20_1;
  union pthread_mutex_t * OutMutex.21_2;
  union pthread_cond_t * notTooMuchNumBuffered.22_3;
  union pthread_mutex_t * OutMutex.23_4;
  struct queue * FifoQueue.24_5;
  struct queue * FifoQueue.25_6;
  union pthread_mutex_t * _7;
  struct queue * FifoQueue.26_8;
  union pthread_cond_t * _9;
  struct queue * FifoQueue.27_10;
  union pthread_cond_t * _11;
  struct queue * FifoQueue.28_12;
  union pthread_mutex_t * _13;

  <bb 2> [0.00%]:
  safe_mutex_lock (&TerminateFlagMutex);
  terminateFlag = newValue_17(D);
  terminateFlag.20_1 = terminateFlag;
  if (terminateFlag.20_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  pthread_cond_signal (&TerminateCond);
  safe_mutex_unlock (&TerminateFlagMutex);
  OutMutex.21_2 = OutMutex;
  safe_mutex_lock (OutMutex.21_2);
  notTooMuchNumBuffered.22_3 = notTooMuchNumBuffered;
  pthread_cond_broadcast (notTooMuchNumBuffered.22_3);
  OutMutex.23_4 = OutMutex;
  safe_mutex_unlock (OutMutex.23_4);
  FifoQueue.24_5 = FifoQueue;
  if (FifoQueue.24_5 != 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  FifoQueue.25_6 = FifoQueue;
  _7 = FifoQueue.25_6->mut;
  safe_mutex_lock (_7);
  FifoQueue.26_8 = FifoQueue;
  _9 = FifoQueue.26_8->notFull;
  pthread_cond_broadcast (_9);
  FifoQueue.27_10 = FifoQueue;
  _11 = FifoQueue.27_10->notEmpty;
  pthread_cond_broadcast (_11);
  FifoQueue.28_12 = FifoQueue;
  _13 = FifoQueue.28_12->mut;
  safe_mutex_unlock (_13);
  goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 6> [0.00%]:
  return;

}



;; Function handle_error(ExitFlag, int, char const*, ...) (_Z12handle_error8ExitFlagiPKcz, funcdef_no=1964, decl_uid=26096, cgraph_uid=705, symbol_order=753)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
exitFlag = &NONLOCAL
exitCode = &NONLOCAL
fmt = &NONLOCAL
args = &NONLOCAL
CALLCLOBBERED(13) = &args
stderr = NONLOCAL
stderr.17_1 = stderr
ESCAPED = stderr.17_1
ESCAPED = &NONLOCAL
ESCAPED = fmt
ESCAPED = &args
_24 = NONLOCAL
_12 = NONLOCAL
stderr.18_3 = stderr
ESCAPED = _12
ESCAPED = stderr.18_3
stderr.19_4 = stderr
ESCAPED = stderr.19_4
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = exitCode

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL args }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
exitFlag = { NONLOCAL }
exitCode = { NONLOCAL } same as exitFlag
fmt = { NONLOCAL } same as exitFlag
args = { ESCAPED NONLOCAL }
CALLUSED(12) = { }
CALLCLOBBERED(13) = { args }
stderr.17_1 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
__vfprintf_chk = { }
_24 = { ESCAPED NONLOCAL } same as stderr
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_12 = { ESCAPED NONLOCAL } same as stderr
stderr.18_3 = { ESCAPED NONLOCAL } same as stderr
_ZN6pbzip212ErrorContext18printErrorMessagesEP8_IO_FILE = { }
stderr.19_4 = { ESCAPED NONLOCAL } same as stderr
fflush = { }
_Z20syncSetTerminateFlagi = { }
abort = { }


Alias information for handle_error(ExitFlag, int, char const*, ...)

Aliased symbols

args, UID D.39280, struct [1], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.39280 } (escaped)

Flow-insensitive points-to information

stderr.17_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.18_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.19_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fmt_9(D), points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

handle_error(ExitFlag, int, char const*, ...) (ExitFlag exitFlag, int exitCode, const char * fmt)
{
  int D.47942;
  struct  args[1];
  struct FILE * stderr.17_1;
  struct FILE * stderr.18_3;
  struct FILE * stderr.19_4;
  struct ErrorContext * _12;
  int _24;

  <bb 2> [100.00%]:
  __builtin_va_start (&args, 0);
  stderr.17_1 = stderr;
  _24 = __vfprintf_chk (stderr.17_1, 1, fmt_9(D), &args);

  <bb 3> [100.00%]:
  _12 = pbzip2::ErrorContext::getInstance ();

  <bb 4> [0.00%]:
  stderr.18_3 = stderr;
  pbzip2::ErrorContext::printErrorMessages (_12, stderr.18_3);

  <bb 5> [0.00%]:
  stderr.19_4 = stderr;
  fflush (stderr.19_4);

  <bb 6> [0.00%]:
  __builtin_va_end (&args);
  if (exitFlag_16(D) == 2)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 7> [0.00%]:
  syncSetTerminateFlag (1);

  <bb 8> [0.00%]:
  abort ();

  <bb 9> [0.00%]:
  if (exitFlag_16(D) == 1)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  syncSetTerminateFlag (1);

  <bb 11> [0.00%]:
  args ={v} {CLOBBER};
  return exitCode_18(D);

<L7> [0.00%]:
  args ={v} {CLOBBER};
  resx 1

}



;; Function issueDecompressError(int, outBuff const*, int, bz_stream const&, char const*, int) (_Z20issueDecompressErroriPK7outBuffiRK9bz_streamPKci, funcdef_no=1967, decl_uid=39063, cgraph_uid=708, symbol_order=756)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
bzret = &NONLOCAL
fileData = &NONLOCAL
outSequenceNumber = &NONLOCAL
strm = &NONLOCAL
errmsg = &NONLOCAL
exitCode = &NONLOCAL
_1 = *strm + 64
_2 = *fileData + 192
_3 = _2
_4 = *fileData + 96
ESCAPED = &NONLOCAL
ESCAPED = exitCode
ESCAPED = &STRING
ESCAPED = errmsg
ESCAPED = bzret
ESCAPED = _4
ESCAPED = outSequenceNumber
ESCAPED = _3
ESCAPED = _1
ESCAPED = exitCode

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
bzret = { NONLOCAL }
fileData = { NONLOCAL } same as bzret
outSequenceNumber = { NONLOCAL } same as bzret
strm = { NONLOCAL } same as bzret
errmsg = { NONLOCAL } same as bzret
exitCode = { NONLOCAL } same as bzret
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
_4 = { ESCAPED NONLOCAL }
_Z12handle_error8ExitFlagiPKcz = { }


Alias information for issueDecompressError(int, outBuff const*, int, bz_stream const&, char const*, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

strm_6(D), points-to non-local, points-to NULL, points-to vars: { }
fileData_7(D), points-to non-local, points-to NULL, points-to vars: { }
errmsg_9(D), points-to non-local, points-to NULL, points-to vars: { }

issueDecompressError(int, outBuff const*, int, bz_stream const&, char const*, int) (int bzret, const struct outBuff * fileData, int outSequenceNumber, const struct bz_stream & strm, const char * errmsg, int exitCode)
{
  unsigned int _1;
  bool _2;
  int _3;
  int _4;

  <bb 2> [0.00%]:
  _1 = strm_6(D)->avail_in;
  _2 = fileData_7(D)->isLastInSequence;
  _3 = (int) _2;
  _4 = fileData_7(D)->blockNumber;
  handle_error (1, exitCode_8(D), "pbzip2: %s: ret=%d; block=%d; seq=%d; isLastInSeq=%d; avail_in=%d\n", errmsg_9(D), bzret_10(D), _4, outSequenceNumber_11(D), _3, _1);
  return exitCode_8(D);

}



;; Function signalHandlerProc (signalHandlerProc, funcdef_no=1977, decl_uid=39086, cgraph_uid=718, symbol_order=766)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
arg = &NONLOCAL
_ZL10SignalMask = NONLOCAL
ESCAPED = &_ZL10SignalMask
ESCAPED = &signalCaught
_12 = NONLOCAL
stderr = NONLOCAL
stderr.89_1 = stderr
ESCAPED = stderr.89_1
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _12
_21 = NONLOCAL
signalCaught.90_2 = signalCaught
_ZL23SIG_HANDLER_QUIT_SIGNAL = NONLOCAL
SIG_HANDLER_QUIT_SIGNAL.91_3 = _ZL23SIG_HANDLER_QUIT_SIGNAL
signalCaught.92_4 = signalCaught
stderr.93_5 = stderr
ESCAPED = stderr.93_5
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = signalCaught.92_4
_22 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZL10SignalMask signalCaught }
NONLOCAL = { ESCAPED NONLOCAL } same as _12
STOREDANYTHING = { }
INTEGER = { ANYTHING }
arg = { NONLOCAL }
sigwait = { }
_ZL10SignalMask = { ESCAPED NONLOCAL }
signalCaught = { ESCAPED NONLOCAL } same as signalCaught.90_2
_12 = { ESCAPED NONLOCAL }
stderr.89_1 = { ESCAPED NONLOCAL } same as _12
stderr = { ESCAPED NONLOCAL } same as _12
__fprintf_chk = { }
_21 = { ESCAPED NONLOCAL } same as _12
signalCaught.90_2 = { ESCAPED NONLOCAL }
SIG_HANDLER_QUIT_SIGNAL.91_3 = { ESCAPED NONLOCAL } same as _12
_ZL23SIG_HANDLER_QUIT_SIGNAL = { ESCAPED NONLOCAL } same as _12
signalCaught.92_4 = { ESCAPED NONLOCAL } same as signalCaught.90_2
stderr.93_5 = { ESCAPED NONLOCAL } same as _12
_22 = { ESCAPED NONLOCAL } same as _12
_Z20syncSetTerminateFlagi = { }


Alias information for signalHandlerProc

Aliased symbols

signalCaught, UID D.39344, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38927 D.39344 } (nonlocal, escaped)

Flow-insensitive points-to information

stderr.89_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.93_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

signalHandlerProc (void * arg)
{
  int D.47950;
  int D.47947;
  int ret;
  int signalCaught;
  struct FILE * stderr.89_1;
  int signalCaught.90_2;
  int SIG_HANDLER_QUIT_SIGNAL.91_3;
  int signalCaught.92_4;
  struct FILE * stderr.93_5;
  int _12;
  int _21;
  int _22;

  <bb 2> [0.00%]:
  _12 = sigwait (&SignalMask, &signalCaught);

  <bb 3> [0.00%]:
  if (_12 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [100.00%]:
  stderr.89_1 = stderr;
  _21 = __fprintf_chk (stderr.89_1, 1, "\n *signalHandlerProc - sigwait error: %d\n", _12);
  goto <bb 8>; [100.00%]

  <bb 5> [0.00%]:
  signalCaught.90_2 = signalCaught;
  SIG_HANDLER_QUIT_SIGNAL.91_3 = SIG_HANDLER_QUIT_SIGNAL;
  if (signalCaught.90_2 == SIG_HANDLER_QUIT_SIGNAL.91_3)
    goto <bb 9>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [100.00%]:
  signalCaught.92_4 = signalCaught;
  stderr.93_5 = stderr;
  _22 = __fprintf_chk (stderr.93_5, 1, "\n *Control-C or similar caught [sig=%d], quitting...\n", signalCaught.92_4);

  <bb 7> [100.00%]:
  syncSetTerminateFlag (1);

  <bb 8> [0.00%]:

  <bb 9> [0.00%]:
  signalCaught ={v} {CLOBBER};
  return 0B;

<L7> [0.00%]:
  signalCaught ={v} {CLOBBER};
  resx 1

}



;; Function syncGetTerminateFlag() (_Z20syncGetTerminateFlagv, funcdef_no=1957, decl_uid=38966, cgraph_uid=698, symbol_order=746)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_3 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
ESCAPED = ret_3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZL18TerminateFlagMutex }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_3 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL13terminateFlag = { ESCAPED NONLOCAL }
_Z17safe_mutex_unlockP15pthread_mutex_t = { }


Alias information for syncGetTerminateFlag()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.38685 } (nonlocal, escaped)

Flow-insensitive points-to information


syncGetTerminateFlag() ()
{
  int ret;

  <bb 2> [0.00%]:
  safe_mutex_lock (&TerminateFlagMutex);
  ret_3 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);
  return ret_3;

}



;; Function syncGetLastGoodBlock() (_Z20syncGetLastGoodBlockv, funcdef_no=1961, decl_uid=38974, cgraph_uid=702, symbol_order=750)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZL8OutMutex = NONLOCAL
OutMutex.97_1 = _ZL8OutMutex
ESCAPED = OutMutex.97_1
_ZL13LastGoodBlock = NONLOCAL
ret_5 = _ZL13LastGoodBlock
OutMutex.98_2 = _ZL8OutMutex
ESCAPED = OutMutex.98_2
ESCAPED = ret_5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL8OutMutex
STOREDANYTHING = { }
INTEGER = { ANYTHING }
OutMutex.97_1 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL8OutMutex = { ESCAPED NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
ret_5 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL13LastGoodBlock = { ESCAPED NONLOCAL } same as _ZL8OutMutex
OutMutex.98_2 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_Z17safe_mutex_unlockP15pthread_mutex_t = { }


Alias information for syncGetLastGoodBlock()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

OutMutex.97_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.98_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

syncGetLastGoodBlock() ()
{
  int ret;
  union pthread_mutex_t * OutMutex.97_1;
  union pthread_mutex_t * OutMutex.98_2;

  <bb 2> [0.00%]:
  OutMutex.97_1 = OutMutex;
  safe_mutex_lock (OutMutex.97_1);
  ret_5 = LastGoodBlock;
  OutMutex.98_2 = OutMutex;
  safe_mutex_unlock (OutMutex.98_2);
  return ret_5;

}



;; Function syncSetProducerDone(int) (_Z19syncSetProducerDonei, funcdef_no=1956, decl_uid=38965, cgraph_uid=697, symbol_order=745)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
newValue = &NONLOCAL
_ZL17ProducerDoneMutex = NONLOCAL
ProducerDoneMutex.120_1 = _ZL17ProducerDoneMutex
ESCAPED = ProducerDoneMutex.120_1
_ZL12producerDone = NONLOCAL
_ZL12producerDone = newValue
ESCAPED = newValue
ProducerDoneMutex.121_2 = _ZL17ProducerDoneMutex
ESCAPED = ProducerDoneMutex.121_2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL17ProducerDoneMutex
STOREDANYTHING = { }
INTEGER = { ANYTHING }
newValue = { NONLOCAL }
ProducerDoneMutex.120_1 = { ESCAPED NONLOCAL } same as _ZL17ProducerDoneMutex
_ZL17ProducerDoneMutex = { ESCAPED NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL12producerDone = { ESCAPED NONLOCAL } same as _ZL17ProducerDoneMutex
ProducerDoneMutex.121_2 = { ESCAPED NONLOCAL } same as _ZL17ProducerDoneMutex
_Z17safe_mutex_unlockP15pthread_mutex_t = { }


Alias information for syncSetProducerDone(int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

ProducerDoneMutex.120_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
ProducerDoneMutex.121_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

syncSetProducerDone(int) (int newValue)
{
  union pthread_mutex_t * ProducerDoneMutex.120_1;
  union pthread_mutex_t * ProducerDoneMutex.121_2;

  <bb 2> [0.00%]:
  ProducerDoneMutex.120_1 = ProducerDoneMutex;
  safe_mutex_lock (ProducerDoneMutex.120_1);
  producerDone = newValue_5(D);
  ProducerDoneMutex.121_2 = ProducerDoneMutex;
  safe_mutex_unlock (ProducerDoneMutex.121_2);
  return;

}



;; Function syncGetMinErrorBlock() (_Z20syncGetMinErrorBlockv, funcdef_no=1962, decl_uid=39270, cgraph_uid=703, symbol_order=751)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZL8OutMutex = NONLOCAL
OutMutex.124_1 = _ZL8OutMutex
ESCAPED = OutMutex.124_1
_ZL13MinErrorBlock = NONLOCAL
ret_5 = _ZL13MinErrorBlock
OutMutex.125_2 = _ZL8OutMutex
ESCAPED = OutMutex.125_2
ESCAPED = ret_5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL8OutMutex
STOREDANYTHING = { }
INTEGER = { ANYTHING }
OutMutex.124_1 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL8OutMutex = { ESCAPED NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
ret_5 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL13MinErrorBlock = { ESCAPED NONLOCAL } same as _ZL8OutMutex
OutMutex.125_2 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_Z17safe_mutex_unlockP15pthread_mutex_t = { }


Alias information for syncGetMinErrorBlock()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

OutMutex.124_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.125_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

syncGetMinErrorBlock() ()
{
  int ret;
  union pthread_mutex_t * OutMutex.124_1;
  union pthread_mutex_t * OutMutex.125_2;

  <bb 2> [0.00%]:
  OutMutex.124_1 = OutMutex;
  safe_mutex_lock (OutMutex.124_1);
  ret_5 = MinErrorBlock;
  OutMutex.125_2 = OutMutex;
  safe_mutex_unlock (OutMutex.125_2);
  return ret_5;

}



;; Function syncGetProducerDone() (_Z19syncGetProducerDonev, funcdef_no=1955, decl_uid=38963, cgraph_uid=696, symbol_order=744)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZL17ProducerDoneMutex = NONLOCAL
ProducerDoneMutex.154_1 = _ZL17ProducerDoneMutex
ESCAPED = ProducerDoneMutex.154_1
_ZL12producerDone = NONLOCAL
ret_5 = _ZL12producerDone
ProducerDoneMutex.155_2 = _ZL17ProducerDoneMutex
ESCAPED = ProducerDoneMutex.155_2
ESCAPED = ret_5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL17ProducerDoneMutex
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ProducerDoneMutex.154_1 = { ESCAPED NONLOCAL } same as _ZL17ProducerDoneMutex
_ZL17ProducerDoneMutex = { ESCAPED NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
ret_5 = { ESCAPED NONLOCAL } same as _ZL17ProducerDoneMutex
_ZL12producerDone = { ESCAPED NONLOCAL } same as _ZL17ProducerDoneMutex
ProducerDoneMutex.155_2 = { ESCAPED NONLOCAL } same as _ZL17ProducerDoneMutex
_Z17safe_mutex_unlockP15pthread_mutex_t = { }


Alias information for syncGetProducerDone()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

ProducerDoneMutex.154_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
ProducerDoneMutex.155_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

syncGetProducerDone() ()
{
  int ret;
  union pthread_mutex_t * ProducerDoneMutex.154_1;
  union pthread_mutex_t * ProducerDoneMutex.155_2;

  <bb 2> [0.00%]:
  ProducerDoneMutex.154_1 = ProducerDoneMutex;
  safe_mutex_lock (ProducerDoneMutex.154_1);
  ret_5 = producerDone;
  ProducerDoneMutex.155_2 = ProducerDoneMutex;
  safe_mutex_unlock (ProducerDoneMutex.155_2);
  return ret_5;

}



;; Function syncSetFinishedFlag(int) (_Z19syncSetFinishedFlagi, funcdef_no=1959, decl_uid=38970, cgraph_uid=700, symbol_order=748)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
newValue = &NONLOCAL
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL12finishedFlag = NONLOCAL
_ZL12finishedFlag = newValue
ESCAPED = newValue
finishedFlag.729_1 = _ZL12finishedFlag
_ZL13TerminateCond = NONLOCAL
ESCAPED = &_ZL13TerminateCond
ESCAPED = &_ZL18TerminateFlagMutex

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZL18TerminateFlagMutex _ZL13TerminateCond }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL12finishedFlag
STOREDANYTHING = { }
INTEGER = { ANYTHING }
newValue = { NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
_ZL12finishedFlag = { ESCAPED NONLOCAL }
finishedFlag.729_1 = { ESCAPED NONLOCAL } same as _ZL12finishedFlag
pthread_cond_signal = { }
_ZL13TerminateCond = { ESCAPED NONLOCAL }
_Z17safe_mutex_unlockP15pthread_mutex_t = { }


Alias information for syncSetFinishedFlag(int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.38685 D.38688 } (nonlocal, escaped)

Flow-insensitive points-to information


syncSetFinishedFlag(int) (int newValue)
{
  int finishedFlag.729_1;

  <bb 2> [0.00%]:
  safe_mutex_lock (&TerminateFlagMutex);
  finishedFlag = newValue_5(D);
  finishedFlag.729_1 = finishedFlag;
  if (finishedFlag.729_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  pthread_cond_signal (&TerminateCond);

  <bb 4> [0.00%]:
  safe_mutex_unlock (&TerminateFlagMutex);
  return;

}



;; Function safe_cond_timed_wait(pthread_cond_t*, pthread_mutex_t*, int, char const*) (_Z20safe_cond_timed_waitP14pthread_cond_tP15pthread_mutex_tiPKc, funcdef_no=1944, decl_uid=38994, cgraph_uid=685, symbol_order=733)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
cond = &NONLOCAL
mutex = &NONLOCAL
seconds = &NONLOCAL
caller = &NONLOCAL
ESCAPED = &tv
ESCAPED = &tz
_1 = tv
_2 = seconds
_3 = _1
_3 = _2
waitTimer = _3
_4 = tv
_5 = _4
_5 = &NONLOCAL
waitTimer = _5
ESCAPED = cond
ESCAPED = mutex
ESCAPED = &waitTimer
_23 = NONLOCAL
_8 = _6
_8 = _7
_11 = _9
_11 = _10
_26 = NONLOCAL
ESCAPED = _26
ESCAPED = mutex
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = caller
ESCAPED = _23
ESCAPED = &NONLOCAL
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL tv tz waitTimer }
NONLOCAL = { ESCAPED NONLOCAL } same as _23
STOREDANYTHING = { }
INTEGER = { ANYTHING }
cond = { NONLOCAL }
mutex = { NONLOCAL } same as cond
seconds = { NONLOCAL } same as cond
caller = { NONLOCAL } same as cond
gettimeofday = { }
tv = { ESCAPED NONLOCAL } same as _1
tz = { ESCAPED NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { NONLOCAL } same as cond
_3 = { ESCAPED NONLOCAL }
waitTimer = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _1
_5 = { ESCAPED NONLOCAL } same as _3
pthread_cond_timedwait = { }
_23 = { ESCAPED NONLOCAL }
_6 = { }
_7 = { }
_8 = { }
_9 = { }
_10 = { }
_11 = { }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_26 = { ESCAPED NONLOCAL } same as _23
_ZN6pbzip212ErrorContext9saveErrorEv = { }
pthread_mutex_unlock = { }
_Z12handle_error8ExitFlagiPKcz = { }
_Z14cleanupAndQuiti = { }


Alias information for safe_cond_timed_wait(pthread_cond_t*, pthread_mutex_t*, int, char const*)

Aliased symbols

tz, UID D.39157, struct timezone, is addressable
tv, UID D.39123, struct timeval, is addressable
waitTimer, UID D.39122, struct timespec, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.39122 D.39123 D.39157 } (escaped)

Flow-insensitive points-to information

cond_20(D), points-to non-local, points-to NULL, points-to vars: { }
mutex_21(D), points-to non-local, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
caller_29(D), points-to non-local, points-to NULL, points-to vars: { }

safe_cond_timed_wait(pthread_cond_t*, pthread_mutex_t*, int, char const*) (union pthread_cond_t * cond, union pthread_mutex_t * mutex, int seconds, const char * caller)
{
  int pret;
  struct timezone tz;
  struct timeval tv;
  struct timespec waitTimer;
  long int _1;
  long int _2;
  long int _3;
  long int _4;
  long int _5;
  bool _6;
  bool _7;
  bool _8;
  bool _9;
  bool _10;
  bool _11;
  int _23;
  struct ErrorContext * _26;

  <bb 2> [0.00%]:
  gettimeofday (&tv, &tz);
  _1 = tv.tv_sec;
  _2 = (long int) seconds_17(D);
  _3 = _1 + _2;
  waitTimer.tv_sec = _3;
  _4 = tv.tv_usec;
  _5 = _4 * 1000;
  waitTimer.tv_nsec = _5;
  _23 = pthread_cond_timedwait (cond_20(D), mutex_21(D), &waitTimer);

  <bb 3> [0.00%]:
  _6 = _23 != 0;
  _7 = _23 != 4;
  _8 = _6 & _7;
  if (_8 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 4> [0.00%]:
  _9 = _23 != 16;
  _10 = _23 != 110;
  _11 = _9 & _10;
  if (_11 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 5> [0.00%]:
  _26 = pbzip2::ErrorContext::getInstance ();

  <bb 6> [0.00%]:
  pbzip2::ErrorContext::saveError (_26);

  <bb 7> [0.00%]:
  pthread_mutex_unlock (mutex_21(D));
  handle_error (1, 1, "pbzip2: *ERROR: %s:  pthread_cond_timedwait() call invalid [pret=%d].  This machine\n         does not have compatible pthreads library.  Aborting.\n", caller_29(D), _23);

  <bb 8> [0.00%]:
  cleanupAndQuit (-9);

  <bb 9> [0.00%]:
  waitTimer ={v} {CLOBBER};
  tv ={v} {CLOBBER};
  tz ={v} {CLOBBER};
  return 0;

<L7> [0.00%]:
  waitTimer ={v} {CLOBBER};
  tv ={v} {CLOBBER};
  tz ={v} {CLOBBER};
  resx 1

}



;; Function waitForPreviousBlock(int, int) (_Z20waitForPreviousBlockii, funcdef_no=1965, decl_uid=39053, cgraph_uid=706, symbol_order=754)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
blockNumToWait = &NONLOCAL
errBlockNumber = &NONLOCAL
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_26 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
_ZL8OutMutex = NONLOCAL
OutMutex.32_2 = _ZL8OutMutex
ESCAPED = OutMutex.32_2
_ZL13MinErrorBlock = NONLOCAL
MinErrorBlock.33_3 = _ZL13MinErrorBlock
MinErrorBlock.34_4 = _ZL13MinErrorBlock
OutMutex.35_5 = _ZL8OutMutex
ESCAPED = OutMutex.35_5
_ZL16NextBlockToWrite = NONLOCAL
NextBlockToWrite.36_6 = _ZL16NextBlockToWrite
OutMutex.37_7 = _ZL8OutMutex
ESCAPED = OutMutex.37_7
OutMutex.38_8 = _ZL8OutMutex
_ZL18ErrStateChangeCond = NONLOCAL
ESCAPED = &_ZL18ErrStateChangeCond
ESCAPED = OutMutex.38_8
ESCAPED = &NONLOCAL
ESCAPED = &STRING
OutMutex.39_9 = _ZL8OutMutex
ESCAPED = OutMutex.39_9
_10 = &NONLOCAL
_10 = &NONLOCAL
_10 = &NULL
ESCAPED = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZL18TerminateFlagMutex _ZL18ErrStateChangeCond }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
STOREDANYTHING = { }
INTEGER = { ANYTHING }
blockNumToWait = { NONLOCAL }
errBlockNumber = { NONLOCAL } same as blockNumToWait
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_26 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL13terminateFlag = { ESCAPED NONLOCAL }
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
OutMutex.32_2 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL8OutMutex = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
MinErrorBlock.33_3 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL13MinErrorBlock = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
MinErrorBlock.34_4 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
OutMutex.35_5 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
NextBlockToWrite.36_6 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL16NextBlockToWrite = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
OutMutex.37_7 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
OutMutex.38_8 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_Z20safe_cond_timed_waitP14pthread_cond_tP15pthread_mutex_tiPKc = { }
_ZL18ErrStateChangeCond = { ESCAPED NONLOCAL }
OutMutex.39_9 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_10 = { NULL NONLOCAL }


Alias information for waitForPreviousBlock(int, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38685 D.38822 } (nonlocal, escaped)

Flow-insensitive points-to information

OutMutex.32_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.35_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.37_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.38_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.39_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

waitForPreviousBlock(int, int) (int blockNumToWait, int errBlockNumber)
{
  int ret;
  int D.47960;
  union pthread_mutex_t * OutMutex.32_2;
  int MinErrorBlock.33_3;
  int MinErrorBlock.34_4;
  union pthread_mutex_t * OutMutex.35_5;
  int NextBlockToWrite.36_6;
  union pthread_mutex_t * OutMutex.37_7;
  union pthread_mutex_t * OutMutex.38_8;
  union pthread_mutex_t * OutMutex.39_9;
  int _10;

  <bb 2> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);
  ret_26 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);
  if (ret_26 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  OutMutex.32_2 = OutMutex;
  safe_mutex_lock (OutMutex.32_2);
  MinErrorBlock.33_3 = MinErrorBlock;
  if (MinErrorBlock.33_3 != -1)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  MinErrorBlock.34_4 = MinErrorBlock;
  if (MinErrorBlock.34_4 < errBlockNumber_18(D))
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  OutMutex.35_5 = OutMutex;
  safe_mutex_unlock (OutMutex.35_5);
  goto <bb 9>; [0.00%]

  <bb 6> [0.00%]:
  NextBlockToWrite.36_6 = NextBlockToWrite;
  if (NextBlockToWrite.36_6 >= errBlockNumber_18(D))
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  OutMutex.37_7 = OutMutex;
  safe_mutex_unlock (OutMutex.37_7);
  goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  OutMutex.38_8 = OutMutex;
  safe_cond_timed_wait (&ErrStateChangeCond, OutMutex.38_8, 1, "waitForPreviousBlock");
  OutMutex.39_9 = OutMutex;
  safe_mutex_unlock (OutMutex.39_9);
  goto <bb 2>; [0.00%]

  <bb 9> [0.00%]:
  # _10 = PHI <-1(2), 2(5), 0(7)>
  return _10;

}



;; Function safe_cond_signal(pthread_cond_t*) (_Z16safe_cond_signalP14pthread_cond_t, funcdef_no=1941, decl_uid=38989, cgraph_uid=682, symbol_order=730)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
cond = &NONLOCAL
ESCAPED = cond
ret_6 = NONLOCAL
stderr = NONLOCAL
stderr.57_1 = stderr
ESCAPED = stderr.57_1
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_6
_9 = NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
cond = { NONLOCAL }
pthread_cond_signal = { }
ret_6 = { ESCAPED NONLOCAL }
stderr.57_1 = { ESCAPED NONLOCAL } same as ret_6
stderr = { ESCAPED NONLOCAL } same as ret_6
__fprintf_chk = { }
_9 = { ESCAPED NONLOCAL } same as ret_6
_Z14cleanupAndQuiti = { }


Alias information for safe_cond_signal(pthread_cond_t*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

stderr.57_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
cond_4(D), points-to non-local, points-to NULL, points-to vars: { }

safe_cond_signal(pthread_cond_t*) (union pthread_cond_t * cond)
{
  int D.47964;
  int ret;
  struct FILE * stderr.57_1;
  int _9;

  <bb 2> [0.00%]:
  ret_6 = pthread_cond_signal (cond_4(D));
  if (ret_6 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  stderr.57_1 = stderr;
  _9 = __fprintf_chk (stderr.57_1, 1, "pthread_cond_signal error [%d]! Aborting immediately!\n", ret_6);
  cleanupAndQuit (-7);

  <bb 4> [0.00%]:
  return;

}



;; Function syncSetLastGoodBlock(int, int) (_Z20syncSetLastGoodBlockii, funcdef_no=1960, decl_uid=38973, cgraph_uid=701, symbol_order=749)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
newValue = &NONLOCAL
errBlock = &NONLOCAL
_ZL8OutMutex = NONLOCAL
OutMutex.44_1 = _ZL8OutMutex
ESCAPED = OutMutex.44_1
_ZL13LastGoodBlock = NONLOCAL
LastGoodBlock.45_2 = _ZL13LastGoodBlock
LastGoodBlock.46_3 = _ZL13LastGoodBlock
_ZL13LastGoodBlock = newValue
ESCAPED = newValue
changed_18 = &NULL
changed_18 = &NONLOCAL
_ZL13MinErrorBlock = NONLOCAL
MinErrorBlock.47_4 = _ZL13MinErrorBlock
MinErrorBlock.48_5 = _ZL13MinErrorBlock
_ZL13MinErrorBlock = errBlock
ESCAPED = errBlock
changed_23 = &NONLOCAL
changed_19 = changed_18
_ZL18ErrStateChangeCond = NONLOCAL
ESCAPED = &_ZL18ErrStateChangeCond
_ZL21OutBufferHeadNotEmpty = NONLOCAL
ESCAPED = &_ZL21OutBufferHeadNotEmpty
_ZL21notTooMuchNumBuffered = NONLOCAL
notTooMuchNumBuffered.49_6 = _ZL21notTooMuchNumBuffered
ESCAPED = notTooMuchNumBuffered.49_6
OutMutex.50_7 = _ZL8OutMutex
ESCAPED = OutMutex.50_7
_ZL9FifoQueue = NONLOCAL
FifoQueue.51_8 = _ZL9FifoQueue
FifoQueue.52_9 = _ZL9FifoQueue
_10 = *FifoQueue.52_9 + 448
ESCAPED = _10
FifoQueue.53_11 = _ZL9FifoQueue
_12 = *FifoQueue.53_11 + 512
ESCAPED = _12
FifoQueue.54_13 = _ZL9FifoQueue
_14 = *FifoQueue.54_13 + 576
ESCAPED = _14
FifoQueue.55_15 = _ZL9FifoQueue
_16 = *FifoQueue.55_15 + 448
ESCAPED = _16
OutMutex.56_17 = _ZL8OutMutex
ESCAPED = OutMutex.56_17

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZL18ErrStateChangeCond _ZL21OutBufferHeadNotEmpty }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL8OutMutex
STOREDANYTHING = { }
INTEGER = { ANYTHING }
newValue = { NONLOCAL }
errBlock = { NONLOCAL } same as newValue
OutMutex.44_1 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL8OutMutex = { ESCAPED NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
LastGoodBlock.45_2 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL13LastGoodBlock = { ESCAPED NONLOCAL } same as _ZL8OutMutex
LastGoodBlock.46_3 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
changed_18 = { NULL NONLOCAL }
MinErrorBlock.47_4 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL13MinErrorBlock = { ESCAPED NONLOCAL } same as _ZL8OutMutex
MinErrorBlock.48_5 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
changed_23 = { NONLOCAL } same as newValue
changed_19 = { NULL NONLOCAL } same as changed_18
_Z16safe_cond_signalP14pthread_cond_t = { }
_ZL18ErrStateChangeCond = { ESCAPED NONLOCAL }
_ZL21OutBufferHeadNotEmpty = { ESCAPED NONLOCAL }
notTooMuchNumBuffered.49_6 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL21notTooMuchNumBuffered = { ESCAPED NONLOCAL } same as _ZL8OutMutex
pthread_cond_broadcast = { }
OutMutex.50_7 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
FifoQueue.51_8 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL9FifoQueue = { ESCAPED NONLOCAL } same as _ZL8OutMutex
FifoQueue.52_9 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_10 = { ESCAPED NONLOCAL }
FifoQueue.53_11 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_12 = { ESCAPED NONLOCAL }
FifoQueue.54_13 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_14 = { ESCAPED NONLOCAL }
FifoQueue.55_15 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_16 = { ESCAPED NONLOCAL }
OutMutex.56_17 = { ESCAPED NONLOCAL } same as _ZL8OutMutex


Alias information for syncSetLastGoodBlock(int, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.38821 D.38822 } (nonlocal, escaped)

Flow-insensitive points-to information

OutMutex.44_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.49_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.50_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.51_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.52_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.53_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.54_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.55_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.56_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

syncSetLastGoodBlock(int, int) (int newValue, int errBlock)
{
  bool changed;
  union pthread_mutex_t * OutMutex.44_1;
  int LastGoodBlock.45_2;
  int LastGoodBlock.46_3;
  int MinErrorBlock.47_4;
  int MinErrorBlock.48_5;
  union pthread_cond_t * notTooMuchNumBuffered.49_6;
  union pthread_mutex_t * OutMutex.50_7;
  struct queue * FifoQueue.51_8;
  struct queue * FifoQueue.52_9;
  union pthread_mutex_t * _10;
  struct queue * FifoQueue.53_11;
  union pthread_cond_t * _12;
  struct queue * FifoQueue.54_13;
  union pthread_cond_t * _14;
  struct queue * FifoQueue.55_15;
  union pthread_mutex_t * _16;
  union pthread_mutex_t * OutMutex.56_17;

  <bb 2> [0.00%]:
  OutMutex.44_1 = OutMutex;
  safe_mutex_lock (OutMutex.44_1);
  LastGoodBlock.45_2 = LastGoodBlock;
  if (LastGoodBlock.45_2 == -1)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  LastGoodBlock.46_3 = LastGoodBlock;
  if (LastGoodBlock.46_3 > newValue_26(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  LastGoodBlock = newValue_26(D);

  <bb 5> [0.00%]:
  # changed_18 = PHI <0(3), 1(4)>
  MinErrorBlock.47_4 = MinErrorBlock;
  if (MinErrorBlock.47_4 == -1)
    goto <bb 7>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  MinErrorBlock.48_5 = MinErrorBlock;
  if (MinErrorBlock.48_5 > errBlock_29(D))
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 7> [0.00%]:
  MinErrorBlock = errBlock_29(D);

  <bb 8> [0.00%]:
  # changed_23 = PHI <1(7)>
  goto <bb 10>; [100.00%]

  <bb 9> [0.00%]:
  # changed_19 = PHI <changed_18(6)>
  if (changed_19 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 10> [0.00%]:
  safe_cond_signal (&ErrStateChangeCond);
  safe_cond_signal (&OutBufferHeadNotEmpty);
  notTooMuchNumBuffered.49_6 = notTooMuchNumBuffered;
  pthread_cond_broadcast (notTooMuchNumBuffered.49_6);
  OutMutex.50_7 = OutMutex;
  safe_mutex_unlock (OutMutex.50_7);
  FifoQueue.51_8 = FifoQueue;
  if (FifoQueue.51_8 != 0B)
    goto <bb 11>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 11> [0.00%]:
  FifoQueue.52_9 = FifoQueue;
  _10 = FifoQueue.52_9->mut;
  safe_mutex_lock (_10);
  FifoQueue.53_11 = FifoQueue;
  _12 = FifoQueue.53_11->notFull;
  pthread_cond_broadcast (_12);
  FifoQueue.54_13 = FifoQueue;
  _14 = FifoQueue.54_13->notEmpty;
  pthread_cond_broadcast (_14);
  FifoQueue.55_15 = FifoQueue;
  _16 = FifoQueue.55_15->mut;
  safe_mutex_unlock (_16);
  goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  OutMutex.56_17 = OutMutex;
  safe_mutex_unlock (OutMutex.56_17);

  <bb 13> [0.00%]:
  return;

}



;; Function decompressErrCheckSingle(int, outBuff const*, int, bz_stream const&, char const*, bool) (_Z24decompressErrCheckSingleiPK7outBuffiRK9bz_streamPKcb, funcdef_no=1968, decl_uid=39070, cgraph_uid=709, symbol_order=757)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
bzret = &NONLOCAL
fileData = &NONLOCAL
outSequenceNumber = &NONLOCAL
strm = &NONLOCAL
errmsg = &NONLOCAL
isTrailingGarbageErr = &NONLOCAL
_1 = *fileData + 96
_15 = _1
_15 = &NONLOCAL
_37 = _1
_37 = _15
_ZL25IgnoreTrailingGarbageFlag = NONLOCAL
IgnoreTrailingGarbageFlag.43_38 = _ZL25IgnoreTrailingGarbageFlag
iftmp.41_3 = &NONLOCAL
_40 = *strm + 64
_41 = *fileData + 192
_42 = _41
_43 = *fileData + 96
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = errmsg
ESCAPED = bzret
ESCAPED = _43
ESCAPED = outSequenceNumber
ESCAPED = _42
ESCAPED = _40
iftmp.41_16 = &NULL
_4 = *fileData + 96
ESCAPED = _37
ESCAPED = _4
_5 = *fileData + 96
ESCAPED = _37
ESCAPED = _5
_23 = NONLOCAL
stderr = NONLOCAL
stderr.42_6 = stderr
ESCAPED = stderr.42_6
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_17 = NONLOCAL
_44 = *strm + 64
_45 = *fileData + 192
_46 = _45
_47 = *fileData + 96
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = errmsg
ESCAPED = bzret
ESCAPED = _47
ESCAPED = outSequenceNumber
ESCAPED = _46
ESCAPED = _44
_8 = &NONLOCAL
_8 = &NONLOCAL
_8 = &NONLOCAL
_8 = &NONLOCAL
_8 = &NONLOCAL
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL25IgnoreTrailingGarbageFlag
STOREDANYTHING = { }
INTEGER = { ANYTHING }
bzret = { NONLOCAL }
fileData = { NONLOCAL } same as bzret
outSequenceNumber = { NONLOCAL } same as bzret
strm = { NONLOCAL } same as bzret
errmsg = { NONLOCAL } same as bzret
isTrailingGarbageErr = { NONLOCAL } same as bzret
_1 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL }
_37 = { ESCAPED NONLOCAL } same as _15
IgnoreTrailingGarbageFlag.43_38 = { ESCAPED NONLOCAL } same as _ZL25IgnoreTrailingGarbageFlag
_ZL25IgnoreTrailingGarbageFlag = { ESCAPED NONLOCAL }
_39 = { }
iftmp.41_3 = { NONLOCAL } same as bzret
_40 = { ESCAPED NONLOCAL }
_41 = { ESCAPED NONLOCAL }
_42 = { ESCAPED NONLOCAL } same as _41
_43 = { ESCAPED NONLOCAL }
_Z12handle_error8ExitFlagiPKcz = { }
iftmp.41_16 = { NULL }
_4 = { ESCAPED NONLOCAL }
_Z20syncSetLastGoodBlockii = { }
_5 = { ESCAPED NONLOCAL }
_Z20waitForPreviousBlockii = { }
_23 = { ESCAPED NONLOCAL } same as _ZL25IgnoreTrailingGarbageFlag
stderr.42_6 = { ESCAPED NONLOCAL } same as _ZL25IgnoreTrailingGarbageFlag
stderr = { ESCAPED NONLOCAL } same as _ZL25IgnoreTrailingGarbageFlag
__fprintf_chk = { }
_17 = { ESCAPED NONLOCAL } same as _ZL25IgnoreTrailingGarbageFlag
_44 = { ESCAPED NONLOCAL }
_45 = { ESCAPED NONLOCAL }
_46 = { ESCAPED NONLOCAL } same as _45
_47 = { ESCAPED NONLOCAL }
_8 = { NONLOCAL } same as bzret


Alias information for decompressErrCheckSingle(int, outBuff const*, int, bz_stream const&, char const*, bool)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

stderr.42_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData_13(D), points-to non-local, points-to NULL, points-to vars: { }
strm_29(D), points-to non-local, points-to NULL, points-to vars: { }
errmsg_30(D), points-to non-local, points-to NULL, points-to vars: { }

decompressErrCheckSingle(int, outBuff const*, int, bz_stream const&, char const*, bool) (int bzret, const struct outBuff * fileData, int outSequenceNumber, const struct bz_stream & strm, const char * errmsg, bool isTrailingGarbageErr)
{
  int D.47987;
  int D.47980;
  bool D.47973;
  int D.47972;
  int D.47969;
  int prevState;
  int lastGoodBlock;
  int _1;
  bool iftmp.41_3;
  int _4;
  int _5;
  struct FILE * stderr.42_6;
  int _8;
  int _15;
  bool iftmp.41_16;
  int _17;
  int _23;
  int _37;
  int IgnoreTrailingGarbageFlag.43_38;
  bool _39;
  unsigned int _40;
  bool _41;
  int _42;
  int _43;
  unsigned int _44;
  bool _45;
  int _46;
  int _47;

  <bb 2> [100.00%]:
  _1 = fileData_13(D)->blockNumber;
  if (outSequenceNumber_14(D) != -1)
    goto <bb 4>; [62.32%]
  else
    goto <bb 3>; [37.68%]

  <bb 3> [37.68%]:
  _15 = _1 + -1;

  <bb 4> [100.00%]:
  # _37 = PHI <_1(2), _15(3)>
  if (_37 == -1)
    goto <bb 6>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [100.00%]:
  IgnoreTrailingGarbageFlag.43_38 = IgnoreTrailingGarbageFlag;
  _39 = IgnoreTrailingGarbageFlag.43_38 != 0;
  if (IgnoreTrailingGarbageFlag.43_38 == 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 6> [0.00%]:

  <bb 7> [100.00%]:
  # iftmp.41_3 = PHI <1(6)>
  _40 = strm_29(D)->avail_in;
  _41 = fileData_13(D)->isLastInSequence;
  _42 = (int) _41;
  _43 = fileData_13(D)->blockNumber;
  handle_error (1, -1, "pbzip2: %s: ret=%d; block=%d; seq=%d; isLastInSeq=%d; avail_in=%d\n", errmsg_30(D), bzret_28(D), _43, outSequenceNumber_14(D), _42, _40);
  goto <bb 14>; [0.00%]

  <bb 8> [0.00%]:
  # iftmp.41_16 = PHI <0(5)>
  _4 = fileData_13(D)->blockNumber;
  syncSetLastGoodBlock (_37, _4);
  _5 = fileData_13(D)->blockNumber;
  _23 = waitForPreviousBlock (_37, _5);
  if (_23 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 9> [0.00%]:
  if (isTrailingGarbageErr_27(D) != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [100.00%]:
  stderr.42_6 = stderr;
  _17 = __fprintf_chk (stderr.42_6, 1, "pbzip2: *WARNING: Trailing garbage after EOF ignored!\n");
  goto <bb 14>; [0.00%]

  <bb 11> [100.00%]:
  _44 = strm_29(D)->avail_in;
  _45 = fileData_13(D)->isLastInSequence;
  _46 = (int) _45;
  _47 = fileData_13(D)->blockNumber;
  handle_error (1, -1, "pbzip2: %s: ret=%d; block=%d; seq=%d; isLastInSeq=%d; avail_in=%d\n", errmsg_30(D), bzret_28(D), _47, outSequenceNumber_14(D), _46, _44);
  goto <bb 14>; [0.00%]

  <bb 12> [0.00%]:
  if (_23 == 2)
    goto <bb 14>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:

  <bb 14> [0.00%]:
  # _8 = PHI <-1(7), 1(10), -1(11), 2(12), -1(13)>
  return _8;

}



;; Function decompressErrCheck(int, outBuff const*, int, bz_stream const&) (_Z18decompressErrCheckiPK7outBuffiRK9bz_stream, funcdef_no=1970, decl_uid=39075, cgraph_uid=711, symbol_order=759)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
bzret = &NONLOCAL
fileData = &NONLOCAL
outSequenceNumber = &NONLOCAL
strm = &NONLOCAL
_12 = *strm + 64
iftmp.59_30 = &NONLOCAL
_28 = *fileData + 192
iftmp.59_13 = &NULL
iftmp.59_13 = &NULL
_3 = _1
_3 = _2
iftmp.59_17 = &NONLOCAL
ESCAPED = bzret
ESCAPED = fileData
ESCAPED = outSequenceNumber
ESCAPED = strm
ESCAPED = &STRING
ESCAPED = &NONLOCAL
_26 = NONLOCAL
ESCAPED = bzret
ESCAPED = fileData
ESCAPED = outSequenceNumber
ESCAPED = strm
ESCAPED = &STRING
ESCAPED = &NULL
_23 = NONLOCAL
_4 = *strm + 64
ESCAPED = bzret
ESCAPED = fileData
ESCAPED = outSequenceNumber
ESCAPED = strm
ESCAPED = &STRING
ESCAPED = &NULL
_20 = NONLOCAL
_5 = *fileData + 192
ESCAPED = bzret
ESCAPED = fileData
ESCAPED = outSequenceNumber
ESCAPED = strm
ESCAPED = &STRING
ESCAPED = &NULL
_16 = NONLOCAL
_6 = _26
_6 = _23
_6 = _20
_6 = _16
_6 = &NULL
_6 = &NULL
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _26
STOREDANYTHING = { }
INTEGER = { ANYTHING }
bzret = { NONLOCAL }
fileData = { NONLOCAL } same as bzret
outSequenceNumber = { NONLOCAL } same as bzret
strm = { NONLOCAL } same as bzret
_12 = { ESCAPED NONLOCAL }
iftmp.59_30 = { NONLOCAL } same as bzret
_28 = { ESCAPED NONLOCAL }
iftmp.59_13 = { NULL }
_1 = { }
_2 = { }
_3 = { }
iftmp.59_17 = { NONLOCAL } same as bzret
_Z24decompressErrCheckSingleiPK7outBuffiRK9bz_streamPKcb = { }
_26 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL } same as _26
_4 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL } same as _26
_5 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL } same as _26
_6 = { NULL ESCAPED NONLOCAL }


Alias information for decompressErrCheck(int, outBuff const*, int, bz_stream const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

fileData_10(D), points-to non-local, points-to NULL, points-to vars: { }
strm_11(D), points-to non-local, points-to NULL, points-to vars: { }

decompressErrCheck(int, outBuff const*, int, bz_stream const&) (int bzret, const struct outBuff * fileData, int outSequenceNumber, const struct bz_stream & strm)
{
  bool D.47992;
  bool _1;
  bool _2;
  bool _3;
  unsigned int _4;
  bool _5;
  int _6;
  unsigned int _12;
  bool iftmp.59_13;
  int _16;
  bool iftmp.59_17;
  int _20;
  int _23;
  int _26;
  bool _28;
  bool iftmp.59_30;

  <bb 2> [100.00%]:
  if (bzret_9(D) == 4)
    goto <bb 3>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 3> [34.00%]:
  _12 = strm_11(D)->avail_in;
  if (_12 != 0)
    goto <bb 4>; [46.00%]
  else
    goto <bb 5>; [54.00%]

  <bb 4> [15.60%]:
  # iftmp.59_30 = PHI <1(3)>
  goto <bb 8>; [100.00%]

  <bb 5> [18.36%]:
  _28 = fileData_10(D)->isLastInSequence;
  if (_28 != 0)
    goto <bb 6>; [54.00%]
  else
    goto <bb 7>; [46.00%]

  <bb 6> [75.92%]:
  # iftmp.59_13 = PHI <0(5), 0(2)>
  _1 = bzret_9(D) != 4;
  _2 = bzret_9(D) != 0;
  _3 = _1 & _2;
  if (_3 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [8.45%]:
  # iftmp.59_17 = PHI <1(5)>

  <bb 8> [0.00%]:
  _26 = decompressErrCheckSingle (bzret_9(D), fileData_10(D), outSequenceNumber_14(D), strm_11(D), "*ERROR during BZ2_bzDecompress - trailing garbage", 1);
  goto <bb 15>; [0.00%]

  <bb 9> [0.00%]:
  _23 = decompressErrCheckSingle (bzret_9(D), fileData_10(D), outSequenceNumber_14(D), strm_11(D), "*ERROR during BZ2_bzDecompress - failure exit code", 0);
  goto <bb 15>; [0.00%]

  <bb 10> [0.00%]:
  _4 = strm_11(D)->avail_in;
  if (_4 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  _20 = decompressErrCheckSingle (bzret_9(D), fileData_10(D), outSequenceNumber_14(D), strm_11(D), "*ERROR unconsumed in after BZ2_bzDecompress loop", 0);
  goto <bb 15>; [0.00%]

  <bb 12> [0.00%]:
  if (bzret_9(D) != 4)
    goto <bb 13>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 13> [0.00%]:
  _5 = fileData_10(D)->isLastInSequence;
  if (_5 != 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  _16 = decompressErrCheckSingle (bzret_9(D), fileData_10(D), outSequenceNumber_14(D), strm_11(D), "*ERROR on decompress - last in segment reached before BZ_STREAM_END", 0);

  <bb 15> [0.00%]:
  # _6 = PHI <_26(8), _23(9), _20(11), _16(14), 0(13), 0(12)>
  return _6;

}



;; Function terminatorThreadProc (terminatorThreadProc, funcdef_no=1976, decl_uid=39088, cgraph_uid=717, symbol_order=765)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
arg = &NONLOCAL
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
ret_14 = NONLOCAL
_1 = &NONLOCAL
_2 = *_1
stderr = NONLOCAL
stderr.83_3 = stderr
ESCAPED = stderr.83_3
ESCAPED = _2
stderr.84_4 = stderr
ESCAPED = stderr.84_4
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_14
_11 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL12finishedFlag = NONLOCAL
finishedFlag.85_5 = _ZL12finishedFlag
_ZL13terminateFlag = NONLOCAL
terminateFlag.86_6 = _ZL13terminateFlag
_ZL13TerminateCond = NONLOCAL
ESCAPED = &_ZL13TerminateCond
ESCAPED = &_ZL18TerminateFlagMutex
_20 = NONLOCAL
finishedFlag.87_7 = _ZL12finishedFlag
ESCAPED = &_ZL18TerminateFlagMutex
ret_28 = NONLOCAL
ESCAPED = &NULL
ESCAPED = &_ZL18TerminateFlagMutex
ret_23 = NONLOCAL
stderr.88_8 = stderr
ESCAPED = stderr.88_8
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_9 = NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZL18TerminateFlagMutex _ZL13TerminateCond }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_14
STOREDANYTHING = { }
INTEGER = { ANYTHING }
arg = { NONLOCAL }
pthread_mutex_lock = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_14 = { ESCAPED NONLOCAL }
__errno_location = { }
_1 = { NONLOCAL } same as arg
_2 = { ESCAPED NONLOCAL }
stderr.83_3 = { ESCAPED NONLOCAL } same as ret_14
stderr = { ESCAPED NONLOCAL } same as ret_14
_ZN6pbzip212ErrorContext17syncPrintErrnoMsgEP8_IO_FILEi = { }
stderr.84_4 = { ESCAPED NONLOCAL } same as ret_14
__fprintf_chk = { }
_11 = { ESCAPED NONLOCAL } same as ret_14
_Z20syncSetTerminateFlagi = { }
_Z14cleanupAndQuiti = { }
finishedFlag.85_5 = { ESCAPED NONLOCAL } same as ret_14
_ZL12finishedFlag = { ESCAPED NONLOCAL } same as ret_14
terminateFlag.86_6 = { ESCAPED NONLOCAL } same as ret_14
_ZL13terminateFlag = { ESCAPED NONLOCAL } same as ret_14
pthread_cond_wait = { }
_ZL13TerminateCond = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL } same as ret_14
finishedFlag.87_7 = { ESCAPED NONLOCAL } same as ret_14
pthread_mutex_unlock = { }
ret_28 = { ESCAPED NONLOCAL } same as ret_14
ret_23 = { ESCAPED NONLOCAL } same as ret_14
stderr.88_8 = { ESCAPED NONLOCAL } same as ret_14
_9 = { ESCAPED NONLOCAL } same as ret_14


Alias information for terminatorThreadProc

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38685 D.38688 } (nonlocal, escaped)

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
stderr.83_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.84_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.88_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

terminatorThreadProc (void * arg)
{
  int D.47999;
  int D.47996;
  int ret;
  int * _1;
  int _2;
  struct FILE * stderr.83_3;
  struct FILE * stderr.84_4;
  int finishedFlag.85_5;
  int terminateFlag.86_6;
  int finishedFlag.87_7;
  struct FILE * stderr.88_8;
  int _9;
  int _11;
  int _20;

  <bb 2> [0.00%]:
  ret_14 = pthread_mutex_lock (&TerminateFlagMutex);
  if (ret_14 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _1 = __errno_location ();
  _2 = *_1;
  stderr.83_3 = stderr;
  pbzip2::ErrorContext::syncPrintErrnoMsg (stderr.83_3, _2);
  stderr.84_4 = stderr;
  _11 = __fprintf_chk (stderr.84_4, 1, "Terminator thread: pthread_mutex_lock error [%d]! Aborting...\n", ret_14);
  syncSetTerminateFlag (1);
  cleanupAndQuit (1);

  <bb 4> [0.00%]:

  <bb 5> [0.00%]:
  finishedFlag.85_5 = finishedFlag;
  if (finishedFlag.85_5 != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  terminateFlag.86_6 = terminateFlag;
  if (terminateFlag.86_6 != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  _20 = pthread_cond_wait (&TerminateCond, &TerminateFlagMutex);
  goto <bb 5>; [0.00%]

  <bb 8> [0.00%]:
  finishedFlag.87_7 = finishedFlag;
  if (finishedFlag.87_7 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  ret_28 = pthread_mutex_unlock (&TerminateFlagMutex);
  return 0B;

  <bb 10> [100.00%]:
  ret_23 = pthread_mutex_unlock (&TerminateFlagMutex);
  stderr.88_8 = stderr;
  _9 = __fprintf_chk (stderr.88_8, 1, "Terminator thread: premature exit requested - quitting...\n");
  cleanupAndQuit (1);

}



;; Function safe_cond_wait(pthread_cond_t*, pthread_mutex_t*) (_Z14safe_cond_waitP14pthread_cond_tP15pthread_mutex_t, funcdef_no=1943, decl_uid=38987, cgraph_uid=684, symbol_order=732)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
cond = &NONLOCAL
mutex = &NONLOCAL
ESCAPED = cond
ESCAPED = mutex
_7 = NONLOCAL
stderr = NONLOCAL
stderr.119_1 = stderr
ESCAPED = stderr.119_1
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _7
_12 = NONLOCAL
ESCAPED = mutex
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _7
STOREDANYTHING = { }
INTEGER = { ANYTHING }
cond = { NONLOCAL }
mutex = { NONLOCAL } same as cond
pthread_cond_wait = { }
_7 = { ESCAPED NONLOCAL }
stderr.119_1 = { ESCAPED NONLOCAL } same as _7
stderr = { ESCAPED NONLOCAL } same as _7
__fprintf_chk = { }
_12 = { ESCAPED NONLOCAL } same as _7
pthread_mutex_unlock = { }
_Z14cleanupAndQuiti = { }


Alias information for safe_cond_wait(pthread_cond_t*, pthread_mutex_t*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

stderr.119_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
cond_4(D), points-to non-local, points-to NULL, points-to vars: { }
mutex_5(D), points-to non-local, points-to NULL, points-to vars: { }

safe_cond_wait(pthread_cond_t*, pthread_mutex_t*) (union pthread_cond_t * cond, union pthread_mutex_t * mutex)
{
  int D.48003;
  int ret;
  struct FILE * stderr.119_1;
  int _7;
  int _12;

  <bb 2> [0.00%]:
  _7 = pthread_cond_wait (cond_4(D), mutex_5(D));
  if (_7 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  stderr.119_1 = stderr;
  _12 = __fprintf_chk (stderr.119_1, 1, "pthread_cond_wait error [%d]! Aborting immediately!\n", _7);
  pthread_mutex_unlock (mutex_5(D));
  cleanupAndQuit (-8);

  <bb 4> [0.00%]:
  return;

}



;; Function safe_cond_broadcast(pthread_cond_t*) (_Z19safe_cond_broadcastP14pthread_cond_t, funcdef_no=1942, decl_uid=39108, cgraph_uid=683, symbol_order=731)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
cond = &NONLOCAL
ESCAPED = cond
ret_6 = NONLOCAL
stderr = NONLOCAL
stderr.122_1 = stderr
ESCAPED = stderr.122_1
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_6
_9 = NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
cond = { NONLOCAL }
pthread_cond_broadcast = { }
ret_6 = { ESCAPED NONLOCAL }
stderr.122_1 = { ESCAPED NONLOCAL } same as ret_6
stderr = { ESCAPED NONLOCAL } same as ret_6
__fprintf_chk = { }
_9 = { ESCAPED NONLOCAL } same as ret_6
_Z14cleanupAndQuiti = { }


Alias information for safe_cond_broadcast(pthread_cond_t*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

stderr.122_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
cond_4(D), points-to non-local, points-to NULL, points-to vars: { }

safe_cond_broadcast(pthread_cond_t*) (union pthread_cond_t * cond)
{
  int D.48007;
  int ret;
  struct FILE * stderr.122_1;
  int _9;

  <bb 2> [0.00%]:
  ret_6 = pthread_cond_broadcast (cond_4(D));
  if (ret_6 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  stderr.122_1 = stderr;
  _9 = __fprintf_chk (stderr.122_1, 1, "pthread_cond_broadcast error [%d]! Aborting immediately!\n", ret_6);
  cleanupAndQuit (-7);

  <bb 4> [0.00%]:
  return;

}



;; Function consumerDecompressCheckInterrupt(outBuff const*) (_Z32consumerDecompressCheckInterruptPK7outBuff, funcdef_no=1982, decl_uid=39383, cgraph_uid=722, symbol_order=770)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
lastElement = &NONLOCAL
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_20 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
isInterrupted_4 = &NULL
isInterrupted_4 = &NONLOCAL
_14 = NONLOCAL
_2 = *lastElement + 96
_3 = *lastElement + 192
isInterrupted_11 = &NONLOCAL
isInterrupted_11 = &NONLOCAL
isInterrupted_11 = &NONLOCAL
isInterrupted_5 = isInterrupted_4
isInterrupted_5 = isInterrupted_4
_6 = &NONLOCAL
_6 = &NULL
_6 = &NONLOCAL
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZL18TerminateFlagMutex }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
STOREDANYTHING = { }
INTEGER = { ANYTHING }
lastElement = { NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_20 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL13terminateFlag = { ESCAPED NONLOCAL }
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
isInterrupted_4 = { NULL NONLOCAL }
_Z20syncGetMinErrorBlockv = { }
_14 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
isInterrupted_11 = { NONLOCAL } same as lastElement
isInterrupted_5 = { NULL NONLOCAL } same as isInterrupted_4
_6 = { NULL NONLOCAL } same as isInterrupted_4


Alias information for consumerDecompressCheckInterrupt(outBuff const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38685 } (nonlocal, escaped)

Flow-insensitive points-to information

lastElement_16(D), points-to non-local, points-to NULL, points-to vars: { }

consumerDecompressCheckInterrupt(outBuff const*) (const struct outBuff * lastElement)
{
  int ret;
  int D.48010;
  int minErrBlock;
  bool isInterrupted;
  int _2;
  bool _3;
  int _6;
  int _14;

  <bb 2> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);
  ret_20 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);
  if (ret_20 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:

  <bb 4> [0.00%]:
  # isInterrupted_4 = PHI <0(2), 1(3)>
  _14 = syncGetMinErrorBlock ();
  if (_14 != -1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 5> [0.00%]:
  if (lastElement_16(D) == 0B)
    goto <bb 8>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  _2 = lastElement_16(D)->blockNumber;
  if (_2 >= _14)
    goto <bb 8>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  _3 = lastElement_16(D)->isLastInSequence;
  if (_3 != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  # isInterrupted_11 = PHI <1(6), 1(5), 1(7)>
  goto <bb 11>; [100.00%]

  <bb 9> [0.00%]:
  # isInterrupted_5 = PHI <isInterrupted_4(4), isInterrupted_4(7)>
  if (isInterrupted_5 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:

  <bb 11> [0.00%]:
  # _6 = PHI <1(9), 0(10), 1(8)>
  return _6;

}



;; Function directcompress(int, long, int, char const*) (_Z14directcompressiliPKc, funcdef_no=1985, decl_uid=39011, cgraph_uid=725, symbol_order=773)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
hInfile = &NONLOCAL
fileSize = &NONLOCAL
blockSize = &NONLOCAL
OutFilename = &NONLOCAL
outSize = &NULL
_ZL12OutputStdOut = NONLOCAL
OutputStdOut.199_1 = _ZL12OutputStdOut
ESCAPED = OutFilename
_78 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = OutFilename
hOutfile_160 = &NONLOCAL
hOutfile_160 = _78
CompressedSize_35 = &NULL
CompressedSize_35 = CompressedSize_107
CompressedSize_35 = CompressedSize_107
bytesLeft_36 = fileSize
bytesLeft_36 = bytesLeft_96
bytesLeft_36 = bytesLeft_96
percentComplete_38 = &NULL
percentComplete_38 = percentComplete_110
percentComplete_38 = percentComplete_110
currBlock_40 = &NULL
currBlock_40 = currBlock_108
currBlock_40 = currBlock_108
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_156 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
ESCAPED = hInfile
OutputStdOut.201_3 = _ZL12OutputStdOut
ESCAPED = hOutfile_160
stderr = NONLOCAL
stderr.202_4 = stderr
ESCAPED = stderr.202_4
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_153 = NONLOCAL
_5 = blockSize
inSize_87 = blockSize
inSize_86 = bytesLeft_36
inSize_37 = inSize_87
inSize_37 = bytesLeft_36
inSize.203_89 = inSize_37
ESCAPED = inSize.203_89
_ZSt7nothrow = NONLOCAL
ESCAPED = &_ZSt7nothrow
FileData_91 = NONLOCAL
ESCAPED = hInfile
OutputStdOut.204_6 = _ZL12OutputStdOut
ESCAPED = hOutfile_160
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
inSize.205_7 = inSize_37
ESCAPED = hInfile
ESCAPED = FileData_91
ESCAPED = inSize.205_7
_94 = NONLOCAL
rret_95 = _94
ESCAPED = FileData_91
ESCAPED = hInfile
ESCAPED = FileData_91
OutputStdOut.206_9 = _ZL12OutputStdOut
ESCAPED = hOutfile_160
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_10 = rret_95
bytesLeft_96 = bytesLeft_36
bytesLeft_96 = _10
_11 = inSize_37
_12 = _11
_12 = &NONLOCAL
_13 = _12
_13 = &NONLOCAL
_14 = _13
_15 = _14
outSize = _15
outSize.207_16 = outSize
_98 = outSize.207_16
ESCAPED = _98
ESCAPED = &_ZSt7nothrow
CompressedData_100 = NONLOCAL
ESCAPED = hInfile
ESCAPED = FileData_91
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_ZL9Verbosity = NONLOCAL
Verbosity.208_17 = _ZL9Verbosity
_ZL12BWTblockSize = NONLOCAL
BWTblockSize.209_18 = _ZL12BWTblockSize
_19 = inSize_37
ESCAPED = CompressedData_100
ESCAPED = &outSize
ESCAPED = FileData_91
ESCAPED = _19
ESCAPED = BWTblockSize.209_18
ESCAPED = Verbosity.208_17
ESCAPED = &NONLOCAL
_102 = NONLOCAL
ESCAPED = hInfile
ESCAPED = FileData_91
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _102
outSize.210_20 = outSize
_21 = outSize.210_20
ESCAPED = hOutfile_160
ESCAPED = CompressedData_100
ESCAPED = _21
_105 = NONLOCAL
ret_106 = _105
ESCAPED = hInfile
ESCAPED = FileData_91
ESCAPED = CompressedData_100
OutputStdOut.211_23 = _ZL12OutputStdOut
ESCAPED = hOutfile_160
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_24 = ret_106
CompressedSize_107 = _24
CompressedSize_107 = CompressedSize_35
currBlock_108 = currBlock_40
currBlock_108 = &NONLOCAL
percentCompleteOld_109 = percentComplete_38
_25 = currBlock_108
_25 = &NONLOCAL
_ZL18NumBlocksEstimated = NONLOCAL
NumBlocksEstimated.212_26 = _ZL18NumBlocksEstimated
percentComplete_110 = _25
percentComplete_110 = NumBlocksEstimated.212_26
_ZL9QuietMode = NONLOCAL
QuietMode.213_27 = _ZL9QuietMode
stderr.214_28 = stderr
ESCAPED = stderr.214_28
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = percentComplete_110
_154 = NONLOCAL
stderr.215_29 = stderr
ESCAPED = stderr.215_29
ESCAPED = FileData_91
ESCAPED = CompressedData_100
_30 = rret_95
inSize_117 = rret_95
ESCAPED = hInfile
OutputStdOut.216_31 = _ZL12OutputStdOut
ESCAPED = hOutfile_160
QuietMode.217_32 = _ZL9QuietMode
CompressedSize.218_33 = CompressedSize_35
stderr.219_34 = stderr
ESCAPED = stderr.219_34
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = CompressedSize.218_33
_155 = NONLOCAL
ESCAPED = &NONLOCAL
_41 = &NONLOCAL
_41 = &NONLOCAL
_41 = &NONLOCAL
_41 = &NONLOCAL
_41 = &NONLOCAL
_41 = &NONLOCAL
_41 = &NONLOCAL
_41 = &NULL
ESCAPED = _41

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL outSize _ZL18TerminateFlagMutex _ZSt7nothrow }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
STOREDANYTHING = { }
INTEGER = { ANYTHING }
hInfile = { NONLOCAL }
fileSize = { NONLOCAL } same as hInfile
blockSize = { NONLOCAL } same as hInfile
OutFilename = { NONLOCAL } same as hInfile
outSize = { NULL ESCAPED NONLOCAL } same as outSize.207_16
OutputStdOut.199_1 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL12OutputStdOut = { ESCAPED NONLOCAL }
_Z16safe_open_outputPKc = { }
_78 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_Z12handle_error8ExitFlagiPKcz = { }
hOutfile_160 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
CompressedSize_35 = { NULL ESCAPED NONLOCAL }
CompressedSize_107 = { NULL ESCAPED NONLOCAL } same as CompressedSize_35
bytesLeft_36 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
bytesLeft_96 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
percentComplete_38 = { NULL ESCAPED NONLOCAL } same as CompressedSize_35
percentComplete_110 = { NULL ESCAPED NONLOCAL } same as CompressedSize_35
currBlock_40 = { NULL NONLOCAL }
currBlock_108 = { NULL NONLOCAL } same as currBlock_40
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_156 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL13terminateFlag = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
close = { }
OutputStdOut.201_3 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
stderr.202_4 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
stderr = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
__fprintf_chk = { }
_153 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_5 = { NONLOCAL } same as hInfile
inSize_87 = { NONLOCAL } same as hInfile
inSize_86 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
inSize_37 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
inSize.203_89 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZnamRKSt9nothrow_t = { }
_ZSt7nothrow = { ESCAPED NONLOCAL }
FileData_91 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
OutputStdOut.204_6 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
inSize.205_7 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_Z7do_readiPvm = { }
_94 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
rret_95 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZdaPv = { }
OutputStdOut.206_9 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_10 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_11 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_12 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_13 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_14 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_15 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
outSize.207_16 = { NULL ESCAPED NONLOCAL }
_98 = { NULL ESCAPED NONLOCAL } same as outSize.207_16
CompressedData_100 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
Verbosity.208_17 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL9Verbosity = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
BWTblockSize.209_18 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL12BWTblockSize = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_19 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
BZ2_bzBuffToBuffCompress = { }
_102 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
outSize.210_20 = { NULL ESCAPED NONLOCAL } same as outSize.207_16
_21 = { NULL ESCAPED NONLOCAL } same as outSize.207_16
_Z8do_writeiPKvm = { }
_105 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
ret_106 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
OutputStdOut.211_23 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_24 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
percentCompleteOld_109 = { NULL ESCAPED NONLOCAL } same as CompressedSize_35
_25 = { NULL NONLOCAL } same as currBlock_40
NumBlocksEstimated.212_26 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL18NumBlocksEstimated = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
QuietMode.213_27 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL9QuietMode = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
stderr.214_28 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_154 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
stderr.215_29 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
fflush = { }
_30 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
inSize_117 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
OutputStdOut.216_31 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
QuietMode.217_32 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
CompressedSize.218_33 = { NULL ESCAPED NONLOCAL } same as CompressedSize_35
stderr.219_34 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_155 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_Z19syncSetProducerDonei = { }
_41 = { NULL NONLOCAL } same as currBlock_40


Alias information for directcompress(int, long, int, char const*)

Aliased symbols

outSize, UID D.39476, unsigned int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.11311 D.38685 D.39476 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

stderr.202_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.214_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.215_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.219_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutFilename_76(D), points-to non-local, points-to NULL, points-to vars: { }
FileData_91, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
CompressedData_100, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

directcompress(int, long, int, char const*) (int hInfile, off_t fileSize, int blockSize, const char * OutFilename)
{
  int ret;
  int D.48022;
  int D.48020;
  int D.48017;
  int D.48014;
  int percentCompleteOld;
  int ret;
  int rret;
  int currBlock;
  int hOutfile;
  int percentComplete;
  unsigned int outSize;
  off_t inSize;
  off_t bytesLeft;
  off_t CompressedSize;
  char * CompressedData;
  char * FileData;
  int OutputStdOut.199_1;
  int OutputStdOut.201_3;
  struct FILE * stderr.202_4;
  long int _5;
  int OutputStdOut.204_6;
  long unsigned int inSize.205_7;
  int OutputStdOut.206_9;
  long int _10;
  double _11;
  double _12;
  double _13;
  int _14;
  unsigned int _15;
  unsigned int outSize.207_16;
  int Verbosity.208_17;
  int BWTblockSize.209_18;
  unsigned int _19;
  unsigned int outSize.210_20;
  long unsigned int _21;
  int OutputStdOut.211_23;
  long int _24;
  int _25;
  int NumBlocksEstimated.212_26;
  int QuietMode.213_27;
  struct FILE * stderr.214_28;
  struct FILE * stderr.215_29;
  long int _30;
  int OutputStdOut.216_31;
  int QuietMode.217_32;
  long unsigned int CompressedSize.218_33;
  struct FILE * stderr.219_34;
  int _41;
  int _78;
  sizetype inSize.203_89;
  long int _94;
  sizetype _98;
  int _102;
  long int _105;
  int _153;
  int _154;
  int _155;

  <bb 2> [0.00%]:
  outSize = 0;
  OutputStdOut.199_1 = OutputStdOut;
  if (OutputStdOut.199_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _78 = safe_open_output (OutFilename_76(D));

  <bb 4> [0.00%]:
  if (_78 == -1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not create output file [%s]!\n", OutFilename_76(D));
  goto <bb 81>; [0.00%]

  <bb 6> [0.00%]:
  # hOutfile_160 = PHI <1(2), _78(4)>

  <bb 7> [0.00%]:
  # CompressedSize_35 = PHI <0(6), CompressedSize_107(74), CompressedSize_107(73)>
  # bytesLeft_36 = PHI <fileSize_74(D)(6), bytesLeft_96(74), bytesLeft_96(73)>
  # percentComplete_38 = PHI <0(6), percentComplete_110(74), percentComplete_110(73)>
  # currBlock_40 = PHI <0(6), currBlock_108(74), currBlock_108(73)>
  if (bytesLeft_36 <= 0)
    goto <bb 75>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);

  <bb 9> [100.00%]:
  ret_156 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 10> [100.00%]:
  if (ret_156 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 11> [0.00%]:
  close (hInfile_92(D));

  <bb 12> [0.00%]:
  OutputStdOut.201_3 = OutputStdOut;
  if (OutputStdOut.201_3 == 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  close (hOutfile_160);

  <bb 14> [100.00%]:
  stderr.202_4 = stderr;
  _153 = __fprintf_chk (stderr.202_4, 1, "directcompress: terminating - terminateFlag set\n");
  goto <bb 81>; [100.00%]

  <bb 15> [0.00%]:
  _5 = (long int) blockSize_85(D);
  if (_5 < bytesLeft_36)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  inSize_87 = (off_t) blockSize_85(D);
  goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  inSize_86 = bytesLeft_36;

  <bb 18> [0.00%]:
  # inSize_37 = PHI <inSize_87(16), bytesLeft_36(17)>
  inSize.203_89 = (sizetype) inSize_37;
  FileData_91 = operator new[] (inSize.203_89, &nothrow);
  if (FileData_91 == 0B)
    goto <bb 19>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 19> [0.00%]:
  close (hInfile_92(D));

  <bb 20> [0.00%]:
  OutputStdOut.204_6 = OutputStdOut;
  if (OutputStdOut.204_6 == 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  close (hOutfile_160);

  <bb 22> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (FileData)!  Aborting...\n");
  goto <bb 81>; [0.00%]

  <bb 23> [0.00%]:
  inSize.205_7 = (long unsigned int) inSize_37;
  _94 = do_read (hInfile_92(D), FileData_91, inSize.205_7);

  <bb 24> [0.00%]:
  rret_95 = (int) _94;
  if (rret_95 == 0)
    goto <bb 25>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 25> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 26>; [0.00%]
  else
    goto <bb 75>; [0.00%]

  <bb 26> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 27>; [0.00%]
  else
    goto <bb 75>; [0.00%]

  <bb 27> [0.00%]:
  operator delete[] (FileData_91);
  goto <bb 75>; [0.00%]

  <bb 28> [0.00%]:
  if (rret_95 < 0)
    goto <bb 29>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 29> [0.00%]:
  close (hInfile_92(D));

  <bb 30> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 31>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 31> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 32>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 32> [0.00%]:
  operator delete[] (FileData_91);

  <bb 33> [0.00%]:
  OutputStdOut.206_9 = OutputStdOut;
  if (OutputStdOut.206_9 == 0)
    goto <bb 34>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 34> [0.00%]:
  close (hOutfile_160);

  <bb 35> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not read from file!  Aborting...\n");
  goto <bb 81>; [0.00%]

  <bb 36> [0.00%]:
  _10 = (long int) rret_95;
  bytesLeft_96 = bytesLeft_36 - _10;
  _11 = (double) inSize_37;
  _12 = _11 * 1.0100000000000000088817841970012523233890533447265625e+0;
  _13 = _12 + 6.0e+2;
  _14 = (int) _13;
  _15 = (unsigned int) _14;
  outSize = _15;
  outSize.207_16 = outSize;
  _98 = (sizetype) outSize.207_16;
  CompressedData_100 = operator new[] (_98, &nothrow);
  if (CompressedData_100 == 0B)
    goto <bb 37>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 37> [0.00%]:
  close (hInfile_92(D));

  <bb 38> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 39>; [0.00%]
  else
    goto <bb 41>; [0.00%]

  <bb 39> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 40>; [0.00%]
  else
    goto <bb 41>; [0.00%]

  <bb 40> [0.00%]:
  operator delete[] (FileData_91);

  <bb 41> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (CompressedData)!  Aborting...\n");
  goto <bb 81>; [0.00%]

  <bb 42> [0.00%]:
  Verbosity.208_17 = Verbosity;
  BWTblockSize.209_18 = BWTblockSize;
  _19 = (unsigned int) inSize_37;
  _102 = BZ2_bzBuffToBuffCompress (CompressedData_100, &outSize, FileData_91, _19, BWTblockSize.209_18, Verbosity.208_17, 30);

  <bb 43> [0.00%]:
  if (_102 != 0)
    goto <bb 44>; [0.00%]
  else
    goto <bb 49>; [0.00%]

  <bb 44> [0.00%]:
  close (hInfile_92(D));

  <bb 45> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 46>; [0.00%]
  else
    goto <bb 48>; [0.00%]

  <bb 46> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 47>; [0.00%]
  else
    goto <bb 48>; [0.00%]

  <bb 47> [0.00%]:
  operator delete[] (FileData_91);

  <bb 48> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR during compression: %d!  Aborting...\n", _102);
  goto <bb 81>; [0.00%]

  <bb 49> [0.00%]:
  outSize.210_20 = outSize;
  _21 = (long unsigned int) outSize.210_20;
  _105 = do_write (hOutfile_160, CompressedData_100, _21);

  <bb 50> [0.00%]:
  ret_106 = (int) _105;
  if (ret_106 <= 0)
    goto <bb 51>; [0.00%]
  else
    goto <bb 61>; [0.00%]

  <bb 51> [0.00%]:
  close (hInfile_92(D));

  <bb 52> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 53>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 53> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 54>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 54> [0.00%]:
  operator delete[] (FileData_91);

  <bb 55> [0.00%]:
  if (CompressedData_100 != 0B)
    goto <bb 56>; [0.00%]
  else
    goto <bb 58>; [0.00%]

  <bb 56> [0.00%]:
  if (CompressedData_100 != 0B)
    goto <bb 57>; [0.00%]
  else
    goto <bb 58>; [0.00%]

  <bb 57> [0.00%]:
  operator delete[] (CompressedData_100);

  <bb 58> [0.00%]:
  OutputStdOut.211_23 = OutputStdOut;
  if (OutputStdOut.211_23 == 0)
    goto <bb 59>; [0.00%]
  else
    goto <bb 60>; [0.00%]

  <bb 59> [0.00%]:
  close (hOutfile_160);

  <bb 60> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not write to file!  Aborting...\n");
  goto <bb 81>; [0.00%]

  <bb 61> [0.00%]:
  _24 = (long int) ret_106;
  CompressedSize_107 = _24 + CompressedSize_35;
  currBlock_108 = currBlock_40 + 1;
  percentCompleteOld_109 = percentComplete_38;
  _25 = currBlock_108 * 100;
  NumBlocksEstimated.212_26 = NumBlocksEstimated;
  percentComplete_110 = _25 / NumBlocksEstimated.212_26;
  QuietMode.213_27 = QuietMode;
  if (QuietMode.213_27 != 1)
    goto <bb 62>; [0.00%]
  else
    goto <bb 65>; [0.00%]

  <bb 62> [0.00%]:
  if (percentComplete_38 != percentComplete_110)
    goto <bb 63>; [0.00%]
  else
    goto <bb 65>; [0.00%]

  <bb 63> [100.00%]:
  stderr.214_28 = stderr;
  _154 = __fprintf_chk (stderr.214_28, 1, "Completed: %d%%             \r", percentComplete_110);

  <bb 64> [100.00%]:
  stderr.215_29 = stderr;
  fflush (stderr.215_29);

  <bb 65> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 66>; [0.00%]
  else
    goto <bb 69>; [0.00%]

  <bb 66> [0.00%]:
  if (FileData_91 != 0B)
    goto <bb 67>; [0.00%]
  else
    goto <bb 68>; [0.00%]

  <bb 67> [0.00%]:
  operator delete[] (FileData_91);

  <bb 68> [0.00%]:

  <bb 69> [0.00%]:
  if (CompressedData_100 != 0B)
    goto <bb 70>; [0.00%]
  else
    goto <bb 73>; [0.00%]

  <bb 70> [0.00%]:
  if (CompressedData_100 != 0B)
    goto <bb 71>; [0.00%]
  else
    goto <bb 72>; [0.00%]

  <bb 71> [0.00%]:
  operator delete[] (CompressedData_100);

  <bb 72> [0.00%]:

  <bb 73> [0.00%]:
  _30 = (long int) rret_95;
  if (_30 != inSize_37)
    goto <bb 74>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 74> [0.00%]:
  inSize_117 = (off_t) rret_95;
  goto <bb 7>; [0.00%]

  <bb 75> [0.00%]:
  close (hInfile_92(D));

  <bb 76> [0.00%]:
  OutputStdOut.216_31 = OutputStdOut;
  if (OutputStdOut.216_31 == 0)
    goto <bb 77>; [0.00%]
  else
    goto <bb 78>; [0.00%]

  <bb 77> [0.00%]:
  close (hOutfile_160);

  <bb 78> [0.00%]:
  QuietMode.217_32 = QuietMode;
  if (QuietMode.217_32 != 1)
    goto <bb 79>; [0.00%]
  else
    goto <bb 80>; [0.00%]

  <bb 79> [100.00%]:
  CompressedSize.218_33 = (long unsigned int) CompressedSize_35;
  stderr.219_34 = stderr;
  _155 = __fprintf_chk (stderr.219_34, 1, "    Output Size: %lu bytes\n", CompressedSize.218_33);

  <bb 80> [0.00%]:
  syncSetProducerDone (1);

  <bb 81> [0.00%]:
  # _41 = PHI <-1(5), -1(14), -1(22), -1(35), -1(41), -1(48), -1(60), 0(80)>
  outSize ={v} {CLOBBER};
  return _41;

<L102> [0.00%]:
  outSize ={v} {CLOBBER};
  resx 1

}



;; Function bufread(int, char*, unsigned long) (_Z7bufreadiPcm, funcdef_no=1987, decl_uid=39048, cgraph_uid=727, symbol_order=775)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
hf = &NONLOCAL
buf = &NONLOCAL
bsize = &NONLOCAL
rsize_12 = bsize
buf_5 = buf
buf_5 = buf_21
bufr_6 = &NULL
bufr_6 = bufr_19
rsize_7 = rsize_12
rsize_7 = rsize_20
_1 = rsize_7
CALLUSED(20) = CALLUSED(20) + UNKNOWN
CALLUSED(20) = *CALLUSED(20) + UNKNOWN
CALLUSED(20) = buf_5
CALLUSED(20) = &NULL
_25 = CALLUSED(20)
_25 = NONLOCAL
callarg(24) = _1
_26 = callarg(24) + UNKNOWN
_26 = &NONLOCAL
ESCAPED = hf
ESCAPED = buf_5
ESCAPED = _1
ESCAPED = _25
_27 = NONLOCAL
ESCAPED = hf
ESCAPED = buf_5
ESCAPED = _1
ESCAPED = _25
_28 = NONLOCAL
ESCAPED = hf
ESCAPED = buf_5
ESCAPED = _1
_29 = NONLOCAL
_30 = _27
_30 = _28
_30 = _29
ret_18 = _30
_24 = ret_18
_23 = bufr_6
_3 = ret_18
bufr_19 = _3
bufr_19 = bufr_6
_22 = bsize
rsize_20 = rsize_7
rsize_20 = ret_18
_4 = ret_18
buf_21 = buf_5
_8 = _24
_8 = _23
_8 = _22
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as rsize_7
STOREDANYTHING = { }
INTEGER = { ANYTHING }
hf = { NONLOCAL }
buf = { NONLOCAL } same as hf
bsize = { NONLOCAL } same as hf
rsize_12 = { NONLOCAL } same as hf
buf_5 = { NONLOCAL } same as hf
buf_21 = { NONLOCAL } same as hf
bufr_6 = { NULL ESCAPED NONLOCAL }
bufr_19 = { NULL ESCAPED NONLOCAL } same as bufr_6
rsize_7 = { ESCAPED NONLOCAL }
rsize_20 = { ESCAPED NONLOCAL } same as rsize_7
_1 = { ESCAPED NONLOCAL } same as rsize_7
__builtin_object_size = { }
CALLUSED(20) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(21) = { }
_25 = { NULL ESCAPED NONLOCAL }
__builtin_constant_p = { }
callarg(24) = { ESCAPED NONLOCAL } same as rsize_7
_26 = { ESCAPED NONLOCAL }
__read_chk = { }
_27 = { ESCAPED NONLOCAL } same as rsize_7
*__read_chk = { }
_28 = { ESCAPED NONLOCAL } same as rsize_7
*read = { }
_29 = { ESCAPED NONLOCAL } same as rsize_7
_30 = { ESCAPED NONLOCAL } same as rsize_7
ret_18 = { ESCAPED NONLOCAL } same as rsize_7
_24 = { ESCAPED NONLOCAL } same as rsize_7
_23 = { NULL ESCAPED NONLOCAL } same as bufr_6
_3 = { ESCAPED NONLOCAL } same as rsize_7
_22 = { NONLOCAL } same as hf
_4 = { ESCAPED NONLOCAL } same as rsize_7
_8 = { NULL ESCAPED NONLOCAL } same as bufr_6


Alias information for bufread(int, char*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

buf_5, points-to non-local, points-to NULL, points-to vars: { }
buf_13(D), points-to non-local, points-to NULL, points-to vars: { }
buf_21, points-to non-local, points-to NULL, points-to vars: { }

bufread(int, char*, unsigned long) (int hf, char * buf, size_t bsize)
{
  ssize_t D.48027;
  int rsize;
  int ret;
  size_t bufr;
  long unsigned int _1;
  long unsigned int _3;
  sizetype _4;
  ssize_t _8;
  ssize_t _22;
  ssize_t _23;
  ssize_t _24;
  long unsigned int _25;
  int _26;
  long int _27;
  long int _28;
  long int _29;
  long int _30;

  <bb 2> [0.00%]:
  rsize_12 = (int) bsize_11(D);

  <bb 3> [100.00%]:
  # buf_5 = PHI <buf_13(D)(2), buf_21(15)>
  # bufr_6 = PHI <0(2), bufr_19(15)>
  # rsize_7 = PHI <rsize_12(2), rsize_20(15)>
  _1 = (long unsigned int) rsize_7;
  _25 = __builtin_object_size (buf_5, 0);
  if (_25 != 18446744073709551615)
    goto <bb 4>; [79.76%]
  else
    goto <bb 8>; [20.24%]

  <bb 4> [79.76%]:
  _26 = __builtin_constant_p (_1);
  if (_26 == 0)
    goto <bb 5>; [29.56%]
  else
    goto <bb 6>; [70.44%]

  <bb 5> [23.58%]:
  _27 = __read_chk (hf_15(D), buf_5, _1, _25);
  goto <bb 9>; [100.00%]

  <bb 6> [56.18%]:
  if (_1 > _25)
    goto <bb 7>; [29.56%]
  else
    goto <bb 8>; [70.44%]

  <bb 7> [16.61%]:
  _28 = *__read_chk (hf_15(D), buf_5, _1, _25);
  goto <bb 9>; [100.00%]

  <bb 8> [59.82%]:
  _29 = *read (hf_15(D), buf_5, _1);

  <bb 9> [100.00%]:
  # _30 = PHI <_27(5), _28(7), _29(8)>
  ret_18 = (int) _30;
  if (ret_18 < 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  _24 = (ssize_t) ret_18;
  goto <bb 16>; [0.00%]

  <bb 11> [0.00%]:
  if (ret_18 == 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  _23 = (ssize_t) bufr_6;
  goto <bb 16>; [0.00%]

  <bb 13> [0.00%]:
  _3 = (long unsigned int) ret_18;
  bufr_19 = _3 + bufr_6;
  if (bsize_11(D) == bufr_19)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  _22 = (ssize_t) bsize_11(D);
  goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  rsize_20 = rsize_7 - ret_18;
  _4 = (sizetype) ret_18;
  buf_21 = buf_5 + _4;
  goto <bb 3>; [0.00%]

  <bb 16> [0.00%]:
  # _8 = PHI <_24(10), _23(12), _22(14)>
  return _8;

}



;; Function producer(int, int, queue*) (_Z8produceriiP5queue, funcdef_no=1988, decl_uid=39018, cgraph_uid=728, symbol_order=776)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
hInfile = &NONLOCAL
blockSize = &NONLOCAL
fifo = &NONLOCAL
_ZL23ProgressIndicatorsMutex = NONLOCAL
ESCAPED = &_ZL23ProgressIndicatorsMutex
_ZL9NumBlocks = NONLOCAL
_ZL9NumBlocks = &NULL
ESCAPED = &NULL
_ZL15InBytesProduced = NONLOCAL
_ZL15InBytesProduced = &NULL
ESCAPED = &NULL
ESCAPED = &_ZL23ProgressIndicatorsMutex
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_95 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
ESCAPED = hInfile
inSize_44 = blockSize
ESCAPED = inSize_44
_ZSt7nothrow = NONLOCAL
ESCAPED = &_ZSt7nothrow
FileData_48 = NONLOCAL
ESCAPED = hInfile
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = hInfile
ESCAPED = FileData_48
ESCAPED = inSize_44
_51 = NONLOCAL
ret_52 = _51
ESCAPED = FileData_48
ESCAPED = hInfile
ESCAPED = FileData_48
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_3 = ret_52
inSize_53 = ret_52
inSize_23 = inSize_44
inSize_23 = inSize_53
_4 = *fifo + 448
ESCAPED = _4
_5 = *fifo + 320
_6 = *fifo + 448
_7 = *fifo + 512
ESCAPED = _7
ESCAPED = _6
ESCAPED = &_ZL18TerminateFlagMutex
ret_96 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
_9 = *fifo + 448
ESCAPED = _9
ESCAPED = hInfile
ESCAPED = &NONLOCAL
ESCAPED = &_ZSt7nothrow
_64 = NONLOCAL
NumBlocks.278_10 = _ZL9NumBlocks
_11 = inSize_23
*_64 = FileData_48
*_64 + 64 = _11
*_64 + 96 = NumBlocks.278_10
derefaddrtmp(44) = &NULL
*_64 + 128 = derefaddrtmp(44)
derefaddrtmp(45) = &NULL
*_64 + 160 = derefaddrtmp(45)
derefaddrtmp(46) = &NONLOCAL
*_64 + 192 = derefaddrtmp(46)
derefaddrtmp(47) = &NULL
*_64 + 256 = derefaddrtmp(47)
ESCAPED = hInfile
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = fifo
ESCAPED = _64
_12 = *fifo + 576
ESCAPED = _12
ESCAPED = &_ZL23ProgressIndicatorsMutex
NumBlocks.279_13 = _ZL9NumBlocks
_14 = NumBlocks.279_13
_14 = &NONLOCAL
_ZL9NumBlocks = _14
ESCAPED = _14
InBytesProduced.280_15 = _ZL15InBytesProduced
InBytesProduced.281_16 = InBytesProduced.280_15
_17 = InBytesProduced.281_16
_17 = inSize_23
_18 = _17
_ZL15InBytesProduced = _18
ESCAPED = _18
ESCAPED = &_ZL23ProgressIndicatorsMutex
_19 = *fifo + 448
ESCAPED = _19
ESCAPED = hInfile
ESCAPED = &NONLOCAL
_20 = *fifo + 448
ESCAPED = _20
_21 = *fifo + 576
ESCAPED = _21
_22 = *fifo + 448
ESCAPED = _22
_24 = &NONLOCAL
_24 = &NONLOCAL
_24 = &NONLOCAL
_24 = &NONLOCAL
_24 = &NONLOCAL
_24 = &NULL
ESCAPED = _24

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZL23ProgressIndicatorsMutex _ZL18TerminateFlagMutex _ZSt7nothrow }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
STOREDANYTHING = { }
INTEGER = { ANYTHING }
hInfile = { NONLOCAL }
blockSize = { NONLOCAL } same as hInfile
fifo = { NONLOCAL } same as hInfile
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL23ProgressIndicatorsMutex = { ESCAPED NONLOCAL }
_ZL9NumBlocks = { NULL ESCAPED NONLOCAL }
_ZL15InBytesProduced = { NULL ESCAPED NONLOCAL } same as _ZL9NumBlocks
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_95 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL13terminateFlag = { ESCAPED NONLOCAL }
close = { }
inSize_44 = { NONLOCAL } same as hInfile
_ZnamRKSt9nothrow_t = { }
_ZSt7nothrow = { ESCAPED NONLOCAL }
FileData_48 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_Z12handle_error8ExitFlagiPKcz = { }
_Z7bufreadiPcm = { }
_51 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
ret_52 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZdaPv = { }
_3 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
inSize_53 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
inSize_23 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_Z14safe_cond_waitP14pthread_cond_tP15pthread_mutex_t = { }
ret_96 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_9 = { ESCAPED NONLOCAL }
pthread_mutex_unlock = { }
_ZnwmRKSt9nothrow_t = { }
_64 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
NumBlocks.278_10 = { NULL ESCAPED NONLOCAL } same as _ZL9NumBlocks
_11 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
derefaddrtmp(44) = { NULL }
derefaddrtmp(45) = { NULL } same as derefaddrtmp(44)
derefaddrtmp(46) = { NONLOCAL } same as hInfile
derefaddrtmp(47) = { NULL } same as derefaddrtmp(44)
_ZN5queue3addEP7outBuff = { }
_12 = { ESCAPED NONLOCAL }
_Z16safe_cond_signalP14pthread_cond_t = { }
NumBlocks.279_13 = { NULL ESCAPED NONLOCAL } same as _ZL9NumBlocks
_14 = { NULL ESCAPED NONLOCAL } same as _ZL9NumBlocks
InBytesProduced.280_15 = { NULL ESCAPED NONLOCAL } same as _ZL9NumBlocks
InBytesProduced.281_16 = { NULL ESCAPED NONLOCAL } same as _ZL9NumBlocks
_17 = { NULL ESCAPED NONLOCAL } same as _ZL9NumBlocks
_18 = { NULL ESCAPED NONLOCAL } same as _ZL9NumBlocks
_19 = { ESCAPED NONLOCAL }
_Z19syncSetProducerDonei = { }
_20 = { ESCAPED NONLOCAL }
_21 = { ESCAPED NONLOCAL }
_Z19safe_cond_broadcastP14pthread_cond_t = { }
_22 = { ESCAPED NONLOCAL }
_24 = { NULL NONLOCAL }


Alias information for producer(int, int, queue*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.11311 D.38685 D.38686 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FileData_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fifo_54(D), points-to non-local, points-to NULL, points-to vars: { }
_64, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

producer(int, int, queue*) (int hInfile, int blockSize, struct queue * fifo)
{
  int ret;
  int D.48032;
  int ret;
  int D.48030;
  struct outBuff * queueElement;
  int ret;
  size_t inSize;
  char * FileData;
  long unsigned int _3;
  union pthread_mutex_t * _4;
  int _5;
  union pthread_mutex_t * _6;
  union pthread_cond_t * _7;
  union pthread_mutex_t * _9;
  int NumBlocks.278_10;
  unsigned int _11;
  union pthread_cond_t * _12;
  int NumBlocks.279_13;
  int _14;
  long int InBytesProduced.280_15;
  long unsigned int InBytesProduced.281_16;
  long unsigned int _17;
  long int _18;
  union pthread_mutex_t * _19;
  union pthread_mutex_t * _20;
  union pthread_cond_t * _21;
  union pthread_mutex_t * _22;
  int _24;
  long int _51;
  void * _64;

  <bb 2> [0.00%]:
  safe_mutex_lock (&ProgressIndicatorsMutex);
  NumBlocks = 0;
  InBytesProduced = 0;
  safe_mutex_unlock (&ProgressIndicatorsMutex);

  <bb 3> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);
  ret_95 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);
  if (ret_95 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  close (hInfile_49(D));
  goto <bb 28>; [0.00%]

  <bb 5> [0.00%]:
  inSize_44 = (size_t) blockSize_43(D);
  FileData_48 = operator new[] (inSize_44, &nothrow);
  if (FileData_48 == 0B)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  close (hInfile_49(D));
  handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (FileData)!  Aborting...\n");
  goto <bb 28>; [0.00%]

  <bb 7> [0.00%]:
  _51 = bufread (hInfile_49(D), FileData_48, inSize_44);
  ret_52 = (int) _51;
  if (ret_52 == 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 8> [0.00%]:
  if (FileData_48 != 0B)
    goto <bb 9>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 9> [0.00%]:
  if (FileData_48 != 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 10> [0.00%]:
  operator delete[] (FileData_48);
  goto <bb 27>; [0.00%]

  <bb 11> [0.00%]:
  if (ret_52 < 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 12> [0.00%]:
  close (hInfile_49(D));
  if (FileData_48 != 0B)
    goto <bb 13>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 13> [0.00%]:
  if (FileData_48 != 0B)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  operator delete[] (FileData_48);

  <bb 15> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not read from file!  Aborting...\n");
  goto <bb 28>; [0.00%]

  <bb 16> [0.00%]:
  _3 = (long unsigned int) ret_52;
  if (blockSize_43(D) != ret_52)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  inSize_53 = (size_t) ret_52;

  <bb 18> [0.00%]:
  # inSize_23 = PHI <inSize_44(16), inSize_53(17)>
  _4 = fifo_54(D)->mut;
  safe_mutex_lock (_4);

  <bb 19> [0.00%]:
  _5 = fifo_54(D)->full;
  if (_5 == 0)
    goto <bb 22>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [100.00%]:
  _6 = fifo_54(D)->mut;
  _7 = fifo_54(D)->notFull;
  safe_cond_wait (_7, _6);
  safe_mutex_lock (&TerminateFlagMutex);
  ret_96 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);
  if (ret_96 != 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 21> [0.00%]:
  _9 = fifo_54(D)->mut;
  pthread_mutex_unlock (_9);
  close (hInfile_49(D));
  goto <bb 28>; [0.00%]

  <bb 22> [0.00%]:
  _64 = operator new (40, &nothrow);
  if (_64 != 0B)
    goto <bb 23>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 23> [100.00%]:
  NumBlocks.278_10 = NumBlocks;
  _11 = (unsigned int) inSize_23;
  MEM[(struct  &)_64] ={v} {CLOBBER};
  MEM[(struct outBuff *)_64].buf = FileData_48;
  MEM[(struct outBuff *)_64].bufSize = _11;
  MEM[(struct outBuff *)_64].blockNumber = NumBlocks.278_10;
  MEM[(struct outBuff *)_64].sequenceNumber = 0;
  MEM[(struct outBuff *)_64].inSize = 0;
  MEM[(struct outBuff *)_64].isLastInSequence = 1;
  MEM[(struct outBuff *)_64].next = 0B;

  <bb 24> [0.00%]:
  if (_64 == 0B)
    goto <bb 25>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 25> [0.00%]:
  close (hInfile_49(D));
  handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (queueElement)!  Aborting...\n");
  goto <bb 28>; [0.00%]

  <bb 26> [0.00%]:
  queue::add (fifo_54(D), _64);
  _12 = fifo_54(D)->notEmpty;
  safe_cond_signal (_12);
  safe_mutex_lock (&ProgressIndicatorsMutex);
  NumBlocks.279_13 = NumBlocks;
  _14 = NumBlocks.279_13 + 1;
  NumBlocks = _14;
  InBytesProduced.280_15 = InBytesProduced;
  InBytesProduced.281_16 = (long unsigned int) InBytesProduced.280_15;
  _17 = InBytesProduced.281_16 + inSize_23;
  _18 = (long int) _17;
  InBytesProduced = _18;
  safe_mutex_unlock (&ProgressIndicatorsMutex);
  _19 = fifo_54(D)->mut;
  safe_mutex_unlock (_19);
  goto <bb 3>; [0.00%]

  <bb 27> [0.00%]:
  close (hInfile_49(D));
  syncSetProducerDone (1);
  _20 = fifo_54(D)->mut;
  safe_mutex_lock (_20);
  _21 = fifo_54(D)->notEmpty;
  safe_cond_broadcast (_21);
  _22 = fifo_54(D)->mut;
  safe_mutex_unlock (_22);

  <bb 28> [0.00%]:
  # _24 = PHI <-1(4), -1(6), -1(15), -1(21), -1(25), 0(27)>
  return _24;

}



;; Function mutexesInit() (_Z11mutexesInitv, funcdef_no=1990, decl_uid=39019, cgraph_uid=730, symbol_order=778)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
_ZSt7nothrow = NONLOCAL
ESCAPED = &_ZSt7nothrow
_1 = NONLOCAL
_ZL8OutMutex = NONLOCAL
_ZL8OutMutex = _1
ESCAPED = _1
OutMutex.299_2 = _ZL8OutMutex
stderr = NONLOCAL
stderr.300_3 = stderr
ESCAPED = stderr.300_3
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_23 = NONLOCAL
OutMutex.301_4 = _ZL8OutMutex
ESCAPED = OutMutex.301_4
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &_ZSt7nothrow
_5 = NONLOCAL
_ZL17ProducerDoneMutex = NONLOCAL
_ZL17ProducerDoneMutex = _5
ESCAPED = _5
ProducerDoneMutex.302_6 = _ZL17ProducerDoneMutex
stderr.303_7 = stderr
ESCAPED = stderr.303_7
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_24 = NONLOCAL
ProducerDoneMutex.304_8 = _ZL17ProducerDoneMutex
ESCAPED = ProducerDoneMutex.304_8
ESCAPED = &NULL
_9 = &NONLOCAL
_9 = &NONLOCAL
_9 = &NULL
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZSt7nothrow }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZnwmRKSt9nothrow_t = { }
_ZSt7nothrow = { ESCAPED NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_ZL8OutMutex = { ESCAPED NONLOCAL } same as _1
OutMutex.299_2 = { ESCAPED NONLOCAL } same as _1
stderr.300_3 = { ESCAPED NONLOCAL } same as _1
stderr = { ESCAPED NONLOCAL } same as _1
__fprintf_chk = { }
_23 = { ESCAPED NONLOCAL } same as _1
OutMutex.301_4 = { ESCAPED NONLOCAL } same as _1
pthread_mutex_init = { }
_5 = { ESCAPED NONLOCAL } same as _1
_ZL17ProducerDoneMutex = { ESCAPED NONLOCAL } same as _1
ProducerDoneMutex.302_6 = { ESCAPED NONLOCAL } same as _1
stderr.303_7 = { ESCAPED NONLOCAL } same as _1
_24 = { ESCAPED NONLOCAL } same as _1
ProducerDoneMutex.304_8 = { ESCAPED NONLOCAL } same as _1
_9 = { NULL NONLOCAL }


Alias information for mutexesInit()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.11311 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.299_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.300_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.301_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
ProducerDoneMutex.302_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.303_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
ProducerDoneMutex.304_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

mutexesInit() ()
{
  int D.48047;
  int D.48044;
  void * _1;
  union pthread_mutex_t * OutMutex.299_2;
  struct FILE * stderr.300_3;
  union pthread_mutex_t * OutMutex.301_4;
  void * _5;
  union pthread_mutex_t * ProducerDoneMutex.302_6;
  struct FILE * stderr.303_7;
  union pthread_mutex_t * ProducerDoneMutex.304_8;
  int _9;
  int _23;
  int _24;

  <bb 2> [0.00%]:
  _1 = operator new (40, &nothrow);
  OutMutex = _1;
  OutMutex.299_2 = OutMutex;
  if (OutMutex.299_2 == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  stderr.300_3 = stderr;
  _23 = __fprintf_chk (stderr.300_3, 1, "pbzip2: *ERROR: Could not allocate memory (OutMutex)!  Aborting...\n");
  goto <bb 7>; [0.00%]

  <bb 4> [0.00%]:
  OutMutex.301_4 = OutMutex;
  pthread_mutex_init (OutMutex.301_4, 0B);
  _5 = operator new (40, &nothrow);
  ProducerDoneMutex = _5;
  ProducerDoneMutex.302_6 = ProducerDoneMutex;
  if (ProducerDoneMutex.302_6 == 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [100.00%]:
  stderr.303_7 = stderr;
  _24 = __fprintf_chk (stderr.303_7, 1, "pbzip2: *ERROR: Could not allocate memory (ProducerDoneMutex)!  Aborting...\n");
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  ProducerDoneMutex.304_8 = ProducerDoneMutex;
  pthread_mutex_init (ProducerDoneMutex.304_8, 0B);

  <bb 7> [0.00%]:
  # _9 = PHI <1(3), 1(5), 0(6)>
  return _9;

}



;; Function mutexesDelete() (_Z13mutexesDeletev, funcdef_no=1991, decl_uid=39020, cgraph_uid=731, symbol_order=779)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZL8OutMutex = NONLOCAL
OutMutex.305_1 = _ZL8OutMutex
OutMutex.306_2 = _ZL8OutMutex
ESCAPED = OutMutex.306_2
OutMutex.307_3 = _ZL8OutMutex
ESCAPED = OutMutex.307_3
ESCAPED = &NONLOCAL
_ZL8OutMutex = &NULL
ESCAPED = &NULL
_ZL17ProducerDoneMutex = NONLOCAL
ProducerDoneMutex.308_4 = _ZL17ProducerDoneMutex
ProducerDoneMutex.309_5 = _ZL17ProducerDoneMutex
ESCAPED = ProducerDoneMutex.309_5
ProducerDoneMutex.310_6 = _ZL17ProducerDoneMutex
ESCAPED = ProducerDoneMutex.310_6
ESCAPED = &NONLOCAL
_ZL17ProducerDoneMutex = &NULL
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
OutMutex.305_1 = { NULL ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL8OutMutex = { NULL ESCAPED NONLOCAL }
OutMutex.306_2 = { NULL ESCAPED NONLOCAL } same as _ZL8OutMutex
pthread_mutex_destroy = { }
OutMutex.307_3 = { NULL ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZdlPvm = { }
ProducerDoneMutex.308_4 = { NULL ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL17ProducerDoneMutex = { NULL ESCAPED NONLOCAL } same as _ZL8OutMutex
ProducerDoneMutex.309_5 = { NULL ESCAPED NONLOCAL } same as _ZL8OutMutex
ProducerDoneMutex.310_6 = { NULL ESCAPED NONLOCAL } same as _ZL8OutMutex


Alias information for mutexesDelete()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

OutMutex.305_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.306_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.307_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
ProducerDoneMutex.308_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
ProducerDoneMutex.309_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
ProducerDoneMutex.310_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

mutexesDelete() ()
{
  union pthread_mutex_t * OutMutex.305_1;
  union pthread_mutex_t * OutMutex.306_2;
  union pthread_mutex_t * OutMutex.307_3;
  union pthread_mutex_t * ProducerDoneMutex.308_4;
  union pthread_mutex_t * ProducerDoneMutex.309_5;
  union pthread_mutex_t * ProducerDoneMutex.310_6;

  <bb 2> [0.00%]:
  OutMutex.305_1 = OutMutex;
  if (OutMutex.305_1 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  OutMutex.306_2 = OutMutex;
  pthread_mutex_destroy (OutMutex.306_2);
  OutMutex.307_3 = OutMutex;
  operator delete (OutMutex.307_3, 40);
  OutMutex = 0B;

  <bb 4> [0.00%]:
  ProducerDoneMutex.308_4 = ProducerDoneMutex;
  if (ProducerDoneMutex.308_4 != 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  ProducerDoneMutex.309_5 = ProducerDoneMutex;
  pthread_mutex_destroy (ProducerDoneMutex.309_5);
  ProducerDoneMutex.310_6 = ProducerDoneMutex;
  operator delete (ProducerDoneMutex.310_6, 40);
  ProducerDoneMutex = 0B;

  <bb 6> [0.00%]:
  return;

}



;; Function queueInit(int) (_Z9queueIniti, funcdef_no=1992, decl_uid=39022, cgraph_uid=732, symbol_order=780)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
queueSize = &NONLOCAL
_ZL9QUEUESIZE = NONLOCAL
_ZL9QUEUESIZE = queueSize
ESCAPED = queueSize
ESCAPED = &NONLOCAL
_ZSt7nothrow = NONLOCAL
ESCAPED = &_ZSt7nothrow
_47 = NONLOCAL
derefaddrtmp(13) = &NULL
*_47 + 128 = derefaddrtmp(13)
derefaddrtmp(14) = &NULL
*_47 + 704 = derefaddrtmp(14)
_52 = queueSize
iftmp.313_54 = _52
iftmp.313_54 = &NONLOCAL
ESCAPED = iftmp.313_54
ESCAPED = &_ZSt7nothrow
_3 = NONLOCAL
*_47 = _3
_5 = *_47
_7 = queueSize
*_47 + 64 = _7
derefaddrtmp(22) = &NONLOCAL
*_47 + 352 = derefaddrtmp(22)
derefaddrtmp(23) = &NULL
*_47 + 320 = derefaddrtmp(23)
derefaddrtmp(24) = &NULL
*_47 + 192 = derefaddrtmp(24)
derefaddrtmp(25) = &NULL
*_47 + 256 = derefaddrtmp(25)
derefaddrtmp(26) = &NULL
*_47 + 128 = derefaddrtmp(26)
derefaddrtmp(27) = &NULL
*_47 + 704 = derefaddrtmp(27)
derefaddrtmp(28) = &NULL
*_47 + 384 = derefaddrtmp(28)
derefaddrtmp(29) = &NONLOCAL
*_47 + 416 = derefaddrtmp(29)
derefaddrtmp(30) = &NULL
*_47 + 448 = derefaddrtmp(30)
ESCAPED = &NONLOCAL
ESCAPED = &_ZSt7nothrow
_11 = NONLOCAL
*_47 + 448 = _11
_13 = *_47 + 448
_15 = *_47 + 448
ESCAPED = _15
ESCAPED = &NULL
derefaddrtmp(35) = &NULL
*_47 + 512 = derefaddrtmp(35)
ESCAPED = &NONLOCAL
ESCAPED = &_ZSt7nothrow
_18 = NONLOCAL
*_47 + 512 = _18
_20 = *_47 + 512
_22 = *_47 + 512
ESCAPED = _22
ESCAPED = &NULL
derefaddrtmp(40) = &NULL
*_47 + 576 = derefaddrtmp(40)
ESCAPED = &NONLOCAL
ESCAPED = &_ZSt7nothrow
_25 = NONLOCAL
*_47 + 576 = _25
_27 = *_47 + 576
_29 = *_47 + 576
ESCAPED = _29
ESCAPED = &NULL
derefaddrtmp(44) = &NULL
*_47 + 640 = derefaddrtmp(44)
_72 = queueSize
iftmp.331_74 = _72
iftmp.331_74 = &NONLOCAL
ESCAPED = iftmp.331_74
ESCAPED = &_ZSt7nothrow
_32 = NONLOCAL
*_47 + 640 = _32
_34 = *_47 + 640
_ZL21notTooMuchNumBuffered = NONLOCAL
_ZL21notTooMuchNumBuffered = &NULL
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &_ZSt7nothrow
_35 = NONLOCAL
_ZL21notTooMuchNumBuffered = _35
ESCAPED = _35
notTooMuchNumBuffered.334_36 = _ZL21notTooMuchNumBuffered
notTooMuchNumBuffered.335_37 = _ZL21notTooMuchNumBuffered
ESCAPED = notTooMuchNumBuffered.335_37
ESCAPED = &NULL
_39 = &NULL
_39 = &NULL
_39 = &NULL
_39 = &NULL
_39 = &NULL
_39 = &NULL
_39 = &NULL
_39 = _47
ESCAPED = _39

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZSt7nothrow } same as _5
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL9QUEUESIZE
STOREDANYTHING = { }
INTEGER = { ANYTHING }
queueSize = { NONLOCAL }
_ZL9QUEUESIZE = { ESCAPED NONLOCAL }
_ZnwmRKSt9nothrow_t = { }
_ZSt7nothrow = { ESCAPED NONLOCAL }
_47 = { ESCAPED NONLOCAL } same as _ZL9QUEUESIZE
derefaddrtmp(13) = { NULL }
derefaddrtmp(14) = { NULL } same as derefaddrtmp(13)
_52 = { NONLOCAL } same as queueSize
iftmp.313_54 = { NONLOCAL } same as queueSize
_ZnamRKSt9nothrow_t = { }
_3 = { ESCAPED NONLOCAL } same as _ZL9QUEUESIZE
_5 = { NULL ESCAPED NONLOCAL _ZSt7nothrow }
__cxa_throw_bad_array_new_length = { }
_7 = { NONLOCAL } same as queueSize
derefaddrtmp(22) = { NONLOCAL } same as queueSize
derefaddrtmp(23) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(24) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(25) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(26) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(27) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(28) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(29) = { NONLOCAL } same as queueSize
derefaddrtmp(30) = { NULL } same as derefaddrtmp(13)
_11 = { ESCAPED NONLOCAL } same as _ZL9QUEUESIZE
_13 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL }
pthread_mutex_init = { }
derefaddrtmp(35) = { NULL } same as derefaddrtmp(13)
_18 = { ESCAPED NONLOCAL } same as _ZL9QUEUESIZE
_20 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL }
pthread_cond_init = { }
derefaddrtmp(40) = { NULL } same as derefaddrtmp(13)
_25 = { ESCAPED NONLOCAL } same as _ZL9QUEUESIZE
_27 = { ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL }
derefaddrtmp(44) = { NULL } same as derefaddrtmp(13)
_72 = { NONLOCAL } same as queueSize
iftmp.331_74 = { NONLOCAL } same as queueSize
_32 = { ESCAPED NONLOCAL } same as _ZL9QUEUESIZE
_34 = { ESCAPED NONLOCAL }
_ZL21notTooMuchNumBuffered = { NULL ESCAPED NONLOCAL }
_35 = { ESCAPED NONLOCAL } same as _ZL9QUEUESIZE
notTooMuchNumBuffered.334_36 = { NULL ESCAPED NONLOCAL } same as _ZL21notTooMuchNumBuffered
notTooMuchNumBuffered.335_37 = { NULL ESCAPED NONLOCAL } same as _ZL21notTooMuchNumBuffered
_39 = { NULL ESCAPED NONLOCAL } same as _ZL21notTooMuchNumBuffered


Alias information for queueInit(int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.11311 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.11311 } (nonlocal, escaped, interposable)
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.334_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.335_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_47, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

queueInit(int) (int queueSize)
{
  struct queue * q;
  void * _3;
  struct ElementType * * _5;
  long int _7;
  void * _11;
  union pthread_mutex_t * _13;
  union pthread_mutex_t * _15;
  void * _18;
  union pthread_cond_t * _20;
  union pthread_cond_t * _22;
  void * _25;
  union pthread_cond_t * _27;
  union pthread_cond_t * _29;
  void * _32;
  pthread_t * _34;
  void * _35;
  union pthread_cond_t * notTooMuchNumBuffered.334_36;
  union pthread_cond_t * notTooMuchNumBuffered.335_37;
  struct queue * _39;
  void * _47;
  sizetype _52;
  size_t iftmp.313_54;
  sizetype _72;
  size_t iftmp.331_74;

  <bb 2> [0.00%]:
  QUEUESIZE = queueSize_44(D);
  _47 = operator new (96, &nothrow);
  if (_47 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  MEM[(struct  &)_47] ={v} {CLOBBER};
  MEM[(struct queue *)_47].count = 0;
  MEM[(struct queue *)_47].lastElement = 0B;

  <bb 4> [0.00%]:
  if (_47 == 0B)
    goto <bb 16>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _52 = (sizetype) queueSize_44(D);
  if (_52 <= 1152921504606846975)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  iftmp.313_54 = _52 * 8;
  _3 = operator new[] (iftmp.313_54, &nothrow);
  MEM[(struct queue *)_47].qData = _3;
  _5 = MEM[(struct queue *)_47].qData;
  if (_5 == 0B)
    goto <bb 16>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  __cxa_throw_bad_array_new_length ();

  <bb 8> [100.00%]:
  _7 = (long int) queueSize_44(D);
  MEM[(struct queue *)_47].size = _7;
  MEM[(struct queue *)_47].empty = 1;
  MEM[(struct queue *)_47].full = 0;
  MEM[(struct queue *)_47].head = 0;
  MEM[(struct queue *)_47].tail = 0;
  MEM[(struct queue *)_47].count = 0;
  MEM[(struct queue *)_47].lastElement = 0B;
  MEM[(struct queue *)_47].topLevelFull = 0;
  MEM[(struct queue *)_47].topLevelEmpty = 1;
  MEM[(struct queue *)_47].mut = 0B;
  _11 = operator new (40, &nothrow);
  MEM[(struct queue *)_47].mut = _11;
  _13 = MEM[(struct queue *)_47].mut;
  if (_13 == 0B)
    goto <bb 16>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  _15 = MEM[(struct queue *)_47].mut;
  pthread_mutex_init (_15, 0B);
  MEM[(struct queue *)_47].notFull = 0B;
  _18 = operator new (48, &nothrow);
  MEM[(struct queue *)_47].notFull = _18;
  _20 = MEM[(struct queue *)_47].notFull;
  if (_20 == 0B)
    goto <bb 16>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _22 = MEM[(struct queue *)_47].notFull;
  pthread_cond_init (_22, 0B);
  MEM[(struct queue *)_47].notEmpty = 0B;
  _25 = operator new (48, &nothrow);
  MEM[(struct queue *)_47].notEmpty = _25;
  _27 = MEM[(struct queue *)_47].notEmpty;
  if (_27 == 0B)
    goto <bb 16>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  _29 = MEM[(struct queue *)_47].notEmpty;
  pthread_cond_init (_29, 0B);
  MEM[(struct queue *)_47].consumers = 0B;
  _72 = (sizetype) queueSize_44(D);
  if (_72 <= 1152921504606846975)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  iftmp.331_74 = _72 * 8;
  _32 = operator new[] (iftmp.331_74, &nothrow);
  MEM[(struct queue *)_47].consumers = _32;
  _34 = MEM[(struct queue *)_47].consumers;
  if (_34 == 0B)
    goto <bb 16>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  __cxa_throw_bad_array_new_length ();

  <bb 14> [0.00%]:
  notTooMuchNumBuffered = 0B;
  _35 = operator new (48, &nothrow);
  notTooMuchNumBuffered = _35;
  notTooMuchNumBuffered.334_36 = notTooMuchNumBuffered;
  if (notTooMuchNumBuffered.334_36 == 0B)
    goto <bb 16>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:
  notTooMuchNumBuffered.335_37 = notTooMuchNumBuffered;
  pthread_cond_init (notTooMuchNumBuffered.335_37, 0B);

  <bb 16> [0.00%]:
  # _39 = PHI <0B(4), 0B(6), 0B(8), 0B(9), 0B(10), 0B(12), 0B(14), _47(15)>
  return _39;

<L25> [0.00%]:
  resx 1

}



;; Function queueDelete(queue*) (_Z11queueDeleteP5queue, funcdef_no=1993, decl_uid=39024, cgraph_uid=733, symbol_order=781)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
q = &NONLOCAL
_1 = *q + 448
_2 = *q + 448
ESCAPED = _2
_3 = *q + 448
ESCAPED = _3
ESCAPED = &NONLOCAL
derefaddrtmp(14) = &NULL
*q + 448 = derefaddrtmp(14)
_4 = *q + 512
_5 = *q + 512
ESCAPED = _5
_6 = *q + 512
ESCAPED = _6
ESCAPED = &NONLOCAL
derefaddrtmp(19) = &NULL
*q + 512 = derefaddrtmp(19)
_7 = *q + 576
_8 = *q + 576
ESCAPED = _8
_9 = *q + 576
ESCAPED = _9
ESCAPED = &NONLOCAL
derefaddrtmp(23) = &NULL
*q + 576 = derefaddrtmp(23)
_10 = *q + 640
_11 = *q + 640
ESCAPED = _11
_12 = *q
_13 = *q
ESCAPED = _13
ESCAPED = q
ESCAPED = &NONLOCAL
_ZL21notTooMuchNumBuffered = NONLOCAL
notTooMuchNumBuffered.336_14 = _ZL21notTooMuchNumBuffered
notTooMuchNumBuffered.337_15 = _ZL21notTooMuchNumBuffered
ESCAPED = notTooMuchNumBuffered.337_15
notTooMuchNumBuffered.338_16 = _ZL21notTooMuchNumBuffered
ESCAPED = notTooMuchNumBuffered.338_16
ESCAPED = &NONLOCAL
_ZL21notTooMuchNumBuffered = &NULL
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
q = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
pthread_mutex_destroy = { }
_3 = { ESCAPED NONLOCAL }
_ZdlPvm = { }
derefaddrtmp(14) = { NULL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
pthread_cond_destroy = { }
_6 = { ESCAPED NONLOCAL }
derefaddrtmp(19) = { NULL } same as derefaddrtmp(14)
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL }
derefaddrtmp(23) = { NULL } same as derefaddrtmp(14)
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_ZdaPv = { }
_12 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL } same as _12
notTooMuchNumBuffered.336_14 = { NULL ESCAPED NONLOCAL } same as _ZL21notTooMuchNumBuffered
_ZL21notTooMuchNumBuffered = { NULL ESCAPED NONLOCAL }
notTooMuchNumBuffered.337_15 = { NULL ESCAPED NONLOCAL } same as _ZL21notTooMuchNumBuffered
notTooMuchNumBuffered.338_16 = { NULL ESCAPED NONLOCAL } same as _ZL21notTooMuchNumBuffered


Alias information for queueDelete(queue*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.336_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.337_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.338_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
q_23(D), points-to non-local, points-to NULL, points-to vars: { }

queueDelete(queue*) (struct queue * q)
{
  union pthread_mutex_t * _1;
  union pthread_mutex_t * _2;
  union pthread_mutex_t * _3;
  union pthread_cond_t * _4;
  union pthread_cond_t * _5;
  union pthread_cond_t * _6;
  union pthread_cond_t * _7;
  union pthread_cond_t * _8;
  union pthread_cond_t * _9;
  pthread_t * _10;
  pthread_t * _11;
  struct ElementType * * _12;
  struct ElementType * * _13;
  union pthread_cond_t * notTooMuchNumBuffered.336_14;
  union pthread_cond_t * notTooMuchNumBuffered.337_15;
  union pthread_cond_t * notTooMuchNumBuffered.338_16;

  <bb 2> [0.00%]:
  if (q_23(D) == 0B)
    goto <bb 15>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  _1 = q_23(D)->mut;
  if (_1 != 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _2 = q_23(D)->mut;
  pthread_mutex_destroy (_2);
  _3 = q_23(D)->mut;
  operator delete (_3, 40);
  q_23(D)->mut = 0B;

  <bb 5> [0.00%]:
  _4 = q_23(D)->notFull;
  if (_4 != 0B)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _5 = q_23(D)->notFull;
  pthread_cond_destroy (_5);
  _6 = q_23(D)->notFull;
  operator delete (_6, 48);
  q_23(D)->notFull = 0B;

  <bb 7> [0.00%]:
  _7 = q_23(D)->notEmpty;
  if (_7 != 0B)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  _8 = q_23(D)->notEmpty;
  pthread_cond_destroy (_8);
  _9 = q_23(D)->notEmpty;
  operator delete (_9, 48);
  q_23(D)->notEmpty = 0B;

  <bb 9> [0.00%]:
  _10 = q_23(D)->consumers;
  if (_10 != 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  _11 = q_23(D)->consumers;
  operator delete[] (_11);

  <bb 11> [0.00%]:
  _12 = q_23(D)->qData;
  if (_12 != 0B)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  _13 = q_23(D)->qData;
  operator delete[] (_13);

  <bb 13> [0.00%]:
  operator delete (q_23(D), 96);
  notTooMuchNumBuffered.336_14 = notTooMuchNumBuffered;
  if (notTooMuchNumBuffered.336_14 != 0B)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  notTooMuchNumBuffered.337_15 = notTooMuchNumBuffered;
  pthread_cond_destroy (notTooMuchNumBuffered.337_15);
  notTooMuchNumBuffered.338_16 = notTooMuchNumBuffered;
  operator delete (notTooMuchNumBuffered.338_16, 48);
  notTooMuchNumBuffered = 0B;

  <bb 15> [0.00%]:
  return;

}



;; Function getOutputBufferPos(int) (_Z18getOutputBufferPosi, funcdef_no=1995, decl_uid=39034, cgraph_uid=735, symbol_order=783)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
blockNum = &NONLOCAL
_1 = blockNum
_ZL19OutBufferPosToWrite = NONLOCAL
OutBufferPosToWrite.374_2 = _ZL19OutBufferPosToWrite
_3 = _1
_3 = OutBufferPosToWrite.374_2
_ZL16NextBlockToWrite = NONLOCAL
NextBlockToWrite.375_4 = _ZL16NextBlockToWrite
_5 = NextBlockToWrite.375_4
outBuffPos_11 = _3
outBuffPos_11 = _5
_ZL20NumBufferedBlocksMax = NONLOCAL
NumBufferedBlocksMax.376_6 = _ZL20NumBufferedBlocksMax
NumBufferedBlocksMax.377_7 = _ZL20NumBufferedBlocksMax
outBuffPos_12 = outBuffPos_11
outBuffPos_12 = NumBufferedBlocksMax.377_7
outBuffPos_8 = outBuffPos_11
outBuffPos_8 = outBuffPos_12
ESCAPED = outBuffPos_8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
STOREDANYTHING = { }
INTEGER = { ANYTHING }
blockNum = { NONLOCAL }
_1 = { NONLOCAL } same as blockNum
OutBufferPosToWrite.374_2 = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
_ZL19OutBufferPosToWrite = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
NextBlockToWrite.375_4 = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
_ZL16NextBlockToWrite = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
_5 = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
outBuffPos_11 = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
NumBufferedBlocksMax.376_6 = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
_ZL20NumBufferedBlocksMax = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
NumBufferedBlocksMax.377_7 = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
outBuffPos_12 = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite
outBuffPos_8 = { ESCAPED NONLOCAL } same as _ZL19OutBufferPosToWrite


Alias information for getOutputBufferPos(int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


getOutputBufferPos(int) (int blockNum)
{
  size_t outBuffPos;
  long unsigned int _1;
  long unsigned int OutBufferPosToWrite.374_2;
  long unsigned int _3;
  int NextBlockToWrite.375_4;
  long unsigned int _5;
  long unsigned int NumBufferedBlocksMax.376_6;
  long unsigned int NumBufferedBlocksMax.377_7;

  <bb 2> [0.00%]:
  _1 = (long unsigned int) blockNum_9(D);
  OutBufferPosToWrite.374_2 = OutBufferPosToWrite;
  _3 = _1 + OutBufferPosToWrite.374_2;
  NextBlockToWrite.375_4 = NextBlockToWrite;
  _5 = (long unsigned int) NextBlockToWrite.375_4;
  outBuffPos_11 = _3 - _5;
  NumBufferedBlocksMax.376_6 = NumBufferedBlocksMax;
  if (NumBufferedBlocksMax.376_6 <= outBuffPos_11)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  NumBufferedBlocksMax.377_7 = NumBufferedBlocksMax;
  outBuffPos_12 = outBuffPos_11 - NumBufferedBlocksMax.377_7;

  <bb 4> [0.00%]:
  # outBuffPos_8 = PHI <outBuffPos_11(2), outBuffPos_12(3)>
  return outBuffPos_8;

}



;; Function outputBufferSeqAddNext(outBuff*, outBuff*) (_Z22outputBufferSeqAddNextP7outBuffS0_, funcdef_no=1996, decl_uid=39032, cgraph_uid=736, symbol_order=784)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
preveElement = &NONLOCAL
newElement = &NONLOCAL
_ZL8OutMutex = NONLOCAL
OutMutex.349_1 = _ZL8OutMutex
ESCAPED = OutMutex.349_1
_ZL21NumBufferedTailBlocks = NONLOCAL
NumBufferedTailBlocks.350_2 = _ZL21NumBufferedTailBlocks
_ZL20NumBufferedBlocksMax = NONLOCAL
NumBufferedBlocksMax.351_3 = _ZL20NumBufferedBlocksMax
_4 = *preveElement
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_38 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
OutMutex.353_6 = _ZL8OutMutex
ESCAPED = OutMutex.353_6
_ZL13LastGoodBlock = NONLOCAL
LastGoodBlock.354_7 = _ZL13LastGoodBlock
_8 = *newElement + 96
LastGoodBlock.355_9 = _ZL13LastGoodBlock
OutMutex.356_10 = _ZL8OutMutex
ESCAPED = OutMutex.356_10
OutMutex.357_11 = _ZL8OutMutex
_ZL21notTooMuchNumBuffered = NONLOCAL
notTooMuchNumBuffered.358_12 = _ZL21notTooMuchNumBuffered
ESCAPED = notTooMuchNumBuffered.358_12
ESCAPED = OutMutex.357_11
*preveElement + 256 = newElement
NumBufferedTailBlocks.359_13 = _ZL21NumBufferedTailBlocks
_14 = NumBufferedTailBlocks.359_13
_14 = &NONLOCAL
_ZL21NumBufferedTailBlocks = _14
ESCAPED = _14
_15 = *preveElement
_ZL21OutBufferHeadNotEmpty = NONLOCAL
ESCAPED = &_ZL21OutBufferHeadNotEmpty
OutMutex.360_16 = _ZL8OutMutex
ESCAPED = OutMutex.360_16
_17 = &NULL
_17 = &NULL
_17 = newElement
ESCAPED = _17

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZL18TerminateFlagMutex _ZL21OutBufferHeadNotEmpty }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL8OutMutex
STOREDANYTHING = { }
INTEGER = { ANYTHING }
preveElement = { NONLOCAL }
newElement = { NONLOCAL } same as preveElement
OutMutex.349_1 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL8OutMutex = { ESCAPED NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
NumBufferedTailBlocks.350_2 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL21NumBufferedTailBlocks = { ESCAPED NONLOCAL } same as _ZL8OutMutex
NumBufferedBlocksMax.351_3 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL20NumBufferedBlocksMax = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_4 = { ESCAPED NONLOCAL }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_38 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL13terminateFlag = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
OutMutex.353_6 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
pthread_mutex_unlock = { }
LastGoodBlock.354_7 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL13LastGoodBlock = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_8 = { ESCAPED NONLOCAL }
LastGoodBlock.355_9 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
OutMutex.356_10 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
OutMutex.357_11 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
notTooMuchNumBuffered.358_12 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL21notTooMuchNumBuffered = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_Z14safe_cond_waitP14pthread_cond_tP15pthread_mutex_t = { }
NumBufferedTailBlocks.359_13 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_14 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_15 = { ESCAPED NONLOCAL } same as _4
_Z16safe_cond_signalP14pthread_cond_t = { }
_ZL21OutBufferHeadNotEmpty = { ESCAPED NONLOCAL }
OutMutex.360_16 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_17 = { NULL NONLOCAL }


Alias information for outputBufferSeqAddNext(outBuff*, outBuff*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38685 D.38821 } (nonlocal, escaped)

Flow-insensitive points-to information

OutMutex.349_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.353_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.356_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.357_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.358_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.360_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to NULL, points-to vars: { }
preveElement_23(D), points-to non-local, points-to NULL, points-to vars: { }
newElement_27(D), points-to non-local, points-to NULL, points-to vars: { }

outputBufferSeqAddNext(outBuff*, outBuff*) (struct outBuff * preveElement, struct outBuff * newElement)
{
  int ret;
  int D.48056;
  union pthread_mutex_t * OutMutex.349_1;
  long unsigned int NumBufferedTailBlocks.350_2;
  long unsigned int NumBufferedBlocksMax.351_3;
  char * _4;
  union pthread_mutex_t * OutMutex.353_6;
  int LastGoodBlock.354_7;
  int _8;
  int LastGoodBlock.355_9;
  union pthread_mutex_t * OutMutex.356_10;
  union pthread_mutex_t * OutMutex.357_11;
  union pthread_cond_t * notTooMuchNumBuffered.358_12;
  long unsigned int NumBufferedTailBlocks.359_13;
  long unsigned int _14;
  char * _15;
  union pthread_mutex_t * OutMutex.360_16;
  struct outBuff * _17;

  <bb 2> [0.00%]:
  OutMutex.349_1 = OutMutex;
  safe_mutex_lock (OutMutex.349_1);

  <bb 3> [0.00%]:
  NumBufferedTailBlocks.350_2 = NumBufferedTailBlocks;
  NumBufferedBlocksMax.351_3 = NumBufferedBlocksMax;
  if (NumBufferedTailBlocks.350_2 < NumBufferedBlocksMax.351_3)
    goto <bb 11>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [0.00%]:
  _4 = preveElement_23(D)->buf;
  if (_4 == 0B)
    goto <bb 11>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);
  ret_38 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);
  if (ret_38 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  OutMutex.353_6 = OutMutex;
  pthread_mutex_unlock (OutMutex.353_6);
  goto <bb 14>; [0.00%]

  <bb 7> [0.00%]:
  LastGoodBlock.354_7 = LastGoodBlock;
  if (LastGoodBlock.354_7 != -1)
    goto <bb 8>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 8> [0.00%]:
  _8 = newElement_27(D)->blockNumber;
  LastGoodBlock.355_9 = LastGoodBlock;
  if (_8 > LastGoodBlock.355_9)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  OutMutex.356_10 = OutMutex;
  pthread_mutex_unlock (OutMutex.356_10);
  goto <bb 14>; [0.00%]

  <bb 10> [0.00%]:
  OutMutex.357_11 = OutMutex;
  notTooMuchNumBuffered.358_12 = notTooMuchNumBuffered;
  safe_cond_wait (notTooMuchNumBuffered.358_12, OutMutex.357_11);
  goto <bb 3>; [0.00%]

  <bb 11> [0.00%]:
  preveElement_23(D)->next = newElement_27(D);
  NumBufferedTailBlocks.359_13 = NumBufferedTailBlocks;
  _14 = NumBufferedTailBlocks.359_13 + 1;
  NumBufferedTailBlocks = _14;
  _15 = preveElement_23(D)->buf;
  if (_15 == 0B)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  safe_cond_signal (&OutBufferHeadNotEmpty);

  <bb 13> [0.00%]:
  OutMutex.360_16 = OutMutex;
  safe_mutex_unlock (OutMutex.360_16);

  <bb 14> [0.00%]:
  # _17 = PHI <0B(6), 0B(9), newElement_27(D)(13)>
  return _17;

}



;; Function testBZ2ErrorHandling(int, void*, int) (_Z20testBZ2ErrorHandlingiPvi, funcdef_no=1998, decl_uid=39042, cgraph_uid=738, symbol_order=786)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
bzerr = &NONLOCAL
bzf = &NONLOCAL
streamNo = &NONLOCAL
ESCAPED = &bzerr_dummy
ESCAPED = bzf
stderr = NONLOCAL
stderr.378_1 = stderr
ESCAPED = stderr.378_1
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_35 = NONLOCAL
ESCAPED = &NONLOCAL
stderr.379_2 = stderr
ESCAPED = stderr.379_2
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_36 = NONLOCAL
stderr.380_3 = stderr
ESCAPED = stderr.380_3
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_37 = NONLOCAL
stderr.381_4 = stderr
ESCAPED = stderr.381_4
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_38 = NONLOCAL
stderr.382_5 = stderr
ESCAPED = stderr.382_5
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_39 = NONLOCAL
stderr.383_6 = stderr
ESCAPED = stderr.383_6
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_40 = NONLOCAL
stderr.384_7 = stderr
ESCAPED = stderr.384_7
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_41 = NONLOCAL
stderr.385_8 = stderr
ESCAPED = stderr.385_8
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_42 = NONLOCAL
ESCAPED = &NONLOCAL
_9 = &NONLOCAL
_9 = &NONLOCAL
_9 = &NONLOCAL
_9 = &NONLOCAL
_9 = &NONLOCAL
_9 = &NULL
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL bzerr_dummy }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
bzerr = { NONLOCAL }
bzf = { NONLOCAL } same as bzerr
streamNo = { NONLOCAL } same as bzerr
BZ2_bzReadClose = { }
bzerr_dummy = { ESCAPED NONLOCAL }
stderr.378_1 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
__fprintf_chk = { }
_35 = { ESCAPED NONLOCAL } same as stderr
exit = { }
stderr.379_2 = { ESCAPED NONLOCAL } same as stderr
_36 = { ESCAPED NONLOCAL } same as stderr
stderr.380_3 = { ESCAPED NONLOCAL } same as stderr
_37 = { ESCAPED NONLOCAL } same as stderr
stderr.381_4 = { ESCAPED NONLOCAL } same as stderr
_38 = { ESCAPED NONLOCAL } same as stderr
stderr.382_5 = { ESCAPED NONLOCAL } same as stderr
_39 = { ESCAPED NONLOCAL } same as stderr
stderr.383_6 = { ESCAPED NONLOCAL } same as stderr
_40 = { ESCAPED NONLOCAL } same as stderr
stderr.384_7 = { ESCAPED NONLOCAL } same as stderr
_41 = { ESCAPED NONLOCAL } same as stderr
stderr.385_8 = { ESCAPED NONLOCAL } same as stderr
_42 = { ESCAPED NONLOCAL } same as stderr
_9 = { NULL NONLOCAL }


Alias information for testBZ2ErrorHandling(int, void*, int)

Aliased symbols

bzerr_dummy, UID D.39623, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.39623 } (escaped)

Flow-insensitive points-to information

stderr.378_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.379_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.380_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.381_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.382_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.383_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.384_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.385_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bzf_13(D), points-to non-local, points-to NULL, points-to vars: { }

testBZ2ErrorHandling(int, void*, int) (int bzerr, BZFILE * bzf, int streamNo)
{
  int D.48081;
  int D.48078;
  int D.48075;
  int D.48072;
  int D.48069;
  int D.48066;
  int D.48063;
  int D.48060;
  int bzerr_dummy;
  struct FILE * stderr.378_1;
  struct FILE * stderr.379_2;
  struct FILE * stderr.380_3;
  struct FILE * stderr.381_4;
  struct FILE * stderr.382_5;
  struct FILE * stderr.383_6;
  struct FILE * stderr.384_7;
  struct FILE * stderr.385_8;
  int _9;
  int _35;
  int _36;
  int _37;
  int _38;
  int _39;
  int _40;
  int _41;
  int _42;

  <bb 2> [0.00%]:
  BZ2_bzReadClose (&bzerr_dummy, bzf_13(D));

  <bb 3> [0.00%]:
  switch (bzerr_15(D)) <default: <L8> [0.00%], case -9: <L0> [0.00%], case -7: <L4> [0.00%], case -6: <L1> [0.00%], case -5: <L5> [0.00%], case -4: <L2> [0.00%], case -3: <L3> [0.00%]>

<L0> [100.00%]:
  stderr.378_1 = stderr;
  _35 = __fprintf_chk (stderr.378_1, 1, "pbzip2: *ERROR: Integers are not the right size for libbzip2. Aborting!\n");

  <bb 5> [100.00%]:
  exit (3);

<L1> [100.00%]:
  stderr.379_2 = stderr;
  _36 = __fprintf_chk (stderr.379_2, 1, "pbzip2: *ERROR: Integers are not the right size for libbzip2. Aborting!\n");
  goto <bb 15>; [100.00%]

<L2> [100.00%]:
  stderr.380_3 = stderr;
  _37 = __fprintf_chk (stderr.380_3, 1, "pbzip2: *ERROR: Data integrity (CRC) error in data!  Skipping...\n");
  goto <bb 15>; [100.00%]

<L3> [100.00%]:
  stderr.381_4 = stderr;
  _38 = __fprintf_chk (stderr.381_4, 1, "pbzip2: *ERROR: Could NOT allocate enough memory. Aborting!\n");
  goto <bb 15>; [100.00%]

<L4> [100.00%]:
  stderr.382_5 = stderr;
  _39 = __fprintf_chk (stderr.382_5, 1, "pbzip2: *ERROR: File ends unexpectedly!  Skipping...\n");
  goto <bb 15>; [100.00%]

<L5> [0.00%]:
  if (streamNo_20(D) == 1)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [100.00%]:
  stderr.383_6 = stderr;
  _40 = __fprintf_chk (stderr.383_6, 1, "pbzip2: *ERROR: Bad magic number (file not created by bzip2)!  Skipping...\n");
  goto <bb 15>; [100.00%]

  <bb 12> [100.00%]:
  stderr.384_7 = stderr;
  _41 = __fprintf_chk (stderr.384_7, 1, "pbzip2: *WARNING: Trailing garbage after EOF ignored!\n");
  goto <bb 15>; [100.00%]

<L8> [100.00%]:
  stderr.385_8 = stderr;
  _42 = __fprintf_chk (stderr.385_8, 1, "pbzip2: *ERROR: Unexpected error. Aborting!\n");

  <bb 14> [100.00%]:
  exit (3);

  <bb 15> [0.00%]:
  # _9 = PHI <1(6), -1(7), 1(8), -1(9), -1(11), 0(12)>
  bzerr_dummy ={v} {CLOBBER};
  return _9;

<L11> [0.00%]:
  bzerr_dummy ={v} {CLOBBER};
  resx 1

}



;; Function directdecompress(char const*, char const*) (_Z16directdecompressPKcS0_, funcdef_no=1986, decl_uid=39014, cgraph_uid=726, symbol_order=774)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
InFilename = &NONLOCAL
OutFilename = &NONLOCAL
nUnused = &NULL
CALLUSED(12) = CALLUSED(12) + UNKNOWN
CALLUSED(12) = *CALLUSED(12) + UNKNOWN
CALLUSED(12) = InFilename
CALLUSED(12) = &STRING
_1 = CALLUSED(12)
_1 = NONLOCAL
ESCAPED = InFilename
ESCAPED = &STRING
_114 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename
stdin = NONLOCAL
zStream_112 = stdin
zStream_63 = _114
zStream_63 = zStream_112
ESCAPED = zStream_63
_2 = NONLOCAL
stdin.221_3 = stdin
ESCAPED = zStream_63
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename
_ZL12OutputStdOut = NONLOCAL
OutputStdOut.222_4 = _ZL12OutputStdOut
ESCAPED = OutFilename
ESCAPED = &STRING
_123 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = OutFilename
stdout = NONLOCAL
stream_120 = stdout
stream_62 = _123
stream_62 = stream_120
ESCAPED = stream_62
_5 = NONLOCAL
stdout.224_6 = stdout
ESCAPED = stream_62
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename
streamNo_64 = &NULL
streamNo_64 = streamNo_135
streamNo_64 = streamNo_135
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_270 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
stderr = NONLOCAL
stderr.226_8 = stderr
ESCAPED = stderr.226_8
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_259 = NONLOCAL
stdin.227_9 = stdin
ESCAPED = zStream_63
stdout.228_10 = stdout
ESCAPED = stream_62
nUnused.229_11 = nUnused
_ZL9Verbosity = NONLOCAL
Verbosity.230_12 = _ZL9Verbosity
ESCAPED = &bzerr
ESCAPED = zStream_63
ESCAPED = Verbosity.230_12
ESCAPED = &NULL
ESCAPED = &unused
ESCAPED = nUnused.229_11
_133 = NONLOCAL
bzerr.231_13 = bzerr
bzerr.232_14 = bzerr
ESCAPED = bzerr.232_14
ESCAPED = _133
ESCAPED = streamNo_64
_233 = NONLOCAL
stdin.233_15 = stdin
ESCAPED = zStream_63
stdout.234_16 = stdout
ESCAPED = stream_62
ESCAPED = &NONLOCAL
streamNo_135 = streamNo_64
streamNo_135 = &NONLOCAL
bzerr.235_17 = bzerr
ESCAPED = &_ZL18TerminateFlagMutex
ret_271 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
stderr.237_19 = stderr
ESCAPED = stderr.237_19
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_260 = NONLOCAL
stdin.238_20 = stdin
ESCAPED = zStream_63
stdout.239_21 = stdout
ESCAPED = stream_62
ESCAPED = &bzerr
ESCAPED = _133
ESCAPED = &obuf
ESCAPED = &NONLOCAL
_140 = NONLOCAL
bzerr.240_22 = bzerr
_ZL14ForceOverwrite = NONLOCAL
ForceOverwrite.241_23 = _ZL14ForceOverwrite
ESCAPED = zStream_63
ESCAPED = zStream_63
_144 = NONLOCAL
ESCAPED = _144
ESCAPED = zStream_63
ESCAPED = &obuf
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = zStream_63
_268 = NONLOCAL
_269 = _268
nread_149 = _268
ESCAPED = zStream_63
_25 = NONLOCAL
bzerr.243_26 = bzerr
ESCAPED = bzerr.243_26
ESCAPED = _133
ESCAPED = streamNo_135
_163 = NONLOCAL
stdin.244_27 = stdin
ESCAPED = zStream_63
stdout.245_28 = stdout
ESCAPED = stream_62
ESCAPED = &NONLOCAL
_29 = nread_149
ESCAPED = &obuf
ESCAPED = &NONLOCAL
ESCAPED = _29
ESCAPED = stream_62
ESCAPED = stream_62
_30 = NONLOCAL
bzerr.247_31 = bzerr
ESCAPED = bzerr.247_31
ESCAPED = _133
ESCAPED = streamNo_135
_156 = NONLOCAL
stdin.248_32 = stdin
ESCAPED = zStream_63
stdout.249_33 = stdout
ESCAPED = stream_62
ESCAPED = &NONLOCAL
bzerr.250_34 = bzerr
bzerr.251_35 = bzerr
_36 = _140
ESCAPED = &obuf
ESCAPED = &NONLOCAL
ESCAPED = _36
ESCAPED = stream_62
ESCAPED = stream_62
_37 = NONLOCAL
bzerr.253_38 = bzerr
ESCAPED = bzerr.253_38
ESCAPED = _133
ESCAPED = streamNo_135
_173 = NONLOCAL
stdin.254_39 = stdin
ESCAPED = zStream_63
stdout.255_40 = stdout
ESCAPED = stream_62
ESCAPED = &NONLOCAL
bzerr.256_41 = bzerr
bzerr.257_42 = bzerr
ESCAPED = bzerr.257_42
ESCAPED = _133
ESCAPED = streamNo_135
_197 = NONLOCAL
stdin.258_43 = stdin
ESCAPED = zStream_63
stdout.259_44 = stdout
ESCAPED = stream_62
ESCAPED = &NONLOCAL
ESCAPED = &bzerr
ESCAPED = _133
ESCAPED = &unusedTmp
ESCAPED = &nUnused
bzerr.260_45 = bzerr
bzerr.261_46 = bzerr
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = bzerr.261_46
i_65 = &NULL
i_65 = i_186
nUnused.262_47 = nUnused
unusedTmp.263_48 = unusedTmp
_49 = i_65
_50 = unusedTmp.263_48
_51 = *_50
unused = _51
i_186 = i_65
i_186 = &NONLOCAL
ESCAPED = &bzerr
ESCAPED = _133
bzerr.264_52 = bzerr
bzerr.265_53 = bzerr
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = bzerr.265_53
nUnused.266_54 = nUnused
ESCAPED = zStream_63
_189 = NONLOCAL
ESCAPED = _189
ESCAPED = zStream_63
ESCAPED = zStream_63
_55 = NONLOCAL
stdin.268_56 = stdin
ESCAPED = zStream_63
stdout.269_57 = stdout
ESCAPED = stream_62
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename
ESCAPED = zStream_63
_206 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename
ESCAPED = stream_62
_58 = NONLOCAL
stdout.271_59 = stdout
ESCAPED = stream_62
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename
ESCAPED = stream_62
_211 = NONLOCAL
stdout.272_60 = stdout
ESCAPED = stream_62
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename
stdout.273_61 = stdout
ESCAPED = stream_62
_214 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = OutFilename
ESCAPED = &NONLOCAL
_66 = &NONLOCAL
_66 = &NONLOCAL
_66 = &NONLOCAL
_66 = &NONLOCAL
_66 = &NONLOCAL
_66 = _233
_66 = &NONLOCAL
_66 = _163
_66 = _156
_66 = _173
_66 = _197
_66 = &NONLOCAL
_66 = &NONLOCAL
_66 = &NONLOCAL
_66 = &NONLOCAL
_66 = &NONLOCAL
_66 = &NONLOCAL
_66 = &NONLOCAL
_66 = &NULL
ESCAPED = _66

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL nUnused _ZL18TerminateFlagMutex bzerr unused obuf unusedTmp }
NONLOCAL = { ESCAPED NONLOCAL } same as _114
STOREDANYTHING = { }
INTEGER = { ANYTHING }
InFilename = { NONLOCAL }
OutFilename = { NONLOCAL } same as InFilename
nUnused = { NULL ESCAPED NONLOCAL } same as nUnused.229_11
strcmp = { }
CALLUSED(12) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(13) = { }
_1 = { STRING ESCAPED NONLOCAL }
*fopen64 = { }
_114 = { ESCAPED NONLOCAL }
_Z12handle_error8ExitFlagiPKcz = { }
zStream_112 = { ESCAPED NONLOCAL } same as _114
stdin = { ESCAPED NONLOCAL } same as _114
zStream_63 = { ESCAPED NONLOCAL } same as _114
ferror = { }
_2 = { ESCAPED NONLOCAL } same as _114
stdin.221_3 = { ESCAPED NONLOCAL } same as _114
fclose = { }
OutputStdOut.222_4 = { ESCAPED NONLOCAL } same as _114
_ZL12OutputStdOut = { ESCAPED NONLOCAL } same as _114
_Z17safe_fopen_outputPKcS0_ = { }
_123 = { ESCAPED NONLOCAL } same as _114
stream_120 = { ESCAPED NONLOCAL } same as _114
stdout = { ESCAPED NONLOCAL } same as _114
stream_62 = { ESCAPED NONLOCAL } same as _114
_5 = { ESCAPED NONLOCAL } same as _114
stdout.224_6 = { ESCAPED NONLOCAL } same as _114
streamNo_64 = { NULL NONLOCAL }
streamNo_135 = { NULL NONLOCAL } same as streamNo_64
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_270 = { ESCAPED NONLOCAL } same as _114
_ZL13terminateFlag = { ESCAPED NONLOCAL } same as _114
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
stderr.226_8 = { ESCAPED NONLOCAL } same as _114
stderr = { ESCAPED NONLOCAL } same as _114
__fprintf_chk = { }
_259 = { ESCAPED NONLOCAL } same as _114
stdin.227_9 = { ESCAPED NONLOCAL } same as _114
stdout.228_10 = { ESCAPED NONLOCAL } same as _114
nUnused.229_11 = { NULL ESCAPED NONLOCAL }
Verbosity.230_12 = { ESCAPED NONLOCAL } same as _114
_ZL9Verbosity = { ESCAPED NONLOCAL } same as _114
BZ2_bzReadOpen = { }
bzerr = { ESCAPED NONLOCAL } same as bzerr.231_13
unused = { ESCAPED NONLOCAL }
_133 = { ESCAPED NONLOCAL } same as _114
bzerr.231_13 = { ESCAPED NONLOCAL }
bzerr.232_14 = { ESCAPED NONLOCAL } same as bzerr.231_13
_Z20testBZ2ErrorHandlingiPvi = { }
_233 = { ESCAPED NONLOCAL } same as _114
stdin.233_15 = { ESCAPED NONLOCAL } same as _114
stdout.234_16 = { ESCAPED NONLOCAL } same as _114
_Z20syncSetTerminateFlagi = { }
bzerr.235_17 = { ESCAPED NONLOCAL } same as bzerr.231_13
ret_271 = { ESCAPED NONLOCAL } same as _114
stderr.237_19 = { ESCAPED NONLOCAL } same as _114
_260 = { ESCAPED NONLOCAL } same as _114
stdin.238_20 = { ESCAPED NONLOCAL } same as _114
stdout.239_21 = { ESCAPED NONLOCAL } same as _114
BZ2_bzRead = { }
obuf = { ESCAPED NONLOCAL }
_140 = { ESCAPED NONLOCAL } same as _114
bzerr.240_22 = { ESCAPED NONLOCAL } same as bzerr.231_13
ForceOverwrite.241_23 = { ESCAPED NONLOCAL } same as _114
_ZL14ForceOverwrite = { ESCAPED NONLOCAL } same as _114
rewind = { }
fgetc = { }
_144 = { ESCAPED NONLOCAL } same as _114
ungetc = { }
*fread = { }
_268 = { ESCAPED NONLOCAL } same as _114
_269 = { ESCAPED NONLOCAL } same as _114
nread_149 = { ESCAPED NONLOCAL } same as _114
_25 = { ESCAPED NONLOCAL } same as _114
bzerr.243_26 = { ESCAPED NONLOCAL } same as bzerr.231_13
_163 = { ESCAPED NONLOCAL } same as _114
stdin.244_27 = { ESCAPED NONLOCAL } same as _114
stdout.245_28 = { ESCAPED NONLOCAL } same as _114
_29 = { ESCAPED NONLOCAL } same as _114
fwrite = { }
_30 = { ESCAPED NONLOCAL } same as _114
bzerr.247_31 = { ESCAPED NONLOCAL } same as bzerr.231_13
_156 = { ESCAPED NONLOCAL } same as _114
stdin.248_32 = { ESCAPED NONLOCAL } same as _114
stdout.249_33 = { ESCAPED NONLOCAL } same as _114
bzerr.250_34 = { ESCAPED NONLOCAL } same as bzerr.231_13
bzerr.251_35 = { ESCAPED NONLOCAL } same as bzerr.231_13
_36 = { ESCAPED NONLOCAL } same as _114
_37 = { ESCAPED NONLOCAL } same as _114
bzerr.253_38 = { ESCAPED NONLOCAL } same as bzerr.231_13
_173 = { ESCAPED NONLOCAL } same as _114
stdin.254_39 = { ESCAPED NONLOCAL } same as _114
stdout.255_40 = { ESCAPED NONLOCAL } same as _114
bzerr.256_41 = { ESCAPED NONLOCAL } same as bzerr.231_13
bzerr.257_42 = { ESCAPED NONLOCAL } same as bzerr.231_13
_197 = { ESCAPED NONLOCAL } same as _114
stdin.258_43 = { ESCAPED NONLOCAL } same as _114
stdout.259_44 = { ESCAPED NONLOCAL } same as _114
BZ2_bzReadGetUnused = { }
unusedTmp = { ESCAPED NONLOCAL } same as unusedTmp.263_48
bzerr.260_45 = { ESCAPED NONLOCAL } same as bzerr.231_13
bzerr.261_46 = { ESCAPED NONLOCAL } same as bzerr.231_13
i_65 = { NULL NONLOCAL } same as streamNo_64
i_186 = { NULL NONLOCAL } same as streamNo_64
nUnused.262_47 = { NULL ESCAPED NONLOCAL } same as nUnused.229_11
unusedTmp.263_48 = { ESCAPED NONLOCAL }
_49 = { NULL NONLOCAL } same as streamNo_64
_50 = { ESCAPED NONLOCAL } same as unusedTmp.263_48
_51 = { ESCAPED NONLOCAL }
BZ2_bzReadClose = { }
bzerr.264_52 = { ESCAPED NONLOCAL } same as bzerr.231_13
bzerr.265_53 = { ESCAPED NONLOCAL } same as bzerr.231_13
nUnused.266_54 = { NULL ESCAPED NONLOCAL } same as nUnused.229_11
_189 = { ESCAPED NONLOCAL } same as _114
_55 = { ESCAPED NONLOCAL } same as _114
stdin.268_56 = { ESCAPED NONLOCAL } same as _114
stdout.269_57 = { ESCAPED NONLOCAL } same as _114
_Z9do_fcloseP8_IO_FILE = { }
_206 = { ESCAPED NONLOCAL } same as _114
_58 = { ESCAPED NONLOCAL } same as _114
stdout.271_59 = { ESCAPED NONLOCAL } same as _114
_Z9do_fflushP8_IO_FILE = { }
_211 = { ESCAPED NONLOCAL } same as _114
stdout.272_60 = { ESCAPED NONLOCAL } same as _114
stdout.273_61 = { ESCAPED NONLOCAL } same as _114
_214 = { ESCAPED NONLOCAL } same as _114
_Z19syncSetProducerDonei = { }
_66 = { NULL ESCAPED NONLOCAL }


Alias information for directdecompress(char const*, char const*)

Aliased symbols

nUnused, UID D.39498, int, is addressable
bzerr, UID D.39495, int, is addressable
unusedTmp, UID D.39494, unsigned char *, is addressable
unused, UID D.39493, unsigned char[5000], is addressable
obuf, UID D.39492, unsigned char[5000], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38685 D.39492 D.39493 D.39494 D.39495 D.39498 } (nonlocal, escaped)

Flow-insensitive points-to information

stdin.221_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.224_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.226_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.227_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.228_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.233_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.234_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.237_19, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.238_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.239_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.244_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.245_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.248_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.249_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.254_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.255_40, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.258_43, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.259_44, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
unusedTmp.263_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_50, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.268_56, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.269_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.271_59, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.272_60, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.273_61, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stream_62, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
zStream_63, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
InFilename_111(D), points-to non-local, points-to NULL, points-to vars: { }
zStream_112, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_114, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stream_120, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutFilename_121(D), points-to non-local, points-to NULL, points-to vars: { }
_123, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_133, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

directdecompress(char const*, char const*) (const char * InFilename, const char * OutFilename)
{
  int ret;
  int D.48097;
  int ret;
  int D.48095;
  size_t D.48093;
  int D.48088;
  int D.48085;
  int c;
  int c;
  int i;
  int ret;
  int nUnused;
  int streamNo;
  int nread;
  int bzerr;
  unsigned char * unusedTmp;
  unsigned char unused[5000];
  unsigned char obuf[5000];
  BZFILE * bzf;
  struct FILE * zStream;
  struct FILE * stream;
  int _1;
  int _2;
  struct FILE * stdin.221_3;
  int OutputStdOut.222_4;
  int _5;
  struct FILE * stdout.224_6;
  struct FILE * stderr.226_8;
  struct FILE * stdin.227_9;
  struct FILE * stdout.228_10;
  int nUnused.229_11;
  int Verbosity.230_12;
  int bzerr.231_13;
  int bzerr.232_14;
  struct FILE * stdin.233_15;
  struct FILE * stdout.234_16;
  int bzerr.235_17;
  struct FILE * stderr.237_19;
  struct FILE * stdin.238_20;
  struct FILE * stdout.239_21;
  int bzerr.240_22;
  int ForceOverwrite.241_23;
  int _25;
  int bzerr.243_26;
  struct FILE * stdin.244_27;
  struct FILE * stdout.245_28;
  long unsigned int _29;
  int _30;
  int bzerr.247_31;
  struct FILE * stdin.248_32;
  struct FILE * stdout.249_33;
  int bzerr.250_34;
  int bzerr.251_35;
  long unsigned int _36;
  int _37;
  int bzerr.253_38;
  struct FILE * stdin.254_39;
  struct FILE * stdout.255_40;
  int bzerr.256_41;
  int bzerr.257_42;
  struct FILE * stdin.258_43;
  struct FILE * stdout.259_44;
  int bzerr.260_45;
  int bzerr.261_46;
  int nUnused.262_47;
  unsigned char * unusedTmp.263_48;
  sizetype _49;
  unsigned char * _50;
  unsigned char _51;
  int bzerr.264_52;
  int bzerr.265_53;
  int nUnused.266_54;
  int _55;
  struct FILE * stdin.268_56;
  struct FILE * stdout.269_57;
  int _58;
  struct FILE * stdout.271_59;
  struct FILE * stdout.272_60;
  struct FILE * stdout.273_61;
  int _66;
  struct FILE * _114;
  struct FILE * _123;
  BZFILE * _133;
  int _140;
  int _144;
  int _156;
  int _163;
  int _173;
  int _189;
  int _197;
  int _206;
  int _211;
  int _214;
  int _233;
  int _259;
  int _260;
  long unsigned int _268;
  long unsigned int _269;

  <bb 2> [0.00%]:
  nUnused = 0;
  _1 = strcmp (InFilename_111(D), "-");
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _114 = *fopen64 (InFilename_111(D), "rb");

  <bb 4> [0.00%]:
  if (_114 == 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 5> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not open input file [%s]!  Aborting...\n", InFilename_111(D));
  goto <bb 136>; [0.00%]

  <bb 6> [0.00%]:
  zStream_112 = stdin;

  <bb 7> [0.00%]:
  # zStream_63 = PHI <_114(4), zStream_112(6)>
  _2 = ferror (zStream_63);
  if (_2 != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 8> [0.00%]:
  stdin.221_3 = stdin;
  if (stdin.221_3 != zStream_63)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  fclose (zStream_63);

  <bb 10> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Problem with input stream of file [%s]!  Aborting...\n", InFilename_111(D));
  goto <bb 136>; [0.00%]

  <bb 11> [0.00%]:
  OutputStdOut.222_4 = OutputStdOut;
  if (OutputStdOut.222_4 == 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 12> [0.00%]:
  _123 = safe_fopen_output (OutFilename_121(D), "wb");

  <bb 13> [0.00%]:
  if (_123 == 0B)
    goto <bb 14>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 14> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not open output file [%s]!  Aborting...\n", OutFilename_121(D));
  goto <bb 136>; [0.00%]

  <bb 15> [0.00%]:
  stream_120 = stdout;

  <bb 16> [0.00%]:
  # stream_62 = PHI <_123(13), stream_120(15)>
  _5 = ferror (stream_62);
  if (_5 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 17> [0.00%]:
  stdout.224_6 = stdout;
  if (stdout.224_6 != stream_62)
    goto <bb 18>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 18> [0.00%]:
  fclose (stream_62);

  <bb 19> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Problem with output stream of file [%s]!  Aborting...\n", InFilename_111(D));
  goto <bb 136>; [0.00%]

  <bb 20> [100.00%]:
  # streamNo_64 = PHI <0(16), streamNo_135(112), streamNo_135(109)>
  safe_mutex_lock (&TerminateFlagMutex);

  <bb 21> [100.00%]:
  ret_270 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 22> [100.00%]:
  if (ret_270 != 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 23> [100.00%]:
  stderr.226_8 = stderr;
  _259 = __fprintf_chk (stderr.226_8, 1, "directdecompress: terminating1 - terminateFlag set\n");

  <bb 24> [100.00%]:
  stdin.227_9 = stdin;
  if (stdin.227_9 != zStream_63)
    goto <bb 25>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 25> [0.00%]:
  fclose (zStream_63);

  <bb 26> [0.00%]:
  stdout.228_10 = stdout;
  if (stdout.228_10 != stream_62)
    goto <bb 27>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 27> [0.00%]:
  fclose (stream_62);

  <bb 28> [0.00%]:
  goto <bb 136>; [0.00%]

  <bb 29> [0.00%]:
  nUnused.229_11 = nUnused;
  Verbosity.230_12 = Verbosity;
  _133 = BZ2_bzReadOpen (&bzerr, zStream_63, Verbosity.230_12, 0, &unused, nUnused.229_11);

  <bb 30> [0.00%]:
  if (_133 == 0B)
    goto <bb 32>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 31> [0.00%]:
  bzerr.231_13 = bzerr;
  if (bzerr.231_13 != 0)
    goto <bb 32>; [0.00%]
  else
    goto <bb 40>; [0.00%]

  <bb 32> [0.00%]:
  bzerr.232_14 = bzerr;
  _233 = testBZ2ErrorHandling (bzerr.232_14, _133, streamNo_64);

  <bb 33> [0.00%]:
  stdin.233_15 = stdin;
  if (stdin.233_15 != zStream_63)
    goto <bb 34>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 34> [0.00%]:
  fclose (zStream_63);

  <bb 35> [0.00%]:
  stdout.234_16 = stdout;
  if (stdout.234_16 != stream_62)
    goto <bb 36>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 36> [0.00%]:
  fclose (stream_62);

  <bb 37> [0.00%]:
  if (_233 != 0)
    goto <bb 38>; [0.00%]
  else
    goto <bb 39>; [0.00%]

  <bb 38> [0.00%]:
  syncSetTerminateFlag (1);

  <bb 39> [0.00%]:
  goto <bb 136>; [0.00%]

  <bb 40> [0.00%]:
  streamNo_135 = streamNo_64 + 1;

  <bb 41> [0.00%]:
  bzerr.235_17 = bzerr;
  if (bzerr.235_17 != 0)
    goto <bb 92>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 42> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);

  <bb 43> [100.00%]:
  ret_271 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 44> [100.00%]:
  if (ret_271 != 0)
    goto <bb 45>; [0.00%]
  else
    goto <bb 51>; [0.00%]

  <bb 45> [100.00%]:
  stderr.237_19 = stderr;
  _260 = __fprintf_chk (stderr.237_19, 1, "directdecompress: terminating2 - terminateFlag set\n");

  <bb 46> [100.00%]:
  stdin.238_20 = stdin;
  if (stdin.238_20 != zStream_63)
    goto <bb 47>; [0.00%]
  else
    goto <bb 48>; [0.00%]

  <bb 47> [0.00%]:
  fclose (zStream_63);

  <bb 48> [0.00%]:
  stdout.239_21 = stdout;
  if (stdout.239_21 != stream_62)
    goto <bb 49>; [0.00%]
  else
    goto <bb 50>; [0.00%]

  <bb 49> [0.00%]:
  fclose (stream_62);

  <bb 50> [0.00%]:
  goto <bb 136>; [0.00%]

  <bb 51> [0.00%]:
  _140 = BZ2_bzRead (&bzerr, _133, &obuf, 5000);

  <bb 52> [0.00%]:
  bzerr.240_22 = bzerr;
  if (bzerr.240_22 == -5)
    goto <bb 53>; [0.00%]
  else
    goto <bb 79>; [0.00%]

  <bb 53> [0.00%]:
  ForceOverwrite.241_23 = ForceOverwrite;
  if (ForceOverwrite.241_23 == 1)
    goto <bb 54>; [0.00%]
  else
    goto <bb 79>; [0.00%]

  <bb 54> [0.00%]:
  rewind (zStream_63);

  <bb 55> [0.00%]:
  _144 = fgetc (zStream_63);

  <bb 56> [0.00%]:
  if (_144 == -1)
    goto <bb 113> (closeok); [0.00%]
  else
    goto <bb 57>; [0.00%]

  <bb 57> [0.00%]:
  ungetc (_144, zStream_63);

  <bb 58> [31.78%]:
  _268 = *fread (&obuf, 1, 5000, zStream_63);

  <bb 59> [100.00%]:
  # _269 = PHI <_268(58)>
  nread_149 = (int) _268;
  _25 = ferror (zStream_63);
  if (_25 != 0)
    goto <bb 60>; [0.00%]
  else
    goto <bb 68>; [0.00%]

  <bb 60> [0.00%]:
  bzerr.243_26 = bzerr;
  _163 = testBZ2ErrorHandling (bzerr.243_26, _133, streamNo_135);

  <bb 61> [0.00%]:
  stdin.244_27 = stdin;
  if (stdin.244_27 != zStream_63)
    goto <bb 62>; [0.00%]
  else
    goto <bb 63>; [0.00%]

  <bb 62> [0.00%]:
  fclose (zStream_63);

  <bb 63> [0.00%]:
  stdout.245_28 = stdout;
  if (stdout.245_28 != stream_62)
    goto <bb 64>; [0.00%]
  else
    goto <bb 65>; [0.00%]

  <bb 64> [0.00%]:
  fclose (stream_62);

  <bb 65> [0.00%]:
  if (_163 != 0)
    goto <bb 66>; [0.00%]
  else
    goto <bb 67>; [0.00%]

  <bb 66> [0.00%]:
  syncSetTerminateFlag (1);

  <bb 67> [0.00%]:
  goto <bb 136>; [0.00%]

  <bb 68> [0.00%]:
  if (nread_149 > 0)
    goto <bb 69>; [0.00%]
  else
    goto <bb 70>; [0.00%]

  <bb 69> [0.00%]:
  _29 = (long unsigned int) nread_149;
  fwrite (&obuf, 1, _29, stream_62);

  <bb 70> [0.00%]:
  _30 = ferror (stream_62);
  if (_30 != 0)
    goto <bb 71>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 71> [0.00%]:
  bzerr.247_31 = bzerr;
  _156 = testBZ2ErrorHandling (bzerr.247_31, _133, streamNo_135);

  <bb 72> [0.00%]:
  stdin.248_32 = stdin;
  if (stdin.248_32 != zStream_63)
    goto <bb 73>; [0.00%]
  else
    goto <bb 74>; [0.00%]

  <bb 73> [0.00%]:
  fclose (zStream_63);

  <bb 74> [0.00%]:
  stdout.249_33 = stdout;
  if (stdout.249_33 != stream_62)
    goto <bb 75>; [0.00%]
  else
    goto <bb 76>; [0.00%]

  <bb 75> [0.00%]:
  fclose (stream_62);

  <bb 76> [0.00%]:
  if (_156 != 0)
    goto <bb 77>; [0.00%]
  else
    goto <bb 78>; [0.00%]

  <bb 77> [0.00%]:
  syncSetTerminateFlag (1);

  <bb 78> [0.00%]:
  goto <bb 136>; [0.00%]

  <bb 79> [0.00%]:
  bzerr.250_34 = bzerr;
  if (bzerr.250_34 == 0)
    goto <bb 81>; [0.00%]
  else
    goto <bb 80>; [0.00%]

  <bb 80> [0.00%]:
  bzerr.251_35 = bzerr;
  if (bzerr.251_35 == 4)
    goto <bb 81>; [0.00%]
  else
    goto <bb 83>; [0.00%]

  <bb 81> [0.00%]:
  if (_140 > 0)
    goto <bb 82>; [0.00%]
  else
    goto <bb 83>; [0.00%]

  <bb 82> [0.00%]:
  _36 = (long unsigned int) _140;
  fwrite (&obuf, 1, _36, stream_62);

  <bb 83> [0.00%]:
  _37 = ferror (stream_62);
  if (_37 != 0)
    goto <bb 84>; [0.00%]
  else
    goto <bb 41>; [0.00%]

  <bb 84> [0.00%]:
  bzerr.253_38 = bzerr;
  _173 = testBZ2ErrorHandling (bzerr.253_38, _133, streamNo_135);

  <bb 85> [0.00%]:
  stdin.254_39 = stdin;
  if (stdin.254_39 != zStream_63)
    goto <bb 86>; [0.00%]
  else
    goto <bb 87>; [0.00%]

  <bb 86> [0.00%]:
  fclose (zStream_63);

  <bb 87> [0.00%]:
  stdout.255_40 = stdout;
  if (stdout.255_40 != stream_62)
    goto <bb 88>; [0.00%]
  else
    goto <bb 89>; [0.00%]

  <bb 88> [0.00%]:
  fclose (stream_62);

  <bb 89> [0.00%]:
  if (_173 != 0)
    goto <bb 90>; [0.00%]
  else
    goto <bb 91>; [0.00%]

  <bb 90> [0.00%]:
  syncSetTerminateFlag (1);

  <bb 91> [0.00%]:
  goto <bb 136>; [0.00%]

  <bb 92> [0.00%]:
  bzerr.256_41 = bzerr;
  if (bzerr.256_41 != 4)
    goto <bb 93>; [0.00%]
  else
    goto <bb 101>; [0.00%]

  <bb 93> [0.00%]:
  bzerr.257_42 = bzerr;
  _197 = testBZ2ErrorHandling (bzerr.257_42, _133, streamNo_135);

  <bb 94> [0.00%]:
  stdin.258_43 = stdin;
  if (stdin.258_43 != zStream_63)
    goto <bb 95>; [0.00%]
  else
    goto <bb 96>; [0.00%]

  <bb 95> [0.00%]:
  fclose (zStream_63);

  <bb 96> [0.00%]:
  stdout.259_44 = stdout;
  if (stdout.259_44 != stream_62)
    goto <bb 97>; [0.00%]
  else
    goto <bb 98>; [0.00%]

  <bb 97> [0.00%]:
  fclose (stream_62);

  <bb 98> [0.00%]:
  if (_197 != 0)
    goto <bb 99>; [0.00%]
  else
    goto <bb 100>; [0.00%]

  <bb 99> [0.00%]:
  syncSetTerminateFlag (1);

  <bb 100> [0.00%]:
  goto <bb 136>; [0.00%]

  <bb 101> [0.00%]:
  BZ2_bzReadGetUnused (&bzerr, _133, &unusedTmp, &nUnused);

  <bb 102> [0.00%]:
  bzerr.260_45 = bzerr;
  if (bzerr.260_45 != 0)
    goto <bb 103>; [0.00%]
  else
    goto <bb 104>; [0.00%]

  <bb 103> [0.00%]:
  bzerr.261_46 = bzerr;
  handle_error (1, 3, "pbzip2: *ERROR: Unexpected error [bzerr=%d]. Aborting!\n", bzerr.261_46);
  goto <bb 136>; [0.00%]

  <bb 104> [0.00%]:
  # i_65 = PHI <0(102), i_186(105)>
  nUnused.262_47 = nUnused;
  if (nUnused.262_47 <= i_65)
    goto <bb 106>; [0.00%]
  else
    goto <bb 105>; [0.00%]

  <bb 105> [0.00%]:
  unusedTmp.263_48 = unusedTmp;
  _49 = (sizetype) i_65;
  _50 = unusedTmp.263_48 + _49;
  _51 = *_50;
  unused[i_65] = _51;
  i_186 = i_65 + 1;
  goto <bb 104>; [0.00%]

  <bb 106> [0.00%]:
  BZ2_bzReadClose (&bzerr, _133);

  <bb 107> [0.00%]:
  bzerr.264_52 = bzerr;
  if (bzerr.264_52 != 0)
    goto <bb 108>; [0.00%]
  else
    goto <bb 109>; [0.00%]

  <bb 108> [0.00%]:
  bzerr.265_53 = bzerr;
  handle_error (1, 3, "pbzip2: *ERROR: Unexpected error [bzerr=%d]. Aborting!\n", bzerr.265_53);
  goto <bb 136>; [0.00%]

  <bb 109> [0.00%]:
  nUnused.266_54 = nUnused;
  if (nUnused.266_54 == 0)
    goto <bb 110>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 110> [0.00%]:
  _189 = fgetc (zStream_63);

  <bb 111> [0.00%]:
  if (_189 == -1)
    goto <bb 113> (closeok); [0.00%]
  else
    goto <bb 112>; [0.00%]

  <bb 112> [0.00%]:
  ungetc (_189, zStream_63);
  goto <bb 20>; [0.00%]

closeok [0.00%]:
  _55 = ferror (zStream_63);
  if (_55 != 0)
    goto <bb 114>; [0.00%]
  else
    goto <bb 119>; [0.00%]

  <bb 114> [0.00%]:
  stdin.268_56 = stdin;
  if (stdin.268_56 != zStream_63)
    goto <bb 115>; [0.00%]
  else
    goto <bb 116>; [0.00%]

  <bb 115> [0.00%]:
  fclose (zStream_63);

  <bb 116> [0.00%]:
  stdout.269_57 = stdout;
  if (stdout.269_57 != stream_62)
    goto <bb 117>; [0.00%]
  else
    goto <bb 118>; [0.00%]

  <bb 117> [0.00%]:
  fclose (stream_62);

  <bb 118> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Problem with input stream of file [%s]!  Skipping...\n", InFilename_111(D));
  goto <bb 136>; [0.00%]

  <bb 119> [0.00%]:
  _206 = do_fclose (zStream_63);

  <bb 120> [0.00%]:
  if (_206 == -1)
    goto <bb 121>; [0.00%]
  else
    goto <bb 122>; [0.00%]

  <bb 121> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Problem closing file [%s]!  Skipping...\n", InFilename_111(D));
  goto <bb 136>; [0.00%]

  <bb 122> [0.00%]:
  _58 = ferror (stream_62);
  if (_58 != 0)
    goto <bb 123>; [0.00%]
  else
    goto <bb 126>; [0.00%]

  <bb 123> [0.00%]:
  stdout.271_59 = stdout;
  if (stdout.271_59 != stream_62)
    goto <bb 124>; [0.00%]
  else
    goto <bb 125>; [0.00%]

  <bb 124> [0.00%]:
  fclose (stream_62);

  <bb 125> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Problem with output stream of file [%s]!  Skipping...\n", InFilename_111(D));
  goto <bb 136>; [0.00%]

  <bb 126> [0.00%]:
  _211 = do_fflush (stream_62);

  <bb 127> [0.00%]:
  if (_211 != 0)
    goto <bb 128>; [0.00%]
  else
    goto <bb 131>; [0.00%]

  <bb 128> [0.00%]:
  stdout.272_60 = stdout;
  if (stdout.272_60 != stream_62)
    goto <bb 129>; [0.00%]
  else
    goto <bb 130>; [0.00%]

  <bb 129> [0.00%]:
  fclose (stream_62);

  <bb 130> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Problem with output stream of file [%s]!  Skipping...\n", InFilename_111(D));
  goto <bb 136>; [0.00%]

  <bb 131> [0.00%]:
  stdout.273_61 = stdout;
  if (stdout.273_61 != stream_62)
    goto <bb 132>; [0.00%]
  else
    goto <bb 135>; [0.00%]

  <bb 132> [0.00%]:
  _214 = do_fclose (stream_62);

  <bb 133> [0.00%]:
  if (_214 == -1)
    goto <bb 134>; [0.00%]
  else
    goto <bb 135>; [0.00%]

  <bb 134> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Problem closing file [%s]!  Skipping...\n", OutFilename_121(D));
  goto <bb 136>; [0.00%]

  <bb 135> [0.00%]:
  syncSetProducerDone (1);

  <bb 136> [0.00%]:
  # _66 = PHI <-1(5), -1(10), -1(14), -1(19), -1(28), _233(39), -1(50), _163(67), _156(78), _173(91), _197(100), 3(103), 3(108), -1(118), -1(121), -1(125), -1(130), -1(134), 0(135)>
  obuf ={v} {CLOBBER};
  unused ={v} {CLOBBER};
  unusedTmp ={v} {CLOBBER};
  bzerr ={v} {CLOBBER};
  nUnused ={v} {CLOBBER};
  return _66;

<L153> [0.00%]:
  obuf ={v} {CLOBBER};
  unused ={v} {CLOBBER};
  unusedTmp ={v} {CLOBBER};
  bzerr ={v} {CLOBBER};
  nUnused ={v} {CLOBBER};
  resx 1

}



;; Function testCompressedData(char*) (_Z18testCompressedDataPc, funcdef_no=1999, decl_uid=39044, cgraph_uid=739, symbol_order=787)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fileName = &NONLOCAL
nUnused = &NULL
CALLUSED(11) = CALLUSED(11) + UNKNOWN
CALLUSED(11) = *CALLUSED(11) + UNKNOWN
CALLUSED(11) = fileName
CALLUSED(11) = &STRING
_1 = CALLUSED(11)
_1 = NONLOCAL
ESCAPED = fileName
ESCAPED = &STRING
_55 = NONLOCAL
_58 = NONLOCAL
ESCAPED = _58
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = fileName
stdin = NONLOCAL
zStream_53 = stdin
zStream_31 = _55
zStream_31 = zStream_53
ESCAPED = zStream_31
_3 = NONLOCAL
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = fileName
stdin.387_4 = stdin
ESCAPED = zStream_31
ESCAPED = fileName
streamNo_32 = &NULL
streamNo_32 = streamNo_67
streamNo_32 = streamNo_67
nUnused.388_5 = nUnused
_ZL9Verbosity = NONLOCAL
Verbosity.389_6 = _ZL9Verbosity
ESCAPED = &bzerr
ESCAPED = zStream_31
ESCAPED = Verbosity.389_6
ESCAPED = &NULL
ESCAPED = &unused
ESCAPED = nUnused.388_5
_65 = NONLOCAL
bzerr.390_7 = bzerr
bzerr.391_8 = bzerr
ESCAPED = bzerr.391_8
ESCAPED = _65
ESCAPED = streamNo_32
_109 = NONLOCAL
stdin.392_9 = stdin
ESCAPED = zStream_31
ESCAPED = fileName
streamNo_67 = streamNo_32
streamNo_67 = &NONLOCAL
bzerr.393_10 = bzerr
ESCAPED = &bzerr
ESCAPED = _65
ESCAPED = &obuf
ESCAPED = &NONLOCAL
_69 = NONLOCAL
bzerr.394_11 = bzerr
bzerr.395_12 = bzerr
ESCAPED = bzerr.395_12
ESCAPED = _65
ESCAPED = streamNo_67
_72 = NONLOCAL
stdin.396_13 = stdin
ESCAPED = zStream_31
ESCAPED = fileName
bzerr.397_14 = bzerr
bzerr.398_15 = bzerr
ESCAPED = bzerr.398_15
ESCAPED = _65
ESCAPED = streamNo_67
_104 = NONLOCAL
stdin.399_16 = stdin
ESCAPED = zStream_31
ESCAPED = fileName
ESCAPED = &bzerr
ESCAPED = _65
ESCAPED = &unusedTmp
ESCAPED = &nUnused
bzerr.400_17 = bzerr
stderr = NONLOCAL
stderr.401_18 = stderr
ESCAPED = stderr.401_18
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_126 = NONLOCAL
ESCAPED = &NONLOCAL
i_33 = &NULL
i_33 = i_79
nUnused.402_19 = nUnused
unusedTmp.403_20 = unusedTmp
_21 = i_33
_22 = unusedTmp.403_20
_23 = *_22
unused = _23
i_79 = i_33
i_79 = &NONLOCAL
ESCAPED = &bzerr
ESCAPED = _65
bzerr.404_24 = bzerr
stderr.405_25 = stderr
ESCAPED = stderr.405_25
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_127 = NONLOCAL
ESCAPED = &NONLOCAL
nUnused.406_26 = nUnused
ESCAPED = zStream_31
_82 = NONLOCAL
ESCAPED = _82
ESCAPED = zStream_31
ESCAPED = zStream_31
_27 = NONLOCAL
_94 = NONLOCAL
ESCAPED = _94
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = fileName
stdin.408_29 = stdin
ESCAPED = zStream_31
ESCAPED = fileName
ESCAPED = zStream_31
ESCAPED = fileName
_88 = NONLOCAL
stderr.409_30 = stderr
ESCAPED = stderr.409_30
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = fileName
_128 = NONLOCAL
_34 = &NONLOCAL
_34 = &NONLOCAL
_34 = _109
_34 = _72
_34 = _104
_34 = &NONLOCAL
_34 = &NONLOCAL
_34 = &NULL
ESCAPED = _34

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL nUnused bzerr unused obuf unusedTmp }
NONLOCAL = { ESCAPED NONLOCAL } same as _55
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fileName = { NONLOCAL }
nUnused = { NULL ESCAPED NONLOCAL } same as nUnused.388_5
strcmp = { }
CALLUSED(11) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(12) = { }
_1 = { STRING ESCAPED NONLOCAL }
*fopen64 = { }
_55 = { ESCAPED NONLOCAL }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_58 = { ESCAPED NONLOCAL } same as _55
_ZN6pbzip212ErrorContext9saveErrorEv = { }
_Z12handle_error8ExitFlagiPKcz = { }
zStream_53 = { ESCAPED NONLOCAL } same as _55
stdin = { ESCAPED NONLOCAL } same as _55
zStream_31 = { ESCAPED NONLOCAL } same as _55
ferror = { }
_3 = { ESCAPED NONLOCAL } same as _55
stdin.387_4 = { ESCAPED NONLOCAL } same as _55
_Z14verbose_fcloseP8_IO_FILEPKc = { }
streamNo_32 = { NULL NONLOCAL }
streamNo_67 = { NULL NONLOCAL } same as streamNo_32
nUnused.388_5 = { NULL ESCAPED NONLOCAL }
Verbosity.389_6 = { ESCAPED NONLOCAL } same as _55
_ZL9Verbosity = { ESCAPED NONLOCAL } same as _55
BZ2_bzReadOpen = { }
bzerr = { ESCAPED NONLOCAL } same as bzerr.390_7
unused = { ESCAPED NONLOCAL }
_65 = { ESCAPED NONLOCAL } same as _55
bzerr.390_7 = { ESCAPED NONLOCAL }
bzerr.391_8 = { ESCAPED NONLOCAL } same as bzerr.390_7
_Z20testBZ2ErrorHandlingiPvi = { }
_109 = { ESCAPED NONLOCAL } same as _55
stdin.392_9 = { ESCAPED NONLOCAL } same as _55
bzerr.393_10 = { ESCAPED NONLOCAL } same as bzerr.390_7
BZ2_bzRead = { }
obuf = { ESCAPED NONLOCAL }
_69 = { ESCAPED NONLOCAL } same as _55
bzerr.394_11 = { ESCAPED NONLOCAL } same as bzerr.390_7
bzerr.395_12 = { ESCAPED NONLOCAL } same as bzerr.390_7
_72 = { ESCAPED NONLOCAL } same as _55
stdin.396_13 = { ESCAPED NONLOCAL } same as _55
bzerr.397_14 = { ESCAPED NONLOCAL } same as bzerr.390_7
bzerr.398_15 = { ESCAPED NONLOCAL } same as bzerr.390_7
_104 = { ESCAPED NONLOCAL } same as _55
stdin.399_16 = { ESCAPED NONLOCAL } same as _55
BZ2_bzReadGetUnused = { }
unusedTmp = { ESCAPED NONLOCAL } same as unusedTmp.403_20
bzerr.400_17 = { ESCAPED NONLOCAL } same as bzerr.390_7
stderr.401_18 = { ESCAPED NONLOCAL } same as _55
stderr = { ESCAPED NONLOCAL } same as _55
__fprintf_chk = { }
_126 = { ESCAPED NONLOCAL } same as _55
exit = { }
i_33 = { NULL NONLOCAL } same as streamNo_32
i_79 = { NULL NONLOCAL } same as streamNo_32
nUnused.402_19 = { NULL ESCAPED NONLOCAL } same as nUnused.388_5
unusedTmp.403_20 = { ESCAPED NONLOCAL }
_21 = { NULL NONLOCAL } same as streamNo_32
_22 = { ESCAPED NONLOCAL } same as unusedTmp.403_20
_23 = { ESCAPED NONLOCAL }
BZ2_bzReadClose = { }
bzerr.404_24 = { ESCAPED NONLOCAL } same as bzerr.390_7
stderr.405_25 = { ESCAPED NONLOCAL } same as _55
_127 = { ESCAPED NONLOCAL } same as _55
nUnused.406_26 = { NULL ESCAPED NONLOCAL } same as nUnused.388_5
fgetc = { }
_82 = { ESCAPED NONLOCAL } same as _55
ungetc = { }
_27 = { ESCAPED NONLOCAL } same as _55
_94 = { ESCAPED NONLOCAL } same as _55
stdin.408_29 = { ESCAPED NONLOCAL } same as _55
_88 = { ESCAPED NONLOCAL } same as _55
stderr.409_30 = { ESCAPED NONLOCAL } same as _55
_128 = { ESCAPED NONLOCAL } same as _55
_34 = { NULL ESCAPED NONLOCAL }


Alias information for testCompressedData(char*)

Aliased symbols

nUnused, UID D.39644, int, is addressable
bzerr, UID D.39641, int, is addressable
unusedTmp, UID D.39640, unsigned char *, is addressable
unused, UID D.39639, unsigned char[5000], is addressable
obuf, UID D.39638, unsigned char[5000], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.39638 D.39639 D.39640 D.39641 D.39644 } (escaped)

Flow-insensitive points-to information

stdin.387_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.392_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.396_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.399_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.401_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
unusedTmp.403_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.405_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.408_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.409_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
zStream_31, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileName_52(D), points-to non-local, points-to NULL, points-to vars: { }
zStream_53, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_55, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_65, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_94, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

testCompressedData(char*) (char * fileName)
{
  int D.48107;
  int D.48104;
  int D.48101;
  int c;
  int i;
  int nUnused;
  int streamNo;
  int nread;
  int bzerr;
  unsigned char * unusedTmp;
  unsigned char unused[5000];
  unsigned char obuf[5000];
  BZFILE * bzf;
  int ret;
  struct FILE * zStream;
  int _1;
  int _3;
  struct FILE * stdin.387_4;
  int nUnused.388_5;
  int Verbosity.389_6;
  int bzerr.390_7;
  int bzerr.391_8;
  struct FILE * stdin.392_9;
  int bzerr.393_10;
  int bzerr.394_11;
  int bzerr.395_12;
  struct FILE * stdin.396_13;
  int bzerr.397_14;
  int bzerr.398_15;
  struct FILE * stdin.399_16;
  int bzerr.400_17;
  struct FILE * stderr.401_18;
  int nUnused.402_19;
  unsigned char * unusedTmp.403_20;
  sizetype _21;
  unsigned char * _22;
  unsigned char _23;
  int bzerr.404_24;
  struct FILE * stderr.405_25;
  int nUnused.406_26;
  int _27;
  struct FILE * stdin.408_29;
  struct FILE * stderr.409_30;
  int _34;
  struct FILE * _55;
  struct ErrorContext * _58;
  BZFILE * _65;
  int _69;
  int _72;
  int _82;
  int _88;
  struct ErrorContext * _94;
  int _104;
  int _109;
  int _126;
  int _127;
  int _128;

  <bb 2> [0.00%]:
  nUnused = 0;
  _1 = strcmp (fileName_52(D), "-");
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  _55 = *fopen64 (fileName_52(D), "rb");

  <bb 4> [0.00%]:
  if (_55 == 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 5> [0.00%]:
  _58 = pbzip2::ErrorContext::getInstance ();

  <bb 6> [0.00%]:
  pbzip2::ErrorContext::saveError (_58);

  <bb 7> [0.00%]:
  handle_error (0, -1, "pbzip2: *ERROR: Could not open input file [%s]!  Skipping...\n", fileName_52(D));
  goto <bb 58>; [0.00%]

  <bb 8> [0.00%]:
  zStream_53 = stdin;

  <bb 9> [0.00%]:
  # zStream_31 = PHI <_55(4), zStream_53(8)>
  _3 = ferror (zStream_31);
  if (_3 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 10> [0.00%]:
  handle_error (0, -1, "pbzip2: *ERROR: Problem with stream of file [%s]!  Skipping...\n", fileName_52(D));

  <bb 11> [0.00%]:
  stdin.387_4 = stdin;
  if (stdin.387_4 != zStream_31)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  verbose_fclose (zStream_31, fileName_52(D));

  <bb 13> [0.00%]:
  goto <bb 58>; [0.00%]

  <bb 14> [0.00%]:
  # streamNo_32 = PHI <0(9), streamNo_67(47), streamNo_67(44)>
  nUnused.388_5 = nUnused;
  Verbosity.389_6 = Verbosity;
  _65 = BZ2_bzReadOpen (&bzerr, zStream_31, Verbosity.389_6, 0, &unused, nUnused.388_5);

  <bb 15> [0.00%]:
  if (_65 == 0B)
    goto <bb 17>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  bzerr.390_7 = bzerr;
  if (bzerr.390_7 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 17> [0.00%]:
  bzerr.391_8 = bzerr;
  _109 = testBZ2ErrorHandling (bzerr.391_8, _65, streamNo_32);

  <bb 18> [0.00%]:
  stdin.392_9 = stdin;
  if (stdin.392_9 != zStream_31)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  verbose_fclose (zStream_31, fileName_52(D));

  <bb 20> [0.00%]:
  goto <bb 58>; [0.00%]

  <bb 21> [0.00%]:
  streamNo_67 = streamNo_32 + 1;

  <bb 22> [0.00%]:
  bzerr.393_10 = bzerr;
  if (bzerr.393_10 != 0)
    goto <bb 29>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 23> [0.00%]:
  _69 = BZ2_bzRead (&bzerr, _65, &obuf, 5000);

  <bb 24> [0.00%]:
  bzerr.394_11 = bzerr;
  if (bzerr.394_11 == -5)
    goto <bb 25>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 25> [0.00%]:
  bzerr.395_12 = bzerr;
  _72 = testBZ2ErrorHandling (bzerr.395_12, _65, streamNo_67);

  <bb 26> [0.00%]:
  stdin.396_13 = stdin;
  if (stdin.396_13 != zStream_31)
    goto <bb 27>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 27> [0.00%]:
  verbose_fclose (zStream_31, fileName_52(D));

  <bb 28> [0.00%]:
  goto <bb 58>; [0.00%]

  <bb 29> [0.00%]:
  bzerr.397_14 = bzerr;
  if (bzerr.397_14 != 4)
    goto <bb 30>; [0.00%]
  else
    goto <bb 34>; [0.00%]

  <bb 30> [0.00%]:
  bzerr.398_15 = bzerr;
  _104 = testBZ2ErrorHandling (bzerr.398_15, _65, streamNo_67);

  <bb 31> [0.00%]:
  stdin.399_16 = stdin;
  if (stdin.399_16 != zStream_31)
    goto <bb 32>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 32> [0.00%]:
  verbose_fclose (zStream_31, fileName_52(D));

  <bb 33> [0.00%]:
  goto <bb 58>; [0.00%]

  <bb 34> [0.00%]:
  BZ2_bzReadGetUnused (&bzerr, _65, &unusedTmp, &nUnused);

  <bb 35> [0.00%]:
  bzerr.400_17 = bzerr;
  if (bzerr.400_17 != 0)
    goto <bb 36>; [0.00%]
  else
    goto <bb 38>; [0.00%]

  <bb 36> [100.00%]:
  stderr.401_18 = stderr;
  _126 = __fprintf_chk (stderr.401_18, 1, "pbzip2: *ERROR: Unexpected error. Aborting!\n");

  <bb 37> [100.00%]:
  exit (3);

  <bb 38> [0.00%]:
  # i_33 = PHI <0(35), i_79(39)>
  nUnused.402_19 = nUnused;
  if (nUnused.402_19 <= i_33)
    goto <bb 40>; [0.00%]
  else
    goto <bb 39>; [0.00%]

  <bb 39> [0.00%]:
  unusedTmp.403_20 = unusedTmp;
  _21 = (sizetype) i_33;
  _22 = unusedTmp.403_20 + _21;
  _23 = *_22;
  unused[i_33] = _23;
  i_79 = i_33 + 1;
  goto <bb 38>; [0.00%]

  <bb 40> [0.00%]:
  BZ2_bzReadClose (&bzerr, _65);

  <bb 41> [0.00%]:
  bzerr.404_24 = bzerr;
  if (bzerr.404_24 != 0)
    goto <bb 42>; [0.00%]
  else
    goto <bb 44>; [0.00%]

  <bb 42> [100.00%]:
  stderr.405_25 = stderr;
  _127 = __fprintf_chk (stderr.405_25, 1, "pbzip2: *ERROR: Unexpected error. Aborting!\n");

  <bb 43> [100.00%]:
  exit (3);

  <bb 44> [0.00%]:
  nUnused.406_26 = nUnused;
  if (nUnused.406_26 == 0)
    goto <bb 45>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 45> [0.00%]:
  _82 = fgetc (zStream_31);

  <bb 46> [0.00%]:
  if (_82 == -1)
    goto <bb 48>; [0.00%]
  else
    goto <bb 47>; [0.00%]

  <bb 47> [0.00%]:
  ungetc (_82, zStream_31);
  goto <bb 14>; [0.00%]

  <bb 48> [0.00%]:
  _27 = ferror (zStream_31);
  if (_27 != 0)
    goto <bb 49>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 49> [0.00%]:
  _94 = pbzip2::ErrorContext::getInstance ();

  <bb 50> [0.00%]:
  pbzip2::ErrorContext::saveError (_94);

  <bb 51> [0.00%]:
  handle_error (0, -1, "pbzip2: *ERROR: Problem with stream of file [%s]!  Skipping...\n", fileName_52(D));

  <bb 52> [0.00%]:
  stdin.408_29 = stdin;
  if (stdin.408_29 != zStream_31)
    goto <bb 53>; [0.00%]
  else
    goto <bb 54>; [0.00%]

  <bb 53> [0.00%]:
  verbose_fclose (zStream_31, fileName_52(D));

  <bb 54> [0.00%]:
  goto <bb 58>; [0.00%]

  <bb 55> [0.00%]:
  _88 = verbose_fclose (zStream_31, fileName_52(D));

  <bb 56> [0.00%]:
  if (_88 == -1)
    goto <bb 57>; [0.00%]
  else
    goto <bb 58>; [0.00%]

  <bb 57> [100.00%]:
  stderr.409_30 = stderr;
  _128 = __fprintf_chk (stderr.409_30, 1, "pbzip2: *ERROR: Problem closing file [%s]!  Skipping...\n", fileName_52(D));

  <bb 58> [0.00%]:
  # _34 = PHI <-1(7), -1(13), _109(20), _72(28), _104(33), -1(54), -1(57), 0(56)>
  obuf ={v} {CLOBBER};
  unused ={v} {CLOBBER};
  unusedTmp ={v} {CLOBBER};
  bzerr ={v} {CLOBBER};
  nUnused ={v} {CLOBBER};
  return _34;

<L51> [0.00%]:
  obuf ={v} {CLOBBER};
  unused ={v} {CLOBBER};
  unusedTmp ={v} {CLOBBER};
  bzerr ={v} {CLOBBER};
  nUnused ={v} {CLOBBER};
  resx 1

}



;; Function getFileMetaData(char const*) (_Z15getFileMetaDataPKc, funcdef_no=2000, decl_uid=39036, cgraph_uid=740, symbol_order=788)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fileName = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = fileName
_ZL12fileMetaData = NONLOCAL
ESCAPED = &_ZL12fileMetaData
_5 = NONLOCAL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZL12fileMetaData }
NONLOCAL = { ESCAPED NONLOCAL } same as _5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fileName = { NONLOCAL }
*__xstat64 = { }
_ZL12fileMetaData = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }


Alias information for getFileMetaData(char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.38857 } (nonlocal, escaped)

Flow-insensitive points-to information

fileName_2(D), points-to non-local, points-to NULL, points-to vars: { }

getFileMetaData(char const*) (const char * fileName)
{
  int D.48111;
  int _5;

  <bb 2> [100.00%]:
  _5 = *__xstat64 (1, fileName_2(D), &fileMetaData);
  return _5;

}



;; Function writeFileMetaData(char const*) (_Z17writeFileMetaDataPKc, funcdef_no=2001, decl_uid=39038, cgraph_uid=741, symbol_order=789)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fileName = &NONLOCAL
_ZL12fileMetaData = NONLOCAL
_1 = _ZL12fileMetaData
uTimBuf = _1
_2 = _ZL12fileMetaData
uTimBuf = _2
_3 = _ZL12fileMetaData
ESCAPED = fileName
ESCAPED = _3
ret_20 = NONLOCAL
_37 = NONLOCAL
ESCAPED = _37
ESCAPED = fileName
ESCAPED = &uTimBuf
ret_22 = NONLOCAL
_33 = NONLOCAL
ESCAPED = _33
_6 = _ZL12fileMetaData
_7 = _ZL12fileMetaData
ESCAPED = fileName
ESCAPED = _7
ESCAPED = _6
ret_24 = NONLOCAL
_26 = NONLOCAL
ESCAPED = _26
_9 = NONLOCAL
_10 = ret_20
_10 = ret_22
_10 = ret_24
_10 = &NULL
ESCAPED = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL uTimBuf }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fileName = { NONLOCAL }
_1 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
_ZL12fileMetaData = { ESCAPED NONLOCAL }
uTimBuf = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
_3 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
chmod = { }
ret_20 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_37 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
_ZN6pbzip212ErrorContext9saveErrorEv = { }
utime = { }
ret_22 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
_33 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
_6 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
_7 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
chown = { }
ret_24 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
_26 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
geteuid = { }
_9 = { ESCAPED NONLOCAL } same as _ZL12fileMetaData
_10 = { NULL ESCAPED NONLOCAL }


Alias information for writeFileMetaData(char const*)

Aliased symbols

uTimBuf, UID D.39660, struct utimbuf, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.39660 } (escaped)

Flow-insensitive points-to information

fileName_18(D), points-to non-local, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

writeFileMetaData(char const*) (const char * fileName)
{
  struct utimbuf uTimBuf;
  int ret;
  long int _1;
  long int _2;
  unsigned int _3;
  unsigned int _6;
  unsigned int _7;
  unsigned int _9;
  int _10;
  struct ErrorContext * _26;
  struct ErrorContext * _33;
  struct ErrorContext * _37;

  <bb 2> [0.00%]:
  _1 = fileMetaData.st_atim.tv_sec;
  uTimBuf.actime = _1;
  _2 = fileMetaData.st_mtim.tv_sec;
  uTimBuf.modtime = _2;
  _3 = fileMetaData.st_mode;
  ret_20 = chmod (fileName_18(D), _3);
  if (ret_20 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  _37 = pbzip2::ErrorContext::getInstance ();

  <bb 4> [0.00%]:
  pbzip2::ErrorContext::saveError (_37);
  goto <bb 13>; [0.00%]

  <bb 5> [0.00%]:
  ret_22 = utime (fileName_18(D), &uTimBuf);
  if (ret_22 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 6> [0.00%]:
  _33 = pbzip2::ErrorContext::getInstance ();

  <bb 7> [0.00%]:
  pbzip2::ErrorContext::saveError (_33);
  goto <bb 13>; [0.00%]

  <bb 8> [0.00%]:
  _6 = fileMetaData.st_gid;
  _7 = fileMetaData.st_uid;
  ret_24 = chown (fileName_18(D), _7, _6);
  if (ret_24 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 9> [0.00%]:
  _26 = pbzip2::ErrorContext::getInstance ();

  <bb 10> [0.00%]:
  pbzip2::ErrorContext::saveError (_26);

  <bb 11> [0.00%]:
  _9 = geteuid ();
  if (_9 == 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:

  <bb 13> [0.00%]:
  # _10 = PHI <ret_20(4), ret_22(7), ret_24(11), 0(12)>
  uTimBuf ={v} {CLOBBER};
  return _10;

<L11> [0.00%]:
  uTimBuf ={v} {CLOBBER};
  resx 1

}



;; Function detectCPUs() (_Z10detectCPUsv, funcdef_no=2002, decl_uid=39049, cgraph_uid=742, symbol_order=790)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
_1 = NONLOCAL
ncpu_6 = _1
ncpu_2 = ncpu_6
ncpu_2 = &NONLOCAL
ESCAPED = ncpu_2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
sysconf = { }
_1 = { ESCAPED NONLOCAL }
ncpu_6 = { ESCAPED NONLOCAL } same as _1
ncpu_2 = { ESCAPED NONLOCAL } same as _1


Alias information for detectCPUs()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


detectCPUs() ()
{
  int ncpu;
  long int _1;

  <bb 2> [0.00%]:
  _1 = sysconf (84);
  ncpu_6 = (int) _1;
  if (ncpu_6 <= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:

  <bb 4> [0.00%]:
  # ncpu_2 = PHI <ncpu_6(2), 1(3)>
  return ncpu_2;

}



;; Function banner() (_Z6bannerv, funcdef_no=2003, decl_uid=39697, cgraph_uid=743, symbol_order=791)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
stderr = NONLOCAL
stderr.414_1 = stderr
ESCAPED = stderr.414_1
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_13 = NONLOCAL
stderr.415_2 = stderr
ESCAPED = stderr.415_2
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_12 = NONLOCAL
stderr.416_3 = stderr
ESCAPED = stderr.416_3
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_11 = NONLOCAL
stderr.417_4 = stderr
ESCAPED = stderr.417_4
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_10 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
stderr.414_1 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
__fprintf_chk = { }
_13 = { ESCAPED NONLOCAL } same as stderr
stderr.415_2 = { ESCAPED NONLOCAL } same as stderr
_12 = { ESCAPED NONLOCAL } same as stderr
stderr.416_3 = { ESCAPED NONLOCAL } same as stderr
_11 = { ESCAPED NONLOCAL } same as stderr
stderr.417_4 = { ESCAPED NONLOCAL } same as stderr
_10 = { ESCAPED NONLOCAL } same as stderr


Alias information for banner()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

stderr.414_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.415_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.416_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.417_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

banner() ()
{
  int D.48126;
  int D.48123;
  int D.48120;
  int D.48117;
  struct FILE * stderr.414_1;
  struct FILE * stderr.415_2;
  struct FILE * stderr.416_3;
  struct FILE * stderr.417_4;
  int _10;
  int _11;
  int _12;
  int _13;

  <bb 2> [100.00%]:
  stderr.414_1 = stderr;
  _13 = __fprintf_chk (stderr.414_1, 1, "Parallel BZIP2 v1.1.11 [Dec 12, 2014]\n");
  stderr.415_2 = stderr;
  _12 = __fprintf_chk (stderr.415_2, 1, "By: Jeff Gilchrist [http://compression.ca]\n");
  stderr.416_3 = stderr;
  _11 = __fprintf_chk (stderr.416_3, 1, "Major contributions: Yavor Nikolov [http://javornikolov.wordpress.com]\n");
  stderr.417_4 = stderr;
  _10 = __fprintf_chk (stderr.417_4, 1, "Uses libbzip2 by Julian Seward\n");
  return;

}



;; Function usage(char*, char const*) (_Z5usagePcPKc, funcdef_no=2004, decl_uid=39701, cgraph_uid=744, symbol_order=792)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
progname = &NONLOCAL
reason = &NONLOCAL
CALLUSED(12) = CALLUSED(12) + UNKNOWN
CALLUSED(12) = *CALLUSED(12) + UNKNOWN
CALLUSED(12) = reason
CALLUSED(12) = &STRING
CALLUSED(12) = &NONLOCAL
_1 = CALLUSED(12)
_1 = NONLOCAL
stderr = NONLOCAL
stderr.418_2 = stderr
ESCAPED = stderr.418_2
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_74 = NONLOCAL
stderr.419_3 = stderr
ESCAPED = stderr.419_3
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = reason
_75 = NONLOCAL
stderr.420_4 = stderr
ESCAPED = stderr.420_4
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = progname
_105 = NONLOCAL
stderr.421_5 = stderr
ESCAPED = stderr.421_5
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_104 = NONLOCAL
stderr.422_6 = stderr
ESCAPED = stderr.422_6
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_103 = NONLOCAL
stderr.423_7 = stderr
ESCAPED = stderr.423_7
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_102 = NONLOCAL
stderr.424_8 = stderr
ESCAPED = stderr.424_8
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_101 = NONLOCAL
stderr.425_9 = stderr
ESCAPED = stderr.425_9
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_100 = NONLOCAL
stderr.426_10 = stderr
ESCAPED = stderr.426_10
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_99 = NONLOCAL
stderr.427_11 = stderr
ESCAPED = stderr.427_11
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_98 = NONLOCAL
stderr.428_12 = stderr
ESCAPED = stderr.428_12
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_97 = NONLOCAL
stderr.429_13 = stderr
ESCAPED = stderr.429_13
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_96 = NONLOCAL
stderr.430_14 = stderr
ESCAPED = stderr.430_14
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_95 = NONLOCAL
_15 = NONLOCAL
stderr.431_16 = stderr
ESCAPED = stderr.431_16
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _15
_94 = NONLOCAL
stderr.432_17 = stderr
ESCAPED = stderr.432_17
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_93 = NONLOCAL
stderr.433_18 = stderr
ESCAPED = stderr.433_18
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_92 = NONLOCAL
stderr.434_19 = stderr
ESCAPED = stderr.434_19
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_91 = NONLOCAL
stderr.435_20 = stderr
ESCAPED = stderr.435_20
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_90 = NONLOCAL
stderr.436_21 = stderr
ESCAPED = stderr.436_21
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_89 = NONLOCAL
stderr.437_22 = stderr
ESCAPED = stderr.437_22
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_88 = NONLOCAL
stderr.438_23 = stderr
ESCAPED = stderr.438_23
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_87 = NONLOCAL
stderr.439_24 = stderr
ESCAPED = stderr.439_24
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_86 = NONLOCAL
stderr.440_25 = stderr
ESCAPED = stderr.440_25
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_85 = NONLOCAL
stderr.441_26 = stderr
ESCAPED = stderr.441_26
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_84 = NONLOCAL
stderr.442_27 = stderr
ESCAPED = stderr.442_27
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_83 = NONLOCAL
stderr.443_28 = stderr
ESCAPED = stderr.443_28
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_82 = NONLOCAL
stderr.444_29 = stderr
ESCAPED = stderr.444_29
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_81 = NONLOCAL
stderr.445_30 = stderr
ESCAPED = stderr.445_30
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_80 = NONLOCAL
stderr.446_31 = stderr
ESCAPED = stderr.446_31
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_79 = NONLOCAL
stderr.447_32 = stderr
ESCAPED = stderr.447_32
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_78 = NONLOCAL
stderr.448_33 = stderr
ESCAPED = stderr.448_33
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_77 = NONLOCAL
stderr.449_34 = stderr
ESCAPED = stderr.449_34
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_76 = NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
progname = { NONLOCAL }
reason = { NONLOCAL } same as progname
_Z6bannerv = { }
strncmp = { }
CALLUSED(12) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(13) = { }
_1 = { STRING ESCAPED NONLOCAL }
stderr.418_2 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
__fprintf_chk = { }
_74 = { ESCAPED NONLOCAL } same as stderr
stderr.419_3 = { ESCAPED NONLOCAL } same as stderr
_75 = { ESCAPED NONLOCAL } same as stderr
stderr.420_4 = { ESCAPED NONLOCAL } same as stderr
_105 = { ESCAPED NONLOCAL } same as stderr
stderr.421_5 = { ESCAPED NONLOCAL } same as stderr
_104 = { ESCAPED NONLOCAL } same as stderr
stderr.422_6 = { ESCAPED NONLOCAL } same as stderr
_103 = { ESCAPED NONLOCAL } same as stderr
stderr.423_7 = { ESCAPED NONLOCAL } same as stderr
_102 = { ESCAPED NONLOCAL } same as stderr
stderr.424_8 = { ESCAPED NONLOCAL } same as stderr
_101 = { ESCAPED NONLOCAL } same as stderr
stderr.425_9 = { ESCAPED NONLOCAL } same as stderr
_100 = { ESCAPED NONLOCAL } same as stderr
stderr.426_10 = { ESCAPED NONLOCAL } same as stderr
_99 = { ESCAPED NONLOCAL } same as stderr
stderr.427_11 = { ESCAPED NONLOCAL } same as stderr
_98 = { ESCAPED NONLOCAL } same as stderr
stderr.428_12 = { ESCAPED NONLOCAL } same as stderr
_97 = { ESCAPED NONLOCAL } same as stderr
stderr.429_13 = { ESCAPED NONLOCAL } same as stderr
_96 = { ESCAPED NONLOCAL } same as stderr
stderr.430_14 = { ESCAPED NONLOCAL } same as stderr
_95 = { ESCAPED NONLOCAL } same as stderr
_Z10detectCPUsv = { }
_15 = { ESCAPED NONLOCAL } same as stderr
stderr.431_16 = { ESCAPED NONLOCAL } same as stderr
_94 = { ESCAPED NONLOCAL } same as stderr
stderr.432_17 = { ESCAPED NONLOCAL } same as stderr
_93 = { ESCAPED NONLOCAL } same as stderr
stderr.433_18 = { ESCAPED NONLOCAL } same as stderr
_92 = { ESCAPED NONLOCAL } same as stderr
stderr.434_19 = { ESCAPED NONLOCAL } same as stderr
_91 = { ESCAPED NONLOCAL } same as stderr
stderr.435_20 = { ESCAPED NONLOCAL } same as stderr
_90 = { ESCAPED NONLOCAL } same as stderr
stderr.436_21 = { ESCAPED NONLOCAL } same as stderr
_89 = { ESCAPED NONLOCAL } same as stderr
stderr.437_22 = { ESCAPED NONLOCAL } same as stderr
_88 = { ESCAPED NONLOCAL } same as stderr
stderr.438_23 = { ESCAPED NONLOCAL } same as stderr
_87 = { ESCAPED NONLOCAL } same as stderr
stderr.439_24 = { ESCAPED NONLOCAL } same as stderr
_86 = { ESCAPED NONLOCAL } same as stderr
stderr.440_25 = { ESCAPED NONLOCAL } same as stderr
_85 = { ESCAPED NONLOCAL } same as stderr
stderr.441_26 = { ESCAPED NONLOCAL } same as stderr
_84 = { ESCAPED NONLOCAL } same as stderr
stderr.442_27 = { ESCAPED NONLOCAL } same as stderr
_83 = { ESCAPED NONLOCAL } same as stderr
stderr.443_28 = { ESCAPED NONLOCAL } same as stderr
_82 = { ESCAPED NONLOCAL } same as stderr
stderr.444_29 = { ESCAPED NONLOCAL } same as stderr
_81 = { ESCAPED NONLOCAL } same as stderr
stderr.445_30 = { ESCAPED NONLOCAL } same as stderr
_80 = { ESCAPED NONLOCAL } same as stderr
stderr.446_31 = { ESCAPED NONLOCAL } same as stderr
_79 = { ESCAPED NONLOCAL } same as stderr
stderr.447_32 = { ESCAPED NONLOCAL } same as stderr
_78 = { ESCAPED NONLOCAL } same as stderr
stderr.448_33 = { ESCAPED NONLOCAL } same as stderr
_77 = { ESCAPED NONLOCAL } same as stderr
stderr.449_34 = { ESCAPED NONLOCAL } same as stderr
_76 = { ESCAPED NONLOCAL } same as stderr
exit = { }


Alias information for usage(char*, char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

stderr.418_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.419_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.420_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.421_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.422_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.423_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.424_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.425_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.426_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.427_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.428_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.429_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.430_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.431_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.432_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.433_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.434_19, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.435_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.436_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.437_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.438_23, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.439_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.440_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.441_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.442_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.443_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.444_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.445_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.446_31, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.447_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.448_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.449_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
reason_38(D), points-to non-local, points-to NULL, points-to vars: { }
progname_41(D), points-to non-local, points-to NULL, points-to vars: { }

usage(char*, char const*) (char * progname, const char * reason)
{
  int D.48223;
  int D.48220;
  int D.48217;
  int D.48214;
  int D.48211;
  int D.48208;
  int D.48205;
  int D.48202;
  int D.48199;
  int D.48196;
  int D.48193;
  int D.48190;
  int D.48187;
  int D.48184;
  int D.48181;
  int D.48178;
  int D.48175;
  int D.48172;
  int D.48169;
  int D.48166;
  int D.48163;
  int D.48160;
  int D.48157;
  int D.48154;
  int D.48151;
  int D.48148;
  int D.48145;
  int D.48142;
  int D.48139;
  int D.48136;
  int D.48133;
  int D.48130;
  int _1;
  struct FILE * stderr.418_2;
  struct FILE * stderr.419_3;
  struct FILE * stderr.420_4;
  struct FILE * stderr.421_5;
  struct FILE * stderr.422_6;
  struct FILE * stderr.423_7;
  struct FILE * stderr.424_8;
  struct FILE * stderr.425_9;
  struct FILE * stderr.426_10;
  struct FILE * stderr.427_11;
  struct FILE * stderr.428_12;
  struct FILE * stderr.429_13;
  struct FILE * stderr.430_14;
  int _15;
  struct FILE * stderr.431_16;
  struct FILE * stderr.432_17;
  struct FILE * stderr.433_18;
  struct FILE * stderr.434_19;
  struct FILE * stderr.435_20;
  struct FILE * stderr.436_21;
  struct FILE * stderr.437_22;
  struct FILE * stderr.438_23;
  struct FILE * stderr.439_24;
  struct FILE * stderr.440_25;
  struct FILE * stderr.441_26;
  struct FILE * stderr.442_27;
  struct FILE * stderr.443_28;
  struct FILE * stderr.444_29;
  struct FILE * stderr.445_30;
  struct FILE * stderr.446_31;
  struct FILE * stderr.447_32;
  struct FILE * stderr.448_33;
  struct FILE * stderr.449_34;
  int _74;
  int _75;
  int _76;
  int _77;
  int _78;
  int _79;
  int _80;
  int _81;
  int _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  int _91;
  int _92;
  int _93;
  int _94;
  int _95;
  int _96;
  int _97;
  int _98;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int _104;
  int _105;

  <bb 2> [0.00%]:
  banner ();
  _1 = strncmp (reason_38(D), "HELP", 4);
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  stderr.418_2 = stderr;
  _74 = __fprintf_chk (stderr.418_2, 1, "\n");
  goto <bb 5>; [100.00%]

  <bb 4> [100.00%]:
  stderr.419_3 = stderr;
  _75 = __fprintf_chk (stderr.419_3, 1, "\nInvalid command line: %s.  Aborting...\n\n", reason_38(D));

  <bb 5> [100.00%]:
  stderr.420_4 = stderr;
  _105 = __fprintf_chk (stderr.420_4, 1, "Usage: %s [-1 .. -9] [-b#cdfhklm#p#qrS#tVz] <filename> <filename2> <filenameN>\n", progname_41(D));
  stderr.421_5 = stderr;
  _104 = __fprintf_chk (stderr.421_5, 1, " -1 .. -9        set BWT block size to 100k .. 900k (default 900k)\n");
  stderr.422_6 = stderr;
  _103 = __fprintf_chk (stderr.422_6, 1, " -b#             Block size in 100k steps (default 9 = 900k)\n");
  stderr.423_7 = stderr;
  _102 = __fprintf_chk (stderr.423_7, 1, " -c,--stdout     Output to standard out (stdout)\n");
  stderr.424_8 = stderr;
  _101 = __fprintf_chk (stderr.424_8, 1, " -d,--decompress Decompress file\n");
  stderr.425_9 = stderr;
  _100 = __fprintf_chk (stderr.425_9, 1, " -f,--force      Overwrite existing output file\n");
  stderr.426_10 = stderr;
  _99 = __fprintf_chk (stderr.426_10, 1, " -h,--help       Print this help message\n");
  stderr.427_11 = stderr;
  _98 = __fprintf_chk (stderr.427_11, 1, " -k,--keep       Keep input file, don\'t delete\n");
  stderr.428_12 = stderr;
  _97 = __fprintf_chk (stderr.428_12, 1, " -l,--loadavg    Load average determines max number processors to use\n");
  stderr.429_13 = stderr;
  _96 = __fprintf_chk (stderr.429_13, 1, " -m#             Maximum memory usage in 1MB steps (default 100 = 100MB)\n");
  stderr.430_14 = stderr;
  _95 = __fprintf_chk (stderr.430_14, 1, " -p#             Number of processors to use (default");
  _15 = detectCPUs ();
  stderr.431_16 = stderr;
  _94 = __fprintf_chk (stderr.431_16, 1, ": autodetect [%d])\n", _15);
  stderr.432_17 = stderr;
  _93 = __fprintf_chk (stderr.432_17, 1, " -q,--quiet      Quiet mode (default)\n");
  stderr.433_18 = stderr;
  _92 = __fprintf_chk (stderr.433_18, 1, " -r,--read       Read entire input file into RAM and split between processors\n");
  stderr.434_19 = stderr;
  _91 = __fprintf_chk (stderr.434_19, 1, " -S#             Child thread stack size in 1KB steps (default stack size if unspecified)\n");
  stderr.435_20 = stderr;
  _90 = __fprintf_chk (stderr.435_20, 1, " -t,--test       Test compressed file integrity\n");
  stderr.436_21 = stderr;
  _89 = __fprintf_chk (stderr.436_21, 1, " -v,--verbose    Verbose mode\n");
  stderr.437_22 = stderr;
  _88 = __fprintf_chk (stderr.437_22, 1, " -V,--version    Display version info for pbzip2 then exit\n");
  stderr.438_23 = stderr;
  _87 = __fprintf_chk (stderr.438_23, 1, " -z,--compress   Compress file (default)\n");
  stderr.439_24 = stderr;
  _86 = __fprintf_chk (stderr.439_24, 1, " --ignore-trailing-garbage=# Ignore trailing garbage flag (1 - ignored; 0 - forbidden)\n");
  stderr.440_25 = stderr;
  _85 = __fprintf_chk (stderr.440_25, 1, "\n");
  stderr.441_26 = stderr;
  _84 = __fprintf_chk (stderr.441_26, 1, "If no file names are given, pbzip2 compresses or decompresses from standard input to standard output.\n");
  stderr.442_27 = stderr;
  _83 = __fprintf_chk (stderr.442_27, 1, "\n");
  stderr.443_28 = stderr;
  _82 = __fprintf_chk (stderr.443_28, 1, "Example: pbzip2 -b15vk myfile.tar\n");
  stderr.444_29 = stderr;
  _81 = __fprintf_chk (stderr.444_29, 1, "Example: pbzip2 -p4 -r -5 myfile.tar second*.txt\n");
  stderr.445_30 = stderr;
  _80 = __fprintf_chk (stderr.445_30, 1, "Example: tar cf myfile.tar.bz2 --use-compress-prog=pbzip2 dir_to_compress/\n");
  stderr.446_31 = stderr;
  _79 = __fprintf_chk (stderr.446_31, 1, "Example: pbzip2 -d -m500 myfile.tar.bz2\n");
  stderr.447_32 = stderr;
  _78 = __fprintf_chk (stderr.447_32, 1, "Example: pbzip2 -dc myfile.tar.bz2 | tar x\n");
  stderr.448_33 = stderr;
  _77 = __fprintf_chk (stderr.448_33, 1, "Example: pbzip2 -c < myfile.txt > myfile.txt.bz2 \n");
  stderr.449_34 = stderr;
  _76 = __fprintf_chk (stderr.449_34, 1, "\n");
  exit (-1);

}



;; Function disposeMemorySingle<outBuff>(outBuff*&)void (_Z19disposeMemorySingleI7outBuffEvRPT_, funcdef_no=2253, decl_uid=39369, cgraph_uid=993, symbol_order=1041)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
pBuff = &NONLOCAL
_1 = *pBuff
_2 = *pBuff
ESCAPED = _2
ESCAPED = &NONLOCAL
derefaddrtmp(12) = &NULL
*pBuff = derefaddrtmp(12)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
pBuff = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_ZdlPvm = { }
derefaddrtmp(12) = { NULL }


Alias information for disposeMemorySingle<outBuff>(outBuff*&)void

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pBuff_5(D), points-to non-local, points-to NULL, points-to vars: { }

disposeMemorySingle<outBuff>(outBuff*&)void (struct outBuff * & pBuff)
{
  struct outBuff * _1;
  struct outBuff * _2;

  <bb 2> [0.00%]:
  _1 = *pBuff_5(D);
  if (_1 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _2 = *pBuff_5(D);
  operator delete (_2, 40);
  *pBuff_5(D) = 0B;

  <bb 4> [0.00%]:
  return;

}



;; Function producerDecompressCheckInterrupt(int, outBuff*&, int) (_Z32producerDecompressCheckInterruptiRP7outBuffi, funcdef_no=1980, decl_uid=39083, cgraph_uid=720, symbol_order=768)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
hInfile = &NONLOCAL
fileData = &NONLOCAL
lastBlock = &NONLOCAL
_10 = NONLOCAL
isInterrupted_3 = &NULL
isInterrupted_3 = &NONLOCAL
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_23 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
isInterrupted_15 = &NONLOCAL
isInterrupted_4 = isInterrupted_3
ESCAPED = hInfile
_24 = *fileData
ESCAPED = _24
ESCAPED = &NONLOCAL
derefaddrtmp(24) = &NULL
*fileData = derefaddrtmp(24)
_5 = &NONLOCAL
_5 = &NULL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZL18TerminateFlagMutex }
NONLOCAL = { ESCAPED NONLOCAL } same as _10
STOREDANYTHING = { }
INTEGER = { ANYTHING }
hInfile = { NONLOCAL }
fileData = { NONLOCAL } same as hInfile
lastBlock = { NONLOCAL } same as hInfile
_Z20syncGetLastGoodBlockv = { }
_10 = { ESCAPED NONLOCAL }
isInterrupted_3 = { NULL NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_23 = { ESCAPED NONLOCAL } same as _10
_ZL13terminateFlag = { ESCAPED NONLOCAL } same as _10
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
isInterrupted_15 = { NONLOCAL } same as hInfile
isInterrupted_4 = { NULL NONLOCAL } same as isInterrupted_3
close = { }
_24 = { ESCAPED NONLOCAL }
_ZdlPvm = { }
derefaddrtmp(24) = { NULL }
_5 = { NULL NONLOCAL } same as isInterrupted_3


Alias information for producerDecompressCheckInterrupt(int, outBuff*&, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38685 } (nonlocal, escaped)

Flow-insensitive points-to information

fileData_20(D), points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

producerDecompressCheckInterrupt(int, outBuff*&, int) (int hInfile, struct outBuff * & fileData, int lastBlock)
{
  int ret;
  int D.48227;
  bool isInterrupted;
  int _5;
  int _10;
  struct outBuff * _24;

  <bb 2> [0.00%]:
  _10 = syncGetLastGoodBlock ();
  if (_10 != -1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:

  <bb 4> [100.00%]:
  # isInterrupted_3 = PHI <0(2), 1(3)>
  safe_mutex_lock (&TerminateFlagMutex);
  ret_23 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);
  if (ret_23 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  # isInterrupted_15 = PHI <1(4)>
  goto <bb 7>; [100.00%]

  <bb 6> [0.00%]:
  # isInterrupted_4 = PHI <isInterrupted_3(4)>
  if (isInterrupted_4 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [100.00%]:
  close (hInfile_18(D));
  _24 = MEM[(struct outBuff * &)fileData_20(D)];
  if (_24 != 0B)
    goto <bb 8>; [57.44%]
  else
    goto <bb 9>; [42.56%]

  <bb 8> [57.44%]:
  operator delete (_24, 40);
  MEM[(struct outBuff * &)fileData_20(D)] = 0B;

  <bb 9> [0.00%]:

  <bb 10> [0.00%]:
  # _5 = PHI <1(9), 0(6)>
  return _5;

}



;; Function disposeMemory<char>(char*&)void (_Z13disposeMemoryIcEvRPT_, funcdef_no=2254, decl_uid=39441, cgraph_uid=994, symbol_order=1042)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
pBuff = &NONLOCAL
_1 = *pBuff
_2 = *pBuff
_3 = *pBuff
ESCAPED = _3
derefaddrtmp(13) = &NULL
*pBuff = derefaddrtmp(13)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
pBuff = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL } same as _1
_ZdaPv = { }
derefaddrtmp(13) = { NULL }


Alias information for disposeMemory<char>(char*&)void

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pBuff_7(D), points-to non-local, points-to NULL, points-to vars: { }

disposeMemory<char>(char*&)void (char * & pBuff)
{
  char * _1;
  char * _2;
  char * _3;

  <bb 2> [0.00%]:
  _1 = *pBuff_7(D);
  if (_1 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _2 = *pBuff_7(D);
  if (_2 != 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _3 = *pBuff_7(D);
  operator delete[] (_3);

  <bb 5> [0.00%]:
  *pBuff_7(D) = 0B;

  <bb 6> [0.00%]:
  return;

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::operator[](unsigned long) (_ZNSt6vectorI7outBuffSaIS0_EEixEm, funcdef_no=2255, decl_uid=38066, cgraph_uid=995, symbol_order=1043)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
_1 = *this
_2 = __n
_2 = &NONLOCAL
_6 = _1
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { NONLOCAL } same as this
_6 = { ESCAPED NONLOCAL } same as _1


Alias information for std::vector<outBuff, std::allocator<outBuff> >::operator[](unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::operator[](unsigned long) (struct vector * const this, size_type __n)
{
  struct outBuff * _1;
  long unsigned int _2;
  struct value_type & _6;

  <bb 2> [0.00%]:
  _1 = this_4(D)->D.38528._M_impl._M_start;
  _2 = __n_5(D) * 40;
  _6 = _1 + _2;
  return _6;

}



;; Function fileWriter (fileWriter, funcdef_no=1984, decl_uid=39092, cgraph_uid=724, symbol_order=772)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
outname = &NONLOCAL
_ZL12OutputStdOut = NONLOCAL
OutputStdOut.156_1 = _ZL12OutputStdOut
ESCAPED = outname
_114 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = outname
hOutfile_195 = &NONLOCAL
hOutfile_195 = _114
CompressedSize_71 = &NULL
CompressedSize_71 = CompressedSize_139
CompressedSize_71 = CompressedSize_139
CompressedSize_71 = CompressedSize_139
CompressedSize_71 = CompressedSize_71
percentComplete_72 = &NULL
percentComplete_72 = percentComplete_72
percentComplete_72 = percentComplete_73
percentComplete_72 = percentComplete_73
percentComplete_72 = percentComplete_72
currBlock_75 = &NULL
currBlock_75 = currBlock_76
currBlock_75 = currBlock_76
currBlock_75 = currBlock_76
currBlock_75 = currBlock_75
outBufferPos_77 = &NULL
outBufferPos_77 = outBufferPos_79
outBufferPos_77 = outBufferPos_79
outBufferPos_77 = outBufferPos_79
outBufferPos_77 = outBufferPos_77
bytesProcessed_80 = &NULL
bytesProcessed_80 = bytesProcessed_140
bytesProcessed_80 = bytesProcessed_140
bytesProcessed_80 = bytesProcessed_140
bytesProcessed_80 = bytesProcessed_80
prevBlockInSequence_81 = &NULL
prevBlockInSequence_81 = prevBlockInSequence_82
prevBlockInSequence_81 = prevBlockInSequence_82
prevBlockInSequence_81 = prevBlockInSequence_82
prevBlockInSequence_81 = prevBlockInSequence_81
_119 = NONLOCAL
_ZL9NumBlocks = NONLOCAL
NumBlocks.159_3 = _ZL9NumBlocks
iftmp.158_145 = &NONLOCAL
iftmp.158_104 = &NULL
iftmp.158_104 = &NULL
iftmp.158_104 = &NULL
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_202 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
_ZL8OutMutex = NONLOCAL
OutMutex.161_5 = _ZL8OutMutex
ESCAPED = OutMutex.161_5
_ZL13LastGoodBlock = NONLOCAL
LastGoodBlock.162_6 = _ZL13LastGoodBlock
_ZL16NextBlockToWrite = NONLOCAL
NextBlockToWrite.163_7 = _ZL16NextBlockToWrite
LastGoodBlock.164_8 = _ZL13LastGoodBlock
OutMutex.165_9 = _ZL8OutMutex
ESCAPED = OutMutex.165_9
_ZL12OutputBuffer = NONLOCAL
_203 = _ZL12OutputBuffer
_204 = outBufferPos_77
_204 = &NONLOCAL
_205 = _203
_212 = _205
_10 = _205
_11 = *_10
iftmp.167_125 = &NONLOCAL
_12 = *prevBlockInSequence_81 + 256
iftmp.167_102 = &NULL
iftmp.167_102 = &NULL
OutMutex.170_15 = _ZL8OutMutex
ESCAPED = OutMutex.170_15
iftmp.167_103 = &NONLOCAL
OutMutex.168_13 = _ZL8OutMutex
_ZL21OutBufferHeadNotEmpty = NONLOCAL
ESCAPED = &_ZL21OutBufferHeadNotEmpty
ESCAPED = OutMutex.168_13
ESCAPED = &NONLOCAL
ESCAPED = &STRING
OutMutex.169_14 = _ZL8OutMutex
ESCAPED = OutMutex.169_14
outBlock_135 = *prevBlockInSequence_81 + 256
_206 = _ZL12OutputBuffer
_207 = outBufferPos_77
_207 = &NONLOCAL
_208 = _206
_213 = _208
outBlock_134 = _208
outBlock_83 = outBlock_135
outBlock_83 = _208
_16 = *outBlock_83 + 64
_17 = _16
_18 = *outBlock_83
ESCAPED = hOutfile_195
ESCAPED = _18
ESCAPED = _17
_137 = NONLOCAL
ret_138 = _137
OutputStdOut.171_20 = _ZL12OutputStdOut
ESCAPED = hOutfile_195
_21 = *outBlock_83 + 64
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _21
ESCAPED = ret_138
_22 = ret_138
CompressedSize_139 = _22
CompressedSize_139 = CompressedSize_71
_23 = *outBlock_83 + 160
_24 = _23
bytesProcessed_140 = _24
bytesProcessed_140 = bytesProcessed_80
_25 = *outBlock_83
_26 = *outBlock_83
ESCAPED = _26
derefaddrtmp(84) = &NULL
*outBlock_83 = derefaddrtmp(84)
derefaddrtmp(85) = &NULL
*outBlock_83 + 64 = derefaddrtmp(85)
_27 = *outBlock_83 + 192
outBufferPos_144 = outBufferPos_77
outBufferPos_144 = &NONLOCAL
_ZL20NumBufferedBlocksMax = NONLOCAL
NumBufferedBlocksMax.173_28 = _ZL20NumBufferedBlocksMax
outBufferPos_78 = outBufferPos_144
outBufferPos_78 = &NULL
currBlock_147 = currBlock_75
currBlock_147 = &NONLOCAL
currBlock_76 = currBlock_75
currBlock_76 = currBlock_147
outBufferPos_79 = outBufferPos_77
outBufferPos_79 = outBufferPos_78
OutMutex.174_29 = _ZL8OutMutex
ESCAPED = OutMutex.174_29
_30 = *outBlock_83 + 192
NextBlockToWrite.175_31 = _ZL16NextBlockToWrite
_32 = NextBlockToWrite.175_31
_32 = &NONLOCAL
_ZL16NextBlockToWrite = _32
ESCAPED = _32
_ZL19OutBufferPosToWrite = NONLOCAL
_ZL19OutBufferPosToWrite = outBufferPos_79
ESCAPED = outBufferPos_79
_33 = *outBlock_83 + 128
_ZL21NumBufferedTailBlocks = NONLOCAL
NumBufferedTailBlocks.176_34 = _ZL21NumBufferedTailBlocks
_35 = NumBufferedTailBlocks.176_34
_35 = &NONLOCAL
_ZL21NumBufferedTailBlocks = _35
ESCAPED = _35
_ZL21notTooMuchNumBuffered = NONLOCAL
notTooMuchNumBuffered.177_36 = _ZL21notTooMuchNumBuffered
ESCAPED = notTooMuchNumBuffered.177_36
_ZL18ErrStateChangeCond = NONLOCAL
ESCAPED = &_ZL18ErrStateChangeCond
OutMutex.178_37 = _ZL8OutMutex
ESCAPED = OutMutex.178_37
_38 = *outBlock_83 + 128
ESCAPED = prevBlockInSequence_81
ESCAPED = &NONLOCAL
_39 = *outBlock_83 + 192
_40 = *outBlock_83 + 128
ESCAPED = outBlock_83
ESCAPED = &NONLOCAL
prevBlockInSequence_82 = &NULL
prevBlockInSequence_82 = outBlock_83
prevBlockInSequence_82 = &NULL
_ZL9QuietMode = NONLOCAL
QuietMode.179_41 = _ZL9QuietMode
percentCompleteOld_159 = percentComplete_72
_ZL10InFileSize = NONLOCAL
InFileSize.180_42 = _ZL10InFileSize
_43 = bytesProcessed_140
_44 = _43
_44 = &NONLOCAL
InFileSize.181_45 = _ZL10InFileSize
_46 = InFileSize.181_45
_47 = _44
_47 = _46
percentComplete_160 = _47
percentComplete_73 = percentComplete_72
percentComplete_73 = percentComplete_160
stderr = NONLOCAL
stderr.182_48 = stderr
ESCAPED = stderr.182_48
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = percentComplete_73
_133 = NONLOCAL
stderr.183_49 = stderr
ESCAPED = stderr.183_49
ESCAPED = hOutfile_195
_ZL13Bz2HeaderZero = NONLOCAL
ESCAPED = &_ZL13Bz2HeaderZero
ESCAPED = &NONLOCAL
_169 = NONLOCAL
ret_170 = _169
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
OutputStdOut.184_51 = _ZL12OutputStdOut
ESCAPED = hOutfile_195
_174 = NONLOCAL
_177 = NONLOCAL
ESCAPED = _177
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
QuietMode.185_53 = _ZL9QuietMode
CompressedSize.186_54 = CompressedSize_71
stderr.187_55 = stderr
ESCAPED = stderr.187_55
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = CompressedSize.186_54
_128 = NONLOCAL
_ZL9FifoQueue = NONLOCAL
FifoQueue.188_56 = _ZL9FifoQueue
FifoQueue.189_57 = _ZL9FifoQueue
_58 = *FifoQueue.189_57 + 448
ESCAPED = _58
FifoQueue.190_59 = _ZL9FifoQueue
_60 = *FifoQueue.190_59 + 576
ESCAPED = _60
FifoQueue.191_61 = _ZL9FifoQueue
_62 = *FifoQueue.191_61 + 512
ESCAPED = _62
FifoQueue.192_63 = _ZL9FifoQueue
_64 = *FifoQueue.192_63 + 448
ESCAPED = _64
OutMutex.193_65 = _ZL8OutMutex
ESCAPED = OutMutex.193_65
notTooMuchNumBuffered.194_66 = _ZL21notTooMuchNumBuffered
ESCAPED = notTooMuchNumBuffered.194_66
OutMutex.195_67 = _ZL8OutMutex
ESCAPED = OutMutex.195_67
QuietMode.196_68 = _ZL9QuietMode
stderr.197_69 = stderr
ESCAPED = stderr.197_69
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NONLOCAL
_201 = NONLOCAL
stderr.198_70 = stderr
ESCAPED = stderr.198_70
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZL18TerminateFlagMutex _ZL21OutBufferHeadNotEmpty _ZL18ErrStateChangeCond _ZL13Bz2HeaderZero } same as _18
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
STOREDANYTHING = { }
INTEGER = { ANYTHING }
outname = { NONLOCAL }
OutputStdOut.156_1 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL12OutputStdOut = { ESCAPED NONLOCAL }
_Z16safe_open_outputPKc = { }
_114 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_Z12handle_error8ExitFlagiPKcz = { }
hOutfile_195 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
CompressedSize_71 = { NULL ESCAPED NONLOCAL }
CompressedSize_139 = { NULL ESCAPED NONLOCAL } same as CompressedSize_71
percentComplete_72 = { NULL ESCAPED NONLOCAL }
percentComplete_73 = { NULL ESCAPED NONLOCAL } same as percentComplete_72
currBlock_75 = { NULL NONLOCAL }
currBlock_76 = { NULL NONLOCAL } same as currBlock_75
outBufferPos_77 = { NULL NONLOCAL } same as currBlock_75
outBufferPos_79 = { NULL NONLOCAL } same as currBlock_75
bytesProcessed_80 = { NULL ESCAPED NONLOCAL }
bytesProcessed_140 = { NULL ESCAPED NONLOCAL } same as bytesProcessed_80
prevBlockInSequence_81 = { NULL ESCAPED NONLOCAL }
prevBlockInSequence_82 = { NULL ESCAPED NONLOCAL } same as prevBlockInSequence_81
_Z19syncGetProducerDonev = { }
_119 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
NumBlocks.159_3 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL9NumBlocks = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
iftmp.158_145 = { NONLOCAL } same as outname
iftmp.158_104 = { NULL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_202 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL13terminateFlag = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
OutMutex.161_5 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL8OutMutex = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
LastGoodBlock.162_6 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL13LastGoodBlock = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
NextBlockToWrite.163_7 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL16NextBlockToWrite = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
LastGoodBlock.164_8 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
OutMutex.165_9 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_203 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL12OutputBuffer = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_204 = { NULL NONLOCAL } same as currBlock_75
_205 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_212 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_10 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_11 = { ESCAPED NONLOCAL }
iftmp.167_125 = { NONLOCAL } same as outname
_12 = { ESCAPED NONLOCAL }
iftmp.167_102 = { NULL } same as iftmp.158_104
OutMutex.170_15 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
iftmp.167_103 = { NONLOCAL } same as outname
OutMutex.168_13 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_Z20safe_cond_timed_waitP14pthread_cond_tP15pthread_mutex_tiPKc = { }
_ZL21OutBufferHeadNotEmpty = { ESCAPED NONLOCAL }
OutMutex.169_14 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
outBlock_135 = { ESCAPED NONLOCAL }
_206 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_207 = { NULL NONLOCAL } same as currBlock_75
_208 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_213 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
outBlock_134 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
outBlock_83 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL } same as _16
_18 = { NULL STRING ESCAPED NONLOCAL _ZL18TerminateFlagMutex _ZL21OutBufferHeadNotEmpty _ZL18ErrStateChangeCond _ZL13Bz2HeaderZero }
_Z8do_writeiPKvm = { }
_137 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
ret_138 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
OutputStdOut.171_20 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
close = { }
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_23 = { ESCAPED NONLOCAL }
_24 = { ESCAPED NONLOCAL } same as _23
_25 = { NULL STRING ESCAPED NONLOCAL _ZL18TerminateFlagMutex _ZL21OutBufferHeadNotEmpty _ZL18ErrStateChangeCond _ZL13Bz2HeaderZero } same as _18
_26 = { NULL STRING ESCAPED NONLOCAL _ZL18TerminateFlagMutex _ZL21OutBufferHeadNotEmpty _ZL18ErrStateChangeCond _ZL13Bz2HeaderZero } same as _18
_ZdaPv = { }
derefaddrtmp(84) = { NULL } same as iftmp.158_104
derefaddrtmp(85) = { NULL } same as iftmp.158_104
_27 = { ESCAPED NONLOCAL }
outBufferPos_144 = { NULL NONLOCAL } same as currBlock_75
NumBufferedBlocksMax.173_28 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL20NumBufferedBlocksMax = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
outBufferPos_78 = { NULL NONLOCAL } same as currBlock_75
currBlock_147 = { NULL NONLOCAL } same as currBlock_75
OutMutex.174_29 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_30 = { ESCAPED NONLOCAL }
NextBlockToWrite.175_31 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_32 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL19OutBufferPosToWrite = { NULL ESCAPED NONLOCAL } same as CompressedSize_71
_33 = { ESCAPED NONLOCAL }
NumBufferedTailBlocks.176_34 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL21NumBufferedTailBlocks = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_35 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
notTooMuchNumBuffered.177_36 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL21notTooMuchNumBuffered = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_Z19safe_cond_broadcastP14pthread_cond_t = { }
_ZL18ErrStateChangeCond = { ESCAPED NONLOCAL }
OutMutex.178_37 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_38 = { ESCAPED NONLOCAL }
_ZdlPvm = { }
_39 = { ESCAPED NONLOCAL }
_40 = { ESCAPED NONLOCAL }
QuietMode.179_41 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL9QuietMode = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
percentCompleteOld_159 = { NULL ESCAPED NONLOCAL } same as percentComplete_72
InFileSize.180_42 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL10InFileSize = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_43 = { NULL ESCAPED NONLOCAL } same as bytesProcessed_80
_44 = { NULL ESCAPED NONLOCAL }
InFileSize.181_45 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_46 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_47 = { NULL ESCAPED NONLOCAL } same as percentComplete_72
percentComplete_160 = { NULL ESCAPED NONLOCAL } same as percentComplete_72
stderr.182_48 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
stderr = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
__fprintf_chk = { }
_133 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
stderr.183_49 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
fflush = { }
_ZL13Bz2HeaderZero = { ESCAPED NONLOCAL }
_169 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
ret_170 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
OutputStdOut.184_51 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_174 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_177 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZN6pbzip212ErrorContext9saveErrorEv = { }
QuietMode.185_53 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
CompressedSize.186_54 = { NULL ESCAPED NONLOCAL } same as CompressedSize_71
stderr.187_55 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_128 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
FifoQueue.188_56 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_ZL9FifoQueue = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
FifoQueue.189_57 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_58 = { ESCAPED NONLOCAL }
FifoQueue.190_59 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_60 = { ESCAPED NONLOCAL }
FifoQueue.191_61 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_62 = { ESCAPED NONLOCAL }
FifoQueue.192_63 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_64 = { ESCAPED NONLOCAL }
OutMutex.193_65 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
notTooMuchNumBuffered.194_66 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
OutMutex.195_67 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
QuietMode.196_68 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
stderr.197_69 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
_201 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut
stderr.198_70 = { ESCAPED NONLOCAL } same as _ZL12OutputStdOut


Alias information for fileWriter

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.37416 D.38685 D.38821 D.38822 } (nonlocal, escaped)

Flow-insensitive points-to information

OutMutex.161_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.165_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.168_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.169_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.170_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.37416 D.38685 D.38821 D.38822 } (nonlocal, escaped)
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.37416 D.38685 D.38821 D.38822 } (nonlocal, escaped)
_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.37416 D.38685 D.38821 D.38822 } (nonlocal, escaped)
OutMutex.174_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.177_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.178_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.182_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.183_49, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.187_55, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.188_56, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.189_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.190_59, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_60, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.191_61, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_62, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
FifoQueue.192_63, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_64, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.193_65, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.194_66, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.195_67, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.197_69, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.198_70, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
prevBlockInSequence_81, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
prevBlockInSequence_82, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
outBlock_83, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
outname_109(D), points-to non-local, points-to NULL, points-to vars: { }
outBlock_134, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
outBlock_135, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_177, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_203, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_205, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_206, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_208, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_212, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_213, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

fileWriter (void * outname)
{
  struct value_type & D.48248;
  struct value_type & D.48245;
  int ret;
  int D.48242;
  int D.48240;
  int D.48237;
  int D.48234;
  int percentCompleteOld;
  struct outBuff * outBlock;
  struct outBuff * prevBlockInSequence;
  off_t bytesProcessed;
  int ret;
  size_t outBufferPos;
  int currBlock;
  int hOutfile;
  int percentComplete;
  off_t CompressedSize;
  char * OutFilename;
  int OutputStdOut.156_1;
  int NumBlocks.159_3;
  union pthread_mutex_t * OutMutex.161_5;
  int LastGoodBlock.162_6;
  int NextBlockToWrite.163_7;
  int LastGoodBlock.164_8;
  union pthread_mutex_t * OutMutex.165_9;
  struct value_type & _10;
  char * _11;
  struct outBuff * _12;
  union pthread_mutex_t * OutMutex.168_13;
  union pthread_mutex_t * OutMutex.169_14;
  union pthread_mutex_t * OutMutex.170_15;
  unsigned int _16;
  long unsigned int _17;
  char * _18;
  int OutputStdOut.171_20;
  unsigned int _21;
  long int _22;
  unsigned int _23;
  long int _24;
  char * _25;
  char * _26;
  bool _27;
  long unsigned int NumBufferedBlocksMax.173_28;
  union pthread_mutex_t * OutMutex.174_29;
  bool _30;
  int NextBlockToWrite.175_31;
  int _32;
  int _33;
  long unsigned int NumBufferedTailBlocks.176_34;
  long unsigned int _35;
  union pthread_cond_t * notTooMuchNumBuffered.177_36;
  union pthread_mutex_t * OutMutex.178_37;
  int _38;
  bool _39;
  int _40;
  int QuietMode.179_41;
  long int InFileSize.180_42;
  double _43;
  double _44;
  long int InFileSize.181_45;
  double _46;
  double _47;
  struct FILE * stderr.182_48;
  struct FILE * stderr.183_49;
  int OutputStdOut.184_51;
  int QuietMode.185_53;
  long unsigned int CompressedSize.186_54;
  struct FILE * stderr.187_55;
  struct queue * FifoQueue.188_56;
  struct queue * FifoQueue.189_57;
  union pthread_mutex_t * _58;
  struct queue * FifoQueue.190_59;
  union pthread_cond_t * _60;
  struct queue * FifoQueue.191_61;
  union pthread_cond_t * _62;
  struct queue * FifoQueue.192_63;
  union pthread_mutex_t * _64;
  union pthread_mutex_t * OutMutex.193_65;
  union pthread_cond_t * notTooMuchNumBuffered.194_66;
  union pthread_mutex_t * OutMutex.195_67;
  int QuietMode.196_68;
  struct FILE * stderr.197_69;
  struct FILE * stderr.198_70;
  bool iftmp.167_102;
  bool iftmp.167_103;
  bool iftmp.158_104;
  int _114;
  int _119;
  bool iftmp.167_125;
  int _128;
  int _133;
  long int _137;
  bool iftmp.158_145;
  long int _169;
  int _174;
  struct ErrorContext * _177;
  int _201;
  struct outBuff * _203;
  long unsigned int _204;
  struct value_type & _205;
  struct outBuff * _206;
  long unsigned int _207;
  struct value_type & _208;

  <bb 2> [0.00%]:
  OutputStdOut.156_1 = OutputStdOut;
  if (OutputStdOut.156_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  _114 = safe_open_output (outname_109(D));
  if (_114 == -1)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not create output file [%s]!\n", outname_109(D));
  goto <bb 60>; [0.00%]

  <bb 5> [0.00%]:
  # hOutfile_195 = PHI <1(2), _114(3)>

  <bb 6> [0.00%]:
  # CompressedSize_71 = PHI <0(5), CompressedSize_139(42), CompressedSize_139(46), CompressedSize_139(45), CompressedSize_71(20)>
  # percentComplete_72 = PHI <0(5), percentComplete_72(42), percentComplete_73(46), percentComplete_73(45), percentComplete_72(20)>
  # currBlock_75 = PHI <0(5), currBlock_76(42), currBlock_76(46), currBlock_76(45), currBlock_75(20)>
  # outBufferPos_77 = PHI <0(5), outBufferPos_79(42), outBufferPos_79(46), outBufferPos_79(45), outBufferPos_77(20)>
  # bytesProcessed_80 = PHI <0(5), bytesProcessed_140(42), bytesProcessed_140(46), bytesProcessed_140(45), bytesProcessed_80(20)>
  # prevBlockInSequence_81 = PHI <0B(5), prevBlockInSequence_82(42), prevBlockInSequence_82(46), prevBlockInSequence_82(45), prevBlockInSequence_81(20)>
  _119 = syncGetProducerDone ();
  if (_119 == 1)
    goto <bb 7>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  NumBlocks.159_3 = NumBlocks;
  if (NumBlocks.159_3 <= currBlock_75)
    goto <bb 8>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 8> [0.00%]:
  if (prevBlockInSequence_81 == 0B)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  # iftmp.158_145 = PHI <1(8)>
  goto <bb 47>; [100.00%]

  <bb 10> [100.00%]:
  # iftmp.158_104 = PHI <0(7), 0(6), 0(8)>
  safe_mutex_lock (&TerminateFlagMutex);
  ret_202 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);
  if (ret_202 != 0)
    goto <bb 47>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  OutMutex.161_5 = OutMutex;
  safe_mutex_lock (OutMutex.161_5);
  LastGoodBlock.162_6 = LastGoodBlock;
  if (LastGoodBlock.162_6 != -1)
    goto <bb 12>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 12> [0.00%]:
  NextBlockToWrite.163_7 = NextBlockToWrite;
  LastGoodBlock.164_8 = LastGoodBlock;
  if (NextBlockToWrite.163_7 > LastGoodBlock.164_8)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  OutMutex.165_9 = OutMutex;
  safe_mutex_unlock (OutMutex.165_9);
  goto <bb 47>; [0.00%]

  <bb 14> [100.00%]:
  _203 = OutputBuffer.D.38528._M_impl._M_start;
  _204 = outBufferPos_77 * 40;
  _205 = _203 + _204;
  _212 = _205;
  _10 = _205;
  _11 = _10->buf;
  if (_11 == 0B)
    goto <bb 15>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 15> [0.00%]:
  if (prevBlockInSequence_81 == 0B)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  # iftmp.167_125 = PHI <1(15)>
  goto <bb 20>; [100.00%]

  <bb 17> [0.00%]:
  _12 = prevBlockInSequence_81->next;
  if (_12 == 0B)
    goto <bb 19>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [0.00%]:
  # iftmp.167_102 = PHI <0(17), 0(14)>
  OutMutex.170_15 = OutMutex;
  safe_mutex_unlock (OutMutex.170_15);
  if (prevBlockInSequence_81 != 0B)
    goto <bb 21>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 19> [0.00%]:
  # iftmp.167_103 = PHI <1(17)>

  <bb 20> [0.00%]:
  OutMutex.168_13 = OutMutex;
  safe_cond_timed_wait (&OutBufferHeadNotEmpty, OutMutex.168_13, 1, "fileWriter");
  OutMutex.169_14 = OutMutex;
  safe_mutex_unlock (OutMutex.169_14);
  // predicted unlikely by continue predictor.
  goto <bb 6>; [0.00%]

  <bb 21> [0.00%]:
  outBlock_135 = prevBlockInSequence_81->next;
  goto <bb 23>; [0.00%]

  <bb 22> [100.00%]:
  _206 = OutputBuffer.D.38528._M_impl._M_start;
  _207 = outBufferPos_77 * 40;
  _208 = _206 + _207;
  _213 = _208;
  outBlock_134 = _208;

  <bb 23> [0.00%]:
  # outBlock_83 = PHI <outBlock_135(21), _208(22)>
  _16 = outBlock_83->bufSize;
  _17 = (long unsigned int) _16;
  _18 = outBlock_83->buf;
  _137 = do_write (hOutfile_195, _18, _17);
  ret_138 = (int) _137;
  if (ret_138 < 0)
    goto <bb 24>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 24> [0.00%]:
  OutputStdOut.171_20 = OutputStdOut;
  if (OutputStdOut.171_20 == 0)
    goto <bb 25>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 25> [0.00%]:
  close (hOutfile_195);

  <bb 26> [0.00%]:
  _21 = outBlock_83->bufSize;
  handle_error (1, -1, "pbzip2: *ERROR: Could not write %d bytes to file [ret=%d]!  Aborting...\n", _21, ret_138);
  goto <bb 60>; [0.00%]

  <bb 27> [0.00%]:
  _22 = (long int) ret_138;
  CompressedSize_139 = _22 + CompressedSize_71;
  _23 = outBlock_83->inSize;
  _24 = (long int) _23;
  bytesProcessed_140 = _24 + bytesProcessed_80;
  _25 = outBlock_83->buf;
  if (_25 != 0B)
    goto <bb 28>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 28> [0.00%]:
  _26 = outBlock_83->buf;
  operator delete[] (_26);

  <bb 29> [0.00%]:
  outBlock_83->buf = 0B;
  outBlock_83->bufSize = 0;
  _27 = outBlock_83->isLastInSequence;
  if (_27 != 0)
    goto <bb 30>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 30> [0.00%]:
  outBufferPos_144 = outBufferPos_77 + 1;
  NumBufferedBlocksMax.173_28 = NumBufferedBlocksMax;
  if (NumBufferedBlocksMax.173_28 == outBufferPos_144)
    goto <bb 31>; [0.00%]
  else
    goto <bb 32>; [0.00%]

  <bb 31> [0.00%]:

  <bb 32> [0.00%]:
  # outBufferPos_78 = PHI <outBufferPos_144(30), 0(31)>
  currBlock_147 = currBlock_75 + 1;

  <bb 33> [0.00%]:
  # currBlock_76 = PHI <currBlock_75(29), currBlock_147(32)>
  # outBufferPos_79 = PHI <outBufferPos_77(29), outBufferPos_78(32)>
  OutMutex.174_29 = OutMutex;
  safe_mutex_lock (OutMutex.174_29);
  _30 = outBlock_83->isLastInSequence;
  if (_30 != 0)
    goto <bb 34>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 34> [0.00%]:
  NextBlockToWrite.175_31 = NextBlockToWrite;
  _32 = NextBlockToWrite.175_31 + 1;
  NextBlockToWrite = _32;
  OutBufferPosToWrite = outBufferPos_79;

  <bb 35> [0.00%]:
  _33 = outBlock_83->sequenceNumber;
  if (_33 > 1)
    goto <bb 36>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 36> [0.00%]:
  NumBufferedTailBlocks.176_34 = NumBufferedTailBlocks;
  _35 = NumBufferedTailBlocks.176_34 + 18446744073709551615;
  NumBufferedTailBlocks = _35;

  <bb 37> [0.00%]:
  notTooMuchNumBuffered.177_36 = notTooMuchNumBuffered;
  safe_cond_broadcast (notTooMuchNumBuffered.177_36);
  safe_cond_broadcast (&ErrStateChangeCond);
  OutMutex.178_37 = OutMutex;
  safe_mutex_unlock (OutMutex.178_37);
  _38 = outBlock_83->sequenceNumber;
  if (_38 > 2)
    goto <bb 38>; [0.00%]
  else
    goto <bb 39>; [0.00%]

  <bb 38> [0.00%]:
  operator delete (prevBlockInSequence_81, 40);

  <bb 39> [0.00%]:
  _39 = outBlock_83->isLastInSequence;
  if (_39 != 0)
    goto <bb 40>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 40> [0.00%]:
  _40 = outBlock_83->sequenceNumber;
  if (_40 > 1)
    goto <bb 41>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 41> [0.00%]:
  operator delete (outBlock_83, 40);

  <bb 42> [0.00%]:
  # prevBlockInSequence_82 = PHI <0B(41), outBlock_83(39), 0B(40)>
  QuietMode.179_41 = QuietMode;
  if (QuietMode.179_41 != 1)
    goto <bb 43>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 43> [0.00%]:
  percentCompleteOld_159 = percentComplete_72;
  InFileSize.180_42 = InFileSize;
  if (InFileSize.180_42 > 0)
    goto <bb 44>; [0.00%]
  else
    goto <bb 45>; [0.00%]

  <bb 44> [0.00%]:
  _43 = (double) bytesProcessed_140;
  _44 = _43 * 1.0e+2;
  InFileSize.181_45 = InFileSize;
  _46 = (double) InFileSize.181_45;
  _47 = _44 / _46;
  percentComplete_160 = (int) _47;

  <bb 45> [0.00%]:
  # percentComplete_73 = PHI <percentComplete_72(43), percentComplete_160(44)>
  if (percentComplete_72 != percentComplete_73)
    goto <bb 46>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 46> [100.00%]:
  stderr.182_48 = stderr;
  _133 = __fprintf_chk (stderr.182_48, 1, "Completed: %d%%             \r", percentComplete_73);
  stderr.183_49 = stderr;
  fflush (stderr.183_49);
  goto <bb 6>; [0.00%]

  <bb 47> [0.00%]:
  if (currBlock_75 == 0)
    goto <bb 48>; [0.00%]
  else
    goto <bb 50>; [0.00%]

  <bb 48> [0.00%]:
  _169 = do_write (hOutfile_195, &Bz2HeaderZero, 14);
  ret_170 = (int) _169;
  if (ret_170 < 0)
    goto <bb 49>; [0.00%]
  else
    goto <bb 50>; [0.00%]

  <bb 49> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not write to file!  Aborting...\n");
  goto <bb 60>; [0.00%]

  <bb 50> [0.00%]:
  OutputStdOut.184_51 = OutputStdOut;
  if (OutputStdOut.184_51 == 0)
    goto <bb 51>; [0.00%]
  else
    goto <bb 53>; [0.00%]

  <bb 51> [0.00%]:
  _174 = close (hOutfile_195);
  if (_174 == -1)
    goto <bb 52>; [0.00%]
  else
    goto <bb 53>; [0.00%]

  <bb 52> [0.00%]:
  _177 = pbzip2::ErrorContext::getInstance ();
  pbzip2::ErrorContext::saveError (_177);
  handle_error (1, -1, "pbzip2: *ERROR: Could not close output file!  Aborting...\n");
  goto <bb 60>; [0.00%]

  <bb 53> [0.00%]:
  QuietMode.185_53 = QuietMode;
  if (QuietMode.185_53 != 1)
    goto <bb 54>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 54> [100.00%]:
  CompressedSize.186_54 = (long unsigned int) CompressedSize_71;
  stderr.187_55 = stderr;
  _128 = __fprintf_chk (stderr.187_55, 1, "    Output Size: %lu bytes\n", CompressedSize.186_54);

  <bb 55> [0.00%]:
  FifoQueue.188_56 = FifoQueue;
  if (FifoQueue.188_56 != 0B)
    goto <bb 56>; [0.00%]
  else
    goto <bb 57>; [0.00%]

  <bb 56> [0.00%]:
  FifoQueue.189_57 = FifoQueue;
  _58 = FifoQueue.189_57->mut;
  safe_mutex_lock (_58);
  FifoQueue.190_59 = FifoQueue;
  _60 = FifoQueue.190_59->notEmpty;
  safe_cond_broadcast (_60);
  FifoQueue.191_61 = FifoQueue;
  _62 = FifoQueue.191_61->notFull;
  safe_cond_broadcast (_62);
  FifoQueue.192_63 = FifoQueue;
  _64 = FifoQueue.192_63->mut;
  safe_mutex_unlock (_64);

  <bb 57> [0.00%]:
  OutMutex.193_65 = OutMutex;
  safe_mutex_lock (OutMutex.193_65);
  notTooMuchNumBuffered.194_66 = notTooMuchNumBuffered;
  safe_cond_broadcast (notTooMuchNumBuffered.194_66);
  OutMutex.195_67 = OutMutex;
  safe_mutex_unlock (OutMutex.195_67);
  QuietMode.196_68 = QuietMode;
  if (QuietMode.196_68 != 1)
    goto <bb 58>; [0.00%]
  else
    goto <bb 59>; [0.00%]

  <bb 58> [100.00%]:
  stderr.197_69 = stderr;
  _201 = __fprintf_chk (stderr.197_69, 1, "Completed: %d%%             \r", 100);
  stderr.198_70 = stderr;
  fflush (stderr.198_70);

  <bb 59> [0.00%]:

  <bb 60> [0.00%]:
  return 0B;

}



;; Function outputBufferAdd(outBuff const&, char const*) (_Z15outputBufferAddRK7outBuffPKc, funcdef_no=1997, decl_uid=39029, cgraph_uid=737, symbol_order=785)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
element = &NONLOCAL
caller = &NONLOCAL
_ZL8OutMutex = NONLOCAL
OutMutex.361_1 = _ZL8OutMutex
ESCAPED = OutMutex.361_1
_2 = *element + 96
_3 = _2
_ZL20NumBufferedBlocksMax = NONLOCAL
NumBufferedBlocksMax.362_4 = _ZL20NumBufferedBlocksMax
_5 = NumBufferedBlocksMax.362_4
_6 = _3
_6 = _5
dist_29 = _6
_ZL16NextBlockToWrite = NONLOCAL
NextBlockToWrite.363_7 = _ZL16NextBlockToWrite
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_46 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
OutMutex.365_9 = _ZL8OutMutex
ESCAPED = OutMutex.365_9
_ZL13LastGoodBlock = NONLOCAL
LastGoodBlock.366_10 = _ZL13LastGoodBlock
_11 = *element + 96
LastGoodBlock.367_12 = _ZL13LastGoodBlock
OutMutex.368_13 = _ZL8OutMutex
ESCAPED = OutMutex.368_13
OutMutex.369_14 = _ZL8OutMutex
_ZL21notTooMuchNumBuffered = NONLOCAL
notTooMuchNumBuffered.370_15 = _ZL21notTooMuchNumBuffered
ESCAPED = notTooMuchNumBuffered.370_15
ESCAPED = OutMutex.369_14
_16 = *element + 96
_49 = _16
_ZL19OutBufferPosToWrite = NONLOCAL
OutBufferPosToWrite.374_50 = _ZL19OutBufferPosToWrite
_51 = _49
_51 = OutBufferPosToWrite.374_50
NextBlockToWrite.375_52 = _ZL16NextBlockToWrite
_53 = NextBlockToWrite.375_52
outBuffPos_54 = _51
outBuffPos_54 = _53
NumBufferedBlocksMax.376_55 = _ZL20NumBufferedBlocksMax
outBuffPos_56 = outBuffPos_54
outBuffPos_56 = NumBufferedBlocksMax.376_55
outBuffPos_57 = outBuffPos_54
outBuffPos_57 = outBuffPos_56
_ZL12OutputBuffer = NONLOCAL
_40 = _ZL12OutputBuffer
_38 = outBuffPos_57
_38 = &NONLOCAL
_48 = _40
doubledereftmp(52) = *element + UNKNOWN
*_48 + UNKNOWN = doubledereftmp(52)
_ZL17NumBufferedBlocks = NONLOCAL
NumBufferedBlocks.371_17 = _ZL17NumBufferedBlocks
_18 = NumBufferedBlocks.371_17
_18 = &NONLOCAL
_ZL17NumBufferedBlocks = _18
ESCAPED = _18
_19 = *element + 96
NextBlockToWrite.372_20 = _ZL16NextBlockToWrite
_ZL21OutBufferHeadNotEmpty = NONLOCAL
ESCAPED = &_ZL21OutBufferHeadNotEmpty
OutMutex.373_21 = _ZL8OutMutex
ESCAPED = OutMutex.373_21
_58 = _ZL12OutputBuffer
_59 = outBuffPos_57
_59 = &NONLOCAL
_60 = _58
_22 = &NULL
_22 = &NULL
_22 = _60
ESCAPED = _22

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZL18TerminateFlagMutex _ZL21OutBufferHeadNotEmpty }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL8OutMutex
STOREDANYTHING = { }
INTEGER = { ANYTHING }
element = { NONLOCAL }
caller = { NONLOCAL } same as element
OutMutex.361_1 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL8OutMutex = { ESCAPED NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
NumBufferedBlocksMax.362_4 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL20NumBufferedBlocksMax = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_5 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_6 = { ESCAPED NONLOCAL }
dist_29 = { ESCAPED NONLOCAL } same as _6
NextBlockToWrite.363_7 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL16NextBlockToWrite = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_46 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL13terminateFlag = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
OutMutex.365_9 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
pthread_mutex_unlock = { }
LastGoodBlock.366_10 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL13LastGoodBlock = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_11 = { ESCAPED NONLOCAL }
LastGoodBlock.367_12 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
OutMutex.368_13 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
OutMutex.369_14 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
notTooMuchNumBuffered.370_15 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL21notTooMuchNumBuffered = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_Z14safe_cond_waitP14pthread_cond_tP15pthread_mutex_t = { }
_16 = { ESCAPED NONLOCAL }
_49 = { ESCAPED NONLOCAL } same as _16
OutBufferPosToWrite.374_50 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL19OutBufferPosToWrite = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_51 = { ESCAPED NONLOCAL }
NextBlockToWrite.375_52 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_53 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
outBuffPos_54 = { ESCAPED NONLOCAL } same as _51
NumBufferedBlocksMax.376_55 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
outBuffPos_56 = { ESCAPED NONLOCAL } same as _51
outBuffPos_57 = { ESCAPED NONLOCAL } same as _51
_40 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL12OutputBuffer = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_38 = { ESCAPED NONLOCAL } same as _51
_48 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
doubledereftmp(52) = { ESCAPED NONLOCAL }
NumBufferedBlocks.371_17 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL17NumBufferedBlocks = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_18 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_19 = { ESCAPED NONLOCAL }
NextBlockToWrite.372_20 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_Z16safe_cond_signalP14pthread_cond_t = { }
_ZL21OutBufferHeadNotEmpty = { ESCAPED NONLOCAL }
OutMutex.373_21 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_58 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_59 = { ESCAPED NONLOCAL } same as _51
_60 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_22 = { NULL ESCAPED NONLOCAL }


Alias information for outputBufferAdd(outBuff const&, char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38685 D.38821 } (nonlocal, escaped)

Flow-insensitive points-to information

OutMutex.361_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.365_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.368_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.369_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
notTooMuchNumBuffered.370_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.373_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
element_28(D), points-to non-local, points-to NULL, points-to vars: { }
_40, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_60, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

outputBufferAdd(outBuff const&, char const*) (const struct outBuff & element, const char * caller)
{
  struct value_type & D.48260;
  size_t outBuffPos;
  size_t D.48257;
  struct value_type & D.48254;
  int ret;
  int D.48251;
  size_t outBuffPos;
  int dist;
  union pthread_mutex_t * OutMutex.361_1;
  int _2;
  unsigned int _3;
  long unsigned int NumBufferedBlocksMax.362_4;
  unsigned int _5;
  unsigned int _6;
  int NextBlockToWrite.363_7;
  union pthread_mutex_t * OutMutex.365_9;
  int LastGoodBlock.366_10;
  int _11;
  int LastGoodBlock.367_12;
  union pthread_mutex_t * OutMutex.368_13;
  union pthread_mutex_t * OutMutex.369_14;
  union pthread_cond_t * notTooMuchNumBuffered.370_15;
  int _16;
  int NumBufferedBlocks.371_17;
  int _18;
  int _19;
  int NextBlockToWrite.372_20;
  union pthread_mutex_t * OutMutex.373_21;
  struct outBuff * _22;
  long unsigned int _38;
  struct outBuff * _40;
  struct value_type & _48;
  long unsigned int _49;
  long unsigned int OutBufferPosToWrite.374_50;
  long unsigned int _51;
  int NextBlockToWrite.375_52;
  long unsigned int _53;
  long unsigned int NumBufferedBlocksMax.376_55;
  struct outBuff * _58;
  long unsigned int _59;
  struct value_type & _60;

  <bb 2> [0.00%]:
  OutMutex.361_1 = OutMutex;
  safe_mutex_lock (OutMutex.361_1);
  _2 = element_28(D)->blockNumber;
  _3 = (unsigned int) _2;
  NumBufferedBlocksMax.362_4 = NumBufferedBlocksMax;
  _5 = (unsigned int) NumBufferedBlocksMax.362_4;
  _6 = _3 - _5;
  dist_29 = (int) _6;

  <bb 3> [0.00%]:
  NextBlockToWrite.363_7 = NextBlockToWrite;
  if (NextBlockToWrite.363_7 > dist_29)
    goto <bb 10>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);
  ret_46 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);
  if (ret_46 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  OutMutex.365_9 = OutMutex;
  pthread_mutex_unlock (OutMutex.365_9);
  goto <bb 15>; [0.00%]

  <bb 6> [0.00%]:
  LastGoodBlock.366_10 = LastGoodBlock;
  if (LastGoodBlock.366_10 != -1)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 7> [0.00%]:
  _11 = element_28(D)->blockNumber;
  LastGoodBlock.367_12 = LastGoodBlock;
  if (_11 > LastGoodBlock.367_12)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  OutMutex.368_13 = OutMutex;
  pthread_mutex_unlock (OutMutex.368_13);
  goto <bb 15>; [0.00%]

  <bb 9> [0.00%]:
  OutMutex.369_14 = OutMutex;
  notTooMuchNumBuffered.370_15 = notTooMuchNumBuffered;
  safe_cond_wait (notTooMuchNumBuffered.370_15, OutMutex.369_14);
  goto <bb 3>; [0.00%]

  <bb 10> [100.00%]:
  _16 = element_28(D)->blockNumber;
  _49 = (long unsigned int) _16;
  OutBufferPosToWrite.374_50 = OutBufferPosToWrite;
  _51 = _49 + OutBufferPosToWrite.374_50;
  NextBlockToWrite.375_52 = NextBlockToWrite;
  _53 = (long unsigned int) NextBlockToWrite.375_52;
  outBuffPos_54 = _51 - _53;
  NumBufferedBlocksMax.376_55 = NumBufferedBlocksMax;
  if (outBuffPos_54 >= NumBufferedBlocksMax.376_55)
    goto <bb 11>; [54.00%]
  else
    goto <bb 12>; [46.00%]

  <bb 11> [54.00%]:
  outBuffPos_56 = outBuffPos_54 - NumBufferedBlocksMax.376_55;

  <bb 12> [100.00%]:
  # outBuffPos_57 = PHI <outBuffPos_54(10), outBuffPos_56(11)>
  _40 = OutputBuffer.D.38528._M_impl._M_start;
  _38 = outBuffPos_57 * 40;
  _48 = _40 + _38;
  *_48 = MEM[(const struct outBuff &)element_28(D)];
  NumBufferedBlocks.371_17 = NumBufferedBlocks;
  _18 = NumBufferedBlocks.371_17 + 1;
  NumBufferedBlocks = _18;
  _19 = element_28(D)->blockNumber;
  NextBlockToWrite.372_20 = NextBlockToWrite;
  if (_19 == NextBlockToWrite.372_20)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  safe_cond_signal (&OutBufferHeadNotEmpty);

  <bb 14> [100.00%]:
  OutMutex.373_21 = OutMutex;
  safe_mutex_unlock (OutMutex.373_21);
  _58 = OutputBuffer.D.38528._M_impl._M_start;
  _59 = outBuffPos_57 * 40;
  _60 = _58 + _59;

  <bb 15> [0.00%]:
  # _22 = PHI <0B(5), 0B(8), _60(14)>
  return _22;

}



;; Function consumer_decompress (consumer_decompress, funcdef_no=1983, decl_uid=39090, cgraph_uid=723, symbol_order=771)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
q = &NONLOCAL
fileData = &NULL
strm = &NULL
strm = &NULL
strm = &NULL
DecompressedData_53 = &NULL
DecompressedData_53 = DecompressedData_54
prevOutBlockInSequence_56 = &NULL
prevOutBlockInSequence_56 = prevOutBlockInSequence_58
outSequenceNumber_59 = &NONLOCAL
outSequenceNumber_59 = outSequenceNumber_62
processedIn_63 = &NULL
processedIn_63 = processedIn_64
lastFileData_247 = &NULL
lastFileData_247 = fileData.138_22
_1 = *q + 448
ESCAPED = _1
fileData.127_2 = fileData
ESCAPED = fileData.127_2
_109 = NONLOCAL
_4 = *q + 448
ESCAPED = _4
_5 = *q + 352
ESCAPED = q
ESCAPED = &fileData
_6 = NONLOCAL
iftmp.129_110 = &NONLOCAL
_18 = *q + 512
ESCAPED = _18
iftmp.129_8 = &NULL
_7 = *q + 352
_116 = NONLOCAL
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_161 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
iftmp.131_3 = &NULL
_16 = *q + 448
_17 = *q + 576
ESCAPED = _17
ESCAPED = _16
iftmp.131_113 = &NONLOCAL
_10 = *q + 448
ESCAPED = _10
ESCAPED = &_ZL18TerminateFlagMutex
ret_210 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
iftmp.133_100 = &NULL
iftmp.133_100 = &NULL
retval.132_101 = iftmp.133_100
iftmp.133_102 = &NONLOCAL
retval.132_103 = iftmp.133_102
_13 = *lastFileData_247 + 128
_15 = *lastFileData_247 + 96
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _15
ESCAPED = _13
ESCAPED = outSequenceNumber_59
_211 = lastFileData_247
ESCAPED = _211
ESCAPED = &NONLOCAL
_19 = *q + 448
ESCAPED = _19
lastFileData.136_20 = lastFileData_247
ESCAPED = lastFileData_247
ESCAPED = &NONLOCAL
fileData.138_22 = fileData
fileData.139_23 = fileData
_24 = *fileData.139_23 + 128
_ZL9Verbosity = NONLOCAL
Verbosity.140_25 = _ZL9Verbosity
ESCAPED = &strm
ESCAPED = Verbosity.140_25
ESCAPED = &NULL
_139 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _139
bzret_66 = &NULL
bzret_66 = _139
fileData.141_26 = fileData
_27 = *fileData.141_26 + 64
strm = _27
fileData.142_28 = fileData
_29 = *fileData.142_28
strm = _29
DecompressedData_54 = DecompressedData_53
DecompressedData_54 = &NULL
DecompressedData_54 = DecompressedData_55
prevOutBlockInSequence_57 = prevOutBlockInSequence_56
prevOutBlockInSequence_57 = addret_68
prevOutBlockInSequence_57 = prevOutBlockInSequence_57
outSequenceNumber_60 = outSequenceNumber_59
outSequenceNumber_60 = outSequenceNumber_61
outSequenceNumber_60 = outSequenceNumber_60
processedIn_64 = processedIn_63
processedIn_64 = processedIn_157
processedIn_64 = processedIn_157
bzret_67 = bzret_66
bzret_67 = _155
bzret_67 = _155
_30 = strm
ESCAPED = &NONLOCAL
_ZSt7nothrow = NONLOCAL
ESCAPED = &_ZSt7nothrow
DecompressedData_147 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
strm = &NONLOCAL
strm = DecompressedData_147
DecompressedData_55 = DecompressedData_54
DecompressedData_55 = DecompressedData_147
processedIn_65 = processedIn_64
processedIn_65 = &NULL
availIn_153 = strm
ESCAPED = &strm
_155 = NONLOCAL
_31 = strm
_32 = availIn_153
_32 = _31
processedIn_157 = _32
processedIn_157 = processedIn_65
_33 = strm
_34 = strm
len_159 = &NONLOCAL
len_159 = _34
fileData.144_35 = fileData
_212 = strm
_213 = *fileData.144_35 + 192
iftmp.59_248 = &NULL
iftmp.59_248 = &NULL
iftmp.59_98 = &NONLOCAL
iftmp.59_99 = &NONLOCAL
fileData.145_36 = fileData
_37 = *fileData.145_36 + 96
fileData.146_38 = fileData
_39 = *fileData.146_38 + 96
ESCAPED = _39
ESCAPED = _37
outSequenceNumber_173 = outSequenceNumber_60
outSequenceNumber_173 = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &_ZSt7nothrow
_175 = NONLOCAL
_40 = isLast_160
fileData.148_41 = fileData
_42 = *fileData.148_41 + 96
*_175 = DecompressedData_55
*_175 + 64 = len_159
*_175 + 96 = _42
*_175 + 128 = outSequenceNumber_173
*_175 + 160 = processedIn_157
*_175 + 192 = isLast_160
derefaddrtmp(109) = &NULL
*_175 + 256 = derefaddrtmp(109)
ESCAPED = &strm
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = prevOutBlockInSequence_57
ESCAPED = _175
_181 = NONLOCAL
iftmp.149_74 = &NONLOCAL
iftmp.149_74 = &NULL
outSequenceNumber_166 = iftmp.149_74
_43 = isLast_160
fileData.150_44 = fileData
_45 = *fileData.150_44 + 96
D.39440 = DecompressedData_55
D.39440 = len_159
D.39440 = _45
D.39440 = iftmp.149_74
D.39440 = processedIn_157
D.39440 = isLast_160
D.39440 = &NULL
ESCAPED = &D.39440
ESCAPED = &STRING
_169 = NONLOCAL
outSequenceNumber_61 = outSequenceNumber_173
outSequenceNumber_61 = iftmp.149_74
addret_68 = _181
addret_68 = _169
ESCAPED = &strm
fileData.151_46 = fileData
ESCAPED = bzret_67
ESCAPED = fileData.151_46
ESCAPED = outSequenceNumber_60
ESCAPED = &strm
_191 = NONLOCAL
ESCAPED = &strm
_194 = NONLOCAL
errState.152_48 = _191
_50 = _47
_50 = _49
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _194
prevOutBlockInSequence_58 = prevOutBlockInSequence_57
prevOutBlockInSequence_58 = &NULL
outSequenceNumber_62 = outSequenceNumber_60
outSequenceNumber_62 = &NONLOCAL
fileData.153_51 = fileData
_52 = fileData.153_51
_217 = *fileData.153_51
ESCAPED = _217
derefaddrtmp(133) = &NULL
*fileData.153_51 = derefaddrtmp(133)
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL fileData strm _ZL18TerminateFlagMutex _ZSt7nothrow D.39440 }
NONLOCAL = { ESCAPED NONLOCAL } same as _109
STOREDANYTHING = { }
INTEGER = { ANYTHING }
q = { NONLOCAL }
fileData = { NULL ESCAPED NONLOCAL } same as lastFileData_247
strm = { NULL ESCAPED NONLOCAL } same as processedIn_63
DecompressedData_53 = { NULL ESCAPED NONLOCAL }
DecompressedData_54 = { NULL ESCAPED NONLOCAL } same as DecompressedData_53
prevOutBlockInSequence_56 = { NULL ESCAPED NONLOCAL } same as DecompressedData_53
prevOutBlockInSequence_58 = { NULL ESCAPED NONLOCAL } same as DecompressedData_53
outSequenceNumber_59 = { NULL NONLOCAL }
outSequenceNumber_62 = { NULL NONLOCAL } same as outSequenceNumber_59
processedIn_63 = { NULL ESCAPED NONLOCAL }
processedIn_64 = { NULL ESCAPED NONLOCAL } same as processedIn_63
lastFileData_247 = { NULL ESCAPED NONLOCAL }
fileData.138_22 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_1 = { ESCAPED NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
fileData.127_2 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_Z32consumerDecompressCheckInterruptPK7outBuff = { }
_109 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
_5 = { ESCAPED NONLOCAL }
_ZN5queue6removeERP7outBuff = { }
_6 = { ESCAPED NONLOCAL } same as _109
iftmp.129_110 = { NONLOCAL } same as q
_18 = { ESCAPED NONLOCAL }
_Z16safe_cond_signalP14pthread_cond_t = { }
iftmp.129_8 = { NULL }
_7 = { ESCAPED NONLOCAL }
_Z19syncGetProducerDonev = { }
_116 = { ESCAPED NONLOCAL } same as _109
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_161 = { ESCAPED NONLOCAL } same as _109
_ZL13terminateFlag = { ESCAPED NONLOCAL } same as _109
iftmp.131_3 = { NULL } same as iftmp.129_8
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_Z14safe_cond_waitP14pthread_cond_tP15pthread_mutex_t = { }
iftmp.131_113 = { NONLOCAL } same as q
_10 = { ESCAPED NONLOCAL }
pthread_mutex_unlock = { }
ret_210 = { ESCAPED NONLOCAL } same as _109
iftmp.133_100 = { NULL } same as iftmp.129_8
retval.132_101 = { NULL } same as iftmp.129_8
iftmp.133_102 = { NONLOCAL } same as q
retval.132_103 = { NONLOCAL } same as q
_13 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL }
_Z12handle_error8ExitFlagiPKcz = { }
_211 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_ZdlPvm = { }
_19 = { ESCAPED NONLOCAL }
lastFileData.136_20 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
fileData.139_23 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_24 = { ESCAPED NONLOCAL }
Verbosity.140_25 = { ESCAPED NONLOCAL } same as _109
_ZL9Verbosity = { ESCAPED NONLOCAL } same as _109
BZ2_bzDecompressInit = { }
_139 = { ESCAPED NONLOCAL } same as _109
bzret_66 = { NULL ESCAPED NONLOCAL } same as DecompressedData_53
fileData.141_26 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_27 = { ESCAPED NONLOCAL }
fileData.142_28 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_29 = { ESCAPED NONLOCAL }
DecompressedData_55 = { NULL ESCAPED NONLOCAL } same as DecompressedData_53
prevOutBlockInSequence_57 = { NULL ESCAPED NONLOCAL } same as DecompressedData_53
addret_68 = { ESCAPED NONLOCAL } same as _109
outSequenceNumber_60 = { NULL NONLOCAL } same as outSequenceNumber_59
outSequenceNumber_61 = { NULL NONLOCAL } same as outSequenceNumber_59
processedIn_157 = { NULL ESCAPED NONLOCAL } same as processedIn_63
bzret_67 = { NULL ESCAPED NONLOCAL } same as DecompressedData_53
_155 = { ESCAPED NONLOCAL } same as _109
_30 = { NULL ESCAPED NONLOCAL } same as processedIn_63
_ZnamRKSt9nothrow_t = { }
_ZSt7nothrow = { ESCAPED NONLOCAL }
DecompressedData_147 = { ESCAPED NONLOCAL } same as _109
processedIn_65 = { NULL ESCAPED NONLOCAL } same as processedIn_63
availIn_153 = { NULL ESCAPED NONLOCAL } same as processedIn_63
BZ2_bzDecompress = { }
_31 = { NULL ESCAPED NONLOCAL } same as processedIn_63
_32 = { NULL ESCAPED NONLOCAL } same as processedIn_63
_33 = { NULL ESCAPED NONLOCAL } same as processedIn_63
_34 = { NULL ESCAPED NONLOCAL } same as processedIn_63
len_159 = { NULL ESCAPED NONLOCAL } same as processedIn_63
isLast_160 = { }
fileData.144_35 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_212 = { NULL ESCAPED NONLOCAL } same as processedIn_63
_213 = { ESCAPED NONLOCAL }
iftmp.59_248 = { NULL } same as iftmp.129_8
iftmp.59_98 = { NONLOCAL } same as q
iftmp.59_99 = { NONLOCAL } same as q
fileData.145_36 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_37 = { ESCAPED NONLOCAL }
fileData.146_38 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_39 = { ESCAPED NONLOCAL }
_Z20syncSetLastGoodBlockii = { }
outSequenceNumber_173 = { NULL NONLOCAL } same as outSequenceNumber_59
_ZnwmRKSt9nothrow_t = { }
_175 = { ESCAPED NONLOCAL } same as _109
_40 = { }
fileData.148_41 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_42 = { ESCAPED NONLOCAL }
derefaddrtmp(109) = { NULL } same as iftmp.129_8
BZ2_bzDecompressEnd = { }
_Z22outputBufferSeqAddNextP7outBuffS0_ = { }
_181 = { ESCAPED NONLOCAL } same as _109
iftmp.149_74 = { NULL NONLOCAL } same as outSequenceNumber_59
outSequenceNumber_166 = { NULL NONLOCAL } same as outSequenceNumber_59
_43 = { }
fileData.150_44 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_45 = { ESCAPED NONLOCAL }
D.39440 = { NULL ESCAPED NONLOCAL }
_Z15outputBufferAddRK7outBuffPKc = { }
_169 = { ESCAPED NONLOCAL } same as _109
fileData.151_46 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_Z18decompressErrCheckiPK7outBuffiRK9bz_stream = { }
_191 = { ESCAPED NONLOCAL } same as _109
_194 = { ESCAPED NONLOCAL } same as _109
_47 = { }
errState.152_48 = { ESCAPED NONLOCAL } same as _109
_49 = { }
_50 = { }
fileData.153_51 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_52 = { NULL ESCAPED NONLOCAL } same as lastFileData_247
_217 = { ESCAPED NONLOCAL }
_ZdaPv = { }
derefaddrtmp(133) = { NULL } same as iftmp.129_8


Alias information for consumer_decompress

Aliased symbols

strm, UID D.39399, struct bz_stream, is addressable
fileData, UID D.39391, struct outBuff *, is addressable
D.39440, UID D.39440, struct outBuff, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.11311 D.38685 D.39391 D.39399 D.39440 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.127_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
lastFileData.136_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.138_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.139_23, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.141_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.142_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.144_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.145_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.146_38, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.148_41, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.150_44, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.151_46, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.153_51, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_52, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
DecompressedData_53, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
DecompressedData_54, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
DecompressedData_55, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
prevOutBlockInSequence_56, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
prevOutBlockInSequence_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
prevOutBlockInSequence_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
addret_68, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
q_93(D), points-to non-local, points-to NULL, points-to vars: { }
DecompressedData_147, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_169, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_175, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_181, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_211, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_217, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
lastFileData_247, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

consumer_decompress (void * q)
{
  bool isLast;
  bool isLast;
  bool D.48270;
  int ret;
  int D.48265;
  int ret;
  int D.48263;
  struct outBuff * nextOutBlock;
  bool isLast;
  unsigned int len;
  struct outBuff * addret;
  unsigned int availIn;
  int bzret;
  struct bz_stream strm;
  int errState;
  unsigned int processedIn;
  int outSequenceNumber;
  struct outBuff * prevOutBlockInSequence;
  unsigned int outSize;
  char * DecompressedData;
  struct outBuff * lastFileData;
  struct outBuff * fileData;
  struct queue * fifo;
  struct outBuff D.39440;
  union pthread_mutex_t * _1;
  struct outBuff * fileData.127_2;
  bool iftmp.131_3;
  union pthread_mutex_t * _4;
  int _5;
  int _6;
  int _7;
  bool iftmp.129_8;
  union pthread_mutex_t * _10;
  int _13;
  int _15;
  union pthread_mutex_t * _16;
  union pthread_cond_t * _17;
  union pthread_cond_t * _18;
  union pthread_mutex_t * _19;
  struct outBuff * lastFileData.136_20;
  struct outBuff * fileData.138_22;
  struct outBuff * fileData.139_23;
  int _24;
  int Verbosity.140_25;
  struct outBuff * fileData.141_26;
  unsigned int _27;
  struct outBuff * fileData.142_28;
  char * _29;
  unsigned int _30;
  unsigned int _31;
  unsigned int _32;
  unsigned int _33;
  unsigned int _34;
  struct outBuff * fileData.144_35;
  struct outBuff * fileData.145_36;
  int _37;
  struct outBuff * fileData.146_38;
  int _39;
  int _40;
  struct outBuff * fileData.148_41;
  int _42;
  int _43;
  struct outBuff * fileData.150_44;
  int _45;
  struct outBuff * fileData.151_46;
  bool _47;
  unsigned int errState.152_48;
  bool _49;
  bool _50;
  struct outBuff * fileData.153_51;
  char * * _52;
  int iftmp.149_74;
  bool iftmp.59_98;
  bool iftmp.59_99;
  bool iftmp.133_100;
  bool retval.132_101;
  bool iftmp.133_102;
  bool retval.132_103;
  int _109;
  bool iftmp.129_110;
  bool iftmp.131_113;
  int _116;
  int _139;
  int _155;
  struct outBuff * _169;
  void * _175;
  struct outBuff * _181;
  int _191;
  int _194;
  struct outBuff * _211;
  unsigned int _212;
  bool _213;
  char * _217;
  bool iftmp.59_248;

  <bb 2> [0.00%]:
  fileData = 0B;
  strm.bzalloc = 0B;
  strm.bzfree = 0B;
  strm.opaque = 0B;

  <bb 3> [0.00%]:
  # DecompressedData_53 = PHI <0B(2), DecompressedData_54(74)>
  # prevOutBlockInSequence_56 = PHI <0B(2), prevOutBlockInSequence_58(74)>
  # outSequenceNumber_59 = PHI <-1(2), outSequenceNumber_62(74)>
  # processedIn_63 = PHI <0(2), processedIn_64(74)>
  # lastFileData_247 = PHI <0B(2), fileData.138_22(74)>
  _1 = MEM[(struct queue *)q_93(D)].mut;
  safe_mutex_lock (_1);

  <bb 4> [0.00%]:
  fileData.127_2 = fileData;
  _109 = consumerDecompressCheckInterrupt (fileData.127_2);

  <bb 5> [0.00%]:
  if (_109 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _4 = MEM[(struct queue *)q_93(D)].mut;
  safe_mutex_unlock (_4);
  goto <bb 75>; [0.00%]

  <bb 7> [0.00%]:
  _5 = MEM[(struct queue *)q_93(D)].empty;
  if (_5 == 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 8> [0.00%]:
  _6 = queue::remove (q_93(D), &fileData);
  if (_6 == 1)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  # iftmp.129_110 = PHI <1(8)>
  _18 = MEM[(struct queue *)q_93(D)].notFull;
  safe_cond_signal (_18);
  goto <bb 29>; [0.00%]

  <bb 10> [0.00%]:

  <bb 11> [0.00%]:
  # iftmp.129_8 = PHI <0(10)>
  _7 = MEM[(struct queue *)q_93(D)].empty;
  if (_7 != 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 12> [0.00%]:
  _116 = syncGetProducerDone ();

  <bb 13> [0.00%]:
  if (_116 == 1)
    goto <bb 17>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);

  <bb 15> [100.00%]:
  ret_161 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 16> [100.00%]:
  if (ret_161 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  goto <bb 20>; [0.00%]

  <bb 18> [0.00%]:

  <bb 19> [0.00%]:
  # iftmp.131_3 = PHI <0(18)>
  _16 = MEM[(struct queue *)q_93(D)].mut;
  _17 = MEM[(struct queue *)q_93(D)].notEmpty;
  safe_cond_wait (_17, _16);
  goto <bb 4>; [0.00%]

  <bb 20> [0.00%]:
  # iftmp.131_113 = PHI <1(17)>
  _10 = MEM[(struct queue *)q_93(D)].mut;
  pthread_mutex_unlock (_10);
  safe_mutex_lock (&TerminateFlagMutex);

  <bb 21> [100.00%]:
  ret_210 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 22> [100.00%]:
  if (ret_210 == 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 23> [0.00%]:
  if (outSequenceNumber_59 != -1)
    goto <bb 25>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 24> [0.00%]:
  # iftmp.133_100 = PHI <0(23), 0(22)>
  retval.132_101 = iftmp.133_100;
  goto <bb 26>; [100.00%]

  <bb 25> [0.00%]:
  # iftmp.133_102 = PHI <1(23)>
  retval.132_103 = iftmp.133_102;
  _13 = lastFileData_247->sequenceNumber;
  _15 = lastFileData_247->blockNumber;
  handle_error (1, -1, "pbzip2: *ERROR on decompress - premature end of archive stream (block=%d; seq=%d; outseq=%d)!\n", _15, _13, outSequenceNumber_59);

  <bb 26> [100.00%]:
  _211 = lastFileData_247;
  if (lastFileData_247 != 0B)
    goto <bb 27>; [57.44%]
  else
    goto <bb 28>; [42.56%]

  <bb 27> [57.44%]:
  operator delete (_211, 40);

  <bb 28> [0.00%]:
  goto <bb 75>; [0.00%]

  <bb 29> [0.00%]:
  _19 = MEM[(struct queue *)q_93(D)].mut;
  safe_mutex_unlock (_19);

  <bb 30> [0.00%]:
  lastFileData.136_20 = lastFileData_247;
  if (lastFileData_247 != 0B)
    goto <bb 31>; [0.00%]
  else
    goto <bb 32>; [0.00%]

  <bb 31> [0.00%]:
  operator delete (lastFileData_247, 40);

  <bb 32> [0.00%]:
  fileData.138_22 = fileData;
  fileData.139_23 = fileData;
  _24 = fileData.139_23->sequenceNumber;
  if (_24 <= 1)
    goto <bb 33>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 33> [0.00%]:
  Verbosity.140_25 = Verbosity;
  _139 = BZ2_bzDecompressInit (&strm, Verbosity.140_25, 0);

  <bb 34> [0.00%]:
  if (_139 != 0)
    goto <bb 35>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 35> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR during BZ2_bzDecompressInit: %d\n", _139);
  goto <bb 75>; [0.00%]

  <bb 36> [0.00%]:
  # bzret_66 = PHI <0(32), _139(34)>
  fileData.141_26 = fileData;
  _27 = fileData.141_26->bufSize;
  strm.avail_in = _27;
  fileData.142_28 = fileData;
  _29 = fileData.142_28->buf;
  strm.next_in = _29;

  <bb 37> [0.00%]:
  # DecompressedData_54 = PHI <DecompressedData_53(36), 0B(65), DecompressedData_55(46)>
  # prevOutBlockInSequence_57 = PHI <prevOutBlockInSequence_56(36), addret_68(65), prevOutBlockInSequence_57(46)>
  # outSequenceNumber_60 = PHI <outSequenceNumber_59(36), outSequenceNumber_61(65), outSequenceNumber_60(46)>
  # processedIn_64 = PHI <processedIn_63(36), processedIn_157(65), processedIn_157(46)>
  # bzret_67 = PHI <bzret_66(36), _155(65), _155(46)>
  if (bzret_67 != 0)
    goto <bb 67>; [0.00%]
  else
    goto <bb 38>; [0.00%]

  <bb 38> [0.00%]:
  _30 = strm.avail_in;
  if (_30 == 0)
    goto <bb 67>; [0.00%]
  else
    goto <bb 39>; [0.00%]

  <bb 39> [0.00%]:
  if (DecompressedData_54 == 0B)
    goto <bb 40>; [0.00%]
  else
    goto <bb 43>; [0.00%]

  <bb 40> [0.00%]:
  DecompressedData_147 = operator new[] (900000, &nothrow);
  if (DecompressedData_147 == 0B)
    goto <bb 41>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 41> [0.00%]:
  handle_error (1, -1, " *ERROR: Could not allocate memory (DecompressedData)!  Aborting...\n");
  goto <bb 75>; [0.00%]

  <bb 42> [0.00%]:
  strm.avail_out = 900000;
  strm.next_out = DecompressedData_147;

  <bb 43> [0.00%]:
  # DecompressedData_55 = PHI <DecompressedData_54(39), DecompressedData_147(42)>
  # processedIn_65 = PHI <processedIn_64(39), 0(42)>
  availIn_153 = strm.avail_in;
  _155 = BZ2_bzDecompress (&strm);

  <bb 44> [0.00%]:
  _31 = strm.avail_in;
  _32 = availIn_153 - _31;
  processedIn_157 = _32 + processedIn_65;
  if (_155 == 0)
    goto <bb 45>; [0.00%]
  else
    goto <bb 46>; [0.00%]

  <bb 45> [0.00%]:
  _33 = strm.avail_out;
  if (_33 == 0)
    goto <bb 47>; [0.00%]
  else
    goto <bb 46>; [0.00%]

  <bb 46> [0.00%]:
  if (_155 == 4)
    goto <bb 47>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 47> [100.00%]:
  _34 = strm.avail_out;
  len_159 = 900000 - _34;
  isLast_160 = _155 == 4;
  fileData.144_35 = fileData;
  if (_155 == 4)
    goto <bb 48>; [34.00%]
  else
    goto <bb 50>; [66.00%]

  <bb 48> [34.00%]:
  _212 = strm.avail_in;
  if (_212 != 0)
    goto <bb 52>; [46.00%]
  else
    goto <bb 49>; [54.00%]

  <bb 49> [18.36%]:
  _213 = MEM[(const struct outBuff *)fileData.144_35].isLastInSequence;
  if (_213 != 0)
    goto <bb 50>; [54.00%]
  else
    goto <bb 51>; [46.00%]

  <bb 50> [75.90%]:
  # iftmp.59_248 = PHI <0(49), 0(47)>
  goto <bb 54>; [100.00%]

  <bb 51> [8.46%]:
  # iftmp.59_98 = PHI <1(49)>
  goto <bb 53>; [100.00%]

  <bb 52> [15.64%]:
  # iftmp.59_99 = PHI <1(48)>

  <bb 53> [0.00%]:
  fileData.145_36 = fileData;
  _37 = fileData.145_36->blockNumber;
  fileData.146_38 = fileData;
  _39 = fileData.146_38->blockNumber;
  syncSetLastGoodBlock (_39, _37);

  <bb 54> [0.00%]:
  if (outSequenceNumber_60 > 0)
    goto <bb 55>; [0.00%]
  else
    goto <bb 61>; [0.00%]

  <bb 55> [0.00%]:
  outSequenceNumber_173 = outSequenceNumber_60 + 1;
  _175 = operator new (40, &nothrow);
  if (_175 != 0B)
    goto <bb 56>; [0.00%]
  else
    goto <bb 57>; [0.00%]

  <bb 56> [100.00%]:
  _40 = (int) isLast_160;
  fileData.148_41 = fileData;
  _42 = fileData.148_41->blockNumber;
  MEM[(struct  &)_175] ={v} {CLOBBER};
  MEM[(struct outBuff *)_175].buf = DecompressedData_55;
  MEM[(struct outBuff *)_175].bufSize = len_159;
  MEM[(struct outBuff *)_175].blockNumber = _42;
  MEM[(struct outBuff *)_175].sequenceNumber = outSequenceNumber_173;
  MEM[(struct outBuff *)_175].inSize = processedIn_157;
  MEM[(struct outBuff *)_175].isLastInSequence = isLast_160;
  MEM[(struct outBuff *)_175].next = 0B;

  <bb 57> [0.00%]:
  if (_175 == 0B)
    goto <bb 58>; [0.00%]
  else
    goto <bb 60>; [0.00%]

  <bb 58> [0.00%]:
  BZ2_bzDecompressEnd (&strm);

  <bb 59> [0.00%]:
  handle_error (1, -1, " *ERROR: Could not allocate memory (nextOutBlock)!  Aborting...\n");
  goto <bb 75>; [0.00%]

  <bb 60> [0.00%]:
  _181 = outputBufferSeqAddNext (prevOutBlockInSequence_57, _175);
  goto <bb 65>; [0.00%]

  <bb 61> [0.00%]:
  if (_155 == 0)
    goto <bb 63>; [0.00%]
  else
    goto <bb 62>; [0.00%]

  <bb 62> [0.00%]:

  <bb 63> [100.00%]:
  # iftmp.149_74 = PHI <1(61), 0(62)>
  outSequenceNumber_166 = iftmp.149_74;
  _43 = (int) isLast_160;
  fileData.150_44 = fileData;
  _45 = fileData.150_44->blockNumber;
  MEM[(struct  &)&D.39440] ={v} {CLOBBER};
  D.39440.buf = DecompressedData_55;
  D.39440.bufSize = len_159;
  D.39440.blockNumber = _45;
  D.39440.sequenceNumber = iftmp.149_74;
  D.39440.inSize = processedIn_157;
  D.39440.isLastInSequence = isLast_160;
  D.39440.next = 0B;
  _169 = outputBufferAdd (&D.39440, "consumer_decompress");

  <bb 64> [0.00%]:
  D.39440 ={v} {CLOBBER};

  <bb 65> [0.00%]:
  # outSequenceNumber_61 = PHI <outSequenceNumber_173(60), iftmp.149_74(64)>
  # addret_68 = PHI <_181(60), _169(64)>
  if (addret_68 == 0B)
    goto <bb 66>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 66> [0.00%]:
  BZ2_bzDecompressEnd (&strm);
  goto <bb 75>; [0.00%]

  <bb 67> [0.00%]:
  fileData.151_46 = fileData;
  _191 = decompressErrCheck (bzret_67, fileData.151_46, outSequenceNumber_60, &strm);

  <bb 68> [0.00%]:
  if (bzret_67 == 4)
    goto <bb 69>; [0.00%]
  else
    goto <bb 72>; [0.00%]

  <bb 69> [0.00%]:
  _194 = BZ2_bzDecompressEnd (&strm);

  <bb 70> [0.00%]:
  _47 = _194 != 0;
  errState.152_48 = (unsigned int) _191;
  _49 = errState.152_48 <= 1;
  _50 = _47 & _49;
  if (_50 != 0)
    goto <bb 71>; [0.00%]
  else
    goto <bb 72>; [0.00%]

  <bb 71> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR during BZ2_bzDecompressEnd: %d\n", _194);
  goto <bb 75>; [0.00%]

  <bb 72> [100.00%]:
  # prevOutBlockInSequence_58 = PHI <prevOutBlockInSequence_57(68), 0B(70)>
  # outSequenceNumber_62 = PHI <outSequenceNumber_60(68), -1(70)>
  fileData.153_51 = fileData;
  _52 = &fileData.153_51->buf;
  _217 = MEM[(char * &)fileData.153_51];
  if (_217 != 0B)
    goto <bb 73>; [57.44%]
  else
    goto <bb 74>; [42.56%]

  <bb 73> [57.44%]:
  operator delete[] (_217);
  MEM[(char * &)fileData.153_51] = 0B;

  <bb 74> [0.00%]:
  if (_191 != 0)
    goto <bb 75>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 75> [0.00%]:
  fileData ={v} {CLOBBER};
  strm ={v} {CLOBBER};
  return 0B;

<L70> [0.00%]:
  D.39440 ={v} {CLOBBER};
  resx 3

<L71> [0.00%]:
  fileData ={v} {CLOBBER};
  strm ={v} {CLOBBER};
  resx 1

}



;; Function consumer (consumer, funcdef_no=1989, decl_uid=39094, cgraph_uid=729, symbol_order=777)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
q = &NONLOCAL
fileData = &NULL
outSize = &NULL
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_101 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
_2 = *q + 448
ESCAPED = _2
_3 = *q + 352
ESCAPED = q
ESCAPED = &fileData
_4 = NONLOCAL
iftmp.284_85 = &NONLOCAL
_11 = *q + 512
ESCAPED = _11
iftmp.284_55 = &NULL
_5 = *q + 352
_63 = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
ret_102 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
iftmp.286_49 = &NULL
_9 = *q + 448
_10 = *q + 576
ESCAPED = _10
ESCAPED = _9
iftmp.286_53 = &NONLOCAL
_8 = *q + 448
ESCAPED = _8
_12 = *q + 448
ESCAPED = _12
fileData.287_13 = fileData
_14 = *fileData.287_13 + 64
_15 = _14
_16 = _15
_16 = &NONLOCAL
_17 = _16
_17 = &NONLOCAL
_18 = _17
outSize = _18
outSize.288_19 = outSize
_75 = outSize.288_19
ESCAPED = _75
_ZSt7nothrow = NONLOCAL
ESCAPED = &_ZSt7nothrow
CompressedData_77 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_ZL9Verbosity = NONLOCAL
Verbosity.289_20 = _ZL9Verbosity
_ZL12BWTblockSize = NONLOCAL
BWTblockSize.290_21 = _ZL12BWTblockSize
fileData.291_22 = fileData
_23 = *fileData.291_22 + 64
fileData.292_24 = fileData
_25 = *fileData.292_24
ESCAPED = CompressedData_77
ESCAPED = &outSize
ESCAPED = _25
ESCAPED = _23
ESCAPED = BWTblockSize.290_21
ESCAPED = Verbosity.289_20
ESCAPED = &NONLOCAL
_79 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _79
fileData.293_26 = fileData
_27 = fileData.293_26
_103 = *fileData.293_26
ESCAPED = _103
derefaddrtmp(61) = &NULL
*fileData.293_26 = derefaddrtmp(61)
fileData.294_28 = fileData
_29 = *fileData.294_28 + 64
fileData.295_30 = fileData
_31 = *fileData.295_30 + 96
outSize.296_32 = outSize
outBlock = CompressedData_77
outBlock = outSize.296_32
outBlock = _31
outBlock = &NULL
outBlock = _29
outBlock = &NONLOCAL
outBlock = &NULL
ESCAPED = &outBlock
ESCAPED = &STRING
_84 = NONLOCAL
fileData.298_34 = fileData
ESCAPED = fileData.298_34
ESCAPED = &NONLOCAL
fileData = &NULL
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL fileData outSize _ZL18TerminateFlagMutex _ZSt7nothrow outBlock }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
STOREDANYTHING = { }
INTEGER = { ANYTHING }
q = { NONLOCAL }
fileData = { NULL ESCAPED NONLOCAL } same as fileData.287_13
outSize = { NULL ESCAPED NONLOCAL } same as outSize.288_19
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_101 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL13terminateFlag = { ESCAPED NONLOCAL }
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZN5queue6removeERP7outBuff = { }
_4 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
iftmp.284_85 = { NONLOCAL } same as q
_11 = { ESCAPED NONLOCAL }
_Z16safe_cond_signalP14pthread_cond_t = { }
iftmp.284_55 = { NULL }
_5 = { ESCAPED NONLOCAL }
_Z19syncGetProducerDonev = { }
_63 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
ret_102 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
iftmp.286_49 = { NULL } same as iftmp.284_55
_9 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_Z14safe_cond_waitP14pthread_cond_tP15pthread_mutex_t = { }
iftmp.286_53 = { NONLOCAL } same as q
_8 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL }
fileData.287_13 = { NULL ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL } same as _14
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL } same as _16
_18 = { ESCAPED NONLOCAL } same as _16
outSize.288_19 = { NULL ESCAPED NONLOCAL }
_75 = { NULL ESCAPED NONLOCAL } same as outSize.288_19
_ZnamRKSt9nothrow_t = { }
_ZSt7nothrow = { ESCAPED NONLOCAL }
CompressedData_77 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_Z12handle_error8ExitFlagiPKcz = { }
Verbosity.289_20 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL9Verbosity = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
BWTblockSize.290_21 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
_ZL12BWTblockSize = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
fileData.291_22 = { NULL ESCAPED NONLOCAL } same as fileData.287_13
_23 = { ESCAPED NONLOCAL }
fileData.292_24 = { NULL ESCAPED NONLOCAL } same as fileData.287_13
_25 = { ESCAPED NONLOCAL }
BZ2_bzBuffToBuffCompress = { }
_79 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
fileData.293_26 = { NULL ESCAPED NONLOCAL } same as fileData.287_13
_27 = { NULL ESCAPED NONLOCAL } same as fileData.287_13
_103 = { ESCAPED NONLOCAL }
_ZdaPv = { }
derefaddrtmp(61) = { NULL } same as iftmp.284_55
fileData.294_28 = { NULL ESCAPED NONLOCAL } same as fileData.287_13
_29 = { ESCAPED NONLOCAL }
fileData.295_30 = { NULL ESCAPED NONLOCAL } same as fileData.287_13
_31 = { ESCAPED NONLOCAL }
outSize.296_32 = { NULL ESCAPED NONLOCAL } same as outSize.288_19
outBlock = { NULL ESCAPED NONLOCAL }
_Z15outputBufferAddRK7outBuffPKc = { }
_84 = { ESCAPED NONLOCAL } same as _ZL13terminateFlag
fileData.298_34 = { NULL ESCAPED NONLOCAL } same as fileData.287_13
_ZdlPvm = { }


Alias information for consumer

Aliased symbols

outBlock, UID D.39544, struct outBuff, is addressable
outSize, UID D.39542, unsigned int, is addressable
fileData, UID D.39540, struct outBuff *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.11311 D.38685 D.39540 D.39542 D.39544 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.287_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.291_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.292_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.293_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.294_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.295_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.298_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
q_52(D), points-to non-local, points-to NULL, points-to vars: { }
CompressedData_77, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_84, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_103, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

consumer (void * q)
{
  int ret;
  int D.48292;
  int ret;
  int D.48290;
  struct outBuff outBlock;
  int ret;
  unsigned int outSize;
  char * CompressedData;
  struct outBuff * fileData;
  struct queue * fifo;
  union pthread_mutex_t * _2;
  int _3;
  int _4;
  int _5;
  union pthread_mutex_t * _8;
  union pthread_mutex_t * _9;
  union pthread_cond_t * _10;
  union pthread_cond_t * _11;
  union pthread_mutex_t * _12;
  struct outBuff * fileData.287_13;
  unsigned int _14;
  double _15;
  double _16;
  double _17;
  unsigned int _18;
  unsigned int outSize.288_19;
  int Verbosity.289_20;
  int BWTblockSize.290_21;
  struct outBuff * fileData.291_22;
  unsigned int _23;
  struct outBuff * fileData.292_24;
  char * _25;
  struct outBuff * fileData.293_26;
  char * * _27;
  struct outBuff * fileData.294_28;
  unsigned int _29;
  struct outBuff * fileData.295_30;
  int _31;
  unsigned int outSize.296_32;
  struct outBuff * fileData.298_34;
  bool iftmp.286_49;
  bool iftmp.286_53;
  bool iftmp.284_55;
  int _63;
  sizetype _75;
  int _79;
  struct outBuff * _84;
  bool iftmp.284_85;
  char * _103;

  <bb 2> [0.00%]:
  fileData = 0B;
  outSize = 0;

  <bb 3> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);

  <bb 4> [100.00%]:
  ret_101 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 5> [100.00%]:
  if (ret_101 != 0)
    goto <bb 32>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  _2 = MEM[(struct queue *)q_52(D)].mut;
  safe_mutex_lock (_2);

  <bb 7> [0.00%]:
  _3 = MEM[(struct queue *)q_52(D)].empty;
  if (_3 == 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 8> [0.00%]:
  _4 = queue::remove (q_52(D), &fileData);
  if (_4 == 1)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  # iftmp.284_85 = PHI <1(8)>
  _11 = MEM[(struct queue *)q_52(D)].notFull;
  safe_cond_signal (_11);
  goto <bb 21>; [0.00%]

  <bb 10> [0.00%]:

  <bb 11> [0.00%]:
  # iftmp.284_55 = PHI <0(10)>
  _5 = MEM[(struct queue *)q_52(D)].empty;
  if (_5 != 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 12> [0.00%]:
  _63 = syncGetProducerDone ();

  <bb 13> [0.00%]:
  if (_63 == 1)
    goto <bb 17>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);

  <bb 15> [100.00%]:
  ret_102 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 16> [100.00%]:
  if (ret_102 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  goto <bb 20>; [0.00%]

  <bb 18> [0.00%]:

  <bb 19> [0.00%]:
  # iftmp.286_49 = PHI <0(18)>
  _9 = MEM[(struct queue *)q_52(D)].mut;
  _10 = MEM[(struct queue *)q_52(D)].notEmpty;
  safe_cond_wait (_10, _9);
  goto <bb 7>; [0.00%]

  <bb 20> [0.00%]:
  # iftmp.286_53 = PHI <1(17)>
  _8 = MEM[(struct queue *)q_52(D)].mut;
  safe_mutex_unlock (_8);
  goto <bb 32>; [0.00%]

  <bb 21> [0.00%]:
  _12 = MEM[(struct queue *)q_52(D)].mut;
  safe_mutex_unlock (_12);

  <bb 22> [0.00%]:
  fileData.287_13 = fileData;
  _14 = fileData.287_13->bufSize;
  _15 = (double) _14;
  _16 = _15 * 1.0100000000000000088817841970012523233890533447265625e+0;
  _17 = _16 + 6.0e+2;
  _18 = (unsigned int) _17;
  outSize = _18;
  outSize.288_19 = outSize;
  _75 = (sizetype) outSize.288_19;
  CompressedData_77 = operator new[] (_75, &nothrow);
  if (CompressedData_77 == 0B)
    goto <bb 23>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 23> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (CompressedData)!  Aborting...\n");
  goto <bb 32>; [0.00%]

  <bb 24> [0.00%]:
  Verbosity.289_20 = Verbosity;
  BWTblockSize.290_21 = BWTblockSize;
  fileData.291_22 = fileData;
  _23 = fileData.291_22->bufSize;
  fileData.292_24 = fileData;
  _25 = fileData.292_24->buf;
  _79 = BZ2_bzBuffToBuffCompress (CompressedData_77, &outSize, _25, _23, BWTblockSize.290_21, Verbosity.289_20, 30);

  <bb 25> [0.00%]:
  if (_79 != 0)
    goto <bb 26>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 26> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR during compression: %d!  Aborting...\n", _79);
  goto <bb 32>; [0.00%]

  <bb 27> [100.00%]:
  fileData.293_26 = fileData;
  _27 = &fileData.293_26->buf;
  _103 = MEM[(char * &)fileData.293_26];
  if (_103 != 0B)
    goto <bb 28>; [57.44%]
  else
    goto <bb 29>; [42.56%]

  <bb 28> [57.44%]:
  operator delete[] (_103);
  MEM[(char * &)fileData.293_26] = 0B;

  <bb 29> [100.00%]:
  fileData.294_28 = fileData;
  _29 = fileData.294_28->bufSize;
  fileData.295_30 = fileData;
  _31 = fileData.295_30->blockNumber;
  outSize.296_32 = outSize;
  MEM[(struct  &)&outBlock] ={v} {CLOBBER};
  outBlock.buf = CompressedData_77;
  outBlock.bufSize = outSize.296_32;
  outBlock.blockNumber = _31;
  outBlock.sequenceNumber = 0;
  outBlock.inSize = _29;
  outBlock.isLastInSequence = 1;
  outBlock.next = 0B;
  _84 = outputBufferAdd (&outBlock, "consumer");

  <bb 30> [0.00%]:
  if (_84 == 0B)
    goto <bb 32>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 31> [0.00%]:
  fileData.298_34 = fileData;
  operator delete (fileData.298_34, 40);
  fileData = 0B;
  outBlock ={v} {CLOBBER};
  goto <bb 3>; [0.00%]

  <bb 32> [0.00%]:
  outBlock ={v} {CLOBBER};
  fileData ={v} {CLOBBER};
  outSize ={v} {CLOBBER};
  return 0B;

<L27> [0.00%]:
  outBlock ={v} {CLOBBER};
  resx 2

<L28> [0.00%]:
  fileData ={v} {CLOBBER};
  outSize ={v} {CLOBBER};
  resx 1

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::size() const (_ZNKSt6vectorI7outBuffSaIS0_EE4sizeEv, funcdef_no=2257, decl_uid=38046, cgraph_uid=997, symbol_order=1045)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this + 64
_2 = _1
_3 = *this
_4 = _3
_5 = _2
_5 = _4
_6 = _5
_6 = &NONLOCAL
_9 = _6
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _6


Alias information for std::vector<outBuff, std::allocator<outBuff> >::size() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_8(D), points-to non-local, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::size() const (const struct vector * const this)
{
  struct outBuff * _1;
  long int _2;
  struct outBuff * _3;
  long int _4;
  long int _5;
  long int _6;
  size_type _9;

  <bb 2> [0.00%]:
  _1 = this_8(D)->D.38528._M_impl._M_finish;
  _2 = (long int) _1;
  _3 = this_8(D)->D.38528._M_impl._M_start;
  _4 = (long int) _3;
  _5 = _2 - _4;
  _6 = _5 /[ex] 40;
  _9 = (size_type) _6;
  return _9;

}



;; Function ends_with_icase<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)bool (_Z15ends_with_icaseIcEbRKNSt7__cxx1112basic_stringIT_St11char_traitsIS2_ESaIS2_EEES8_, funcdef_no=2267, decl_uid=39854, cgraph_uid=1007, symbol_order=1055)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
str = &NONLOCAL
suffix = &NONLOCAL
_31 = *str + 64
_2 = _31
_32 = *suffix + 64
_4 = _32
_5 = _2
_5 = _4
ti_26 = _5
ti_16 = ti_26
ti_16 = ti_35
si_17 = &NULL
si_17 = si_34
_28 = *suffix + 64
_7 = ti_16
_38 = *str
_39 = _38
_9 = *_39
_10 = _9
CALLUSED(27) = CALLUSED(27) + UNKNOWN
CALLUSED(27) = *CALLUSED(27) + UNKNOWN
CALLUSED(27) = _10
_11 = CALLUSED(27)
_11 = NONLOCAL
_25 = *suffix
_23 = _25
_44 = _23
_12 = _23
_13 = *_12
_14 = _13
CALLUSED(36) = CALLUSED(36) + UNKNOWN
CALLUSED(36) = *CALLUSED(36) + UNKNOWN
CALLUSED(36) = _14
_15 = CALLUSED(36)
_15 = NONLOCAL
si_34 = si_17
si_34 = &NONLOCAL
ti_35 = ti_16
ti_35 = &NONLOCAL
_18 = &NULL
_18 = &NULL
_18 = &NONLOCAL
ESCAPED = _18

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
str = { NONLOCAL }
suffix = { NONLOCAL } same as str
_31 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _31
_32 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _32
_5 = { ESCAPED NONLOCAL }
ti_26 = { ESCAPED NONLOCAL } same as _5
ti_16 = { ESCAPED NONLOCAL }
ti_35 = { ESCAPED NONLOCAL } same as ti_16
si_17 = { NULL NONLOCAL }
si_34 = { NULL NONLOCAL } same as si_17
_28 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as ti_16
_38 = { ESCAPED NONLOCAL }
_39 = { ESCAPED NONLOCAL } same as _38
_9 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL } same as _9
tolower = { }
CALLUSED(27) = { ESCAPED NONLOCAL }
CALLCLOBBERED(28) = { }
_11 = { ESCAPED NONLOCAL }
_25 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL } same as _25
_44 = { ESCAPED NONLOCAL } same as _25
_12 = { ESCAPED NONLOCAL } same as _25
_13 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL } same as _13
CALLUSED(36) = { ESCAPED NONLOCAL }
CALLCLOBBERED(37) = { }
_15 = { ESCAPED NONLOCAL }
_18 = { NULL NONLOCAL } same as si_17


Alias information for ends_with_icase<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)bool

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
str_22(D), points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
suffix_24(D), points-to non-local, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_38, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_44, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

ends_with_icase<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)bool (const struct basic_string & str, const struct basic_string & suffix)
{
  const value_type & D.48315;
  const value_type & D.48312;
  size_type D.48309;
  size_type D.48307;
  size_type D.48305;
  size_t si;
  int ti;
  unsigned int _2;
  unsigned int _4;
  unsigned int _5;
  long unsigned int _7;
  char _9;
  int _10;
  int _11;
  const value_type & _12;
  char _13;
  int _14;
  int _15;
  bool _18;
  const value_type & _23;
  char * _25;
  long unsigned int _28;
  long unsigned int _31;
  long unsigned int _32;
  char * _38;
  const value_type & _39;

  <bb 2> [100.00%]:
  _31 = str_22(D)->_M_string_length;
  _2 = (unsigned int) _31;
  _32 = suffix_24(D)->_M_string_length;
  _4 = (unsigned int) _32;
  _5 = _2 - _4;
  ti_26 = (int) _5;
  if (ti_26 < 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [100.00%]:
  # ti_16 = PHI <ti_26(2), ti_35(5)>
  # si_17 = PHI <0(2), si_34(5)>
  _28 = suffix_24(D)->_M_string_length;
  if (si_17 < _28)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [100.00%]:
  _7 = (long unsigned int) ti_16;
  _38 = str_22(D)->_M_dataplus._M_p;
  _39 = _38 + _7;
  _9 = *_39;
  _10 = (int) _9;
  _11 = tolower (_10);
  _25 = suffix_24(D)->_M_dataplus._M_p;
  _23 = _25 + si_17;
  _44 = _23;
  _12 = _23;
  _13 = *_12;
  _14 = (int) _13;
  _15 = tolower (_14);
  if (_11 != _15)
    goto <bb 6>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  si_34 = si_17 + 1;
  ti_35 = ti_16 + 1;
  goto <bb 3>; [0.00%]

  <bb 6> [0.00%]:
  # _18 = PHI <0(2), 0(4), 1(3)>
  return _18;

}



;; Function disposeMemory<char*>(char**&)void (_Z13disposeMemoryIPcEvRPT_, funcdef_no=2273, decl_uid=39869, cgraph_uid=1013, symbol_order=1061)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
pBuff = &NONLOCAL
_1 = *pBuff
_2 = *pBuff
_3 = *pBuff
ESCAPED = _3
derefaddrtmp(13) = &NULL
*pBuff = derefaddrtmp(13)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
pBuff = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL } same as _1
_ZdaPv = { }
derefaddrtmp(13) = { NULL }


Alias information for disposeMemory<char*>(char**&)void

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pBuff_7(D), points-to non-local, points-to NULL, points-to vars: { }

disposeMemory<char*>(char**&)void (char * * & pBuff)
{
  char * * _1;
  char * * _2;
  char * * _3;

  <bb 2> [0.00%]:
  _1 = *pBuff_7(D);
  if (_1 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _2 = *pBuff_7(D);
  if (_2 != 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _3 = *pBuff_7(D);
  operator delete[] (_3);

  <bb 5> [0.00%]:
  *pBuff_7(D) = 0B;

  <bb 6> [0.00%]:
  return;

}



;; Function std::move<std::allocator<char>&>(std::allocator<char>&)std::remove_reference<std::allocator<char>&>::type&& (_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_, funcdef_no=2281, decl_uid=40904, cgraph_uid=1021, symbol_order=1069)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
ESCAPED = __t

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }


Alias information for std::move<std::allocator<char>&>(std::allocator<char>&)std::remove_reference<std::allocator<char>&>::type&&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::move<std::allocator<char>&>(std::allocator<char>&)std::remove_reference<std::allocator<char>&>::type&& (struct allocator & __t)
{
  <bb 2> [0.00%]:
  return __t_1(D);

}



;; Function __gnu_cxx::new_allocator<char>::new_allocator() (_ZN9__gnu_cxx13new_allocatorIcEC2Ev, funcdef_no=2309, decl_uid=11669, cgraph_uid=1049, symbol_order=1097)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for __gnu_cxx::new_allocator<char>::new_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<char>::new_allocator() (struct new_allocator * const this)
{
  <bb 2> [0.00%]:
  return;

}



;; Function std::allocator<char>::allocator() (_ZNSaIcEC2Ev, funcdef_no=2186, decl_uid=11734, cgraph_uid=926, symbol_order=974)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::allocator<char>::allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator<char>::allocator() (struct allocator * const this)
{
  void * _1;

  <bb 2> [100.00%]:
  return;

}



;; Function __gnu_cxx::new_allocator<char>::~new_allocator() (_ZN9__gnu_cxx13new_allocatorIcED2Ev, funcdef_no=2312, decl_uid=11674, cgraph_uid=1052, symbol_order=1100)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for __gnu_cxx::new_allocator<char>::~new_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<char>::~new_allocator() (struct new_allocator * const this)
{
  <bb 2> [0.00%]:
  return;

}



;; Function std::allocator<char>::~allocator() (_ZNSaIcED2Ev, funcdef_no=2189, decl_uid=11739, cgraph_uid=929, symbol_order=977)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::allocator<char>::~allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator<char>::~allocator() (struct allocator * const this)
{
  void * _1;

  <bb 2> [100.00%]:
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider() (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD2Ev, funcdef_no=2085, decl_uid=19763, cgraph_uid=824, symbol_order=872)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider() (struct _Alloc_hider * const this)
{
  <bb 2> [100.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  return;

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::capacity() const (_ZNKSt6vectorI7outBuffSaIS0_EE8capacityEv, funcdef_no=2461, decl_uid=38059, cgraph_uid=1201, symbol_order=1249)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this + 128
_2 = _1
_3 = *this
_4 = _3
_5 = _2
_5 = _4
_6 = _5
_6 = &NONLOCAL
_9 = _6
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _6


Alias information for std::vector<outBuff, std::allocator<outBuff> >::capacity() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_8(D), points-to non-local, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::capacity() const (const struct vector * const this)
{
  struct outBuff * _1;
  long int _2;
  struct outBuff * _3;
  long int _4;
  long int _5;
  long int _6;
  size_type _9;

  <bb 2> [0.00%]:
  _1 = this_8(D)->D.38528._M_impl._M_end_of_storage;
  _2 = (long int) _1;
  _3 = this_8(D)->D.38528._M_impl._M_start;
  _4 = (long int) _3;
  _5 = _2 - _4;
  _6 = _5 /[ex] 40;
  _9 = (size_type) _6;
  return _9;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_get_Tp_allocator() (_ZNSt12_Vector_baseI7outBuffSaIS0_EE19_M_get_Tp_allocatorEv, funcdef_no=2462, decl_uid=37590, cgraph_uid=1202, symbol_order=1250)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this + UNKNOWN
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL }


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_get_Tp_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_get_Tp_allocator() (struct _Vector_base * const this)
{
  struct _Tp_alloc_type & _2;

  <bb 2> [0.00%]:
  _2 = &this_1(D)->_M_impl;
  return _2;

}



;; Function std::__do_alloc_on_move<std::allocator<char> >(std::allocator<char>&, std::allocator<char>&, std::integral_constant<bool, true>)void (_ZSt18__do_alloc_on_moveISaIcEEvRT_S2_St17integral_constantIbLb1EE, funcdef_no=2476, decl_uid=42479, cgraph_uid=1216, symbol_order=1264)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__one = &NONLOCAL
__two = &NONLOCAL
D.42482 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__one = { NONLOCAL }
__two = { NONLOCAL } same as __one
D.42482 = { NONLOCAL } same as __one


Alias information for std::__do_alloc_on_move<std::allocator<char> >(std::allocator<char>&, std::allocator<char>&, std::integral_constant<bool, true>)void

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__two_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__do_alloc_on_move<std::allocator<char> >(std::allocator<char>&, std::allocator<char>&, std::integral_constant<bool, true>)void (struct allocator & __one, struct allocator & __two, struct true_type D.42482)
{
  struct type & D.48330;

  <bb 2> [100.00%]:
  return;

}



;; Function std::__alloc_on_move<std::allocator<char> >(std::allocator<char>&, std::allocator<char>&)void (_ZSt15__alloc_on_moveISaIcEEvRT_S2_, funcdef_no=2399, decl_uid=41813, cgraph_uid=1139, symbol_order=1187)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__one = &NONLOCAL
__two = &NONLOCAL
D.48334 = D.47265

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__one = { NONLOCAL }
__two = { NONLOCAL } same as __one
D.48334 = { }
D.47265 = { }


Alias information for std::__alloc_on_move<std::allocator<char> >(std::allocator<char>&, std::allocator<char>&)void

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__one_2(D), points-to non-local, points-to NULL, points-to vars: { }
__two_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::__alloc_on_move<std::allocator<char> >(std::allocator<char>&, std::allocator<char>&)void (struct allocator & __one, struct allocator & __two)
{
  struct true_type D.48334;
  struct integral_constant D.47265;

  <bb 2> [100.00%]:
  D.48334 = D.47265;
  return;

}



;; Function std::__addressof<char>(char&)char* (_ZSt11__addressofIcEPT_RS0_, funcdef_no=2483, decl_uid=43606, cgraph_uid=1222, symbol_order=1270)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::__addressof<char>(char&)char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::__addressof<char>(char&)char* (char & __r)
{
  <bb 2> [0.00%]:
  return __r_1(D);

}



;; Function std::addressof<char>(char&)char* (_ZSt9addressofIcEPT_RS0_, funcdef_no=2482, decl_uid=42533, cgraph_uid=1223, symbol_order=1271)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::addressof<char>(char&)char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::addressof<char>(char&)char* (char & __r)
{
  char * D.48338;

  <bb 2> [100.00%]:
  return __r_2(D);

}



;; Function std::pointer_traits<char*>::pointer_to(char&) (_ZNSt14pointer_traitsIPcE10pointer_toERc, funcdef_no=2411, decl_uid=41896, cgraph_uid=1151, symbol_order=1199)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::pointer_traits<char*>::pointer_to(char&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::pointer_traits<char*>::pointer_to(char&) (__make_not_void & __r)
{
  char * D.48341;

  <bb 2> [100.00%]:
  return __r_2(D);

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv, funcdef_no=2279, decl_uid=18751, cgraph_uid=1019, symbol_order=1067)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
ESCAPED = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (struct basic_string * const this)
{
  char * D.48344;
  char[16] * _1;

  <bb 2> [100.00%]:
  _1 = &this_2(D)->D.18739._M_local_buf;
  return _1;

}



;; Function __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> const&) (_ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_, funcdef_no=2485, decl_uid=11664, cgraph_uid=1225, symbol_order=1273)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
D.11666 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
D.11666 = { NONLOCAL } same as this


Alias information for __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> const&) (struct new_allocator * const this, const struct new_allocator & D.11666)
{
  <bb 2> [0.00%]:
  return;

}



;; Function std::allocator<char>::allocator(std::allocator<char> const&) (_ZNSaIcEC2ERKS_, funcdef_no=2413, decl_uid=11729, cgraph_uid=1153, symbol_order=1201)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__a = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__a = { NONLOCAL } same as this


Alias information for std::allocator<char>::allocator(std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
__a_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator<char>::allocator(std::allocator<char> const&) (struct allocator * const this, const struct allocator & __a)
{
  void * _1;

  <bb 2> [100.00%]:
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC2EPcOS3_, funcdef_no=2283, decl_uid=18722, cgraph_uid=1023, symbol_order=1071)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__dat = &NONLOCAL
__a = &NONLOCAL
*this = __dat

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__dat = { NONLOCAL } same as this
__a = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
__a_5(D), points-to non-local, points-to NULL, points-to vars: { }
__dat_8(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&) (struct _Alloc_hider * const this, char * __dat, struct allocator & __a)
{
  struct type & D.48353;

  <bb 2> [100.00%]:
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  this_3(D)->_M_p = __dat_8(D);
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string() (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2Ev, funcdef_no=2259, decl_uid=19661, cgraph_uid=999, symbol_order=1047)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
_7 = this + UNKNOWN
*this = _7
derefaddrtmp(11) = &NULL
*this + 64 = derefaddrtmp(11)
_11 = *this
derefaddrtmp(13) = &NULL
*_11 = derefaddrtmp(13)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_7 = { NONLOCAL }
derefaddrtmp(11) = { NULL }
_11 = { ESCAPED NONLOCAL }
derefaddrtmp(13) = { NULL } same as derefaddrtmp(11)


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string() (struct basic_string * const this)
{
  char * D.48362;
  struct _Alloc_hider * _1;
  struct _Alloc_hider * _3;
  char[16] * _7;
  char * _11;

  <bb 2> [100.00%]:
  MEM[(struct  &)this_5(D)] ={v} {CLOBBER};
  _1 = &this_5(D)->_M_dataplus;
  _7 = &this_5(D)->D.18739._M_local_buf;
  MEM[(struct  &)this_5(D)] ={v} {CLOBBER};
  MEM[(struct _Alloc_hider *)this_5(D)]._M_p = _7;
  this_5(D)->_M_string_length = 0;
  _11 = MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p;
  MEM[(char_type &)_11] = 0;
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC2EPcRKS3_, funcdef_no=2315, decl_uid=18730, cgraph_uid=1055, symbol_order=1103)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__dat = &NONLOCAL
__a = &NONLOCAL
*this = __dat

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__dat = { NONLOCAL } same as this
__a = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__a_4(D), points-to non-local, points-to NULL, points-to vars: { }
__dat_6(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) (struct _Alloc_hider * const this, char * __dat, const struct allocator & __a)
{
  <bb 2> [100.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->_M_p = __dat_6(D);
  return;

}



;; Function __gnu_cxx::new_allocator<outBuff>::~new_allocator() (_ZN9__gnu_cxx13new_allocatorI7outBuffED2Ev, funcdef_no=2526, decl_uid=37724, cgraph_uid=1266, symbol_order=1314)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for __gnu_cxx::new_allocator<outBuff>::~new_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<outBuff>::~new_allocator() (struct new_allocator * const this)
{
  <bb 2> [0.00%]:
  return;

}



;; Function std::allocator<outBuff>::~allocator() (_ZNSaI7outBuffED2Ev, funcdef_no=2458, decl_uid=37789, cgraph_uid=1198, symbol_order=1246)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::allocator<outBuff>::~allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator<outBuff>::~allocator() (struct allocator * const this)
{
  void * _1;

  <bb 2> [100.00%]:
  return;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::~_Vector_impl() (_ZNSt12_Vector_baseI7outBuffSaIS0_EE12_Vector_implD2Ev, funcdef_no=2389, decl_uid=41775, cgraph_uid=1128, symbol_order=1176)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::~_Vector_impl()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::~_Vector_impl() (struct _Vector_impl * const this)
{
  <bb 2> [100.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  return;

}



;; Function std::move<outBuff*&>(outBuff*&)std::remove_reference<outBuff*&>::type&& (_ZSt4moveIRP7outBuffEONSt16remove_referenceIT_E4typeEOS4_, funcdef_no=2534, decl_uid=44606, cgraph_uid=1273, symbol_order=1321)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
ESCAPED = __t

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }


Alias information for std::move<outBuff*&>(outBuff*&)std::remove_reference<outBuff*&>::type&&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::move<outBuff*&>(outBuff*&)std::remove_reference<outBuff*&>::type&& (struct outBuff * & __t)
{
  <bb 2> [0.00%]:
  return __t_1(D);

}



;; Function std::swap<outBuff*>(outBuff*&, outBuff*&)std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<outBuff*> >, std::is_move_constructible<outBuff*>, std::is_move_assignable<outBuff*> >::value, void>::type (_ZSt4swapIP7outBuffENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_, funcdef_no=2533, decl_uid=43314, cgraph_uid=1274, symbol_order=1322)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__b = &NONLOCAL
_2 = *__a
__tmp_17 = _2
_4 = *__b
*__a = _4
_6 = _2
*__b = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _2
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__b = { NONLOCAL } same as __a
_2 = { ESCAPED NONLOCAL }
__tmp_17 = { ESCAPED NONLOCAL } same as _2
_4 = { ESCAPED NONLOCAL } same as _2
_6 = { ESCAPED NONLOCAL } same as _2


Alias information for std::swap<outBuff*>(outBuff*&, outBuff*&)std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<outBuff*> >, std::is_move_constructible<outBuff*>, std::is_move_assignable<outBuff*> >::value, void>::type

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__a_8(D), points-to non-local, points-to NULL, points-to vars: { }
__b_11(D), points-to non-local, points-to NULL, points-to vars: { }
__tmp_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::swap<outBuff*>(outBuff*&, outBuff*&)std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<outBuff*> >, std::is_move_constructible<outBuff*>, std::is_move_assignable<outBuff*> >::value, void>::type (struct outBuff * & __a, struct outBuff * & __b)
{
  struct outBuff * & D.48379;
  struct outBuff * & D.48377;
  struct outBuff * & D.48375;
  struct outBuff * __tmp;
  struct outBuff * _2;
  struct outBuff * _4;
  struct outBuff * _6;

  <bb 2> [100.00%]:
  _2 = MEM[(struct outBuff * &)__a_8(D)];
  __tmp_17 = _2;
  _4 = MEM[(struct outBuff * &)__b_11(D)];
  *__a_8(D) = _4;
  _6 = _2;
  *__b_11(D) = _2;
  return;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::_M_swap_data(std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl&) (_ZNSt12_Vector_baseI7outBuffSaIS0_EE12_Vector_impl12_M_swap_dataERS3_, funcdef_no=2469, decl_uid=37804, cgraph_uid=1209, symbol_order=1257)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__x = &NONLOCAL
_1 = __x
_2 = this
_17 = *this
_18 = *__x
*this = _18
*__x = _17
_3 = __x + 64
_4 = this + 64
_15 = *this
_16 = *__x
*this = _16
*__x = _15
_5 = __x + 128
_6 = this + 128
_13 = *this
_14 = *__x
*this = _14
*__x = _13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _17
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__x = { NONLOCAL } same as this
_1 = { NONLOCAL } same as this
_2 = { NONLOCAL } same as this
_17 = { ESCAPED NONLOCAL }
_18 = { ESCAPED NONLOCAL } same as _17
_3 = { NONLOCAL }
_4 = { NONLOCAL }
_15 = { ESCAPED NONLOCAL } same as _17
_16 = { ESCAPED NONLOCAL } same as _17
_5 = { NONLOCAL }
_6 = { NONLOCAL }
_13 = { ESCAPED NONLOCAL } same as _17
_14 = { ESCAPED NONLOCAL } same as _17


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::_M_swap_data(std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }
__x_7(D), points-to non-local, points-to NULL, points-to vars: { }
this_8(D), points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::_M_swap_data(std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl&) (struct _Vector_impl * const this, struct _Vector_impl & __x)
{
  struct outBuff * * _1;
  struct outBuff * * _2;
  struct outBuff * * _3;
  struct outBuff * * _4;
  struct outBuff * * _5;
  struct outBuff * * _6;
  struct outBuff * _13;
  struct outBuff * _14;
  struct outBuff * _15;
  struct outBuff * _16;
  struct outBuff * _17;
  struct outBuff * _18;

  <bb 2> [100.00%]:
  _1 = &__x_7(D)->_M_start;
  _2 = &this_8(D)->_M_start;
  _17 = MEM[(struct outBuff * &)this_8(D)];
  _18 = MEM[(struct outBuff * &)__x_7(D)];
  MEM[(struct outBuff * &)this_8(D)] = _18;
  MEM[(struct outBuff * &)__x_7(D)] = _17;
  _3 = &__x_7(D)->_M_finish;
  _4 = &this_8(D)->_M_finish;
  _15 = MEM[(struct outBuff * &)this_8(D) + 8];
  _16 = MEM[(struct outBuff * &)__x_7(D) + 8];
  MEM[(struct outBuff * &)this_8(D) + 8] = _16;
  MEM[(struct outBuff * &)__x_7(D) + 8] = _15;
  _5 = &__x_7(D)->_M_end_of_storage;
  _6 = &this_8(D)->_M_end_of_storage;
  _13 = MEM[(struct outBuff * &)this_8(D) + 16];
  _14 = MEM[(struct outBuff * &)__x_7(D) + 16];
  MEM[(struct outBuff * &)this_8(D) + 16] = _14;
  MEM[(struct outBuff * &)__x_7(D) + 16] = _13;
  return;

}



;; Function __gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >::__normal_iterator(outBuff* const&) (_ZN9__gnu_cxx17__normal_iteratorIP7outBuffSt6vectorIS1_SaIS1_EEEC2ERKS2_, funcdef_no=2536, decl_uid=42399, cgraph_uid=1276, symbol_order=1324)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__i = &NONLOCAL
_1 = *__i
*this = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__i = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }


Alias information for __gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >::__normal_iterator(outBuff* const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_3(D), points-to non-local, points-to NULL, points-to vars: { }
__i_5(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >::__normal_iterator(outBuff* const&) (struct __normal_iterator * const this, struct outBuff * const & __i)
{
  struct outBuff * _1;

  <bb 2> [0.00%]:
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  _1 = *__i_5(D);
  this_3(D)->_M_current = _1;
  return;

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::end() (_ZNSt6vectorI7outBuffSaIS0_EE3endEv, funcdef_no=2471, decl_uid=38026, cgraph_uid=1211, symbol_order=1259)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_7 = *this
SR.867_4 = _7
D.46405 = SR.867_4
ESCAPED = D.46405

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_7 = { ESCAPED NONLOCAL }
SR.867_4 = { ESCAPED NONLOCAL } same as _7
D.46405 = { ESCAPED NONLOCAL } same as _7


Alias information for std::vector<outBuff, std::allocator<outBuff> >::end()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
SR.867_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::end() (struct vector * const this)
{
  struct outBuff * SR.867;
  struct iterator D.43354;
  struct iterator D.46405;
  struct outBuff * _7;

  <bb 2> [100.00%]:
  _7 = MEM[(struct outBuff * const &)this_2(D) + 8];
  SR.867_4 = _7;
  MEM[(struct __normal_iterator *)&D.46405] = SR.867_4;
  return D.46405;

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::begin() (_ZNSt6vectorI7outBuffSaIS0_EE5beginEv, funcdef_no=2470, decl_uid=38022, cgraph_uid=1210, symbol_order=1258)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_7 = *this
SR.869_4 = _7
D.46408 = SR.869_4
ESCAPED = D.46408

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_7 = { ESCAPED NONLOCAL }
SR.869_4 = { ESCAPED NONLOCAL } same as _7
D.46408 = { ESCAPED NONLOCAL } same as _7


Alias information for std::vector<outBuff, std::allocator<outBuff> >::begin()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
SR.869_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::begin() (struct vector * const this)
{
  struct outBuff * SR.869;
  struct iterator D.43352;
  struct iterator D.46408;
  struct outBuff * _7;

  <bb 2> [100.00%]:
  _7 = MEM[(struct outBuff * const &)this_2(D)];
  SR.869_4 = _7;
  MEM[(struct __normal_iterator *)&D.46408] = SR.869_4;
  return D.46408;

}



;; Function std::__fill_a<outBuff*, outBuff>(outBuff*, outBuff*, outBuff const&)__gnu_cxx::__enable_if<!std::__is_scalar<outBuff>::__value, void>::__type (_ZSt8__fill_aIP7outBuffS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_, funcdef_no=2539, decl_uid=43406, cgraph_uid=1279, symbol_order=1327)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__value = &NONLOCAL
__first_1 = __first
__first_1 = __first_8
doubledereftmp(13) = *__value + UNKNOWN
*__first_1 + UNKNOWN = doubledereftmp(13)
__first_8 = __first_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__value = { NONLOCAL } same as __first
__first_1 = { NONLOCAL } same as __first
__first_8 = { NONLOCAL } same as __first
doubledereftmp(13) = { ESCAPED NONLOCAL }


Alias information for std::__fill_a<outBuff*, outBuff>(outBuff*, outBuff*, outBuff const&)__gnu_cxx::__enable_if<!std::__is_scalar<outBuff>::__value, void>::__type

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first_1, points-to non-local, points-to NULL, points-to vars: { }
__first_3(D), points-to non-local, points-to NULL, points-to vars: { }
__last_5(D), points-to non-local, points-to NULL, points-to vars: { }
__value_6(D), points-to non-local, points-to NULL, points-to vars: { }
__first_8, points-to non-local, points-to NULL, points-to vars: { }

std::__fill_a<outBuff*, outBuff>(outBuff*, outBuff*, outBuff const&)__gnu_cxx::__enable_if<!std::__is_scalar<outBuff>::__value, void>::__type (struct outBuff * __first, struct outBuff * __last, const struct outBuff & __value)
{
  <bb 2> [0.00%]:
  # __first_1 = PHI <__first_3(D)(0), __first_8(3)>
  if (__first_1 == __last_5(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  *__first_1 = *__value_6(D);
  __first_8 = __first_1 + 40;
  goto <bb 2>; [0.00%]

  <bb 4> [0.00%]:
  return;

}



;; Function std::__niter_base<outBuff*>(outBuff*)outBuff* (_ZSt12__niter_baseIP7outBuffET_S2_, funcdef_no=2541, decl_uid=43416, cgraph_uid=1281, symbol_order=1329)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__it = &NONLOCAL
ESCAPED = __it

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__it = { NONLOCAL }


Alias information for std::__niter_base<outBuff*>(outBuff*)outBuff*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__it_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::__niter_base<outBuff*>(outBuff*)outBuff* (struct outBuff * __it)
{
  <bb 2> [0.00%]:
  return __it_1(D);

}



;; Function std::__fill_n_a<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)__gnu_cxx::__enable_if<!std::__is_scalar<outBuff>::__value, outBuff*>::__type (_ZSt10__fill_n_aIP7outBuffmS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_, funcdef_no=2542, decl_uid=43425, cgraph_uid=1282, symbol_order=1330)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__n = &NONLOCAL
__value = &NONLOCAL
__first_1 = __first
__first_1 = __first_11
__niter_2 = __n
__niter_2 = __niter_10
doubledereftmp(15) = *__value + UNKNOWN
*__first_1 + UNKNOWN = doubledereftmp(15)
__niter_10 = __niter_2
__niter_10 = &NONLOCAL
__first_11 = __first_1
ESCAPED = __first_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__n = { NONLOCAL } same as __first
__value = { NONLOCAL } same as __first
__first_1 = { NONLOCAL } same as __first
__first_11 = { NONLOCAL } same as __first
__niter_2 = { NONLOCAL } same as __first
__niter_10 = { NONLOCAL } same as __first
doubledereftmp(15) = { ESCAPED NONLOCAL }


Alias information for std::__fill_n_a<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)__gnu_cxx::__enable_if<!std::__is_scalar<outBuff>::__value, outBuff*>::__type

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first_1, points-to non-local, points-to NULL, points-to vars: { }
__first_6(D), points-to non-local, points-to NULL, points-to vars: { }
__value_8(D), points-to non-local, points-to NULL, points-to vars: { }
__first_11, points-to non-local, points-to NULL, points-to vars: { }

std::__fill_n_a<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)__gnu_cxx::__enable_if<!std::__is_scalar<outBuff>::__value, outBuff*>::__type (struct outBuff * __first, long unsigned int __n, const struct outBuff & __value)
{
  long unsigned int __niter;

  <bb 2> [0.00%]:

  <bb 3> [0.00%]:
  # __first_1 = PHI <__first_6(D)(2), __first_11(4)>
  # __niter_2 = PHI <__n_4(D)(2), __niter_10(4)>
  if (__niter_2 == 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [0.00%]:
  *__first_1 = *__value_8(D);
  __niter_10 = __niter_2 + 18446744073709551615;
  __first_11 = __first_1 + 40;
  goto <bb 3>; [0.00%]

  <bb 5> [0.00%]:
  return __first_1;

}



;; Function std::fill_n<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)outBuff* (_ZSt6fill_nIP7outBuffmS0_ET_S2_T0_RKT1_, funcdef_no=2474, decl_uid=42469, cgraph_uid=1214, symbol_order=1262)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__n = &NONLOCAL
__value = &NONLOCAL
__first_9 = __first
__first_9 = __first_11
__niter_4 = __n
__niter_4 = __niter_10
doubledereftmp(15) = *__value + UNKNOWN
*__first_9 + UNKNOWN = doubledereftmp(15)
__niter_10 = __niter_4
__niter_10 = &NONLOCAL
__first_11 = __first_9
ESCAPED = __first_9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__n = { NONLOCAL } same as __first
__value = { NONLOCAL } same as __first
__first_9 = { NONLOCAL } same as __first
__first_11 = { NONLOCAL } same as __first
__niter_4 = { NONLOCAL } same as __first
__niter_10 = { NONLOCAL } same as __first
doubledereftmp(15) = { ESCAPED NONLOCAL }


Alias information for std::fill_n<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)outBuff*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first_3(D), points-to non-local, points-to NULL, points-to vars: { }
__value_6(D), points-to non-local, points-to NULL, points-to vars: { }
__first_9, points-to non-local, points-to NULL, points-to vars: { }
__first_11, points-to non-local, points-to NULL, points-to vars: { }

std::fill_n<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)outBuff* (struct outBuff * __first, long unsigned int __n, const struct outBuff & __value)
{
  struct outBuff * D.48406;
  long unsigned int __niter;
  struct outBuff * D.48404;
  struct outBuff * __first;

  <bb 2> [100.00%]:

  <bb 3> [100.00%]:
  # __first_9 = PHI <__first_3(D)(2), __first_11(4)>
  # __niter_4 = PHI <__n_5(D)(2), __niter_10(4)>
  if (__niter_4 == 0)
    goto <bb 5>; [15.00%]
  else
    goto <bb 4>; [85.00%]

  <bb 4> [85.00%]:
  *__first_9 = *__value_6(D);
  __niter_10 = __niter_4 + 18446744073709551615;
  __first_11 = __first_9 + 40;
  goto <bb 3>; [100.00%]

  <bb 5> [15.00%]:
  return __first_9;

}



;; Function __gnu_cxx::new_allocator<char>::deallocate(char*, unsigned long) (_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm, funcdef_no=2543, decl_uid=11623, cgraph_uid=1283, symbol_order=1331)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__p = &NONLOCAL
D.11626 = &NONLOCAL
ESCAPED = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__p = { NONLOCAL } same as this
D.11626 = { NONLOCAL } same as this
_ZdlPv = { }


Alias information for __gnu_cxx::new_allocator<char>::deallocate(char*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__p_2(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::new_allocator<char>::deallocate(char*, unsigned long) (struct new_allocator * const this, char * __p, size_type D.11626)
{
  <bb 2> [0.00%]:
  operator delete (__p_2(D));
  return;

}



;; Function std::allocator_traits<std::allocator<char> >::deallocate(std::allocator<char>&, char*, unsigned long) (_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm, funcdef_no=2475, decl_uid=18572, cgraph_uid=1215, symbol_order=1263)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__p = &NONLOCAL
__n = &NONLOCAL
ESCAPED = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__p = { NONLOCAL } same as __a
__n = { NONLOCAL } same as __a
_ZdlPv = { }


Alias information for std::allocator_traits<std::allocator<char> >::deallocate(std::allocator<char>&, char*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__a_2(D), points-to non-local, points-to NULL, points-to vars: { }
__p_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator_traits<std::allocator<char> >::deallocate(std::allocator<char>&, char*, unsigned long) (struct allocator_type & __a, char * __p, size_type __n)
{
  <bb 2> [100.00%]:
  operator delete (__p_3(D));
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm, funcdef_no=2398, decl_uid=18769, cgraph_uid=1138, symbol_order=1186)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__size = &NONLOCAL
_1 = __size
_1 = &NONLOCAL
_7 = *this
_9 = this + UNKNOWN
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__size = { NONLOCAL } same as this
_1 = { NONLOCAL } same as this
_7 = { ESCAPED NONLOCAL }
_9 = { NONLOCAL }
_ZdlPv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_6(D), points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long) (struct basic_string * const this, size_type __size)
{
  char * D.48419;
  struct allocator_type & D.48417;
  long unsigned int _1;
  char * _7;
  struct allocator_type & _9;

  <bb 2> [100.00%]:
  _1 = __size_4(D) + 1;
  _7 = MEM[(const struct basic_string *)this_6(D)]._M_dataplus._M_p;
  _9 = &this_6(D)->_M_dataplus;
  operator delete (_7);
  return;

}



;; Function __gnu_cxx::__ops::_Iter_equal_to_iter::operator()<unsigned char*, char*>(unsigned char*, char*) constbool (_ZNK9__gnu_cxx5__ops19_Iter_equal_to_iterclIPhPcEEbT_T0_, funcdef_no=2547, decl_uid=43503, cgraph_uid=1287, symbol_order=1335)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__it1 = &NONLOCAL
__it2 = &NONLOCAL
_1 = *__it1
_2 = _1
_3 = *__it2
_4 = _3
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__it1 = { NONLOCAL } same as this
__it2 = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_8 = { }


Alias information for __gnu_cxx::__ops::_Iter_equal_to_iter::operator()<unsigned char*, char*>(unsigned char*, char*) constbool

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__it1_6(D), points-to non-local, points-to NULL, points-to vars: { }
__it2_7(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::_Iter_equal_to_iter::operator()<unsigned char*, char*>(unsigned char*, char*) constbool (const struct _Iter_equal_to_iter * const this, unsigned char * __it1, char * __it2)
{
  unsigned char _1;
  int _2;
  char _3;
  int _4;
  bool _8;

  <bb 2> [0.00%]:
  _1 = *__it1_6(D);
  _2 = (int) _1;
  _3 = *__it2_7(D);
  _4 = (int) _3;
  _8 = _2 == _4;
  return _8;

}



;; Function __gnu_cxx::__ops::_Iter_equal_to_iter::operator()<unsigned char*, unsigned char*>(unsigned char*, unsigned char*) constbool (_ZNK9__gnu_cxx5__ops19_Iter_equal_to_iterclIPhS3_EEbT_T0_, funcdef_no=2550, decl_uid=43577, cgraph_uid=1290, symbol_order=1338)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__it1 = &NONLOCAL
__it2 = &NONLOCAL
_1 = *__it1
_2 = *__it2
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__it1 = { NONLOCAL } same as this
__it2 = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_6 = { }


Alias information for __gnu_cxx::__ops::_Iter_equal_to_iter::operator()<unsigned char*, unsigned char*>(unsigned char*, unsigned char*) constbool

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__it1_4(D), points-to non-local, points-to NULL, points-to vars: { }
__it2_5(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::_Iter_equal_to_iter::operator()<unsigned char*, unsigned char*>(unsigned char*, unsigned char*) constbool (const struct _Iter_equal_to_iter * const this, unsigned char * __it1, unsigned char * __it2)
{
  unsigned char _1;
  unsigned char _2;
  bool _6;

  <bb 2> [0.00%]:
  _1 = *__it1_4(D);
  _2 = *__it2_5(D);
  _6 = _1 == _2;
  return _6;

}



;; Function std::__addressof<char const>(char const&)char const* (_ZSt11__addressofIKcEPT_RS1_, funcdef_no=2555, decl_uid=45000, cgraph_uid=1294, symbol_order=1342)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::__addressof<char const>(char const&)char const*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::__addressof<char const>(char const&)char const* (const char & __r)
{
  <bb 2> [0.00%]:
  return __r_1(D);

}



;; Function std::addressof<char const>(char const&)char const* (_ZSt9addressofIKcEPT_RS1_, funcdef_no=2554, decl_uid=43613, cgraph_uid=1295, symbol_order=1343)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::addressof<char const>(char const&)char const*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::addressof<char const>(char const&)char const* (const char & __r)
{
  const char * D.48425;

  <bb 2> [100.00%]:
  return __r_2(D);

}



;; Function std::pointer_traits<char const*>::pointer_to(char const&) (_ZNSt14pointer_traitsIPKcE10pointer_toERS0_, funcdef_no=2487, decl_uid=42578, cgraph_uid=1227, symbol_order=1275)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::pointer_traits<char const*>::pointer_to(char const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::pointer_traits<char const*>::pointer_to(char const&) (const __make_not_void & __r)
{
  const char * D.48428;

  <bb 2> [100.00%]:
  return __r_2(D);

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv, funcdef_no=2415, decl_uid=18753, cgraph_uid=1155, symbol_order=1203)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
ESCAPED = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const (const struct basic_string * const this)
{
  const char * D.48431;
  const char[16] * _1;

  <bb 2> [100.00%]:
  _1 = &this_2(D)->D.18739._M_local_buf;
  return _1;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv, funcdef_no=2285, decl_uid=18761, cgraph_uid=1025, symbol_order=1073)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_5 = *this
_7 = this + UNKNOWN
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_5 = { ESCAPED NONLOCAL }
_7 = { NONLOCAL }
_9 = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const (const struct basic_string * const this)
{
  char * D.48436;
  const char * D.48434;
  char * _5;
  const char[16] * _7;
  bool _9;

  <bb 2> [100.00%]:
  _5 = this_4(D)->_M_dataplus._M_p;
  _7 = &this_4(D)->D.18739._M_local_buf;
  _9 = _5 == _7;
  return _9;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_, funcdef_no=2264, decl_uid=19014, cgraph_uid=1004, symbol_order=1052)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__str = &NONLOCAL
_54 = *this
_51 = this + UNKNOWN
_36 = __str + UNKNOWN
_38 = this + UNKNOWN
_62 = *__str
_60 = __str + UNKNOWN
_34 = *__str + 64
_73 = *__str + 64
_72 = *__str
_24 = *this
_29 = *_72
*_24 = _29
doubledereftmp(22) = *_72
*_24 = doubledereftmp(22)
_76 = *__str + 64
*this + 64 = _76
_74 = *this
_75 = _74
derefaddrtmp(26) = &NULL
*_75 = derefaddrtmp(26)
_77 = *this
_78 = this + UNKNOWN
_80 = *this
__capacity_50 = *this + 128
__data_15 = &NULL
__data_15 = _80
__capacity_2 = __capacity_46
__capacity_2 = __capacity_50
_82 = *__str
*this = _82
_81 = *__str + 64
*this + 64 = _81
_18 = *__str + 128
*this + 128 = _18
*__str = __data_15
*__str + 128 = __capacity_2
_19 = __str + UNKNOWN
*__str = _19
derefaddrtmp(39) = &NULL
*__str + 64 = derefaddrtmp(39)
_83 = *__str
derefaddrtmp(41) = &NULL
*_83 = derefaddrtmp(41)
ESCAPED = this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL } same as _29
NONLOCAL = { NULL ESCAPED NONLOCAL } same as _54
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__str = { NONLOCAL } same as this
_54 = { NULL ESCAPED NONLOCAL }
_51 = { NONLOCAL }
_47 = { }
_36 = { NONLOCAL }
_38 = { NONLOCAL }
_62 = { NULL ESCAPED NONLOCAL } same as _54
_60 = { NONLOCAL }
_34 = { NULL ESCAPED NONLOCAL }
_73 = { NULL ESCAPED NONLOCAL }
_72 = { NULL ESCAPED NONLOCAL } same as _54
_24 = { NULL ESCAPED NONLOCAL } same as _54
_29 = { NULL ESCAPED NONLOCAL }
doubledereftmp(22) = { NULL ESCAPED NONLOCAL } same as _29
_76 = { NULL ESCAPED NONLOCAL }
_74 = { NULL ESCAPED NONLOCAL } same as _54
_75 = { NULL ESCAPED NONLOCAL } same as _54
derefaddrtmp(26) = { NULL }
_77 = { NULL ESCAPED NONLOCAL } same as _54
_78 = { NONLOCAL }
_79 = { }
_80 = { NULL ESCAPED NONLOCAL } same as _54
__capacity_50 = { NULL ESCAPED NONLOCAL }
__data_15 = { NULL ESCAPED NONLOCAL } same as _54
__capacity_2 = { NULL ESCAPED NONLOCAL } same as __capacity_50
__capacity_46 = { }
_82 = { NULL ESCAPED NONLOCAL } same as _54
_81 = { NULL ESCAPED NONLOCAL }
_18 = { NULL ESCAPED NONLOCAL }
_19 = { NONLOCAL }
derefaddrtmp(39) = { NULL } same as derefaddrtmp(26)
_83 = { NULL ESCAPED NONLOCAL } same as _54
derefaddrtmp(41) = { NULL } same as derefaddrtmp(26)


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

__data_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to NULL, points-to vars: { }
this_23(D), points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__str_33(D), points-to non-local, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to NULL, points-to vars: { }
_38, points-to non-local, points-to NULL, points-to vars: { }
_51, points-to non-local, points-to NULL, points-to vars: { }
_54, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_60, points-to non-local, points-to NULL, points-to vars: { }
_62, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_72, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_74, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_75, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_77, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_78, points-to non-local, points-to NULL, points-to vars: { }
_80, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_82, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_83, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (struct basic_string * const this, struct basic_string & __str)
{
  char * D.48486;
  size_type D.48482;
  char * D.48476;
  bool D.48474;
  size_type D.48472;
  size_type D.48468;
  char * D.48466;
  char * D.48464;
  size_type D.48459;
  struct allocator_type & D.48457;
  struct allocator_type & D.48455;
  bool D.48449;
  char * D.48445;
  bool D.48439;
  size_type __capacity;
  char * __data;
  long unsigned int _18;
  char[16] * _19;
  char * _24;
  char _29;
  long unsigned int _34;
  struct allocator_type & _36;
  struct allocator_type & _38;
  bool _47;
  const char[16] * _51;
  char * _54;
  const char[16] * _60;
  char * _62;
  char * _72;
  long unsigned int _73;
  char * _74;
  char * _75;
  long unsigned int _76;
  char * _77;
  const char[16] * _78;
  bool _79;
  char * _80;
  long unsigned int _81;
  char * _82;
  char * _83;

  <bb 2> [100.00%]:
  _54 = MEM[(const struct basic_string *)this_23(D)]._M_dataplus._M_p;
  _51 = &MEM[(const struct basic_string *)this_23(D)].D.18739._M_local_buf;
  _47 = _51 == _54;
  _36 = &__str_33(D)->_M_dataplus;
  _38 = &this_23(D)->_M_dataplus;
  _62 = MEM[(const struct basic_string *)__str_33(D)]._M_dataplus._M_p;
  _60 = &MEM[(const struct basic_string *)__str_33(D)].D.18739._M_local_buf;
  if (_60 == _62)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 3> [100.00%]:
  _34 = MEM[(const struct basic_string *)__str_33(D)]._M_string_length;
  if (_34 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 4> [100.00%]:
  _73 = MEM[(const struct basic_string *)__str_33(D)]._M_string_length;
  _72 = MEM[(const struct basic_string *)__str_33(D)]._M_dataplus._M_p;
  _24 = MEM[(const struct basic_string *)this_23(D)]._M_dataplus._M_p;
  if (_73 == 1)
    goto <bb 5>; [30.50%]
  else
    goto <bb 6>; [69.50%]

  <bb 5> [30.50%]:
  _29 = MEM[(const char_type &)_72];
  MEM[(char_type &)_24] = _29;
  goto <bb 8>; [100.00%]

  <bb 6> [69.50%]:
  if (_73 == 0)
    goto <bb 8>; [63.36%]
  else
    goto <bb 7>; [36.64%]

  <bb 7> [25.46%]:
  memcpy (_24, _72, _73);

  <bb 8> [100.00%]:
  _76 = MEM[(const struct basic_string *)__str_33(D)]._M_string_length;
  this_23(D)->_M_string_length = _76;
  _74 = MEM[(const struct basic_string *)this_23(D)]._M_dataplus._M_p;
  _75 = _74 + _76;
  MEM[(char_type &)_75] = 0;
  goto <bb 14>; [100.00%]

  <bb 9> [100.00%]:
  _77 = MEM[(const struct basic_string *)this_23(D)]._M_dataplus._M_p;
  _78 = &MEM[(const struct basic_string *)this_23(D)].D.18739._M_local_buf;
  _79 = _77 == _78;
  if (_77 != _78)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [100.00%]:
  _80 = MEM[(const struct basic_string *)this_23(D)]._M_dataplus._M_p;
  __capacity_50 = this_23(D)->D.18739._M_allocated_capacity;

  <bb 11> [100.00%]:
  # __data_15 = PHI <0B(9), _80(10)>
  # __capacity_2 = PHI <__capacity_46(D)(9), __capacity_50(10)>
  _82 = MEM[(const struct basic_string *)__str_33(D)]._M_dataplus._M_p;
  this_23(D)->_M_dataplus._M_p = _82;
  _81 = MEM[(const struct basic_string *)__str_33(D)]._M_string_length;
  this_23(D)->_M_string_length = _81;
  _18 = __str_33(D)->D.18739._M_allocated_capacity;
  this_23(D)->D.18739._M_allocated_capacity = _18;
  if (__data_15 != 0B)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [100.00%]:
  __str_33(D)->_M_dataplus._M_p = __data_15;
  __str_33(D)->D.18739._M_allocated_capacity = __capacity_2;
  goto <bb 14>; [100.00%]

  <bb 13> [100.00%]:
  _19 = &__str_33(D)->D.18739._M_local_buf;
  __str_33(D)->_M_dataplus._M_p = _19;

  <bb 14> [100.00%]:
  __str_33(D)->_M_string_length = 0;
  _83 = MEM[(const struct basic_string *)__str_33(D)]._M_dataplus._M_p;
  MEM[(char_type &)_83] = 0;
  return this_23(D);

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv, funcdef_no=2278, decl_uid=18767, cgraph_uid=1018, symbol_order=1066)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_6 = *this
_10 = this + UNKNOWN
_2 = *this + 128
_12 = *this
ESCAPED = _12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_10 = { NONLOCAL }
_11 = { }
_2 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _6
_ZdlPv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_5(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() (struct basic_string * const this)
{
  bool D.48496;
  long unsigned int _2;
  char * _6;
  const char[16] * _10;
  bool _11;
  char * _12;

  <bb 2> [100.00%]:
  _6 = MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p;
  _10 = &MEM[(const struct basic_string *)this_5(D)].D.18739._M_local_buf;
  _11 = _6 == _10;
  if (_6 != _10)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _2 = this_5(D)->D.18739._M_allocated_capacity;
  _12 = MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p;
  operator delete (_12);

  <bb 4> [0.00%]:
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev, funcdef_no=2087, decl_uid=19666, cgraph_uid=827, symbol_order=875)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_7 = *this
_8 = this + UNKNOWN
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_8 = { NONLOCAL }
_ZdlPv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (struct basic_string * const this)
{
  char * _7;
  const char[16] * _8;

  <bb 2> [100.00%]:
  _7 = MEM[(const struct basic_string *)this_3(D)]._M_dataplus._M_p;
  _8 = &MEM[(const struct basic_string *)this_3(D)].D.18739._M_local_buf;
  if (_7 != _8)
    goto <bb 3>; [57.44%]
  else
    goto <bb 4>; [42.56%]

  <bb 3> [57.44%]:
  operator delete (_7);

  <bb 4> [100.00%]:
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  return;

}



;; Function __gnu_cxx::__is_null_pointer<char const>(char const*)bool (_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_, funcdef_no=2560, decl_uid=43644, cgraph_uid=1300, symbol_order=1348)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__ptr = &NONLOCAL
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__ptr = { NONLOCAL }
_2 = { }


Alias information for __gnu_cxx::__is_null_pointer<char const>(char const*)bool

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__ptr_1(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__is_null_pointer<char const>(char const*)bool (const char * __ptr)
{
  bool _2;

  <bb 2> [0.00%]:
  _2 = __ptr_1(D) == 0B;
  return _2;

}



;; Function std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)std::iterator_traits<char const*>::difference_type (_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag, funcdef_no=2563, decl_uid=45026, cgraph_uid=1302, symbol_order=1350)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
D.45029 = &NONLOCAL
__last.722_1 = __last
__first.723_2 = __first
_5 = __last.722_1
_5 = __first.723_2
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
D.45029 = { NONLOCAL } same as __first
__last.722_1 = { NONLOCAL } same as __first
__first.723_2 = { NONLOCAL } same as __first
_5 = { NONLOCAL } same as __first


Alias information for std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)std::iterator_traits<char const*>::difference_type

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__last_3(D), points-to non-local, points-to NULL, points-to vars: { }
__first_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)std::iterator_traits<char const*>::difference_type (const char * __first, const char * __last, struct random_access_iterator_tag D.45029)
{
  long int __last.722_1;
  long int __first.723_2;
  difference_type _5;

  <bb 2> [0.00%]:
  __last.722_1 = (long int) __last_3(D);
  __first.723_2 = (long int) __first_4(D);
  _5 = __last.722_1 - __first.723_2;
  return _5;

}



;; Function std::distance<char const*>(char const*, char const*)std::iterator_traits<char const*>::difference_type (_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_, funcdef_no=2561, decl_uid=43647, cgraph_uid=1303, symbol_order=1351)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
D.48507 = D.47500
__last.722_4 = __last
__first.723_6 = __first
_7 = __last.722_4
_7 = __first.723_6
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
D.48507 = { }
D.47500 = { }
__last.722_4 = { NONLOCAL } same as __first
__first.723_6 = { NONLOCAL } same as __first
_7 = { NONLOCAL } same as __first


Alias information for std::distance<char const*>(char const*, char const*)std::iterator_traits<char const*>::difference_type

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__last_3(D), points-to non-local, points-to NULL, points-to vars: { }
__first_10(D), points-to non-local, points-to NULL, points-to vars: { }

std::distance<char const*>(char const*, char const*)std::iterator_traits<char const*>::difference_type (const char * __first, const char * __last)
{
  difference_type D.48508;
  struct random_access_iterator_tag D.48507;
  struct random_access_iterator_tag D.47500;
  long int __last.722_4;
  long int __first.723_6;
  long int _7;

  <bb 2> [100.00%]:
  D.48507 = D.47500;
  __last.722_4 = (long int) __last_3(D);
  __first.723_6 = (long int) __first_10(D);
  _7 = __last.722_4 - __first.723_6;
  return _7;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)void (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag, funcdef_no=2496, decl_uid=42757, cgraph_uid=1236, symbol_order=1284)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__beg = &NONLOCAL
__end = &NONLOCAL
D.42761 = &NONLOCAL
iftmp.717_27 = &NONLOCAL
ESCAPED = &STRING
iftmp.717_44 = &NULL
iftmp.717_44 = &NULL
__last.722_19 = __end
__first.723_14 = __beg
_34 = __last.722_19
_34 = __first.723_14
_3 = _34
__dnew = _3
__dnew.718_4 = __dnew
ESCAPED = this
ESCAPED = &__dnew
ESCAPED = &NULL
_24 = NONLOCAL
*this = _24
__dnew.719_6 = __dnew
*this + 128 = __dnew.719_6
_42 = *this
__k2.724_37 = __end
__k1.725_38 = __beg
_39 = __k2.724_37
_39 = __k1.725_38
_40 = _39
_41 = *__beg
*_42 = _41
doubledereftmp(30) = *__beg
*_42 = doubledereftmp(30)
__dnew.720_9 = __dnew
*this + 64 = __dnew.720_9
_35 = *this
_36 = _35
derefaddrtmp(34) = &NULL
*_36 = derefaddrtmp(34)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL __dnew }
NONLOCAL = { ESCAPED NONLOCAL } same as _24
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__beg = { NONLOCAL } same as this
__end = { NONLOCAL } same as this
D.42761 = { NONLOCAL } same as this
iftmp.717_27 = { NONLOCAL } same as this
_ZSt19__throw_logic_errorPKc = { }
iftmp.717_44 = { NULL }
__last.722_19 = { NONLOCAL } same as this
__first.723_14 = { NONLOCAL } same as this
_34 = { NONLOCAL } same as this
_3 = { NONLOCAL } same as this
__dnew = { ESCAPED NONLOCAL } same as __dnew.718_4
__dnew.718_4 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm = { }
_24 = { ESCAPED NONLOCAL }
__dnew.719_6 = { ESCAPED NONLOCAL } same as __dnew.718_4
_42 = { ESCAPED NONLOCAL }
__k2.724_37 = { NONLOCAL } same as this
__k1.725_38 = { NONLOCAL } same as this
_39 = { NONLOCAL } same as this
_40 = { NONLOCAL } same as this
_41 = { ESCAPED NONLOCAL }
doubledereftmp(30) = { ESCAPED NONLOCAL } same as _41
__dnew.720_9 = { ESCAPED NONLOCAL } same as __dnew.718_4
_35 = { ESCAPED NONLOCAL } same as _42
_36 = { ESCAPED NONLOCAL } same as _42
derefaddrtmp(34) = { NULL } same as iftmp.717_44


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)void

Aliased symbols

__dnew, UID D.43646, size_type, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.43646 } (escaped)

Flow-insensitive points-to information

__beg_13(D), points-to non-local, points-to NULL, points-to vars: { }
__end_15(D), points-to non-local, points-to NULL, points-to vars: { }
this_22(D), points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_42, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)void (struct basic_string * const this, const char * __beg, const char * __end, struct forward_iterator_tag D.42761)
{
  char * D.48525;
  difference_type D.48514;
  bool D.48511;
  size_type __dnew;
  long unsigned int _3;
  long unsigned int __dnew.718_4;
  long unsigned int __dnew.719_6;
  long unsigned int __dnew.720_9;
  long int __first.723_14;
  long int __last.722_19;
  char * _24;
  bool iftmp.717_27;
  long int _34;
  char * _35;
  char * _36;
  long int __k2.724_37;
  long int __k1.725_38;
  long int _39;
  long unsigned int _40;
  char _41;
  char * _42;
  bool iftmp.717_44;

  <bb 2> [100.00%]:
  if (__beg_13(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  if (__beg_13(D) != __end_15(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  # iftmp.717_27 = PHI <1(3)>
  std::__throw_logic_error ("basic_string::_M_construct null not valid");

  <bb 5> [100.00%]:
  # iftmp.717_44 = PHI <0(3), 0(2)>
  __last.722_19 = (long int) __end_15(D);
  __first.723_14 = (long int) __beg_13(D);
  _34 = __last.722_19 - __first.723_14;
  _3 = (long unsigned int) _34;
  __dnew = _3;
  __dnew.718_4 = __dnew;
  if (__dnew.718_4 > 15)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 6> [0.00%]:
  _24 = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create (this_22(D), &__dnew, 0);

  <bb 7> [100.00%]:
  this_22(D)->_M_dataplus._M_p = _24;
  __dnew.719_6 = __dnew;
  this_22(D)->D.18739._M_allocated_capacity = __dnew.719_6;

  <bb 8> [100.00%]:
  _42 = MEM[(const struct basic_string *)this_22(D)]._M_dataplus._M_p;
  __k2.724_37 = (long int) __end_15(D);
  __k1.725_38 = (long int) __beg_13(D);
  _39 = __k2.724_37 - __k1.725_38;
  _40 = (long unsigned int) _39;
  if (_40 == 1)
    goto <bb 9>; [30.50%]
  else
    goto <bb 10>; [69.50%]

  <bb 9> [30.50%]:
  _41 = MEM[(const char_type &)__beg_13(D)];
  MEM[(char_type &)_42] = _41;
  goto <bb 12>; [100.00%]

  <bb 10> [69.50%]:
  if (_40 == 0)
    goto <bb 12>; [63.36%]
  else
    goto <bb 11>; [36.64%]

  <bb 11> [25.46%]:
  memcpy (_42, __beg_13(D), _40);

  <bb 12> [100.00%]:
  __dnew.720_9 = __dnew;
  this_22(D)->_M_string_length = __dnew.720_9;
  _35 = MEM[(const struct basic_string *)this_22(D)]._M_dataplus._M_p;
  _36 = _35 + __dnew.720_9;
  MEM[(char_type &)_36] = 0;
  __dnew ={v} {CLOBBER};
  return;

<L12> [0.00%]:
  __dnew ={v} {CLOBBER};
  resx 1

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)void (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type, funcdef_no=2423, decl_uid=42047, cgraph_uid=1163, symbol_order=1211)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__beg = &NONLOCAL
__end = &NONLOCAL
D.42051 = &NONLOCAL
ESCAPED = this
ESCAPED = __beg
ESCAPED = __end
ESCAPED = D.47477

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__beg = { NONLOCAL } same as this
__end = { NONLOCAL } same as this
D.42051 = { NONLOCAL } same as this
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag = { }
D.47477 = { }
D.42747 = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)void

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
__beg_4(D), points-to non-local, points-to NULL, points-to vars: { }
__end_5(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)void (struct basic_string * const this, const char * __beg, const char * __end, struct __false_type D.42051)
{
  struct forward_iterator_tag D.47477;
  struct _Tag D.42747;

  <bb 2> [0.00%]:
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*> (this_3(D), __beg_4(D), __end_5(D), D.47477);

  <bb 3> [0.00%]:
  D.42747 ={v} {CLOBBER};
  return;

<L0> [0.00%]:
  D.42747 ={v} {CLOBBER};
  resx 1

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)void (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_, funcdef_no=2317, decl_uid=41494, cgraph_uid=1057, symbol_order=1105)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__beg = &NONLOCAL
__end = &NONLOCAL
D.48531 = D.47475
ESCAPED = this
ESCAPED = __beg
ESCAPED = __end
ESCAPED = D.48533

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__beg = { NONLOCAL } same as this
__end = { NONLOCAL } same as this
D.48531 = { }
D.47475 = { }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag = { }
D.48533 = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)void

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__beg_3(D), points-to non-local, points-to NULL, points-to vars: { }
__end_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)void (struct basic_string * const this, const char * __beg, const char * __end)
{
  struct forward_iterator_tag D.48533;
  struct __false_type D.48531;
  struct __false_type D.47475;

  <bb 2> [100.00%]:
  D.48531 = D.47475;
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*> (this_2(D), __beg_3(D), __end_4(D), D.48533);

  <bb 3> [0.00%]:
  return;

<L0> [0.00%]:
  resx 1

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_, funcdef_no=2262, decl_uid=19601, cgraph_uid=1002, symbol_order=1050)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__s = &NONLOCAL
__a = &NONLOCAL
_1 = this + UNKNOWN
_16 = this + UNKNOWN
*this = _16
CALLUSED(14) = CALLUSED(14) + UNKNOWN
CALLUSED(14) = *CALLUSED(14) + UNKNOWN
CALLUSED(14) = __s
_10 = CALLUSED(14)
_10 = NONLOCAL
iftmp.715_17 = __s
iftmp.715_15 = __s
iftmp.715_5 = iftmp.715_17
iftmp.715_5 = iftmp.715_15
ESCAPED = this
ESCAPED = __s
ESCAPED = iftmp.715_5
ESCAPED = D.48547

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__s = { NONLOCAL } same as this
__a = { NONLOCAL } same as this
_1 = { NONLOCAL }
_16 = { NONLOCAL }
strlen = { }
CALLUSED(14) = { ESCAPED NONLOCAL }
CALLCLOBBERED(15) = { }
_10 = { ESCAPED NONLOCAL }
iftmp.715_17 = { NONLOCAL } same as this
iftmp.715_15 = { NONLOCAL } same as this
iftmp.715_5 = { NONLOCAL } same as this
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag = { }
D.48547 = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
iftmp.715_5, points-to non-local, points-to NULL, points-to vars: { }
this_8(D), points-to non-local, points-to NULL, points-to vars: { }
__a_12(D), points-to non-local, points-to NULL, points-to vars: { }
__s_14(D), points-to non-local, points-to NULL, points-to vars: { }
iftmp.715_15, points-to non-local, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }
iftmp.715_17, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) (struct basic_string * const this, const char * __s, const struct allocator & __a)
{
  struct forward_iterator_tag D.48547;
  size_t D.48541;
  char * D.48539;
  struct _Alloc_hider * _1;
  const char * iftmp.715_5;
  long unsigned int _10;
  const char * iftmp.715_15;
  char[16] * _16;
  const char * iftmp.715_17;

  <bb 2> [100.00%]:
  MEM[(struct  &)this_8(D)] ={v} {CLOBBER};
  _1 = &this_8(D)->_M_dataplus;
  _16 = &this_8(D)->D.18739._M_local_buf;
  MEM[(struct  &)this_8(D)] ={v} {CLOBBER};
  MEM[(struct _Alloc_hider *)this_8(D)]._M_p = _16;
  if (__s_14(D) != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _10 = strlen (__s_14(D));
  iftmp.715_17 = __s_14(D) + _10;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  iftmp.715_15 = __s_14(D) + 18446744073709551615;

  <bb 5> [100.00%]:
  # iftmp.715_5 = PHI <iftmp.715_17(3), iftmp.715_15(4)>
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*> (this_8(D), __s_14(D), iftmp.715_5, D.48547);

  <bb 6> [0.00%]:
  return;

<L3> [100.00%]:
  MEM[(struct  &)this_8(D)] ={v} {CLOBBER};
  resx 1

}



;; Function __gnu_cxx::new_allocator<outBuff>::new_allocator() (_ZN9__gnu_cxx13new_allocatorI7outBuffEC2Ev, funcdef_no=2591, decl_uid=37719, cgraph_uid=1331, symbol_order=1379)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for __gnu_cxx::new_allocator<outBuff>::new_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<outBuff>::new_allocator() (struct new_allocator * const this)
{
  <bb 2> [0.00%]:
  return;

}



;; Function std::allocator<outBuff>::allocator() (_ZNSaI7outBuffEC2Ev, funcdef_no=2523, decl_uid=37784, cgraph_uid=1263, symbol_order=1311)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::allocator<outBuff>::allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator<outBuff>::allocator() (struct allocator * const this)
{
  void * _1;

  <bb 2> [100.00%]:
  return;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::_Vector_impl() (_ZNSt12_Vector_baseI7outBuffSaIS0_EE12_Vector_implC2Ev, funcdef_no=2455, decl_uid=37821, cgraph_uid=1195, symbol_order=1243)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
derefaddrtmp(9) = &NULL
*this = derefaddrtmp(9)
derefaddrtmp(10) = &NULL
*this + 64 = derefaddrtmp(10)
derefaddrtmp(11) = &NULL
*this + 128 = derefaddrtmp(11)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
derefaddrtmp(9) = { NULL }
derefaddrtmp(10) = { NULL } same as derefaddrtmp(9)
derefaddrtmp(11) = { NULL } same as derefaddrtmp(9)


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::_Vector_impl()

Aliased symbols


Call clobber information

ESCAPED, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::_Vector_impl() (struct _Vector_impl * const this)
{
  <bb 2> [100.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->_M_start = 0B;
  this_2(D)->_M_finish = 0B;
  this_2(D)->_M_end_of_storage = 0B;
  return;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_base() (_ZNSt12_Vector_baseI7outBuffSaIS0_EEC2Ev, funcdef_no=2391, decl_uid=37878, cgraph_uid=1131, symbol_order=1179)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
derefaddrtmp(10) = &NULL
*this = derefaddrtmp(10)
derefaddrtmp(11) = &NULL
*this + 64 = derefaddrtmp(11)
derefaddrtmp(12) = &NULL
*this + 128 = derefaddrtmp(12)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
derefaddrtmp(10) = { NULL }
derefaddrtmp(11) = { NULL } same as derefaddrtmp(10)
derefaddrtmp(12) = { NULL } same as derefaddrtmp(10)


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_base()

Aliased symbols


Call clobber information

ESCAPED, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_base() (struct _Vector_base * const this)
{
  struct _Vector_impl * _1;
  struct _Vector_impl * _2;

  <bb 2> [100.00%]:
  MEM[(struct  &)this_4(D)] ={v} {CLOBBER};
  _1 = &this_4(D)->_M_impl;
  MEM[(struct  &)this_4(D)] ={v} {CLOBBER};
  MEM[(struct _Vector_impl *)this_4(D)]._M_start = 0B;
  MEM[(struct _Vector_impl *)this_4(D)]._M_finish = 0B;
  MEM[(struct _Vector_impl *)this_4(D)]._M_end_of_storage = 0B;
  return;

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::vector() (_ZNSt6vectorI7outBuffSaIS0_EEC2Ev, funcdef_no=2251, decl_uid=38520, cgraph_uid=991, symbol_order=1039)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
derefaddrtmp(10) = &NULL
*this = derefaddrtmp(10)
derefaddrtmp(11) = &NULL
*this + 64 = derefaddrtmp(11)
derefaddrtmp(12) = &NULL
*this + 128 = derefaddrtmp(12)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
derefaddrtmp(10) = { NULL }
derefaddrtmp(11) = { NULL } same as derefaddrtmp(10)
derefaddrtmp(12) = { NULL } same as derefaddrtmp(10)


Alias information for std::vector<outBuff, std::allocator<outBuff> >::vector()

Aliased symbols


Call clobber information

ESCAPED, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::vector() (struct vector * const this)
{
  struct _Vector_base * _1;
  struct _Vector_base * _2;

  <bb 2> [100.00%]:
  MEM[(struct  &)this_4(D)] ={v} {CLOBBER};
  _1 = &this_4(D)->D.38528;
  MEM[(struct  &)this_4(D)] ={v} {CLOBBER};
  MEM[(struct _Vector_impl *)this_4(D)]._M_start = 0B;
  MEM[(struct _Vector_impl *)this_4(D)]._M_finish = 0B;
  MEM[(struct _Vector_impl *)this_4(D)]._M_end_of_storage = 0B;
  return;

}



;; Function __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=2654, decl_uid=45276, cgraph_uid=1394, symbol_order=1442)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__initialize_p = &NONLOCAL
__priority = &NONLOCAL
_ZL12OutputBuffer = NONLOCAL
ESCAPED = &NULL
_ZL12OutputBuffer = &NULL
ESCAPED = &NULL
_ZL12OutputBuffer = &NULL
ESCAPED = &NULL
_ZL12OutputBuffer = &NULL
ESCAPED = &NULL
ESCAPED = &_ZNSt6vectorI7outBuffSaIS0_EED1Ev
ESCAPED = &_ZL12OutputBuffer
__dso_handle = NONLOCAL
ESCAPED = &__dso_handle

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZL12OutputBuffer _ZNSt6vectorI7outBuffSaIS0_EED1Ev __dso_handle }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__initialize_p = { NONLOCAL }
__priority = { NONLOCAL } same as __initialize_p
_ZL12OutputBuffer = { NULL ESCAPED NONLOCAL }
__cxa_atexit = { }
_ZNSt6vectorI7outBuffSaIS0_EED1Ev = { ESCAPED NONLOCAL }
__dso_handle = { ESCAPED NONLOCAL }


Alias information for __static_initialization_and_destruction_0(int, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.37436 D.45281 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information


__static_initialization_and_destruction_0(int, int) (int __initialize_p, int __priority)
{
  <bb 2> [0.00%]:
  if (__initialize_p_2(D) == 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  if (__priority_4(D) == 65535)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [100.00%]:
  MEM[(struct  &)&OutputBuffer] ={v} {CLOBBER};
  MEM[(struct _Vector_impl *)&OutputBuffer]._M_start = 0B;
  MEM[(struct _Vector_impl *)&OutputBuffer]._M_finish = 0B;
  MEM[(struct _Vector_impl *)&OutputBuffer]._M_end_of_storage = 0B;
  __cxa_atexit (__comp_dtor , &OutputBuffer, &__dso_handle);

  <bb 5> [0.00%]:
  return;

}



;; Function __gnu_cxx::new_allocator<outBuff>::deallocate(outBuff*, unsigned long) (_ZN9__gnu_cxx13new_allocatorI7outBuffE10deallocateEPS1_m, funcdef_no=2593, decl_uid=37673, cgraph_uid=1333, symbol_order=1381)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__p = &NONLOCAL
D.37676 = &NONLOCAL
ESCAPED = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__p = { NONLOCAL } same as this
D.37676 = { NONLOCAL } same as this
_ZdlPv = { }


Alias information for __gnu_cxx::new_allocator<outBuff>::deallocate(outBuff*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__p_2(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::new_allocator<outBuff>::deallocate(outBuff*, unsigned long) (struct new_allocator * const this, struct outBuff * __p, size_type D.37676)
{
  <bb 2> [0.00%]:
  operator delete (__p_2(D));
  return;

}



;; Function std::allocator_traits<std::allocator<outBuff> >::deallocate(std::allocator<outBuff>&, outBuff*, unsigned long) (_ZNSt16allocator_traitsISaI7outBuffEE10deallocateERS1_PS0_m, funcdef_no=2528, decl_uid=37474, cgraph_uid=1268, symbol_order=1316)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__p = &NONLOCAL
__n = &NONLOCAL
ESCAPED = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__p = { NONLOCAL } same as __a
__n = { NONLOCAL } same as __a
_ZdlPv = { }


Alias information for std::allocator_traits<std::allocator<outBuff> >::deallocate(std::allocator<outBuff>&, outBuff*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__a_2(D), points-to non-local, points-to NULL, points-to vars: { }
__p_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator_traits<std::allocator<outBuff> >::deallocate(std::allocator<outBuff>&, outBuff*, unsigned long) (struct allocator_type & __a, struct outBuff * __p, size_type __n)
{
  <bb 2> [100.00%]:
  operator delete (__p_3(D));
  return;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_deallocate(outBuff*, unsigned long) (_ZNSt12_Vector_baseI7outBuffSaIS0_EE13_M_deallocateEPS0_m, funcdef_no=2460, decl_uid=37829, cgraph_uid=1200, symbol_order=1248)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__p = &NONLOCAL
__n = &NONLOCAL
_1 = this + UNKNOWN
ESCAPED = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__p = { NONLOCAL } same as this
__n = { NONLOCAL } same as this
_1 = { NONLOCAL }
_ZdlPv = { }


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_deallocate(outBuff*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
__p_3(D), points-to non-local, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to NULL, points-to vars: { }

std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_deallocate(outBuff*, unsigned long) (struct _Vector_base * const this, struct outBuff * __p, size_t __n)
{
  struct _Vector_impl * _1;

  <bb 2> [0.00%]:
  if (__p_3(D) != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _1 = &this_5(D)->_M_impl;
  operator delete (__p_3(D));

  <bb 4> [0.00%]:
  return;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::~_Vector_base() (_ZNSt12_Vector_baseI7outBuffSaIS0_EED2Ev, funcdef_no=2394, decl_uid=37883, cgraph_uid=1134, symbol_order=1182)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this + 128
_2 = _1
_3 = *this
_4 = _3
_5 = _2
_5 = _4
_6 = _5
_6 = &NONLOCAL
_7 = _6
_8 = *this
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _6
_8 = { ESCAPED NONLOCAL } same as _3
_ZdlPv = { }


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::~_Vector_base()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_11(D), points-to non-local, points-to NULL, points-to vars: { }

std::_Vector_base<outBuff, std::allocator<outBuff> >::~_Vector_base() (struct _Vector_base * const this)
{
  struct outBuff * _1;
  long int _2;
  struct outBuff * _3;
  long int _4;
  long int _5;
  long int _6;
  long unsigned int _7;
  struct outBuff * _8;

  <bb 2> [100.00%]:
  _1 = this_11(D)->_M_impl._M_end_of_storage;
  _2 = (long int) _1;
  _3 = this_11(D)->_M_impl._M_start;
  _4 = (long int) _3;
  _5 = _2 - _4;
  _6 = _5 /[ex] 40;
  _7 = (long unsigned int) _6;
  _8 = this_11(D)->_M_impl._M_start;
  if (_8 != 0B)
    goto <bb 3>; [57.44%]
  else
    goto <bb 4>; [42.56%]

  <bb 3> [57.44%]:
  operator delete (_8);

  <bb 4> [100.00%]:
  MEM[(struct  &)this_11(D)] ={v} {CLOBBER};
  MEM[(struct  &)this_11(D)] ={v} {CLOBBER};
  return;

}



;; Function __gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >::base() const (_ZNK9__gnu_cxx17__normal_iteratorIP7outBuffSt6vectorIS1_SaIS1_EEE4baseEv, funcdef_no=2598, decl_uid=42386, cgraph_uid=1338, symbol_order=1386)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL } same as this


Alias information for __gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >::base() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >::base() const (const struct __normal_iterator * const this)
{
  struct outBuff * const & _2;

  <bb 2> [0.00%]:
  _2 = &this_1(D)->_M_current;
  return _2;

}



;; Function std::__niter_base<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >(__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >)outBuff* (_ZSt12__niter_baseIP7outBuffSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE, funcdef_no=2538, decl_uid=43358, cgraph_uid=1278, symbol_order=1326)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__it = &NONLOCAL
_4 = __it
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__it = { NONLOCAL }
_4 = { NONLOCAL } same as __it


Alias information for std::__niter_base<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >(__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >)outBuff*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_4, points-to non-local, points-to NULL, points-to vars: { }

std::__niter_base<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >(__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >)outBuff* (struct __normal_iterator __it)
{
  struct outBuff * const & D.48578;
  struct outBuff * _4;

  <bb 2> [100.00%]:
  _4 = MEM[(struct outBuff * const &)&__it];
  return _4;

}



;; Function std::fill<__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >, outBuff>(__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >, __gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >, outBuff const&)void (_ZSt4fillIN9__gnu_cxx17__normal_iteratorIP7outBuffSt6vectorIS2_SaIS2_EEEES2_EvT_S8_RKT0_, funcdef_no=2472, decl_uid=42418, cgraph_uid=1212, symbol_order=1260)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__value = &NONLOCAL
CALLUSED(12) = CALLUSED(12) + UNKNOWN
CALLUSED(12) = *CALLUSED(12) + UNKNOWN
CALLUSED(12) = __last
_1 = CALLUSED(12)
_1 = NONLOCAL
CALLUSED(15) = CALLUSED(15) + UNKNOWN
CALLUSED(15) = *CALLUSED(15) + UNKNOWN
CALLUSED(15) = __first
_2 = CALLUSED(15)
_2 = NONLOCAL
__first_5 = _2
__first_5 = __first_4
doubledereftmp(20) = *__value + UNKNOWN
*__first_5 + UNKNOWN = doubledereftmp(20)
__first_4 = __first_5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__value = { NONLOCAL } same as __first
_ZSt12__niter_baseIP7outBuffSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE = { }
CALLUSED(12) = { ESCAPED NONLOCAL }
CALLCLOBBERED(13) = { }
_1 = { ESCAPED NONLOCAL }
CALLUSED(15) = { ESCAPED NONLOCAL }
CALLCLOBBERED(16) = { }
_2 = { ESCAPED NONLOCAL }
__first_5 = { ESCAPED NONLOCAL } same as _2
__first_4 = { ESCAPED NONLOCAL } same as _2
doubledereftmp(20) = { ESCAPED NONLOCAL }


Alias information for std::fill<__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >, outBuff>(__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >, __gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >, outBuff const&)void

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__first_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__first_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__value_6(D), points-to non-local, points-to NULL, points-to vars: { }

std::fill<__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >, outBuff>(__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >, __gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >, outBuff const&)void (struct __normal_iterator __first, struct __normal_iterator __last, const struct outBuff & __value)
{
  struct outBuff * __first;
  struct outBuff * _1;
  struct outBuff * _2;

  <bb 2> [15.00%]:
  _1 = std::__niter_base<outBuff*, std::vector<outBuff, std::allocator<outBuff> > > (__last);
  _2 = std::__niter_base<outBuff*, std::vector<outBuff, std::allocator<outBuff> > > (__first);

  <bb 3> [100.00%]:
  # __first_5 = PHI <_2(2), __first_4(4)>
  if (_1 == __first_5)
    goto <bb 5>; [15.00%]
  else
    goto <bb 4>; [85.00%]

  <bb 4> [85.00%]:
  *__first_5 = *__value_6(D);
  __first_4 = __first_5 + 40;
  goto <bb 3>; [100.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function __gnu_cxx::__ops::_Iter_equals_iter<char*>::_Iter_equals_iter(char*) (_ZN9__gnu_cxx5__ops17_Iter_equals_iterIPcEC2ES2_, funcdef_no=2601, decl_uid=43462, cgraph_uid=1341, symbol_order=1389)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__it1 = &NONLOCAL
*this = __it1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__it1 = { NONLOCAL } same as this


Alias information for __gnu_cxx::__ops::_Iter_equals_iter<char*>::_Iter_equals_iter(char*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__it1_4(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::_Iter_equals_iter<char*>::_Iter_equals_iter(char*) (struct _Iter_equals_iter * const this, char * __it1)
{
  <bb 2> [0.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->_M_it1 = __it1_4(D);
  return;

}



;; Function __gnu_cxx::__ops::__iter_comp_iter<char*>(__gnu_cxx::__ops::_Iter_equal_to_iter, char*)__gnu_cxx::__ops::_Iter_equals_iter<char*> (_ZN9__gnu_cxx5__ops16__iter_comp_iterIPcEENS0_17_Iter_equals_iterIT_EENS0_19_Iter_equal_to_iterES4_, funcdef_no=2544, decl_uid=43440, cgraph_uid=1284, symbol_order=1332)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
D.43441 = &NONLOCAL
__it = &NONLOCAL
SR.909_8 = __it
D.47331 = SR.909_8
ESCAPED = D.47331

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
D.43441 = { NONLOCAL }
__it = { NONLOCAL } same as D.43441
SR.909_8 = { NONLOCAL } same as D.43441
D.47331 = { NONLOCAL } same as D.43441


Alias information for __gnu_cxx::__ops::__iter_comp_iter<char*>(__gnu_cxx::__ops::_Iter_equal_to_iter, char*)__gnu_cxx::__ops::_Iter_equals_iter<char*>

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__it_2(D), points-to non-local, points-to NULL, points-to vars: { }
SR.909_8, points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::__iter_comp_iter<char*>(__gnu_cxx::__ops::_Iter_equal_to_iter, char*)__gnu_cxx::__ops::_Iter_equals_iter<char*> (struct _Iter_equal_to_iter D.43441, char * __it)
{
  char * SR.909;
  struct _Iter_equals_iter D.44833;
  struct _Iter_equals_iter D.47331;

  <bb 2> [100.00%]:
  SR.909_8 = __it_2(D);
  MEM[(struct _Iter_equals_iter *)&D.47331] = SR.909_8;
  return D.47331;

}



;; Function __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>::_Iter_equals_iter(unsigned char*) (_ZN9__gnu_cxx5__ops17_Iter_equals_iterIPhEC2ES2_, funcdef_no=2605, decl_uid=43536, cgraph_uid=1345, symbol_order=1393)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__it1 = &NONLOCAL
*this = __it1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__it1 = { NONLOCAL } same as this


Alias information for __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>::_Iter_equals_iter(unsigned char*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__it1_4(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>::_Iter_equals_iter(unsigned char*) (struct _Iter_equals_iter * const this, unsigned char * __it1)
{
  <bb 2> [0.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->_M_it1 = __it1_4(D);
  return;

}



;; Function __gnu_cxx::__ops::__iter_comp_iter<unsigned char*>(__gnu_cxx::__ops::_Iter_equal_to_iter, unsigned char*)__gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> (_ZN9__gnu_cxx5__ops16__iter_comp_iterIPhEENS0_17_Iter_equals_iterIT_EENS0_19_Iter_equal_to_iterES4_, funcdef_no=2548, decl_uid=43514, cgraph_uid=1288, symbol_order=1336)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
D.43515 = &NONLOCAL
__it = &NONLOCAL
SR.912_8 = __it
D.47409 = SR.912_8
ESCAPED = D.47409

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
D.43515 = { NONLOCAL }
__it = { NONLOCAL } same as D.43515
SR.912_8 = { NONLOCAL } same as D.43515
D.47409 = { NONLOCAL } same as D.43515


Alias information for __gnu_cxx::__ops::__iter_comp_iter<unsigned char*>(__gnu_cxx::__ops::_Iter_equal_to_iter, unsigned char*)__gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__it_2(D), points-to non-local, points-to NULL, points-to vars: { }
SR.912_8, points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::__iter_comp_iter<unsigned char*>(__gnu_cxx::__ops::_Iter_equal_to_iter, unsigned char*)__gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> (struct _Iter_equal_to_iter D.43515, unsigned char * __it)
{
  unsigned char * SR.912;
  struct _Iter_equals_iter D.44863;
  struct _Iter_equals_iter D.47409;

  <bb 2> [100.00%]:
  SR.912_8 = __it_2(D);
  MEM[(struct _Iter_equals_iter *)&D.47409] = SR.912_8;
  return D.47409;

}



;; Function std::_Destroy_aux<true>::__destroy<outBuff*>(outBuff*, outBuff*)void (_ZNSt12_Destroy_auxILb1EE9__destroyIP7outBuffEEvT_S4_, funcdef_no=2610, decl_uid=44983, cgraph_uid=1350, symbol_order=1398)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
D.44984 = &NONLOCAL
D.44985 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
D.44984 = { NONLOCAL }
D.44985 = { NONLOCAL } same as D.44984


Alias information for std::_Destroy_aux<true>::__destroy<outBuff*>(outBuff*, outBuff*)void

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


std::_Destroy_aux<true>::__destroy<outBuff*>(outBuff*, outBuff*)void (struct outBuff * D.44984, struct outBuff * D.44985)
{
  <bb 2> [0.00%]:
  GIMPLE_NOP
  return;

}



;; Function std::_Destroy<outBuff*>(outBuff*, outBuff*)void (_ZSt8_DestroyIP7outBuffEvT_S2_, funcdef_no=2552, decl_uid=43587, cgraph_uid=1292, symbol_order=1340)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first


Alias information for std::_Destroy<outBuff*>(outBuff*, outBuff*)void

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__first_2(D), points-to non-local, points-to NULL, points-to vars: { }
__last_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::_Destroy<outBuff*>(outBuff*, outBuff*)void (struct outBuff * __first, struct outBuff * __last)
{
  <bb 2> [100.00%]:
  return;

}



;; Function std::_Destroy<outBuff*, outBuff>(outBuff*, outBuff*, std::allocator<outBuff>&)void (_ZSt8_DestroyIP7outBuffS0_EvT_S2_RSaIT0_E, funcdef_no=2480, decl_uid=42508, cgraph_uid=1220, symbol_order=1268)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
D.42511 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
D.42511 = { NONLOCAL } same as __first


Alias information for std::_Destroy<outBuff*, outBuff>(outBuff*, outBuff*, std::allocator<outBuff>&)void

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__first_2(D), points-to non-local, points-to NULL, points-to vars: { }
__last_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::_Destroy<outBuff*, outBuff>(outBuff*, outBuff*, std::allocator<outBuff>&)void (struct outBuff * __first, struct outBuff * __last, struct allocator & D.42511)
{
  <bb 2> [100.00%]:
  return;

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::~vector() (_ZNSt6vectorI7outBuffSaIS0_EED2Ev, funcdef_no=2467, decl_uid=38525, cgraph_uid=1207, symbol_order=1255)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_8 = this + UNKNOWN
_3 = *this + 64
_4 = *this
_5 = this + UNKNOWN
_9 = *this
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_8 = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _4
_ZdlPv = { }


Alias information for std::vector<outBuff, std::allocator<outBuff> >::~vector()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
this_6(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::~vector() (struct vector * const this)
{
  struct _Tp_alloc_type & D.48608;
  struct outBuff * _3;
  struct outBuff * _4;
  struct _Vector_base * _5;
  struct _Tp_alloc_type & _8;
  struct outBuff * _9;

  <bb 2> [100.00%]:
  _8 = &MEM[(struct _Vector_base *)this_6(D)]._M_impl;
  _3 = this_6(D)->D.38528._M_impl._M_finish;
  _4 = this_6(D)->D.38528._M_impl._M_start;
  _5 = &this_6(D)->D.38528;
  _9 = MEM[(struct _Vector_base *)this_6(D)]._M_impl._M_start;
  if (_9 != 0B)
    goto <bb 3>; [57.44%]
  else
    goto <bb 4>; [42.56%]

  <bb 3> [57.44%]:
  operator delete (_9);

  <bb 4> [100.00%]:
  MEM[(struct  &)this_6(D)] ={v} {CLOBBER};
  MEM[(struct  &)this_6(D)] ={v} {CLOBBER};
  return;

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::_M_erase_at_end(outBuff*) (_ZNSt6vectorI7outBuffSaIS0_EE15_M_erase_at_endEPS0_, funcdef_no=2409, decl_uid=38407, cgraph_uid=1149, symbol_order=1197)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
_8 = this + UNKNOWN
_3 = *this + 64
*this + 64 = __pos

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
_8 = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for std::vector<outBuff, std::allocator<outBuff> >::_M_erase_at_end(outBuff*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to NULL, points-to vars: { }
__pos_7(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::_M_erase_at_end(outBuff*) (struct vector * const this, struct outBuff * __pos)
{
  struct _Tp_alloc_type & D.48614;
  struct outBuff * _3;
  struct _Tp_alloc_type & _8;

  <bb 2> [100.00%]:
  _8 = &MEM[(struct _Vector_base *)this_4(D)]._M_impl;
  _3 = this_4(D)->D.38528._M_impl._M_finish;
  this_4(D)->D.38528._M_impl._M_finish = __pos_7(D);
  return;

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::clear() (_ZNSt6vectorI7outBuffSaIS0_EE5clearEv, funcdef_no=2272, decl_uid=38165, cgraph_uid=1012, symbol_order=1060)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this
*this + 64 = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }


Alias information for std::vector<outBuff, std::allocator<outBuff> >::clear()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::clear() (struct vector * const this)
{
  struct outBuff * _1;

  <bb 2> [100.00%]:
  _1 = this_3(D)->D.38528._M_impl._M_start;
  this_3(D)->D.38528._M_impl._M_finish = _1;
  return;

}



;; Function std::__addressof<outBuff>(outBuff&)outBuff* (_ZSt11__addressofI7outBuffEPT_RS1_, funcdef_no=2634, decl_uid=45124, cgraph_uid=1374, symbol_order=1422)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::__addressof<outBuff>(outBuff&)outBuff*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::__addressof<outBuff>(outBuff&)outBuff* (struct outBuff & __r)
{
  <bb 2> [0.00%]:
  return __r_1(D);

}



;; Function std::forward<outBuff const&>(std::remove_reference<outBuff const&>::type&)outBuff const& (_ZSt7forwardIRK7outBuffEOT_RNSt16remove_referenceIS3_E4typeE, funcdef_no=2636, decl_uid=45235, cgraph_uid=1375, symbol_order=1423)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
ESCAPED = __t

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }


Alias information for std::forward<outBuff const&>(std::remove_reference<outBuff const&>::type&)outBuff const&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::forward<outBuff const&>(std::remove_reference<outBuff const&>::type&)outBuff const& (const struct type & __t)
{
  <bb 2> [0.00%]:
  return __t_1(D);

}



;; Function std::_Construct<outBuff, outBuff const&>(outBuff*, outBuff const&)void (_ZSt10_ConstructI7outBuffJRKS0_EEvPT_DpOT0_, funcdef_no=2635, decl_uid=45126, cgraph_uid=1376, symbol_order=1424)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__p = &NONLOCAL
__args#0 = &NONLOCAL
doubledereftmp(10) = *__args#0 + UNKNOWN
*__p + UNKNOWN = doubledereftmp(10)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__p = { NONLOCAL }
__args#0 = { NONLOCAL } same as __p
doubledereftmp(10) = { ESCAPED NONLOCAL }


Alias information for std::_Construct<outBuff, outBuff const&>(outBuff*, outBuff const&)void

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__args#0_3(D), points-to non-local, points-to NULL, points-to vars: { }
__p_6(D), points-to non-local, points-to NULL, points-to vars: { }

std::_Construct<outBuff, outBuff const&>(outBuff*, outBuff const&)void (struct outBuff * __p, const struct outBuff & __args#0)
{
  const struct outBuff & D.48625;
  void * D.48623;

  <bb 2> [100.00%]:
  if (__p_6(D) != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  *__p_6(D) = *__args#0_3(D);

  <bb 4> [0.00%]:
  return;

}



;; Function std::__uninitialized_fill_n<false>::__uninit_fill_n<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)outBuff* (_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIP7outBuffmS2_EET_S4_T0_RKT1_, funcdef_no=2599, decl_uid=44822, cgraph_uid=1339, symbol_order=1387)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__n = &NONLOCAL
__x = &NONLOCAL
__n_3 = __n
__n_3 = __n_13
__cur_4 = __first
__cur_4 = __cur_14
_16 = __cur_4
_1 = __cur_4
doubledereftmp(17) = *__x + UNKNOWN
*_1 + UNKNOWN = doubledereftmp(17)
__n_13 = __n_3
__n_13 = &NONLOCAL
__cur_14 = __cur_4
ESCAPED = __cur_4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__n = { NONLOCAL } same as __first
__x = { NONLOCAL } same as __first
__n_3 = { NONLOCAL } same as __first
__n_13 = { NONLOCAL } same as __first
__cur_4 = { NONLOCAL } same as __first
__cur_14 = { NONLOCAL } same as __first
_16 = { NONLOCAL } same as __first
_1 = { NONLOCAL } same as __first
doubledereftmp(17) = { ESCAPED NONLOCAL }


Alias information for std::__uninitialized_fill_n<false>::__uninit_fill_n<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)outBuff*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
__cur_4, points-to non-local, points-to NULL, points-to vars: { }
__first_6(D), points-to non-local, points-to NULL, points-to vars: { }
__x_11(D), points-to non-local, points-to NULL, points-to vars: { }
__cur_14, points-to non-local, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }

std::__uninitialized_fill_n<false>::__uninit_fill_n<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)outBuff* (struct outBuff * __first, long unsigned int __n, const struct outBuff & __x)
{
  struct outBuff * D.48630;
  struct outBuff * __cur;
  struct outBuff * _1;
  void * _2;

  <bb 2> [0.00%]:

  <bb 3> [0.00%]:
  # __n_3 = PHI <__n_8(D)(2), __n_13(6)>
  # __cur_4 = PHI <__first_6(D)(2), __cur_14(6)>
  if (__n_3 == 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [100.00%]:
  _16 = __cur_4;
  _1 = __cur_4;
  if (__cur_4 != 0B)
    goto <bb 5>; [73.26%]
  else
    goto <bb 6>; [26.74%]

  <bb 5> [73.26%]:
  *_1 = *__x_11(D);

  <bb 6> [0.00%]:
  __n_13 = __n_3 + 18446744073709551615;
  __cur_14 = __cur_4 + 40;
  goto <bb 3>; [0.00%]

  <bb 7> [0.00%]:
  return __cur_4;

}



;; Function std::uninitialized_fill_n<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)outBuff* (_ZSt20uninitialized_fill_nIP7outBuffmS0_ET_S2_T0_RKT1_, funcdef_no=2540, decl_uid=43411, cgraph_uid=1280, symbol_order=1328)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__n = &NONLOCAL
__x = &NONLOCAL
__n_9 = __n
__n_9 = __n_11
__cur_10 = __first
__cur_10 = __cur_12
doubledereftmp(15) = *__x + UNKNOWN
*__cur_10 + UNKNOWN = doubledereftmp(15)
__n_11 = __n_9
__n_11 = &NONLOCAL
__cur_12 = __cur_10
ESCAPED = __cur_10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__n = { NONLOCAL } same as __first
__x = { NONLOCAL } same as __first
__n_9 = { NONLOCAL } same as __first
__n_11 = { NONLOCAL } same as __first
__cur_10 = { NONLOCAL } same as __first
__cur_12 = { NONLOCAL } same as __first
doubledereftmp(15) = { ESCAPED NONLOCAL }


Alias information for std::uninitialized_fill_n<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)outBuff*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first_3(D), points-to non-local, points-to NULL, points-to vars: { }
__x_5(D), points-to non-local, points-to NULL, points-to vars: { }
__cur_10, points-to non-local, points-to NULL, points-to vars: { }
__cur_12, points-to non-local, points-to NULL, points-to vars: { }

std::uninitialized_fill_n<outBuff*, unsigned long, outBuff>(outBuff*, unsigned long, outBuff const&)outBuff* (struct outBuff * __first, long unsigned int __n, const struct outBuff & __x)
{
  struct outBuff * __cur;
  struct outBuff * D.48636;
  long unsigned int __n;
  const bool __assignable;

  <bb 2> [15.00%]:

  <bb 3> [100.00%]:
  # __n_9 = PHI <__n_4(D)(2), __n_11(6)>
  # __cur_10 = PHI <__first_3(D)(2), __cur_12(6)>
  if (__n_9 == 0)
    goto <bb 7>; [15.00%]
  else
    goto <bb 4>; [85.00%]

  <bb 4> [85.00%]:
  if (__cur_10 != 0B)
    goto <bb 5>; [70.00%]
  else
    goto <bb 6>; [30.00%]

  <bb 5> [59.50%]:
  *__cur_10 = *__x_5(D);

  <bb 6> [85.00%]:
  __n_11 = __n_9 + 18446744073709551615;
  __cur_12 = __cur_10 + 40;
  goto <bb 3>; [100.00%]

  <bb 7> [15.00%]:
  return __cur_10;

}



;; Function std::__uninitialized_fill_n_a<outBuff*, unsigned long, outBuff, outBuff>(outBuff*, unsigned long, outBuff const&, std::allocator<outBuff>&)outBuff* (_ZSt24__uninitialized_fill_n_aIP7outBuffmS0_S0_ET_S2_T0_RKT1_RSaIT2_E, funcdef_no=2473, decl_uid=42459, cgraph_uid=1213, symbol_order=1261)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__n = &NONLOCAL
__x = &NONLOCAL
D.42463 = &NONLOCAL
__n_8 = __n
__n_8 = __n_10
__cur_9 = __first
__cur_9 = __cur_11
doubledereftmp(16) = *__x + UNKNOWN
*__cur_9 + UNKNOWN = doubledereftmp(16)
__n_10 = __n_8
__n_10 = &NONLOCAL
__cur_11 = __cur_9
ESCAPED = __cur_9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__n = { NONLOCAL } same as __first
__x = { NONLOCAL } same as __first
D.42463 = { NONLOCAL } same as __first
__n_8 = { NONLOCAL } same as __first
__n_10 = { NONLOCAL } same as __first
__cur_9 = { NONLOCAL } same as __first
__cur_11 = { NONLOCAL } same as __first
doubledereftmp(16) = { ESCAPED NONLOCAL }


Alias information for std::__uninitialized_fill_n_a<outBuff*, unsigned long, outBuff, outBuff>(outBuff*, unsigned long, outBuff const&, std::allocator<outBuff>&)outBuff*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first_2(D), points-to non-local, points-to NULL, points-to vars: { }
__x_4(D), points-to non-local, points-to NULL, points-to vars: { }
__cur_9, points-to non-local, points-to NULL, points-to vars: { }
__cur_11, points-to non-local, points-to NULL, points-to vars: { }

std::__uninitialized_fill_n_a<outBuff*, unsigned long, outBuff, outBuff>(outBuff*, unsigned long, outBuff const&, std::allocator<outBuff>&)outBuff* (struct outBuff * __first, long unsigned int __n, const struct outBuff & __x, struct allocator & D.42463)
{
  long unsigned int __n;
  struct outBuff * __cur;
  struct outBuff * D.48644;

  <bb 2> [15.00%]:

  <bb 3> [100.00%]:
  # __n_8 = PHI <__n_3(D)(2), __n_10(6)>
  # __cur_9 = PHI <__first_2(D)(2), __cur_11(6)>
  if (__n_8 == 0)
    goto <bb 7>; [15.00%]
  else
    goto <bb 4>; [85.00%]

  <bb 4> [85.00%]:
  if (__cur_9 != 0B)
    goto <bb 5>; [70.00%]
  else
    goto <bb 6>; [30.00%]

  <bb 5> [59.50%]:
  *__cur_9 = *__x_4(D);

  <bb 6> [85.00%]:
  __n_10 = __n_8 + 18446744073709551615;
  __cur_11 = __cur_9 + 40;
  goto <bb 3>; [100.00%]

  <bb 7> [15.00%]:
  return __cur_9;

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::_M_fill_initialize(unsigned long, outBuff const&) (_ZNSt6vectorI7outBuffSaIS0_EE18_M_fill_initializeEmRKS0_, funcdef_no=2532, decl_uid=38232, cgraph_uid=1272, symbol_order=1320)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
__value = &NONLOCAL
_16 = this + UNKNOWN
_3 = *this
__n_7 = __n
__n_7 = __n_14
__cur_13 = _3
__cur_13 = __cur_15
doubledereftmp(17) = *__value + UNKNOWN
*__cur_13 + UNKNOWN = doubledereftmp(17)
__n_14 = __n_7
__n_14 = &NONLOCAL
__cur_15 = __cur_13
*this + 64 = __cur_13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
__value = { NONLOCAL } same as this
_16 = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
__n_7 = { NONLOCAL } same as this
__n_14 = { NONLOCAL } same as this
__cur_13 = { ESCAPED NONLOCAL } same as _3
__cur_15 = { ESCAPED NONLOCAL } same as _3
doubledereftmp(17) = { ESCAPED NONLOCAL }


Alias information for std::vector<outBuff, std::allocator<outBuff> >::_M_fill_initialize(unsigned long, outBuff const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to NULL, points-to vars: { }
__value_9(D), points-to non-local, points-to NULL, points-to vars: { }
__cur_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__cur_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::_M_fill_initialize(unsigned long, outBuff const&) (struct vector * const this, size_type __n, const struct value_type & __value)
{
  struct _Tp_alloc_type & D.48654;
  struct outBuff * __cur;
  long unsigned int __n;
  struct outBuff * D.48652;
  struct outBuff * _3;
  struct _Tp_alloc_type & _16;

  <bb 2> [100.00%]:
  _16 = &MEM[(struct _Vector_base *)this_5(D)]._M_impl;
  _3 = this_5(D)->D.38528._M_impl._M_start;

  <bb 3> [100.00%]:
  # __n_7 = PHI <__n_8(D)(2), __n_14(6)>
  # __cur_13 = PHI <_3(2), __cur_15(6)>
  if (__n_7 == 0)
    goto <bb 7>; [15.00%]
  else
    goto <bb 4>; [85.00%]

  <bb 4> [85.00%]:
  if (__cur_13 != 0B)
    goto <bb 5>; [70.00%]
  else
    goto <bb 6>; [30.00%]

  <bb 5> [59.50%]:
  *__cur_13 = MEM[(const struct outBuff *)__value_9(D)];

  <bb 6> [85.00%]:
  __n_14 = __n_7 + 18446744073709551615;
  __cur_15 = __cur_13 + 40;
  goto <bb 3>; [100.00%]

  <bb 7> [15.00%]:
  this_5(D)->D.38528._M_impl._M_finish = __cur_13;
  return;

}



;; Function __gnu_cxx::__ops::_Iter_equals_iter<char*>::operator()<unsigned char*>(unsigned char*)bool (_ZN9__gnu_cxx5__ops17_Iter_equals_iterIPcEclIPhEEbT_, funcdef_no=2637, decl_uid=45136, cgraph_uid=1377, symbol_order=1425)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__it2 = &NONLOCAL
_1 = *__it2
_2 = _1
_3 = *this
_4 = *_3
_5 = _4
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__it2 = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
_9 = { }


Alias information for __gnu_cxx::__ops::_Iter_equals_iter<char*>::operator()<unsigned char*>(unsigned char*)bool

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__it2_7(D), points-to non-local, points-to NULL, points-to vars: { }
this_8(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::_Iter_equals_iter<char*>::operator()<unsigned char*>(unsigned char*)bool (struct _Iter_equals_iter * const this, unsigned char * __it2)
{
  unsigned char _1;
  int _2;
  char * _3;
  char _4;
  int _5;
  bool _9;

  <bb 2> [0.00%]:
  _1 = *__it2_7(D);
  _2 = (int) _1;
  _3 = this_8(D)->_M_it1;
  _4 = *_3;
  _5 = (int) _4;
  _9 = _2 == _5;
  return _9;

}



;; Function std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*>, std::random_access_iterator_tag)unsigned char* (_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterIPcEEET_S6_S6_T0_St26random_access_iterator_tag, funcdef_no=2603, decl_uid=44846, cgraph_uid=1343, symbol_order=1391)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__pred = &NONLOCAL
D.44850 = &NONLOCAL
__pred$_M_it1_85 = __pred
__last.684_1 = __last
__first.685_2 = __first
_3 = __last.684_1
_3 = __first.685_2
__trip_count_19 = _3
__trip_count_19 = &NONLOCAL
__first_7 = __first
__first_7 = __first_32
__trip_count_10 = __trip_count_19
__trip_count_10 = __trip_count_33
_46 = *__first_7
_42 = _46
_38 = __pred$_M_it1_85
_30 = *_38
_27 = _30
__first_23 = __first_7
_21 = *__first_7
_51 = _21
_52 = __pred$_M_it1_85
_53 = *_52
_54 = _53
__first_26 = __first_7
_56 = *__first_7
_57 = _56
_58 = __pred$_M_it1_85
_59 = *_58
_60 = _59
__first_29 = __first_7
_62 = *__first_7
_63 = _62
_64 = __pred$_M_it1_85
_65 = *_64
_66 = _65
__first_32 = __first_7
__trip_count_33 = __trip_count_10
__trip_count_33 = &NONLOCAL
__last.690_4 = __last
__first.691_5 = __first_7
_6 = __last.690_4
_6 = __first.691_5
_68 = *__first_7
_69 = _68
_70 = __pred$_M_it1_85
_71 = *_70
_72 = _71
__first_40 = __first_7
__first_8 = __first_7
__first_8 = __first_40
_74 = *__first_8
_75 = _74
_76 = __pred$_M_it1_85
_77 = *_76
_78 = _77
__first_44 = __first_8
__first_9 = __first_7
__first_9 = __first_44
_80 = *__first_9
_81 = _80
_82 = __pred$_M_it1_85
_83 = *_82
_84 = _83
__first_48 = __first_9
_11 = __first_7
_11 = __first_23
_11 = __first_26
_11 = __first_29
_11 = __first_7
_11 = __first_8
_11 = __first_9
_11 = __last
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__pred = { NONLOCAL } same as __first
D.44850 = { NONLOCAL } same as __first
__pred$_M_it1_85 = { NONLOCAL } same as __first
__last.684_1 = { NONLOCAL } same as __first
__first.685_2 = { NONLOCAL } same as __first
_3 = { NONLOCAL } same as __first
__trip_count_19 = { NONLOCAL } same as __first
__first_7 = { NONLOCAL } same as __first
__first_32 = { NONLOCAL } same as __first
__trip_count_10 = { NONLOCAL } same as __first
__trip_count_33 = { NONLOCAL } same as __first
_46 = { ESCAPED NONLOCAL }
_42 = { ESCAPED NONLOCAL } same as _46
_38 = { NONLOCAL } same as __first
_30 = { ESCAPED NONLOCAL }
_27 = { ESCAPED NONLOCAL } same as _30
__first_23 = { NONLOCAL } same as __first
_21 = { ESCAPED NONLOCAL } same as _46
_51 = { ESCAPED NONLOCAL } same as _46
_52 = { NONLOCAL } same as __first
_53 = { ESCAPED NONLOCAL }
_54 = { ESCAPED NONLOCAL } same as _53
__first_26 = { NONLOCAL } same as __first
_56 = { ESCAPED NONLOCAL } same as _46
_57 = { ESCAPED NONLOCAL } same as _46
_58 = { NONLOCAL } same as __first
_59 = { ESCAPED NONLOCAL }
_60 = { ESCAPED NONLOCAL } same as _59
__first_29 = { NONLOCAL } same as __first
_62 = { ESCAPED NONLOCAL } same as _46
_63 = { ESCAPED NONLOCAL } same as _46
_64 = { NONLOCAL } same as __first
_65 = { ESCAPED NONLOCAL }
_66 = { ESCAPED NONLOCAL } same as _65
__last.690_4 = { NONLOCAL } same as __first
__first.691_5 = { NONLOCAL } same as __first
_6 = { NONLOCAL } same as __first
_68 = { ESCAPED NONLOCAL } same as _46
_69 = { ESCAPED NONLOCAL } same as _46
_70 = { NONLOCAL } same as __first
_71 = { ESCAPED NONLOCAL }
_72 = { ESCAPED NONLOCAL } same as _71
__first_40 = { NONLOCAL } same as __first
__first_8 = { NONLOCAL } same as __first
_74 = { ESCAPED NONLOCAL }
_75 = { ESCAPED NONLOCAL } same as _74
_76 = { NONLOCAL } same as __first
_77 = { ESCAPED NONLOCAL }
_78 = { ESCAPED NONLOCAL } same as _77
__first_44 = { NONLOCAL } same as __first
__first_9 = { NONLOCAL } same as __first
_80 = { ESCAPED NONLOCAL }
_81 = { ESCAPED NONLOCAL } same as _80
_82 = { NONLOCAL } same as __first
_83 = { ESCAPED NONLOCAL }
_84 = { ESCAPED NONLOCAL } same as _83
__first_48 = { NONLOCAL } same as __first
_11 = { NONLOCAL } same as __first


Alias information for std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*>, std::random_access_iterator_tag)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first_7, points-to non-local, points-to NULL, points-to vars: { }
__first_8, points-to non-local, points-to NULL, points-to vars: { }
__first_9, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
__last_17(D), points-to non-local, points-to NULL, points-to vars: { }
__first_18(D), points-to non-local, points-to NULL, points-to vars: { }
__first_23, points-to non-local, points-to NULL, points-to vars: { }
__first_26, points-to non-local, points-to NULL, points-to vars: { }
__first_29, points-to non-local, points-to NULL, points-to vars: { }
__first_32, points-to non-local, points-to NULL, points-to vars: { }
_38, points-to non-local, points-to NULL, points-to vars: { }
__first_40, points-to non-local, points-to NULL, points-to vars: { }
__first_44, points-to non-local, points-to NULL, points-to vars: { }
__first_48, points-to non-local, points-to NULL, points-to vars: { }
_52, points-to non-local, points-to NULL, points-to vars: { }
_58, points-to non-local, points-to NULL, points-to vars: { }
_64, points-to non-local, points-to NULL, points-to vars: { }
_70, points-to non-local, points-to NULL, points-to vars: { }
_76, points-to non-local, points-to NULL, points-to vars: { }
_82, points-to non-local, points-to NULL, points-to vars: { }
__pred$_M_it1_85, points-to non-local, points-to NULL, points-to vars: { }

std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*>, std::random_access_iterator_tag)unsigned char* (unsigned char * __first, unsigned char * __last, struct _Iter_equals_iter __pred, struct random_access_iterator_tag D.44850)
{
  char * __pred$_M_it1;
  bool D.48677;
  bool D.48674;
  bool D.48671;
  bool D.48668;
  bool D.48665;
  bool D.48662;
  bool D.48659;
  difference_type __trip_count;
  long int __last.684_1;
  long int __first.685_2;
  long int _3;
  long int __last.690_4;
  long int __first.691_5;
  long int _6;
  unsigned char * _11;
  unsigned char _21;
  int _27;
  char _30;
  char * _38;
  int _42;
  unsigned char _46;
  int _51;
  char * _52;
  char _53;
  int _54;
  unsigned char _56;
  int _57;
  char * _58;
  char _59;
  int _60;
  unsigned char _62;
  int _63;
  char * _64;
  char _65;
  int _66;
  unsigned char _68;
  int _69;
  char * _70;
  char _71;
  int _72;
  unsigned char _74;
  int _75;
  char * _76;
  char _77;
  int _78;
  unsigned char _80;
  int _81;
  char * _82;
  char _83;
  int _84;

  <bb 2> [0.00%]:
  __pred$_M_it1_85 = MEM[(struct _Iter_equals_iter *)&__pred];
  __last.684_1 = (long int) __last_17(D);
  __first.685_2 = (long int) __first_18(D);
  _3 = __last.684_1 - __first.685_2;
  __trip_count_19 = _3 >> 2;

  <bb 3> [0.00%]:
  # __first_7 = PHI <__first_18(D)(2), __first_32(8)>
  # __trip_count_10 = PHI <__trip_count_19(2), __trip_count_33(8)>
  if (__trip_count_10 <= 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [100.00%]:
  _46 = *__first_7;
  _42 = (int) _46;
  _38 = __pred$_M_it1_85;
  _30 = *_38;
  _27 = (int) _30;
  if (_27 == _42)
    goto <bb 17>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [100.00%]:
  __first_23 = __first_7 + 1;
  _21 = MEM[(unsigned char *)__first_7 + 1B];
  _51 = (int) _21;
  _52 = __pred$_M_it1_85;
  _53 = *_52;
  _54 = (int) _53;
  if (_51 == _54)
    goto <bb 17>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [100.00%]:
  __first_26 = &MEM[(void *)__first_7 + 2B];
  _56 = MEM[(unsigned char *)__first_7 + 2B];
  _57 = (int) _56;
  _58 = __pred$_M_it1_85;
  _59 = *_58;
  _60 = (int) _59;
  if (_57 == _60)
    goto <bb 17>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [100.00%]:
  __first_29 = &MEM[(void *)__first_7 + 3B];
  _62 = MEM[(unsigned char *)__first_7 + 3B];
  _63 = (int) _62;
  _64 = __pred$_M_it1_85;
  _65 = *_64;
  _66 = (int) _65;
  if (_63 == _66)
    goto <bb 17>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  __first_32 = &MEM[(void *)__first_7 + 4B];
  __trip_count_33 = __trip_count_10 + -1;
  goto <bb 3>; [0.00%]

  <bb 9> [0.00%]:
  __last.690_4 = (long int) __last_17(D);
  __first.691_5 = (long int) __first_7;
  _6 = __last.690_4 - __first.691_5;
  switch (_6) <default: <L20> [0.00%], case 1: <L17> [0.00%], case 2: <L14> [0.00%], case 3: <L23> [0.00%]>

<L23> [100.00%]:
  _68 = *__first_7;
  _69 = (int) _68;
  _70 = __pred$_M_it1_85;
  _71 = *_70;
  _72 = (int) _71;
  if (_69 == _72)
    goto <bb 17>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  __first_40 = __first_7 + 1;

  # __first_8 = PHI <__first_7(9), __first_40(11)>
<L14> [100.00%]:
  _74 = *__first_8;
  _75 = (int) _74;
  _76 = __pred$_M_it1_85;
  _77 = *_76;
  _78 = (int) _77;
  if (_75 == _78)
    goto <bb 17>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  __first_44 = __first_8 + 1;

  # __first_9 = PHI <__first_7(9), __first_44(13)>
<L17> [100.00%]:
  _80 = *__first_9;
  _81 = (int) _80;
  _82 = __pred$_M_it1_85;
  _83 = *_82;
  _84 = (int) _83;
  if (_81 == _84)
    goto <bb 17>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:
  __first_48 = __first_9 + 1;

<L20> [0.00%]:

  <bb 17> [0.00%]:
  # _11 = PHI <__first_7(4), __first_23(5), __first_26(6), __first_29(7), __first_7(10), __first_8(12), __first_9(14), __last_17(D)(16)>
  return _11;

}



;; Function std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*>)unsigned char* (_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterIPcEEET_S6_S6_T0_, funcdef_no=2545, decl_uid=43476, cgraph_uid=1286, symbol_order=1334)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__pred = &NONLOCAL
__first.683_1 = __first
CALLUSED(13) = CALLUSED(13) + UNKNOWN
CALLUSED(13) = *CALLUSED(13) + UNKNOWN
CALLUSED(13) = __first.683_1
CALLUSED(13) = __last
CALLUSED(13) = __pred
CALLUSED(13) = D.47335
_5 = CALLUSED(13)
_5 = NONLOCAL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__pred = { NONLOCAL } same as __first
__first.683_1 = { NONLOCAL } same as __first
_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterIPcEEET_S6_S6_T0_St26random_access_iterator_tag = { }
CALLUSED(13) = { ESCAPED NONLOCAL }
CALLCLOBBERED(14) = { }
D.47335 = { }
_5 = { ESCAPED NONLOCAL }


Alias information for std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*>)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first.683_1, points-to non-local, points-to NULL, points-to vars: { }
__last_3(D), points-to non-local, points-to NULL, points-to vars: { }
__first_4(D), points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*>)unsigned char* (unsigned char * __first, unsigned char * __last, struct _Iter_equals_iter __pred)
{
  struct random_access_iterator_tag D.47335;
  unsigned char * __first.683_1;
  unsigned char * _5;

  <bb 2> [0.00%]:
  __first.683_1 = __first_4(D);
  _5 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*> > (__first.683_1, __last_3(D), __pred, D.47335);
  return _5;

}



;; Function std::__search<unsigned char*, char*, __gnu_cxx::__ops::_Iter_equal_to_iter>(unsigned char*, unsigned char*, char*, char*, __gnu_cxx::__ops::_Iter_equal_to_iter)unsigned char* (_ZSt8__searchIPhPcN9__gnu_cxx5__ops19_Iter_equal_to_iterEET_S5_S5_T0_S6_T1_, funcdef_no=2477, decl_uid=42489, cgraph_uid=1217, symbol_order=1265)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first1 = &NONLOCAL
__last1 = &NONLOCAL
__first2 = &NONLOCAL
__last2 = &NONLOCAL
__predicate = &NONLOCAL
_3 = _1
_3 = _2
__p1_16 = __first2
D.48688 = D.47310
SR.933_47 = __first2
SR.931_27 = SR.933_47
__pred = SR.931_27
CALLUSED(23) = CALLUSED(23) + UNKNOWN
CALLUSED(23) = *CALLUSED(23) + UNKNOWN
CALLUSED(23) = __first1
CALLUSED(23) = __last1
CALLUSED(23) = __pred
CALLUSED(23) = D.48687
_28 = CALLUSED(23)
_28 = NONLOCAL
__first1_4 = __first1
__first1_4 = __first1_30
D.48696 = D.47310
SR.934_34 = __first2
SR.932_32 = SR.934_34
__pred = SR.932_32
CALLUSED(33) = CALLUSED(33) + UNKNOWN
CALLUSED(33) = *CALLUSED(33) + UNKNOWN
CALLUSED(33) = __first1_4
CALLUSED(33) = __last1
CALLUSED(33) = __pred
CALLUSED(33) = D.48695
_21 = CALLUSED(33)
_21 = NONLOCAL
__current_26 = _21
__p_5 = __p1_16
__p_5 = __p_31
__current_6 = __current_26
__current_6 = __current_33
_40 = *__current_6
_44 = _40
_45 = *__p_5
_46 = _45
__p_31 = __p_5
__current_33 = __current_6
__first1_30 = _21
_7 = __first1
_7 = _28
_7 = __last1
_7 = __last1
_7 = _21
_7 = __last1
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first1 = { NONLOCAL }
__last1 = { NONLOCAL } same as __first1
__first2 = { NONLOCAL } same as __first1
__last2 = { NONLOCAL } same as __first1
__predicate = { NONLOCAL } same as __first1
_1 = { }
_2 = { }
_3 = { }
__p1_16 = { NONLOCAL } same as __first1
D.48688 = { }
D.47310 = { }
SR.933_47 = { NONLOCAL } same as __first1
SR.931_27 = { NONLOCAL } same as __first1
__pred = { NONLOCAL } same as __first1
_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterIPcEEET_S6_S6_T0_St26random_access_iterator_tag = { }
CALLUSED(23) = { ESCAPED NONLOCAL }
CALLCLOBBERED(24) = { }
D.48687 = { }
_28 = { ESCAPED NONLOCAL }
__first1_4 = { ESCAPED NONLOCAL }
__first1_30 = { ESCAPED NONLOCAL } same as __first1_4
D.48696 = { }
SR.934_34 = { NONLOCAL } same as __first1
SR.932_32 = { NONLOCAL } same as __first1
__pred = { NONLOCAL } same as __first1
CALLUSED(33) = { ESCAPED NONLOCAL } same as __first1_4
CALLCLOBBERED(34) = { }
D.48695 = { }
_21 = { ESCAPED NONLOCAL } same as __first1_4
__current_26 = { ESCAPED NONLOCAL } same as __first1_4
__p_5 = { NONLOCAL } same as __first1
__p_31 = { NONLOCAL } same as __first1
__current_6 = { ESCAPED NONLOCAL } same as __first1_4
__current_33 = { ESCAPED NONLOCAL } same as __first1_4
_40 = { ESCAPED NONLOCAL }
_44 = { ESCAPED NONLOCAL } same as _40
_45 = { ESCAPED NONLOCAL }
_46 = { ESCAPED NONLOCAL } same as _45
_7 = { ESCAPED NONLOCAL }


Alias information for std::__search<unsigned char*, char*, __gnu_cxx::__ops::_Iter_equal_to_iter>(unsigned char*, unsigned char*, char*, char*, __gnu_cxx::__ops::_Iter_equal_to_iter)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first1_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__p_5, points-to non-local, points-to NULL, points-to vars: { }
__current_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__first1_11(D), points-to non-local, points-to NULL, points-to vars: { }
__last1_12(D), points-to non-local, points-to NULL, points-to vars: { }
__first2_13(D), points-to non-local, points-to NULL, points-to vars: { }
__last2_14(D), points-to non-local, points-to NULL, points-to vars: { }
__p1_16, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__current_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.931_27, points-to non-local, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__first1_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__p_31, points-to non-local, points-to NULL, points-to vars: { }
SR.932_32, points-to non-local, points-to NULL, points-to vars: { }
__current_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.934_34, points-to non-local, points-to NULL, points-to vars: { }
SR.933_47, points-to non-local, points-to NULL, points-to vars: { }

std::__search<unsigned char*, char*, __gnu_cxx::__ops::_Iter_equal_to_iter>(unsigned char*, unsigned char*, char*, char*, __gnu_cxx::__ops::_Iter_equal_to_iter)unsigned char* (unsigned char * __first1, unsigned char * __last1, char * __first2, char * __last2, struct _Iter_equal_to_iter __predicate)
{
  char * SR.934;
  char * SR.933;
  char * SR.932;
  char * SR.931;
  bool D.48702;
  struct _Iter_equals_iter D.48698;
  struct _Iter_equal_to_iter D.48696;
  struct random_access_iterator_tag D.48695;
  unsigned char * D.48694;
  struct _Iter_equals_iter __pred;
  struct _Iter_equals_iter D.48690;
  struct _Iter_equal_to_iter D.48688;
  struct random_access_iterator_tag D.48687;
  unsigned char * D.48686;
  struct _Iter_equals_iter __pred;
  unsigned char * __current;
  char * __p;
  char * __p1;
  struct _Iter_equals_iter D.47313;
  struct _Iter_equals_iter D.47311;
  struct _Iter_equal_to_iter D.47310;
  bool _1;
  bool _2;
  bool _3;
  unsigned char * _7;
  unsigned char * _21;
  unsigned char * _28;
  unsigned char _40;
  int _44;
  char _45;
  int _46;

  <bb 2> [0.00%]:
  _1 = __first1_11(D) == __last1_12(D);
  _2 = __first2_13(D) == __last2_14(D);
  _3 = _1 | _2;
  if (_3 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  __p1_16 = __first2_13(D) + 1;
  if (__last2_14(D) == __p1_16)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [100.00%]:
  D.48688 = D.47310;
  SR.933_47 = __first2_13(D);
  SR.931_27 = SR.933_47;
  MEM[(struct _Iter_equals_iter *)&__pred] = SR.931_27;
  _28 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*> > (__first1_11(D), __last1_12(D), __pred, D.48687);
  goto <bb 11>; [0.00%]

  <bb 5> [100.00%]:
  # __first1_4 = PHI <__first1_11(D)(3), __first1_30(10)>
  D.48696 = D.47310;
  SR.934_34 = __first2_13(D);
  SR.932_32 = SR.934_34;
  MEM[(struct _Iter_equals_iter *)&__pred] = SR.932_32;
  _21 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<char*> > (__first1_4, __last1_12(D), __pred, D.48695);
  if (__last1_12(D) == _21)
    goto <bb 11>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  __current_26 = _21 + 1;
  if (__last1_12(D) == __current_26)
    goto <bb 11>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [100.00%]:
  # __p_5 = PHI <__p1_16(6), __p_31(9)>
  # __current_6 = PHI <__current_26(6), __current_33(9)>
  _40 = *__current_6;
  _44 = (int) _40;
  _45 = *__p_5;
  _46 = (int) _45;
  if (_44 == _46)
    goto <bb 8>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 8> [0.00%]:
  __p_31 = __p_5 + 1;
  if (__last2_14(D) == __p_31)
    goto <bb 11>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  __current_33 = __current_6 + 1;
  if (__last1_12(D) == __current_33)
    goto <bb 11>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 10> [0.00%]:
  __first1_30 = _21 + 1;
  goto <bb 5>; [0.00%]

  <bb 11> [0.00%]:
  # _7 = PHI <__first1_11(D)(2), _28(4), __last1_12(D)(5), __last1_12(D)(6), _21(8), __last1_12(D)(9)>
  return _7;

}



;; Function std::search<unsigned char*, char*>(unsigned char*, unsigned char*, char*, char*)unsigned char* (_ZSt6searchIPhPcET_S2_S2_T0_S3_, funcdef_no=2404, decl_uid=41830, cgraph_uid=1144, symbol_order=1192)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first1 = &NONLOCAL
__last1 = &NONLOCAL
__first2 = &NONLOCAL
__last2 = &NONLOCAL
D.48708 = D.48709
ESCAPED = __first1
ESCAPED = __last1
ESCAPED = __first2
ESCAPED = __last2
ESCAPED = D.47297
_8 = NONLOCAL
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first1 = { NONLOCAL }
__last1 = { NONLOCAL } same as __first1
__first2 = { NONLOCAL } same as __first1
__last2 = { NONLOCAL } same as __first1
D.48708 = { }
D.48709 = { }
_ZSt8__searchIPhPcN9__gnu_cxx5__ops19_Iter_equal_to_iterEET_S5_S5_T0_S6_T1_ = { }
D.47297 = { }
_8 = { ESCAPED NONLOCAL }


Alias information for std::search<unsigned char*, char*>(unsigned char*, unsigned char*, char*, char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first1_3(D), points-to non-local, points-to NULL, points-to vars: { }
__last1_4(D), points-to non-local, points-to NULL, points-to vars: { }
__first2_5(D), points-to non-local, points-to NULL, points-to vars: { }
__last2_6(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::search<unsigned char*, char*>(unsigned char*, unsigned char*, char*, char*)unsigned char* (unsigned char * __first1, unsigned char * __last1, char * __first2, char * __last2)
{
  struct _Iter_equal_to_iter D.48709;
  struct _Iter_equal_to_iter D.48708;
  struct _Iter_equal_to_iter D.47297;
  unsigned char * _8;

  <bb 2> [100.00%]:
  D.48708 = D.48709;
  _8 = std::__search<unsigned char*, char*, __gnu_cxx::__ops::_Iter_equal_to_iter> (__first1_3(D), __last1_4(D), __first2_5(D), __last2_6(D), D.47297);
  return _8;

}



;; Function memstr<unsigned char*, char*>(unsigned char*, int, char*, int)unsigned char* (_Z6memstrIPhPcET_S2_iT0_i, funcdef_no=2265, decl_uid=39838, cgraph_uid=1005, symbol_order=1053)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
searchBuf = &NONLOCAL
searchBufSize = &NONLOCAL
searchString = &NONLOCAL
searchStringSize = &NONLOCAL
_1 = searchBufSize
searchBufEnd_7 = searchBuf
_2 = searchStringSize
_3 = searchString
ESCAPED = searchBuf
ESCAPED = searchBufEnd_7
ESCAPED = searchString
ESCAPED = _3
ESCAPED = D.48716
_17 = NONLOCAL
iftmp.677_4 = _17
iftmp.677_4 = &NULL
ESCAPED = iftmp.677_4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _17
STOREDANYTHING = { }
INTEGER = { ANYTHING }
searchBuf = { NONLOCAL }
searchBufSize = { NONLOCAL } same as searchBuf
searchString = { NONLOCAL } same as searchBuf
searchStringSize = { NONLOCAL } same as searchBuf
_1 = { NONLOCAL } same as searchBuf
searchBufEnd_7 = { NONLOCAL } same as searchBuf
_2 = { NONLOCAL } same as searchBuf
_3 = { NONLOCAL } same as searchBuf
_ZSt8__searchIPhPcN9__gnu_cxx5__ops19_Iter_equal_to_iterEET_S5_S5_T0_S6_T1_ = { }
D.48716 = { }
_17 = { ESCAPED NONLOCAL }
iftmp.677_4 = { NULL ESCAPED NONLOCAL }


Alias information for memstr<unsigned char*, char*>(unsigned char*, int, char*, int)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
iftmp.677_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
searchBuf_6(D), points-to non-local, points-to NULL, points-to vars: { }
searchBufEnd_7, points-to non-local, points-to NULL, points-to vars: { }
searchString_9(D), points-to non-local, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

memstr<unsigned char*, char*>(unsigned char*, int, char*, int)unsigned char* (unsigned char * searchBuf, int searchBufSize, char * searchString, int searchStringSize)
{
  struct _Iter_equal_to_iter D.48716;
  unsigned char * D.48715;
  unsigned char * s;
  unsigned char * searchBufEnd;
  sizetype _1;
  sizetype _2;
  char * _3;
  unsigned char * iftmp.677_4;
  unsigned char * _17;

  <bb 2> [100.00%]:
  _1 = (sizetype) searchBufSize_5(D);
  searchBufEnd_7 = searchBuf_6(D) + _1;
  _2 = (sizetype) searchStringSize_8(D);
  _3 = searchString_9(D) + _2;
  _17 = std::__search<unsigned char*, char*, __gnu_cxx::__ops::_Iter_equal_to_iter> (searchBuf_6(D), searchBufEnd_7, searchString_9(D), _3, D.48716);
  if (searchBufEnd_7 != _17)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:

  <bb 4> [0.00%]:
  # iftmp.677_4 = PHI <_17(2), 0B(3)>
  return iftmp.677_4;

}



;; Function __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>::operator()<unsigned char*>(unsigned char*)bool (_ZN9__gnu_cxx5__ops17_Iter_equals_iterIPhEclIS2_EEbT_, funcdef_no=2638, decl_uid=45152, cgraph_uid=1378, symbol_order=1426)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__it2 = &NONLOCAL
_1 = *__it2
_2 = *this
_3 = *_2
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__it2 = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_7 = { }


Alias information for __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>::operator()<unsigned char*>(unsigned char*)bool

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__it2_5(D), points-to non-local, points-to NULL, points-to vars: { }
this_6(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>::operator()<unsigned char*>(unsigned char*)bool (struct _Iter_equals_iter * const this, unsigned char * __it2)
{
  unsigned char _1;
  unsigned char * _2;
  unsigned char _3;
  bool _7;

  <bb 2> [0.00%]:
  _1 = *__it2_5(D);
  _2 = this_6(D)->_M_it1;
  _3 = *_2;
  _7 = _1 == _3;
  return _7;

}



;; Function std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>, std::random_access_iterator_tag)unsigned char* (_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterIS0_EEET_S5_S5_T0_St26random_access_iterator_tag, funcdef_no=2607, decl_uid=44866, cgraph_uid=1347, symbol_order=1395)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__pred = &NONLOCAL
D.44870 = &NONLOCAL
__pred$_M_it1_71 = __pred
__last.702_1 = __last
__first.703_2 = __first
_3 = __last.702_1
_3 = __first.703_2
__trip_count_19 = _3
__trip_count_19 = &NONLOCAL
__first_7 = __first
__first_7 = __first_32
__trip_count_10 = __trip_count_19
__trip_count_10 = __trip_count_33
_46 = *__first_7
_42 = __pred$_M_it1_71
_38 = *_42
__first_23 = __first_7
_27 = *__first_7
_24 = __pred$_M_it1_71
_21 = *_24
__first_26 = __first_7
_52 = *__first_7
_53 = __pred$_M_it1_71
_54 = *_53
__first_29 = __first_7
_56 = *__first_7
_57 = __pred$_M_it1_71
_58 = *_57
__first_32 = __first_7
__trip_count_33 = __trip_count_10
__trip_count_33 = &NONLOCAL
__last.708_4 = __last
__first.709_5 = __first_7
_6 = __last.708_4
_6 = __first.709_5
_60 = *__first_7
_61 = __pred$_M_it1_71
_62 = *_61
__first_40 = __first_7
__first_8 = __first_7
__first_8 = __first_40
_64 = *__first_8
_65 = __pred$_M_it1_71
_66 = *_65
__first_44 = __first_8
__first_9 = __first_7
__first_9 = __first_44
_68 = *__first_9
_69 = __pred$_M_it1_71
_70 = *_69
__first_48 = __first_9
_11 = __first_7
_11 = __first_23
_11 = __first_26
_11 = __first_29
_11 = __first_7
_11 = __first_8
_11 = __first_9
_11 = __last
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__pred = { NONLOCAL } same as __first
D.44870 = { NONLOCAL } same as __first
__pred$_M_it1_71 = { NONLOCAL } same as __first
__last.702_1 = { NONLOCAL } same as __first
__first.703_2 = { NONLOCAL } same as __first
_3 = { NONLOCAL } same as __first
__trip_count_19 = { NONLOCAL } same as __first
__first_7 = { NONLOCAL } same as __first
__first_32 = { NONLOCAL } same as __first
__trip_count_10 = { NONLOCAL } same as __first
__trip_count_33 = { NONLOCAL } same as __first
_46 = { ESCAPED NONLOCAL }
_42 = { NONLOCAL } same as __first
_38 = { ESCAPED NONLOCAL }
__first_23 = { NONLOCAL } same as __first
_27 = { ESCAPED NONLOCAL } same as _46
_24 = { NONLOCAL } same as __first
_21 = { ESCAPED NONLOCAL }
__first_26 = { NONLOCAL } same as __first
_52 = { ESCAPED NONLOCAL } same as _46
_53 = { NONLOCAL } same as __first
_54 = { ESCAPED NONLOCAL }
__first_29 = { NONLOCAL } same as __first
_56 = { ESCAPED NONLOCAL } same as _46
_57 = { NONLOCAL } same as __first
_58 = { ESCAPED NONLOCAL }
__last.708_4 = { NONLOCAL } same as __first
__first.709_5 = { NONLOCAL } same as __first
_6 = { NONLOCAL } same as __first
_60 = { ESCAPED NONLOCAL } same as _46
_61 = { NONLOCAL } same as __first
_62 = { ESCAPED NONLOCAL }
__first_40 = { NONLOCAL } same as __first
__first_8 = { NONLOCAL } same as __first
_64 = { ESCAPED NONLOCAL }
_65 = { NONLOCAL } same as __first
_66 = { ESCAPED NONLOCAL }
__first_44 = { NONLOCAL } same as __first
__first_9 = { NONLOCAL } same as __first
_68 = { ESCAPED NONLOCAL }
_69 = { NONLOCAL } same as __first
_70 = { ESCAPED NONLOCAL }
__first_48 = { NONLOCAL } same as __first
_11 = { NONLOCAL } same as __first


Alias information for std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>, std::random_access_iterator_tag)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first_7, points-to non-local, points-to NULL, points-to vars: { }
__first_8, points-to non-local, points-to NULL, points-to vars: { }
__first_9, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
__last_17(D), points-to non-local, points-to NULL, points-to vars: { }
__first_18(D), points-to non-local, points-to NULL, points-to vars: { }
__first_23, points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to NULL, points-to vars: { }
__first_26, points-to non-local, points-to NULL, points-to vars: { }
__first_29, points-to non-local, points-to NULL, points-to vars: { }
__first_32, points-to non-local, points-to NULL, points-to vars: { }
__first_40, points-to non-local, points-to NULL, points-to vars: { }
_42, points-to non-local, points-to NULL, points-to vars: { }
__first_44, points-to non-local, points-to NULL, points-to vars: { }
__first_48, points-to non-local, points-to NULL, points-to vars: { }
_53, points-to non-local, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to NULL, points-to vars: { }
_61, points-to non-local, points-to NULL, points-to vars: { }
_65, points-to non-local, points-to NULL, points-to vars: { }
_69, points-to non-local, points-to NULL, points-to vars: { }
__pred$_M_it1_71, points-to non-local, points-to NULL, points-to vars: { }

std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>, std::random_access_iterator_tag)unsigned char* (unsigned char * __first, unsigned char * __last, struct _Iter_equals_iter __pred, struct random_access_iterator_tag D.44870)
{
  unsigned char * __pred$_M_it1;
  bool D.48739;
  bool D.48736;
  bool D.48733;
  bool D.48730;
  bool D.48727;
  bool D.48724;
  bool D.48721;
  difference_type __trip_count;
  long int __last.702_1;
  long int __first.703_2;
  long int _3;
  long int __last.708_4;
  long int __first.709_5;
  long int _6;
  unsigned char * _11;
  unsigned char _21;
  unsigned char * _24;
  unsigned char _27;
  unsigned char _38;
  unsigned char * _42;
  unsigned char _46;
  unsigned char _52;
  unsigned char * _53;
  unsigned char _54;
  unsigned char _56;
  unsigned char * _57;
  unsigned char _58;
  unsigned char _60;
  unsigned char * _61;
  unsigned char _62;
  unsigned char _64;
  unsigned char * _65;
  unsigned char _66;
  unsigned char _68;
  unsigned char * _69;
  unsigned char _70;

  <bb 2> [0.00%]:
  __pred$_M_it1_71 = MEM[(struct _Iter_equals_iter *)&__pred];
  __last.702_1 = (long int) __last_17(D);
  __first.703_2 = (long int) __first_18(D);
  _3 = __last.702_1 - __first.703_2;
  __trip_count_19 = _3 >> 2;

  <bb 3> [0.00%]:
  # __first_7 = PHI <__first_18(D)(2), __first_32(8)>
  # __trip_count_10 = PHI <__trip_count_19(2), __trip_count_33(8)>
  if (__trip_count_10 <= 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [100.00%]:
  _46 = *__first_7;
  _42 = __pred$_M_it1_71;
  _38 = *_42;
  if (_38 == _46)
    goto <bb 17>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [100.00%]:
  __first_23 = __first_7 + 1;
  _27 = MEM[(unsigned char *)__first_7 + 1B];
  _24 = __pred$_M_it1_71;
  _21 = *_24;
  if (_21 == _27)
    goto <bb 17>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [100.00%]:
  __first_26 = &MEM[(void *)__first_7 + 2B];
  _52 = MEM[(unsigned char *)__first_7 + 2B];
  _53 = __pred$_M_it1_71;
  _54 = *_53;
  if (_52 == _54)
    goto <bb 17>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [100.00%]:
  __first_29 = &MEM[(void *)__first_7 + 3B];
  _56 = MEM[(unsigned char *)__first_7 + 3B];
  _57 = __pred$_M_it1_71;
  _58 = *_57;
  if (_56 == _58)
    goto <bb 17>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  __first_32 = &MEM[(void *)__first_7 + 4B];
  __trip_count_33 = __trip_count_10 + -1;
  goto <bb 3>; [0.00%]

  <bb 9> [0.00%]:
  __last.708_4 = (long int) __last_17(D);
  __first.709_5 = (long int) __first_7;
  _6 = __last.708_4 - __first.709_5;
  switch (_6) <default: <L20> [0.00%], case 1: <L17> [0.00%], case 2: <L14> [0.00%], case 3: <L23> [0.00%]>

<L23> [100.00%]:
  _60 = *__first_7;
  _61 = __pred$_M_it1_71;
  _62 = *_61;
  if (_60 == _62)
    goto <bb 17>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  __first_40 = __first_7 + 1;

  # __first_8 = PHI <__first_7(9), __first_40(11)>
<L14> [100.00%]:
  _64 = *__first_8;
  _65 = __pred$_M_it1_71;
  _66 = *_65;
  if (_64 == _66)
    goto <bb 17>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  __first_44 = __first_8 + 1;

  # __first_9 = PHI <__first_7(9), __first_44(13)>
<L17> [100.00%]:
  _68 = *__first_9;
  _69 = __pred$_M_it1_71;
  _70 = *_69;
  if (_68 == _70)
    goto <bb 17>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:
  __first_48 = __first_9 + 1;

<L20> [0.00%]:

  <bb 17> [0.00%]:
  # _11 = PHI <__first_7(4), __first_23(5), __first_26(6), __first_29(7), __first_7(10), __first_8(12), __first_9(14), __last_17(D)(16)>
  return _11;

}



;; Function std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>)unsigned char* (_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterIS0_EEET_S5_S5_T0_, funcdef_no=2549, decl_uid=43550, cgraph_uid=1289, symbol_order=1337)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__pred = &NONLOCAL
__first.701_1 = __first
CALLUSED(13) = CALLUSED(13) + UNKNOWN
CALLUSED(13) = *CALLUSED(13) + UNKNOWN
CALLUSED(13) = __first.701_1
CALLUSED(13) = __last
CALLUSED(13) = __pred
CALLUSED(13) = D.47413
_5 = CALLUSED(13)
_5 = NONLOCAL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__pred = { NONLOCAL } same as __first
__first.701_1 = { NONLOCAL } same as __first
_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterIS0_EEET_S5_S5_T0_St26random_access_iterator_tag = { }
CALLUSED(13) = { ESCAPED NONLOCAL }
CALLCLOBBERED(14) = { }
D.47413 = { }
_5 = { ESCAPED NONLOCAL }


Alias information for std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first.701_1, points-to non-local, points-to NULL, points-to vars: { }
__last_3(D), points-to non-local, points-to NULL, points-to vars: { }
__first_4(D), points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*>)unsigned char* (unsigned char * __first, unsigned char * __last, struct _Iter_equals_iter __pred)
{
  struct random_access_iterator_tag D.47413;
  unsigned char * __first.701_1;
  unsigned char * _5;

  <bb 2> [0.00%]:
  __first.701_1 = __first_4(D);
  _5 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> > (__first.701_1, __last_3(D), __pred, D.47413);
  return _5;

}



;; Function std::__search<unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equal_to_iter>(unsigned char*, unsigned char*, unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equal_to_iter)unsigned char* (_ZSt8__searchIPhS0_N9__gnu_cxx5__ops19_Iter_equal_to_iterEET_S4_S4_T0_S5_T1_, funcdef_no=2478, decl_uid=42497, cgraph_uid=1218, symbol_order=1266)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first1 = &NONLOCAL
__last1 = &NONLOCAL
__first2 = &NONLOCAL
__last2 = &NONLOCAL
__predicate = &NONLOCAL
_3 = _1
_3 = _2
__p1_16 = __first2
D.48750 = D.47388
SR.944_45 = __first2
SR.942_27 = SR.944_45
__pred = SR.942_27
CALLUSED(23) = CALLUSED(23) + UNKNOWN
CALLUSED(23) = *CALLUSED(23) + UNKNOWN
CALLUSED(23) = __first1
CALLUSED(23) = __last1
CALLUSED(23) = __pred
CALLUSED(23) = D.48749
_28 = CALLUSED(23)
_28 = NONLOCAL
__first1_4 = __first1
__first1_4 = __first1_30
D.48758 = D.47388
SR.945_34 = __first2
SR.943_32 = SR.945_34
__pred = SR.943_32
CALLUSED(33) = CALLUSED(33) + UNKNOWN
CALLUSED(33) = *CALLUSED(33) + UNKNOWN
CALLUSED(33) = __first1_4
CALLUSED(33) = __last1
CALLUSED(33) = __pred
CALLUSED(33) = D.48757
_21 = CALLUSED(33)
_21 = NONLOCAL
__current_26 = _21
__p_5 = __p1_16
__p_5 = __p_31
__current_6 = __current_26
__current_6 = __current_33
_40 = *__current_6
_44 = *__p_5
__p_31 = __p_5
__current_33 = __current_6
__first1_30 = _21
_7 = __first1
_7 = _28
_7 = __last1
_7 = __last1
_7 = _21
_7 = __last1
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first1 = { NONLOCAL }
__last1 = { NONLOCAL } same as __first1
__first2 = { NONLOCAL } same as __first1
__last2 = { NONLOCAL } same as __first1
__predicate = { NONLOCAL } same as __first1
_1 = { }
_2 = { }
_3 = { }
__p1_16 = { NONLOCAL } same as __first1
D.48750 = { }
D.47388 = { }
SR.944_45 = { NONLOCAL } same as __first1
SR.942_27 = { NONLOCAL } same as __first1
__pred = { NONLOCAL } same as __first1
_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterIS0_EEET_S5_S5_T0_St26random_access_iterator_tag = { }
CALLUSED(23) = { ESCAPED NONLOCAL }
CALLCLOBBERED(24) = { }
D.48749 = { }
_28 = { ESCAPED NONLOCAL }
__first1_4 = { ESCAPED NONLOCAL }
__first1_30 = { ESCAPED NONLOCAL } same as __first1_4
D.48758 = { }
SR.945_34 = { NONLOCAL } same as __first1
SR.943_32 = { NONLOCAL } same as __first1
__pred = { NONLOCAL } same as __first1
CALLUSED(33) = { ESCAPED NONLOCAL } same as __first1_4
CALLCLOBBERED(34) = { }
D.48757 = { }
_21 = { ESCAPED NONLOCAL } same as __first1_4
__current_26 = { ESCAPED NONLOCAL } same as __first1_4
__p_5 = { NONLOCAL } same as __first1
__p_31 = { NONLOCAL } same as __first1
__current_6 = { ESCAPED NONLOCAL } same as __first1_4
__current_33 = { ESCAPED NONLOCAL } same as __first1_4
_40 = { ESCAPED NONLOCAL }
_44 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }


Alias information for std::__search<unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equal_to_iter>(unsigned char*, unsigned char*, unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equal_to_iter)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first1_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__p_5, points-to non-local, points-to NULL, points-to vars: { }
__current_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__first1_11(D), points-to non-local, points-to NULL, points-to vars: { }
__last1_12(D), points-to non-local, points-to NULL, points-to vars: { }
__first2_13(D), points-to non-local, points-to NULL, points-to vars: { }
__last2_14(D), points-to non-local, points-to NULL, points-to vars: { }
__p1_16, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__current_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.942_27, points-to non-local, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__first1_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__p_31, points-to non-local, points-to NULL, points-to vars: { }
SR.943_32, points-to non-local, points-to NULL, points-to vars: { }
__current_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.945_34, points-to non-local, points-to NULL, points-to vars: { }
SR.944_45, points-to non-local, points-to NULL, points-to vars: { }

std::__search<unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equal_to_iter>(unsigned char*, unsigned char*, unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equal_to_iter)unsigned char* (unsigned char * __first1, unsigned char * __last1, unsigned char * __first2, unsigned char * __last2, struct _Iter_equal_to_iter __predicate)
{
  unsigned char * SR.945;
  unsigned char * SR.944;
  unsigned char * SR.943;
  unsigned char * SR.942;
  bool D.48764;
  struct _Iter_equals_iter D.48760;
  struct _Iter_equal_to_iter D.48758;
  struct random_access_iterator_tag D.48757;
  unsigned char * D.48756;
  struct _Iter_equals_iter __pred;
  struct _Iter_equals_iter D.48752;
  struct _Iter_equal_to_iter D.48750;
  struct random_access_iterator_tag D.48749;
  unsigned char * D.48748;
  struct _Iter_equals_iter __pred;
  unsigned char * __current;
  unsigned char * __p;
  unsigned char * __p1;
  struct _Iter_equals_iter D.47391;
  struct _Iter_equals_iter D.47389;
  struct _Iter_equal_to_iter D.47388;
  bool _1;
  bool _2;
  bool _3;
  unsigned char * _7;
  unsigned char * _21;
  unsigned char * _28;
  unsigned char _40;
  unsigned char _44;

  <bb 2> [0.00%]:
  _1 = __first1_11(D) == __last1_12(D);
  _2 = __first2_13(D) == __last2_14(D);
  _3 = _1 | _2;
  if (_3 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  __p1_16 = __first2_13(D) + 1;
  if (__last2_14(D) == __p1_16)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [100.00%]:
  D.48750 = D.47388;
  SR.944_45 = __first2_13(D);
  SR.942_27 = SR.944_45;
  MEM[(struct _Iter_equals_iter *)&__pred] = SR.942_27;
  _28 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> > (__first1_11(D), __last1_12(D), __pred, D.48749);
  goto <bb 11>; [0.00%]

  <bb 5> [100.00%]:
  # __first1_4 = PHI <__first1_11(D)(3), __first1_30(10)>
  D.48758 = D.47388;
  SR.945_34 = __first2_13(D);
  SR.943_32 = SR.945_34;
  MEM[(struct _Iter_equals_iter *)&__pred] = SR.943_32;
  _21 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<unsigned char*> > (__first1_4, __last1_12(D), __pred, D.48757);
  if (__last1_12(D) == _21)
    goto <bb 11>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  __current_26 = _21 + 1;
  if (__last1_12(D) == __current_26)
    goto <bb 11>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [100.00%]:
  # __p_5 = PHI <__p1_16(6), __p_31(9)>
  # __current_6 = PHI <__current_26(6), __current_33(9)>
  _40 = *__current_6;
  _44 = *__p_5;
  if (_40 == _44)
    goto <bb 8>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 8> [0.00%]:
  __p_31 = __p_5 + 1;
  if (__last2_14(D) == __p_31)
    goto <bb 11>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  __current_33 = __current_6 + 1;
  if (__last1_12(D) == __current_33)
    goto <bb 11>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 10> [0.00%]:
  __first1_30 = _21 + 1;
  goto <bb 5>; [0.00%]

  <bb 11> [0.00%]:
  # _7 = PHI <__first1_11(D)(2), _28(4), __last1_12(D)(5), __last1_12(D)(6), _21(8), __last1_12(D)(9)>
  return _7;

}



;; Function std::search<unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*, unsigned char*)unsigned char* (_ZSt6searchIPhS0_ET_S1_S1_T0_S2_, funcdef_no=2405, decl_uid=41838, cgraph_uid=1145, symbol_order=1193)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first1 = &NONLOCAL
__last1 = &NONLOCAL
__first2 = &NONLOCAL
__last2 = &NONLOCAL
D.48770 = D.48771
ESCAPED = __first1
ESCAPED = __last1
ESCAPED = __first2
ESCAPED = __last2
ESCAPED = D.47377
_8 = NONLOCAL
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first1 = { NONLOCAL }
__last1 = { NONLOCAL } same as __first1
__first2 = { NONLOCAL } same as __first1
__last2 = { NONLOCAL } same as __first1
D.48770 = { }
D.48771 = { }
_ZSt8__searchIPhS0_N9__gnu_cxx5__ops19_Iter_equal_to_iterEET_S4_S4_T0_S5_T1_ = { }
D.47377 = { }
_8 = { ESCAPED NONLOCAL }


Alias information for std::search<unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*, unsigned char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first1_3(D), points-to non-local, points-to NULL, points-to vars: { }
__last1_4(D), points-to non-local, points-to NULL, points-to vars: { }
__first2_5(D), points-to non-local, points-to NULL, points-to vars: { }
__last2_6(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::search<unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*, unsigned char*)unsigned char* (unsigned char * __first1, unsigned char * __last1, unsigned char * __first2, unsigned char * __last2)
{
  struct _Iter_equal_to_iter D.48771;
  struct _Iter_equal_to_iter D.48770;
  struct _Iter_equal_to_iter D.47377;
  unsigned char * _8;

  <bb 2> [100.00%]:
  D.48770 = D.48771;
  _8 = std::__search<unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equal_to_iter> (__first1_3(D), __last1_4(D), __first2_5(D), __last2_6(D), D.47377);
  return _8;

}



;; Function memstr<unsigned char*, unsigned char*>(unsigned char*, int, unsigned char*, int)unsigned char* (_Z6memstrIPhS0_ET_S1_iT0_i, funcdef_no=2266, decl_uid=39843, cgraph_uid=1006, symbol_order=1054)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
searchBuf = &NONLOCAL
searchBufSize = &NONLOCAL
searchString = &NONLOCAL
searchStringSize = &NONLOCAL
_1 = searchBufSize
searchBufEnd_7 = searchBuf
_2 = searchStringSize
_3 = searchString
ESCAPED = searchBuf
ESCAPED = searchBufEnd_7
ESCAPED = searchString
ESCAPED = _3
ESCAPED = D.48778
_17 = NONLOCAL
iftmp.695_4 = _17
iftmp.695_4 = &NULL
ESCAPED = iftmp.695_4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _17
STOREDANYTHING = { }
INTEGER = { ANYTHING }
searchBuf = { NONLOCAL }
searchBufSize = { NONLOCAL } same as searchBuf
searchString = { NONLOCAL } same as searchBuf
searchStringSize = { NONLOCAL } same as searchBuf
_1 = { NONLOCAL } same as searchBuf
searchBufEnd_7 = { NONLOCAL } same as searchBuf
_2 = { NONLOCAL } same as searchBuf
_3 = { NONLOCAL } same as searchBuf
_ZSt8__searchIPhS0_N9__gnu_cxx5__ops19_Iter_equal_to_iterEET_S4_S4_T0_S5_T1_ = { }
D.48778 = { }
_17 = { ESCAPED NONLOCAL }
iftmp.695_4 = { NULL ESCAPED NONLOCAL }


Alias information for memstr<unsigned char*, unsigned char*>(unsigned char*, int, unsigned char*, int)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
iftmp.695_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
searchBuf_6(D), points-to non-local, points-to NULL, points-to vars: { }
searchBufEnd_7, points-to non-local, points-to NULL, points-to vars: { }
searchString_9(D), points-to non-local, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

memstr<unsigned char*, unsigned char*>(unsigned char*, int, unsigned char*, int)unsigned char* (unsigned char * searchBuf, int searchBufSize, unsigned char * searchString, int searchStringSize)
{
  struct _Iter_equal_to_iter D.48778;
  unsigned char * D.48777;
  unsigned char * s;
  unsigned char * searchBufEnd;
  sizetype _1;
  sizetype _2;
  unsigned char * _3;
  unsigned char * iftmp.695_4;
  unsigned char * _17;

  <bb 2> [100.00%]:
  _1 = (sizetype) searchBufSize_5(D);
  searchBufEnd_7 = searchBuf_6(D) + _1;
  _2 = (sizetype) searchStringSize_8(D);
  _3 = searchString_9(D) + _2;
  _17 = std::__search<unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equal_to_iter> (searchBuf_6(D), searchBufEnd_7, searchString_9(D), _3, D.48778);
  if (searchBufEnd_7 != _17)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:

  <bb 4> [0.00%]:
  # iftmp.695_4 = PHI <_17(2), 0B(3)>
  return iftmp.695_4;

}



;; Function __gnu_cxx::new_allocator<char>::max_size() const (_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv, funcdef_no=2639, decl_uid=11627, cgraph_uid=1379, symbol_order=1427)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for __gnu_cxx::new_allocator<char>::max_size() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<char>::max_size() const (const struct new_allocator * const this)
{
  <bb 2> [0.00%]:
  return 18446744073709551615;

}



;; Function std::allocator_traits<std::allocator<char> >::max_size(std::allocator<char> const&) (_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_, funcdef_no=2608, decl_uid=18600, cgraph_uid=1348, symbol_order=1396)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }


Alias information for std::allocator_traits<std::allocator<char> >::max_size(std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__a_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator_traits<std::allocator<char> >::max_size(std::allocator<char> const&) (const struct allocator_type & __a)
{
  size_type D.48782;

  <bb 2> [100.00%]:
  return 18446744073709551615;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv, funcdef_no=2551, decl_uid=19048, cgraph_uid=1291, symbol_order=1339)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_8 = this + UNKNOWN
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_8 = { NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_5(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const (const struct basic_string * const this)
{
  const struct allocator_type & D.48787;
  size_type D.48785;
  const struct allocator_type & _8;

  <bb 2> [100.00%]:
  _8 = &this_5(D)->_M_dataplus;
  return 9223372036854775807;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc, funcdef_no=2479, decl_uid=18852, cgraph_uid=1219, symbol_order=1267)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n1 = &NONLOCAL
__n2 = &NONLOCAL
__s = &NONLOCAL
_9 = *this + 64
_3 = __n1
_3 = _9
_4 = _3
_4 = &NONLOCAL
ESCAPED = __s

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n1 = { NONLOCAL } same as this
__n2 = { NONLOCAL } same as this
__s = { NONLOCAL } same as this
_9 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_ZSt20__throw_length_errorPKc = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_7(D), points-to non-local, points-to NULL, points-to vars: { }
__s_15(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const (const struct basic_string * const this, size_type __n1, size_type __n2, const char * __s)
{
  size_type D.48792;
  size_type D.48790;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _9;

  <bb 2> [100.00%]:
  _9 = this_7(D)->_M_string_length;
  _3 = __n1_10(D) - _9;
  _4 = _3 + 9223372036854775807;
  if (_4 < __n2_11(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  std::__throw_length_error (__s_15(D));

  <bb 4> [0.00%]:
  return;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc, funcdef_no=2407, decl_uid=19112, cgraph_uid=1147, symbol_order=1195)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__s = &NONLOCAL
CALLUSED(11) = CALLUSED(11) + UNKNOWN
CALLUSED(11) = *CALLUSED(11) + UNKNOWN
CALLUSED(11) = __s
_12 = CALLUSED(11)
_12 = NONLOCAL
_3 = *this + 64
_10 = _3
_13 = &NONLOCAL
_13 = _3
_11 = _13
ESCAPED = &STRING
ESCAPED = this
ESCAPED = __s
ESCAPED = _12
_8 = NONLOCAL
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__s = { NONLOCAL } same as this
strlen = { }
CALLUSED(11) = { ESCAPED NONLOCAL }
CALLCLOBBERED(12) = { }
_12 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL } same as _3
_13 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _13
_ZSt20__throw_length_errorPKc = { }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm = { }
_8 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__s_2(D), points-to non-local, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*) (struct basic_string * const this, const char * __s)
{
  size_t D.48799;
  const size_type __n;
  long unsigned int _3;
  struct basic_string & _8;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;

  <bb 2> [100.00%]:
  _12 = strlen (__s_2(D));
  _3 = MEM[(const struct basic_string *)this_5(D)]._M_string_length;
  _10 = -_3;
  _13 = 9223372036854775807 - _3;
  _11 = _13;
  if (_12 > _13)
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> [0.04%]:
  std::__throw_length_error ("basic_string::append");

  <bb 4> [0.00%]:
  _8 = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append (this_5(D), __s_2(D), _12);
  return _8;

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*) (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc, funcdef_no=2270, decl_uid=19091, cgraph_uid=1010, symbol_order=1058)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__s = &NONLOCAL
ESCAPED = this
ESCAPED = __s
_5 = NONLOCAL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__s = { NONLOCAL } same as this
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc = { }
_5 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__s_3(D), points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*) (struct basic_string * const this, const char * __s)
{
  struct basic_string & _5;

  <bb 2> [0.00%]:
  _5 = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (this_2(D), __s_3(D));
  return _5;

}



;; Function __gnu_cxx::new_allocator<outBuff>::new_allocator(__gnu_cxx::new_allocator<outBuff> const&) (_ZN9__gnu_cxx13new_allocatorI7outBuffEC2ERKS2_, funcdef_no=2647, decl_uid=37714, cgraph_uid=1387, symbol_order=1435)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
D.37716 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
D.37716 = { NONLOCAL } same as this


Alias information for __gnu_cxx::new_allocator<outBuff>::new_allocator(__gnu_cxx::new_allocator<outBuff> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<outBuff>::new_allocator(__gnu_cxx::new_allocator<outBuff> const&) (struct new_allocator * const this, const struct new_allocator & D.37716)
{
  <bb 2> [0.00%]:
  return;

}



;; Function std::allocator<outBuff>::allocator(std::allocator<outBuff> const&) (_ZNSaI7outBuffEC2ERKS0_, funcdef_no=2631, decl_uid=37779, cgraph_uid=1371, symbol_order=1419)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__a = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__a = { NONLOCAL } same as this


Alias information for std::allocator<outBuff>::allocator(std::allocator<outBuff> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
__a_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator<outBuff>::allocator(std::allocator<outBuff> const&) (struct allocator * const this, const struct allocator & __a)
{
  void * _1;

  <bb 2> [100.00%]:
  return;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::_Vector_impl(std::allocator<outBuff> const&) (_ZNSt12_Vector_baseI7outBuffSaIS0_EE12_Vector_implC2ERKS1_, funcdef_no=2595, decl_uid=37816, cgraph_uid=1335, symbol_order=1383)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__a = &NONLOCAL
derefaddrtmp(10) = &NULL
*this = derefaddrtmp(10)
derefaddrtmp(11) = &NULL
*this + 64 = derefaddrtmp(11)
derefaddrtmp(12) = &NULL
*this + 128 = derefaddrtmp(12)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__a = { NONLOCAL } same as this
derefaddrtmp(10) = { NULL }
derefaddrtmp(11) = { NULL } same as derefaddrtmp(10)
derefaddrtmp(12) = { NULL } same as derefaddrtmp(10)


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::_Vector_impl(std::allocator<outBuff> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__a_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_impl::_Vector_impl(std::allocator<outBuff> const&) (struct _Vector_impl * const this, const struct _Tp_alloc_type & __a)
{
  <bb 2> [100.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->_M_start = 0B;
  this_2(D)->_M_finish = 0B;
  this_2(D)->_M_end_of_storage = 0B;
  return;

}



;; Function __gnu_cxx::new_allocator<outBuff>::max_size() const (_ZNK9__gnu_cxx13new_allocatorI7outBuffE8max_sizeEv, funcdef_no=2653, decl_uid=37677, cgraph_uid=1393, symbol_order=1441)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for __gnu_cxx::new_allocator<outBuff>::max_size() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<outBuff>::max_size() const (const struct new_allocator * const this)
{
  <bb 2> [0.00%]:
  return 461168601842738790;

}



;; Function __gnu_cxx::new_allocator<outBuff>::allocate(unsigned long, void const*) (_ZN9__gnu_cxx13new_allocatorI7outBuffE8allocateEmPKv, funcdef_no=2652, decl_uid=37669, cgraph_uid=1392, symbol_order=1440)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
D.37672 = &NONLOCAL
_2 = __n
_2 = &NONLOCAL
ESCAPED = _2
HEAP(15) = &NONLOCAL
_9 = &HEAP(15)
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(15) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
D.37672 = { NONLOCAL } same as this
_ZSt17__throw_bad_allocv = { }
_2 = { NONLOCAL } same as this
_Znwm = { }
_9 = { HEAP(15) }
HEAP(15) = { ESCAPED NONLOCAL }


Alias information for __gnu_cxx::new_allocator<outBuff>::allocate(unsigned long, void const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.48812 } (escaped, escaped heap)

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to NULL, points-to vars: { }
_9, points-to NULL, points-to vars: { D.48812 } (escaped, escaped heap)

__gnu_cxx::new_allocator<outBuff>::allocate(unsigned long, void const*) (struct new_allocator * const this, size_type __n, const void * D.37672)
{
  size_type D.48811;
  long unsigned int _2;
  struct outBuff * _9;

  <bb 2> [100.00%]:
  if (__n_6(D) > 461168601842738790)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  std::__throw_bad_alloc ();

  <bb 4> [0.00%]:
  _2 = __n_6(D) * 40;
  _9 = operator new (_2);
  return _9;

}



;; Function std::allocator_traits<std::allocator<outBuff> >::allocate(std::allocator<outBuff>&, unsigned long) (_ZNSt16allocator_traitsISaI7outBuffEE8allocateERS1_m, funcdef_no=2649, decl_uid=37467, cgraph_uid=1389, symbol_order=1437)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__n = &NONLOCAL
_7 = __n
_7 = &NONLOCAL
ESCAPED = _7
HEAP(14) = &NONLOCAL
_8 = &HEAP(14)
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(14) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__n = { NONLOCAL } same as __a
_ZSt17__throw_bad_allocv = { }
_7 = { NONLOCAL } same as __a
_Znwm = { }
_8 = { HEAP(14) }
HEAP(14) = { ESCAPED NONLOCAL }


Alias information for std::allocator_traits<std::allocator<outBuff> >::allocate(std::allocator<outBuff>&, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.48818 } (escaped, escaped heap)

Flow-insensitive points-to information

__a_2(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to NULL, points-to vars: { D.48818 } (escaped, escaped heap)

std::allocator_traits<std::allocator<outBuff> >::allocate(std::allocator<outBuff>&, unsigned long) (struct allocator_type & __a, size_type __n)
{
  struct outBuff * D.48817;
  long unsigned int _7;
  struct outBuff * _8;

  <bb 2> [100.00%]:
  if (__n_3(D) > 461168601842738790)
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> [0.04%]:
  std::__throw_bad_alloc ();

  <bb 4> [99.96%]:
  _7 = __n_3(D) * 40;
  _8 = operator new (_7);
  return _8;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_allocate(unsigned long) (_ZNSt12_Vector_baseI7outBuffSaIS0_EE11_M_allocateEm, funcdef_no=2633, decl_uid=37826, cgraph_uid=1373, symbol_order=1421)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
_1 = this + UNKNOWN
_12 = __n
_12 = &NONLOCAL
ESCAPED = _12
HEAP(15) = &NONLOCAL
_13 = &HEAP(15)
iftmp.346_2 = _13
iftmp.346_2 = &NULL
ESCAPED = iftmp.346_2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL HEAP(15) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
_1 = { NONLOCAL }
_ZSt17__throw_bad_allocv = { }
_12 = { NONLOCAL } same as this
_Znwm = { }
_13 = { HEAP(15) }
HEAP(15) = { ESCAPED NONLOCAL }
iftmp.346_2 = { NULL HEAP(15) }


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_allocate(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.48823 } (escaped, escaped heap)

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
iftmp.346_2, points-to NULL, points-to vars: { D.48823 } (escaped, escaped heap)
this_7(D), points-to non-local, points-to NULL, points-to vars: { }
_13, points-to NULL, points-to vars: { D.48823 } (escaped, escaped heap)

std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_allocate(unsigned long) (struct _Vector_base * const this, size_t __n)
{
  struct outBuff * D.48822;
  struct _Vector_impl * _1;
  struct outBuff * iftmp.346_2;
  long unsigned int _12;
  struct outBuff * _13;

  <bb 2> [0.00%]:
  if (__n_4(D) != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [100.00%]:
  _1 = &this_7(D)->_M_impl;
  if (__n_4(D) > 461168601842738790)
    goto <bb 4>; [0.04%]
  else
    goto <bb 5>; [99.96%]

  <bb 4> [0.04%]:
  std::__throw_bad_alloc ();

  <bb 5> [99.96%]:
  _12 = __n_4(D) * 40;
  _13 = operator new (_12);

  <bb 6> [0.00%]:
  # iftmp.346_2 = PHI <_13(5), 0B(2)>
  return iftmp.346_2;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_create_storage(unsigned long) (_ZNSt12_Vector_baseI7outBuffSaIS0_EE17_M_create_storageEm, funcdef_no=2597, decl_uid=37833, cgraph_uid=1337, symbol_order=1385)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
ESCAPED = this
ESCAPED = __n
_10 = NONLOCAL
*this = _10
_2 = *this
*this + 64 = _2
_3 = *this
_4 = __n
_4 = &NONLOCAL
_5 = _3
*this + 128 = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _10
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
_ZNSt12_Vector_baseI7outBuffSaIS0_EE11_M_allocateEm = { }
_10 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
_4 = { NONLOCAL } same as this
_5 = { ESCAPED NONLOCAL } same as _2


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_create_storage(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_7(D), points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_create_storage(unsigned long) (struct _Vector_base * const this, size_t __n)
{
  struct outBuff * _2;
  struct outBuff * _3;
  long unsigned int _4;
  struct outBuff * _5;
  struct outBuff * _10;

  <bb 2> [0.00%]:
  _10 = std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_allocate (this_7(D), __n_8(D));
  this_7(D)->_M_impl._M_start = _10;
  _2 = this_7(D)->_M_impl._M_start;
  this_7(D)->_M_impl._M_finish = _2;
  _3 = this_7(D)->_M_impl._M_start;
  _4 = __n_8(D) * 40;
  _5 = _3 + _4;
  this_7(D)->_M_impl._M_end_of_storage = _5;
  return;

}



;; Function std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_base(unsigned long, std::allocator<outBuff> const&) (_ZNSt12_Vector_baseI7outBuffSaIS0_EEC2EmRKS1_, funcdef_no=2530, decl_uid=37860, cgraph_uid=1270, symbol_order=1318)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
__a = &NONLOCAL
_1 = this + UNKNOWN
derefaddrtmp(12) = &NULL
*this = derefaddrtmp(12)
derefaddrtmp(13) = &NULL
*this + 64 = derefaddrtmp(13)
derefaddrtmp(14) = &NULL
*this + 128 = derefaddrtmp(14)
ESCAPED = this
ESCAPED = __n
_11 = NONLOCAL
*this = _11
*this + 64 = _11
_12 = __n
_12 = &NONLOCAL
_13 = _11
*this + 128 = _13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _11
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
__a = { NONLOCAL } same as this
_1 = { NONLOCAL }
derefaddrtmp(12) = { NULL }
derefaddrtmp(13) = { NULL } same as derefaddrtmp(12)
derefaddrtmp(14) = { NULL } same as derefaddrtmp(12)
_ZNSt12_Vector_baseI7outBuffSaIS0_EE11_M_allocateEm = { }
_11 = { ESCAPED NONLOCAL }
_12 = { NONLOCAL } same as this
_13 = { ESCAPED NONLOCAL } same as _11


Alias information for std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_base(unsigned long, std::allocator<outBuff> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to NULL, points-to vars: { }
__a_6(D), points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::_Vector_base<outBuff, std::allocator<outBuff> >::_Vector_base(unsigned long, std::allocator<outBuff> const&) (struct _Vector_base * const this, size_t __n, const struct allocator_type & __a)
{
  struct _Vector_impl * _1;
  struct outBuff * _11;
  long unsigned int _12;
  struct outBuff * _13;

  <bb 2> [100.00%]:
  MEM[(struct  &)this_4(D)] ={v} {CLOBBER};
  _1 = &this_4(D)->_M_impl;
  MEM[(struct  &)this_4(D)] ={v} {CLOBBER};
  MEM[(struct _Vector_impl *)this_4(D)]._M_start = 0B;
  MEM[(struct _Vector_impl *)this_4(D)]._M_finish = 0B;
  MEM[(struct _Vector_impl *)this_4(D)]._M_end_of_storage = 0B;
  _11 = std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_allocate (this_4(D), __n_8(D));

  <bb 3> [100.00%]:
  this_4(D)->_M_impl._M_start = _11;
  this_4(D)->_M_impl._M_finish = _11;
  _12 = __n_8(D) * 40;
  _13 = _11 + _12;
  this_4(D)->_M_impl._M_end_of_storage = _13;
  return;

<L0> [100.00%]:
  MEM[(struct  &)this_4(D)] ={v} {CLOBBER};
  resx 1

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::vector(unsigned long, outBuff const&, std::allocator<outBuff> const&) (_ZNSt6vectorI7outBuffSaIS0_EEC2EmRKS0_RKS1_, funcdef_no=2464, decl_uid=38499, cgraph_uid=1204, symbol_order=1252)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
__value = &NONLOCAL
__a = &NONLOCAL
_1 = this + UNKNOWN
derefaddrtmp(13) = &NULL
*this = derefaddrtmp(13)
derefaddrtmp(14) = &NULL
*this + 64 = derefaddrtmp(14)
derefaddrtmp(15) = &NULL
*this + 128 = derefaddrtmp(15)
ESCAPED = _1
ESCAPED = __n
_15 = NONLOCAL
*this = _15
*this + 64 = _15
_16 = __n
_16 = &NONLOCAL
_17 = _15
*this + 128 = _17
_10 = *this
__n_11 = __n
__n_11 = __n_13
__cur_12 = _10
__cur_12 = __cur_14
doubledereftmp(25) = *__value + UNKNOWN
*__cur_12 + UNKNOWN = doubledereftmp(25)
__n_13 = __n_11
__n_13 = &NONLOCAL
__cur_14 = __cur_12
*this + 64 = __cur_12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _15
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
__value = { NONLOCAL } same as this
__a = { NONLOCAL } same as this
_1 = { NONLOCAL }
derefaddrtmp(13) = { NULL }
derefaddrtmp(14) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(15) = { NULL } same as derefaddrtmp(13)
_ZNSt12_Vector_baseI7outBuffSaIS0_EE11_M_allocateEm = { }
_15 = { ESCAPED NONLOCAL }
_16 = { NONLOCAL } same as this
_17 = { ESCAPED NONLOCAL } same as _15
_10 = { ESCAPED NONLOCAL }
__n_11 = { NONLOCAL } same as this
__n_13 = { NONLOCAL } same as this
__cur_12 = { ESCAPED NONLOCAL } same as _10
__cur_14 = { ESCAPED NONLOCAL } same as _10
doubledereftmp(25) = { ESCAPED NONLOCAL }


Alias information for std::vector<outBuff, std::allocator<outBuff> >::vector(unsigned long, outBuff const&, std::allocator<outBuff> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_3(D), points-to non-local, points-to NULL, points-to vars: { }
__a_6(D), points-to non-local, points-to NULL, points-to vars: { }
__value_8(D), points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__cur_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__cur_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::vector(unsigned long, outBuff const&, std::allocator<outBuff> const&) (struct vector * const this, size_type __n, const struct value_type & __value, const struct allocator_type & __a)
{
  long unsigned int __n;
  struct outBuff * __cur;
  struct _Vector_base * _1;
  struct outBuff * _10;
  struct outBuff * _15;
  long unsigned int _16;
  struct outBuff * _17;

  <bb 2> [100.00%]:
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  _1 = &this_3(D)->D.38528;
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  MEM[(struct _Vector_impl *)this_3(D)]._M_start = 0B;
  MEM[(struct _Vector_impl *)this_3(D)]._M_finish = 0B;
  MEM[(struct _Vector_impl *)this_3(D)]._M_end_of_storage = 0B;
  _15 = std::_Vector_base<outBuff, std::allocator<outBuff> >::_M_allocate (_1, __n_5(D));
  MEM[(struct _Vector_base *)this_3(D)]._M_impl._M_start = _15;
  MEM[(struct _Vector_base *)this_3(D)]._M_impl._M_finish = _15;
  _16 = __n_5(D) * 40;
  _17 = _15 + _16;
  MEM[(struct _Vector_base *)this_3(D)]._M_impl._M_end_of_storage = _17;
  _10 = this_3(D)->D.38528._M_impl._M_start;

  <bb 3> [100.00%]:
  # __n_11 = PHI <__n_5(D)(2), __n_13(6)>
  # __cur_12 = PHI <_10(2), __cur_14(6)>
  if (__n_11 == 0)
    goto <bb 7>; [15.00%]
  else
    goto <bb 4>; [85.00%]

  <bb 4> [85.00%]:
  if (__cur_12 != 0B)
    goto <bb 5>; [70.00%]
  else
    goto <bb 6>; [30.00%]

  <bb 5> [59.50%]:
  *__cur_12 = MEM[(const struct outBuff *)__value_8(D)];

  <bb 6> [85.00%]:
  __n_13 = __n_11 + 18446744073709551615;
  __cur_14 = __cur_12 + 40;
  goto <bb 3>; [100.00%]

  <bb 7> [15.00%]:
  this_3(D)->D.38528._M_impl._M_finish = __cur_12;
  return;

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::_M_fill_assign(unsigned long, outBuff const&) (_ZNSt6vectorI7outBuffSaIS0_EE14_M_fill_assignEmRKS0_, funcdef_no=2396, decl_uid=38291, cgraph_uid=1136, symbol_order=1184)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
__val = &NONLOCAL
_30 = *this + 128
_29 = _30
_20 = *this
_34 = _20
_17 = _29
_17 = _34
_40 = _17
_40 = &NONLOCAL
_41 = _40
_42 = this + UNKNOWN
ESCAPED = &__tmp
ESCAPED = __n
ESCAPED = __val
ESCAPED = _42
_4 = this + UNKNOWN
_44 = __tmp
_45 = *this
__tmp = _45
*this = _44
_46 = __tmp
_47 = *this
__tmp = _47
*this = _46
_48 = __tmp
_49 = *this
__tmp = _49
*this = _48
_43 = __tmp
ESCAPED = _43
_50 = *this + 64
_51 = _50
_52 = *this
_53 = _52
_54 = _51
_54 = _53
_55 = _54
_55 = &NONLOCAL
_56 = _55
_70 = *this
SR.966_2 = _70
D.46370 = SR.966_2
_69 = *this
SR.965_6 = _69
D.46371 = SR.965_6
ESCAPED = D.46371
ESCAPED = D.46370
ESCAPED = __val
_68 = this + UNKNOWN
_61 = *this + 64
_62 = _61
_63 = *this
_64 = _63
_65 = _62
_65 = _64
_66 = _65
_66 = &NONLOCAL
_67 = _66
_9 = __n
_9 = _67
_10 = *this + 64
__n_57 = _9
__n_57 = __n_59
__cur_58 = _10
__cur_58 = __cur_60
doubledereftmp(58) = *__val + UNKNOWN
*__cur_58 + UNKNOWN = doubledereftmp(58)
__n_59 = __n_57
__n_59 = &NONLOCAL
__cur_60 = __cur_58
*this + 64 = __cur_58
_12 = *this
__first_72 = _12
__first_72 = __first_74
__niter_71 = __n
__niter_71 = __niter_73
doubledereftmp(64) = *__val + UNKNOWN
*__first_72 + UNKNOWN = doubledereftmp(64)
__niter_73 = __niter_71
__niter_73 = &NONLOCAL
__first_74 = __first_72
*this + 64 = __first_72

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL __tmp }
NONLOCAL = { ESCAPED NONLOCAL } same as _20
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
__val = { NONLOCAL } same as this
_30 = { ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL } same as _30
_20 = { ESCAPED NONLOCAL }
_34 = { ESCAPED NONLOCAL } same as _20
_17 = { ESCAPED NONLOCAL }
_40 = { ESCAPED NONLOCAL }
_41 = { ESCAPED NONLOCAL } same as _40
_42 = { NONLOCAL }
_ZNSt6vectorI7outBuffSaIS0_EEC1EmRKS0_RKS1_ = { }
__tmp = { ESCAPED NONLOCAL } same as _20
_4 = { NONLOCAL }
_44 = { ESCAPED NONLOCAL } same as _20
_45 = { ESCAPED NONLOCAL } same as _20
_46 = { ESCAPED NONLOCAL } same as _20
_47 = { ESCAPED NONLOCAL } same as _20
_48 = { ESCAPED NONLOCAL } same as _20
_49 = { ESCAPED NONLOCAL } same as _20
_43 = { ESCAPED NONLOCAL } same as _20
_ZdlPv = { }
_50 = { ESCAPED NONLOCAL }
_51 = { ESCAPED NONLOCAL } same as _50
_52 = { ESCAPED NONLOCAL } same as _20
_53 = { ESCAPED NONLOCAL } same as _20
_54 = { ESCAPED NONLOCAL }
_55 = { ESCAPED NONLOCAL }
_56 = { ESCAPED NONLOCAL } same as _55
_70 = { ESCAPED NONLOCAL } same as _20
SR.966_2 = { ESCAPED NONLOCAL } same as _20
D.46370 = { ESCAPED NONLOCAL } same as _20
_69 = { ESCAPED NONLOCAL } same as _20
SR.965_6 = { ESCAPED NONLOCAL } same as _20
D.46371 = { ESCAPED NONLOCAL } same as _20
_ZSt4fillIN9__gnu_cxx17__normal_iteratorIP7outBuffSt6vectorIS2_SaIS2_EEEES2_EvT_S8_RKT0_ = { }
_68 = { NONLOCAL }
_61 = { ESCAPED NONLOCAL }
_62 = { ESCAPED NONLOCAL } same as _61
_63 = { ESCAPED NONLOCAL } same as _20
_64 = { ESCAPED NONLOCAL } same as _20
_65 = { ESCAPED NONLOCAL }
_66 = { ESCAPED NONLOCAL }
_67 = { ESCAPED NONLOCAL } same as _66
_9 = { ESCAPED NONLOCAL } same as _66
_10 = { ESCAPED NONLOCAL }
__n_57 = { ESCAPED NONLOCAL } same as _66
__n_59 = { ESCAPED NONLOCAL } same as _66
__cur_58 = { ESCAPED NONLOCAL } same as _10
__cur_60 = { ESCAPED NONLOCAL } same as _10
doubledereftmp(58) = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _20
__first_72 = { ESCAPED NONLOCAL } same as _20
__first_74 = { ESCAPED NONLOCAL } same as _20
__niter_71 = { NONLOCAL } same as this
__niter_73 = { NONLOCAL } same as this
doubledereftmp(64) = { ESCAPED NONLOCAL }


Alias information for std::vector<outBuff, std::allocator<outBuff> >::_M_fill_assign(unsigned long, outBuff const&)

Aliased symbols

__tmp, UID D.42313, struct vector, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.42313 } (escaped)

Flow-insensitive points-to information

SR.966_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
SR.965_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_16(D), points-to non-local, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__val_22(D), points-to non-local, points-to NULL, points-to vars: { }
_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_42, points-to non-local, points-to NULL, points-to vars: { }
_43, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_44, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_45, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_46, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_47, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_49, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_50, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_52, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__cur_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__cur_60, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_61, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_63, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_68, points-to non-local, points-to NULL, points-to vars: { }
_69, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_70, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__first_72, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__first_74, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::_M_fill_assign(unsigned long, outBuff const&) (struct vector * const this, size_t __n, const struct value_type & __val)
{
  struct outBuff * SR.966;
  struct outBuff * SR.965;
  struct outBuff * __first;
  long unsigned int __niter;
  struct outBuff * D.48873;
  struct iterator D.48865;
  struct iterator D.48863;
  struct _Tp_alloc_type & D.48861;
  size_type D.48859;
  struct outBuff * __cur;
  long unsigned int __n;
  struct outBuff * D.48857;
  size_type D.48850;
  struct _Tp_alloc_type & D.48844;
  size_type D.48842;
  struct vector __tmp;
  struct __normal_iterator D.46371;
  struct __normal_iterator D.46370;
  struct _Vector_impl * _4;
  long unsigned int _9;
  struct outBuff * _10;
  struct outBuff * _12;
  long int _17;
  struct outBuff * _20;
  long int _29;
  struct outBuff * _30;
  long int _34;
  long int _40;
  long unsigned int _41;
  struct _Tp_alloc_type & _42;
  struct outBuff * _43;
  struct outBuff * _44;
  struct outBuff * _45;
  struct outBuff * _46;
  struct outBuff * _47;
  struct outBuff * _48;
  struct outBuff * _49;
  struct outBuff * _50;
  long int _51;
  struct outBuff * _52;
  long int _53;
  long int _54;
  long int _55;
  long unsigned int _56;
  struct outBuff * _61;
  long int _62;
  struct outBuff * _63;
  long int _64;
  long int _65;
  long int _66;
  long unsigned int _67;
  struct _Tp_alloc_type & _68;
  struct outBuff * _69;
  struct outBuff * _70;

  <bb 2> [100.00%]:
  _30 = MEM[(const struct vector *)this_16(D)].D.38528._M_impl._M_end_of_storage;
  _29 = (long int) _30;
  _20 = MEM[(const struct vector *)this_16(D)].D.38528._M_impl._M_start;
  _34 = (long int) _20;
  _17 = _29 - _34;
  _40 = _17 /[ex] 40;
  _41 = (long unsigned int) _40;
  if (__n_18(D) > _41)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 3> [100.00%]:
  _42 = &MEM[(struct _Vector_base *)this_16(D)]._M_impl;
  std::vector<outBuff, std::allocator<outBuff> >::vector (&__tmp, __n_18(D), __val_22(D), _42);

  <bb 4> [100.00%]:
  _4 = &this_16(D)->D.38528._M_impl;
  _44 = MEM[(struct outBuff * &)&__tmp];
  _45 = MEM[(struct outBuff * &)this_16(D)];
  MEM[(struct outBuff * &)&__tmp] = _45;
  MEM[(struct outBuff * &)this_16(D)] = _44;
  _46 = MEM[(struct outBuff * &)&__tmp + 8];
  _47 = MEM[(struct outBuff * &)this_16(D) + 8];
  MEM[(struct outBuff * &)&__tmp + 8] = _47;
  MEM[(struct outBuff * &)this_16(D) + 8] = _46;
  _48 = MEM[(struct outBuff * &)&__tmp + 16];
  _49 = MEM[(struct outBuff * &)this_16(D) + 16];
  MEM[(struct outBuff * &)&__tmp + 16] = _49;
  MEM[(struct outBuff * &)this_16(D) + 16] = _48;
  _43 = __tmp.D.38528._M_impl._M_start;
  if (_43 != 0B)
    goto <bb 5>; [57.44%]
  else
    goto <bb 6>; [42.56%]

  <bb 5> [57.44%]:
  operator delete (_43);

  <bb 6> [100.00%]:
  MEM[(struct  &)&__tmp] ={v} {CLOBBER};
  __tmp ={v} {CLOBBER};
  goto <bb 18>; [0.00%]

  <bb 7> [100.00%]:
  _50 = MEM[(const struct vector *)this_16(D)].D.38528._M_impl._M_finish;
  _51 = (long int) _50;
  _52 = MEM[(const struct vector *)this_16(D)].D.38528._M_impl._M_start;
  _53 = (long int) _52;
  _54 = _51 - _53;
  _55 = _54 /[ex] 40;
  _56 = (long unsigned int) _55;
  if (__n_18(D) > _56)
    goto <bb 8>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 8> [100.00%]:
  _70 = MEM[(struct outBuff * const &)this_16(D) + 8];
  SR.966_2 = _70;
  MEM[(struct __normal_iterator *)&D.46370] = SR.966_2;
  _69 = MEM[(struct outBuff * const &)this_16(D)];
  SR.965_6 = _69;
  MEM[(struct __normal_iterator *)&D.46371] = SR.965_6;
  std::fill<__gnu_cxx::__normal_iterator<outBuff*, std::vector<outBuff, std::allocator<outBuff> > >, outBuff> (D.46371, D.46370, __val_22(D));
  _68 = &MEM[(struct _Vector_base *)this_16(D)]._M_impl;
  _61 = MEM[(const struct vector *)this_16(D)].D.38528._M_impl._M_finish;
  _62 = (long int) _61;
  _63 = MEM[(const struct vector *)this_16(D)].D.38528._M_impl._M_start;
  _64 = (long int) _63;
  _65 = _62 - _64;
  _66 = _65 /[ex] 40;
  _67 = (long unsigned int) _66;
  _9 = __n_18(D) - _67;
  _10 = this_16(D)->D.38528._M_impl._M_finish;

  <bb 9> [100.00%]:
  # __n_57 = PHI <_9(8), __n_59(12)>
  # __cur_58 = PHI <_10(8), __cur_60(12)>
  if (__n_57 == 0)
    goto <bb 13>; [15.00%]
  else
    goto <bb 10>; [85.00%]

  <bb 10> [85.00%]:
  if (__cur_58 != 0B)
    goto <bb 11>; [70.00%]
  else
    goto <bb 12>; [30.00%]

  <bb 11> [59.50%]:
  *__cur_58 = MEM[(const struct outBuff *)__val_22(D)];

  <bb 12> [85.00%]:
  __n_59 = __n_57 + 18446744073709551615;
  __cur_60 = __cur_58 + 40;
  goto <bb 9>; [100.00%]

  <bb 13> [15.00%]:
  this_16(D)->D.38528._M_impl._M_finish = __cur_58;
  goto <bb 18>; [0.00%]

  <bb 14> [15.00%]:
  _12 = this_16(D)->D.38528._M_impl._M_start;

  <bb 15> [100.00%]:
  # __first_72 = PHI <_12(14), __first_74(16)>
  # __niter_71 = PHI <__n_18(D)(14), __niter_73(16)>
  if (__niter_71 == 0)
    goto <bb 17>; [15.00%]
  else
    goto <bb 16>; [85.00%]

  <bb 16> [85.00%]:
  *__first_72 = MEM[(const struct outBuff &)__val_22(D)];
  __niter_73 = __niter_71 + 18446744073709551615;
  __first_74 = __first_72 + 40;
  goto <bb 15>; [100.00%]

  <bb 17> [100.00%]:
  this_16(D)->D.38528._M_impl._M_finish = __first_72;

  <bb 18> [0.00%]:
  return;

<L6> [0.00%]:
  __tmp ={v} {CLOBBER};
  resx 1

}



;; Function std::vector<outBuff, std::allocator<outBuff> >::assign(unsigned long, outBuff const&) (_ZNSt6vectorI7outBuffSaIS0_EE6assignEmRKS0_, funcdef_no=2256, decl_uid=37998, cgraph_uid=996, symbol_order=1044)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
__val = &NONLOCAL
ESCAPED = this
ESCAPED = __n
ESCAPED = __val

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
__val = { NONLOCAL } same as this
_ZNSt6vectorI7outBuffSaIS0_EE14_M_fill_assignEmRKS0_ = { }


Alias information for std::vector<outBuff, std::allocator<outBuff> >::assign(unsigned long, outBuff const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__val_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::vector<outBuff, std::allocator<outBuff> >::assign(unsigned long, outBuff const&) (struct vector * const this, size_type __n, const struct value_type & __val)
{
  <bb 2> [0.00%]:
  std::vector<outBuff, std::allocator<outBuff> >::_M_fill_assign (this_2(D), __n_3(D), __val_4(D));
  return;

}



;; Function outputBufferInit(unsigned long) (_Z16outputBufferInitm, funcdef_no=1994, decl_uid=39026, cgraph_uid=734, symbol_order=782)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
size = &NONLOCAL
_ZL8OutMutex = NONLOCAL
OutMutex.339_1 = _ZL8OutMutex
ESCAPED = OutMutex.339_1
_ZL16NextBlockToWrite = NONLOCAL
_ZL16NextBlockToWrite = &NULL
ESCAPED = &NULL
_ZL19OutBufferPosToWrite = NONLOCAL
_ZL19OutBufferPosToWrite = &NULL
ESCAPED = &NULL
_ZL17NumBufferedBlocks = NONLOCAL
_ZL17NumBufferedBlocks = &NULL
ESCAPED = &NULL
_ZL21NumBufferedTailBlocks = NONLOCAL
_ZL21NumBufferedTailBlocks = &NULL
ESCAPED = &NULL
emptyElement = &NULL
emptyElement = &NULL
emptyElement = &NULL
emptyElement = &NULL
emptyElement = &NULL
emptyElement = &NONLOCAL
emptyElement = &NULL
emptyElement = &NULL
emptyElement = &NULL
_ZL12OutputBuffer = NONLOCAL
ESCAPED = &_ZL12OutputBuffer
ESCAPED = size
ESCAPED = &emptyElement
_26 = _ZL12OutputBuffer
_27 = _26
_28 = _ZL12OutputBuffer
_29 = _28
_30 = _27
_30 = _29
_31 = _30
_31 = &NONLOCAL
_32 = _31
stderr = NONLOCAL
stderr.341_3 = stderr
ESCAPED = stderr.341_3
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = size
_18 = NONLOCAL
OutMutex.342_4 = _ZL8OutMutex
ESCAPED = OutMutex.342_4
ESCAPED = &NONLOCAL
OutMutex.343_5 = _ZL8OutMutex
ESCAPED = OutMutex.343_5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL emptyElement _ZL12OutputBuffer }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL8OutMutex
STOREDANYTHING = { }
INTEGER = { ANYTHING }
size = { NONLOCAL }
OutMutex.339_1 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_ZL8OutMutex = { ESCAPED NONLOCAL }
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL16NextBlockToWrite = { NULL ESCAPED NONLOCAL }
_ZL19OutBufferPosToWrite = { NULL ESCAPED NONLOCAL } same as _ZL16NextBlockToWrite
_ZL17NumBufferedBlocks = { NULL ESCAPED NONLOCAL } same as _ZL16NextBlockToWrite
_ZL21NumBufferedTailBlocks = { NULL ESCAPED NONLOCAL } same as _ZL16NextBlockToWrite
emptyElement = { NULL ESCAPED NONLOCAL }
_ZNSt6vectorI7outBuffSaIS0_EE14_M_fill_assignEmRKS0_ = { }
_ZL12OutputBuffer = { ESCAPED NONLOCAL } same as _26
_26 = { ESCAPED NONLOCAL }
_27 = { ESCAPED NONLOCAL } same as _26
_28 = { ESCAPED NONLOCAL } same as _26
_29 = { ESCAPED NONLOCAL } same as _26
_30 = { ESCAPED NONLOCAL } same as _26
_31 = { ESCAPED NONLOCAL } same as _26
_32 = { ESCAPED NONLOCAL } same as _26
stderr.341_3 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
stderr = { ESCAPED NONLOCAL } same as _ZL8OutMutex
__fprintf_chk = { }
_18 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
OutMutex.342_4 = { ESCAPED NONLOCAL } same as _ZL8OutMutex
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
exit = { }
OutMutex.343_5 = { ESCAPED NONLOCAL } same as _ZL8OutMutex


Alias information for outputBufferInit(unsigned long)

Aliased symbols

emptyElement, UID D.39593, struct outBuff, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.37436 D.39593 } (nonlocal, escaped)

Flow-insensitive points-to information

OutMutex.339_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.341_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.342_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
OutMutex.343_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

outputBufferInit(unsigned long) (size_t size)
{
  size_type D.48893;
  int D.48880;
  struct outBuff emptyElement;
  union pthread_mutex_t * OutMutex.339_1;
  struct FILE * stderr.341_3;
  union pthread_mutex_t * OutMutex.342_4;
  union pthread_mutex_t * OutMutex.343_5;
  int _18;
  struct outBuff * _26;
  long int _27;
  struct outBuff * _28;
  long int _29;
  long int _30;
  long int _31;
  long unsigned int _32;

  <bb 2> [0.00%]:
  OutMutex.339_1 = OutMutex;
  safe_mutex_lock (OutMutex.339_1);

  <bb 3> [100.00%]:
  NextBlockToWrite = 0;
  OutBufferPosToWrite = 0;
  NumBufferedBlocks = 0;
  NumBufferedTailBlocks = 0;
  MEM[(struct  &)&emptyElement] ={v} {CLOBBER};
  emptyElement.buf = 0B;
  emptyElement.bufSize = 0;
  emptyElement.blockNumber = 0;
  emptyElement.sequenceNumber = 0;
  emptyElement.inSize = 0;
  emptyElement.isLastInSequence = 1;
  emptyElement.next = 0B;
  emptyElement.buf = 0B;
  emptyElement.bufSize = 0;
  std::vector<outBuff, std::allocator<outBuff> >::_M_fill_assign (&OutputBuffer, size_16(D), &emptyElement);

  <bb 4> [100.00%]:
  _26 = OutputBuffer.D.38528._M_impl._M_finish;
  _27 = (long int) _26;
  _28 = OutputBuffer.D.38528._M_impl._M_start;
  _29 = (long int) _28;
  _30 = _27 - _29;
  _31 = _30 /[ex] 40;
  _32 = (long unsigned int) _31;
  if (size_16(D) != _32)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 5> [100.00%]:
  stderr.341_3 = stderr;
  _18 = __fprintf_chk (stderr.341_3, 1, "pbzip2: *ERROR: Could not initialize (OutputBuffer); size=%lu!  Aborting...\n", size_16(D));

  <bb 6> [100.00%]:
  OutMutex.342_4 = OutMutex;
  safe_mutex_unlock (OutMutex.342_4);

  <bb 7> [0.00%]:
  exit (1);

  <bb 8> [0.00%]:
  OutMutex.343_5 = OutMutex;
  safe_mutex_unlock (OutMutex.343_5);

  <bb 9> [0.00%]:
  emptyElement ={v} {CLOBBER};
  return;

<L2> [0.00%]:
  emptyElement ={v} {CLOBBER};
  resx 1

}



;; Function _GLOBAL__sub_I__Z20safe_cond_timed_waitP14pthread_cond_tP15pthread_mutex_tiPKc (_GLOBAL__sub_I__Z20safe_cond_timed_waitP14pthread_cond_tP15pthread_mutex_tiPKc, funcdef_no=2655, decl_uid=45282, cgraph_uid=1395, symbol_order=1959)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_Z41__static_initialization_and_destruction_0ii = { }


Alias information for _GLOBAL__sub_I__Z20safe_cond_timed_waitP14pthread_cond_tP15pthread_mutex_tiPKc

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


_GLOBAL__sub_I__Z20safe_cond_timed_waitP14pthread_cond_tP15pthread_mutex_tiPKc ()
{
  <bb 2> [0.00%]:
  __static_initialization_and_destruction_0 (1, 65535);
  return;

}



;; Function producer_decompress(int, long, queue*) (_Z19producer_decompressilP5queue, funcdef_no=1981, decl_uid=39006, cgraph_uid=721, symbol_order=769)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
hInfile = &NONLOCAL
fileSize = &NONLOCAL
fifo = &NONLOCAL
_ZL23ProgressIndicatorsMutex = NONLOCAL
ESCAPED = &_ZL23ProgressIndicatorsMutex
_ZL15InBytesProduced = NONLOCAL
_ZL15InBytesProduced = &NULL
ESCAPED = &NULL
_ZL9NumBlocks = NONLOCAL
_ZL9NumBlocks = &NULL
ESCAPED = &NULL
ESCAPED = &_ZL23ProgressIndicatorsMutex
ESCAPED = &bz2StreamScanner
ESCAPED = hInfile
ESCAPED = &NONLOCAL
ESCAPED = &bz2StreamScanner
_66 = NONLOCAL
fileData = _66
_74 = bz2StreamScanner
fileData.101_4 = fileData
_5 = *fileData.101_4 + 64
iftmp.100_100 = &NONLOCAL
NumBlocks.103_6 = _ZL9NumBlocks
ESCAPED = hInfile
ESCAPED = &fileData
ESCAPED = NumBlocks.103_6
_92 = NONLOCAL
iftmp.100_130 = &NULL
iftmp.100_130 = &NULL
ESCAPED = hInfile
_8 = *fifo + 448
ESCAPED = _8
_9 = *fifo + 576
ESCAPED = _9
_10 = *fifo + 448
ESCAPED = _10
ESCAPED = &NONLOCAL
_ZL9QuietMode = NONLOCAL
QuietMode.104_11 = _ZL9QuietMode
fileData.105_12 = fileData
_13 = *fileData.105_12 + 64
fileData.106_14 = fileData
_15 = *fileData.106_14 + 64
_16 = _15
stderr = NONLOCAL
stderr.107_17 = stderr
ESCAPED = stderr.107_17
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _16
_77 = NONLOCAL
stderr.108_18 = stderr
ESCAPED = stderr.108_18
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_76 = NONLOCAL
_19 = *fifo + 448
ESCAPED = _19
_20 = *fifo + 320
_21 = *fifo + 448
_22 = *fifo + 512
ESCAPED = _22
ESCAPED = _21
NumBlocks.110_23 = _ZL9NumBlocks
ESCAPED = hInfile
ESCAPED = &fileData
ESCAPED = NumBlocks.110_23
_99 = NONLOCAL
_25 = *fifo + 576
ESCAPED = _25
ESCAPED = &NONLOCAL
_26 = *fifo + 448
ESCAPED = _26
fileData.111_27 = fileData
ESCAPED = fifo
ESCAPED = fileData.111_27
_28 = *fifo + 576
ESCAPED = _28
ESCAPED = &_ZL23ProgressIndicatorsMutex
fileData.112_29 = fileData
_30 = *fileData.112_29 + 64
_31 = _30
InBytesProduced.113_32 = _ZL15InBytesProduced
_33 = _31
_33 = InBytesProduced.113_32
_ZL15InBytesProduced = _33
ESCAPED = _33
fileData.114_34 = fileData
_35 = *fileData.114_34 + 96
_36 = _35
_36 = &NONLOCAL
_ZL9NumBlocks = _36
ESCAPED = _36
ESCAPED = &_ZL23ProgressIndicatorsMutex
_37 = *fifo + 448
ESCAPED = _37
ESCAPED = &bz2StreamScanner
_113 = NONLOCAL
fileData = _113
fileData.115_39 = fileData
ESCAPED = fileData.115_39
ESCAPED = &NONLOCAL
_126 = bz2StreamScanner
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_128 = bz2StreamScanner
_41 = _128
_129 = bz2StreamScanner
_43 = _129
iftmp.118_93 = &NULL
ESCAPED = &NONLOCAL
iftmp.118_3 = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_44 = *fifo + 448
ESCAPED = _44
_45 = *fifo + 576
ESCAPED = _45
_46 = *fifo + 448
ESCAPED = _46
_48 = &NULL
_48 = &NULL
_48 = &NONLOCAL
_48 = &NONLOCAL
_48 = &NULL
ESCAPED = &bz2StreamScanner
ESCAPED = _48
ESCAPED = &bz2StreamScanner

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZL23ProgressIndicatorsMutex bz2StreamScanner fileData }
NONLOCAL = { ESCAPED NONLOCAL } same as _66
STOREDANYTHING = { }
INTEGER = { ANYTHING }
hInfile = { NONLOCAL }
fileSize = { NONLOCAL } same as hInfile
fifo = { NONLOCAL } same as hInfile
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL23ProgressIndicatorsMutex = { ESCAPED NONLOCAL }
_ZL15InBytesProduced = { NULL ESCAPED NONLOCAL }
_ZL9NumBlocks = { NULL ESCAPED NONLOCAL }
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
_ZN6pbzip216BZ2StreamScannerC1Eim = { }
bz2StreamScanner = { ESCAPED NONLOCAL } same as _74
_ZN6pbzip216BZ2StreamScanner13getNextStreamEv = { }
_66 = { ESCAPED NONLOCAL }
fileData = { ESCAPED NONLOCAL } same as fileData.101_4
_74 = { ESCAPED NONLOCAL }
_68 = { }
fileData.101_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
iftmp.100_100 = { NONLOCAL } same as hInfile
NumBlocks.103_6 = { NULL ESCAPED NONLOCAL } same as _ZL9NumBlocks
_Z32producerDecompressCheckInterruptiRP7outBuffi = { }
_92 = { ESCAPED NONLOCAL } same as _66
iftmp.100_130 = { NULL }
close = { }
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_Z19safe_cond_broadcastP14pthread_cond_t = { }
_10 = { ESCAPED NONLOCAL }
_Z19syncSetProducerDonei = { }
QuietMode.104_11 = { ESCAPED NONLOCAL } same as _66
_ZL9QuietMode = { ESCAPED NONLOCAL } same as _66
fileData.105_12 = { ESCAPED NONLOCAL } same as fileData.101_4
_13 = { ESCAPED NONLOCAL }
fileData.106_14 = { ESCAPED NONLOCAL } same as fileData.101_4
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL } same as _15
stderr.107_17 = { ESCAPED NONLOCAL } same as _66
stderr = { ESCAPED NONLOCAL } same as _66
__fprintf_chk = { }
_77 = { ESCAPED NONLOCAL } same as _66
stderr.108_18 = { ESCAPED NONLOCAL } same as _66
_76 = { ESCAPED NONLOCAL } same as _66
_19 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL }
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL }
_Z14safe_cond_waitP14pthread_cond_tP15pthread_mutex_t = { }
NumBlocks.110_23 = { NULL ESCAPED NONLOCAL } same as _ZL9NumBlocks
_99 = { ESCAPED NONLOCAL } same as _66
_25 = { ESCAPED NONLOCAL }
_26 = { ESCAPED NONLOCAL }
fileData.111_27 = { ESCAPED NONLOCAL } same as fileData.101_4
_ZN5queue3addEP7outBuff = { }
_28 = { ESCAPED NONLOCAL }
_Z16safe_cond_signalP14pthread_cond_t = { }
fileData.112_29 = { ESCAPED NONLOCAL } same as fileData.101_4
_30 = { ESCAPED NONLOCAL }
_31 = { ESCAPED NONLOCAL } same as _30
InBytesProduced.113_32 = { NULL ESCAPED NONLOCAL } same as _ZL15InBytesProduced
_33 = { NULL ESCAPED NONLOCAL } same as _ZL15InBytesProduced
fileData.114_34 = { ESCAPED NONLOCAL } same as fileData.101_4
_35 = { ESCAPED NONLOCAL }
_36 = { ESCAPED NONLOCAL }
_37 = { ESCAPED NONLOCAL }
_113 = { ESCAPED NONLOCAL } same as _66
fileData.115_39 = { ESCAPED NONLOCAL } same as fileData.101_4
_ZdlPvm = { }
_126 = { ESCAPED NONLOCAL } same as _74
_Z12handle_error8ExitFlagiPKcz = { }
_128 = { ESCAPED NONLOCAL } same as _74
_41 = { ESCAPED NONLOCAL } same as _74
_129 = { ESCAPED NONLOCAL } same as _74
_43 = { ESCAPED NONLOCAL } same as _74
iftmp.118_93 = { NULL } same as iftmp.100_130
iftmp.118_3 = { NONLOCAL } same as hInfile
_44 = { ESCAPED NONLOCAL }
_45 = { ESCAPED NONLOCAL }
_46 = { ESCAPED NONLOCAL }
_48 = { NULL NONLOCAL }
_ZN6pbzip216BZ2StreamScannerD1Ev = { }


Alias information for producer_decompress(int, long, queue*)

Aliased symbols

fileData, UID D.39377, struct outBuff *, is addressable
bz2StreamScanner, UID D.39376, struct BZ2StreamScanner, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.38686 D.39376 D.39377 } (nonlocal, escaped)

Flow-insensitive points-to information

fileData.101_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.105_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.106_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.107_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.108_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.111_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.112_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.114_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fileData.115_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_44, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_45, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_46, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_66, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fifo_82(D), points-to non-local, points-to NULL, points-to vars: { }
_113, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

producer_decompress(int, long, queue*) (int hInfile, off_t fileSize, struct queue * fifo)
{
  bool D.48909;
  bool D.48907;
  bool D.48905;
  bool D.48903;
  int D.48901;
  int D.48898;
  struct outBuff * fileData;
  struct BZ2StreamScanner bz2StreamScanner;
  bool iftmp.118_3;
  struct outBuff * fileData.101_4;
  unsigned int _5;
  int NumBlocks.103_6;
  union pthread_mutex_t * _8;
  union pthread_cond_t * _9;
  union pthread_mutex_t * _10;
  int QuietMode.104_11;
  struct outBuff * fileData.105_12;
  unsigned int _13;
  struct outBuff * fileData.106_14;
  unsigned int _15;
  long unsigned int _16;
  struct FILE * stderr.107_17;
  struct FILE * stderr.108_18;
  union pthread_mutex_t * _19;
  int _20;
  union pthread_mutex_t * _21;
  union pthread_cond_t * _22;
  int NumBlocks.110_23;
  union pthread_cond_t * _25;
  union pthread_mutex_t * _26;
  struct outBuff * fileData.111_27;
  union pthread_cond_t * _28;
  struct outBuff * fileData.112_29;
  unsigned int _30;
  long int _31;
  long int InBytesProduced.113_32;
  long int _33;
  struct outBuff * fileData.114_34;
  int _35;
  int _36;
  union pthread_mutex_t * _37;
  struct outBuff * fileData.115_39;
  bool _41;
  bool _43;
  union pthread_mutex_t * _44;
  union pthread_cond_t * _45;
  union pthread_mutex_t * _46;
  int _48;
  struct outBuff * _66;
  bool _68;
  unsigned int _74;
  int _76;
  int _77;
  int _92;
  bool iftmp.118_93;
  int _99;
  bool iftmp.100_100;
  struct outBuff * _113;
  unsigned int _126;
  bool _128;
  bool _129;
  bool iftmp.100_130;

  <bb 2> [0.00%]:
  safe_mutex_lock (&ProgressIndicatorsMutex);

  <bb 3> [0.00%]:
  InBytesProduced = 0;
  NumBlocks = 0;
  safe_mutex_unlock (&ProgressIndicatorsMutex);

  <bb 4> [0.00%]:
  pbzip2::BZ2StreamScanner::BZ2StreamScanner (&bz2StreamScanner, hInfile_63(D), 1048576);

  <bb 5> [0.00%]:
  _66 = pbzip2::BZ2StreamScanner::getNextStream (&bz2StreamScanner);

  <bb 6> [0.00%]:
  fileData = _66;

  <bb 7> [100.00%]:
  _74 = bz2StreamScanner._errState;
  _68 = _74 != 0;
  if (_74 == 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 8> [0.00%]:
  fileData.101_4 = fileData;
  _5 = fileData.101_4->bufSize;
  if (_5 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  # iftmp.100_100 = PHI <1(8)>
  NumBlocks.103_6 = NumBlocks;
  _92 = producerDecompressCheckInterrupt (hInfile_63(D), &fileData, NumBlocks.103_6);
  goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  # iftmp.100_130 = PHI <0(8), 0(7)>
  close (hInfile_63(D));
  goto <bb 34>; [0.00%]

  <bb 11> [0.00%]:
  if (_92 != 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 12> [0.00%]:
  _8 = fifo_82(D)->mut;
  safe_mutex_lock (_8);

  <bb 13> [0.00%]:
  _9 = fifo_82(D)->notEmpty;
  safe_cond_broadcast (_9);

  <bb 14> [0.00%]:
  _10 = fifo_82(D)->mut;
  safe_mutex_unlock (_10);

  <bb 15> [0.00%]:
  syncSetProducerDone (1);
  goto <bb 44>; [0.00%]

  <bb 16> [0.00%]:
  QuietMode.104_11 = QuietMode;
  if (QuietMode.104_11 != 1)
    goto <bb 17>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 17> [0.00%]:
  fileData.105_12 = fileData;
  _13 = fileData.105_12->bufSize;
  if (_13 > 250000000)
    goto <bb 18>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 18> [100.00%]:
  fileData.106_14 = fileData;
  _15 = fileData.106_14->bufSize;
  _16 = (long unsigned int) _15;
  stderr.107_17 = stderr;
  _77 = __fprintf_chk (stderr.107_17, 1, "pbzip2:  *WARNING: Compressed block size is large [%lu bytes].\n", _16);

  <bb 19> [100.00%]:
  stderr.108_18 = stderr;
  _76 = __fprintf_chk (stderr.108_18, 1, "          If program aborts, use regular BZIP2 to decompress.\n");

  <bb 20> [0.00%]:
  _19 = fifo_82(D)->mut;
  safe_mutex_lock (_19);

  <bb 21> [0.00%]:
  _20 = fifo_82(D)->full;
  if (_20 == 0)
    goto <bb 28>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 22> [0.00%]:
  _21 = fifo_82(D)->mut;
  _22 = fifo_82(D)->notFull;
  safe_cond_wait (_22, _21);

  <bb 23> [0.00%]:
  NumBlocks.110_23 = NumBlocks;
  _99 = producerDecompressCheckInterrupt (hInfile_63(D), &fileData, NumBlocks.110_23);

  <bb 24> [0.00%]:
  if (_99 != 0)
    goto <bb 25>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 25> [0.00%]:
  _25 = fifo_82(D)->notEmpty;
  safe_cond_broadcast (_25);

  <bb 26> [0.00%]:
  syncSetProducerDone (1);

  <bb 27> [0.00%]:
  _26 = fifo_82(D)->mut;
  safe_mutex_unlock (_26);
  goto <bb 44>; [0.00%]

  <bb 28> [0.00%]:
  fileData.111_27 = fileData;
  queue::add (fifo_82(D), fileData.111_27);
  _28 = fifo_82(D)->notEmpty;
  safe_cond_signal (_28);

  <bb 29> [0.00%]:
  safe_mutex_lock (&ProgressIndicatorsMutex);

  <bb 30> [0.00%]:
  fileData.112_29 = fileData;
  _30 = fileData.112_29->bufSize;
  _31 = (long int) _30;
  InBytesProduced.113_32 = InBytesProduced;
  _33 = _31 + InBytesProduced.113_32;
  InBytesProduced = _33;
  fileData.114_34 = fileData;
  _35 = fileData.114_34->blockNumber;
  _36 = _35 + 1;
  NumBlocks = _36;
  safe_mutex_unlock (&ProgressIndicatorsMutex);

  <bb 31> [0.00%]:
  _37 = fifo_82(D)->mut;
  safe_mutex_unlock (_37);

  <bb 32> [0.00%]:
  _113 = pbzip2::BZ2StreamScanner::getNextStream (&bz2StreamScanner);

  <bb 33> [0.00%]:
  fileData = _113;
  goto <bb 7>; [0.00%]

  <bb 34> [100.00%]:
  fileData.115_39 = fileData;
  operator delete (fileData.115_39, 40);
  _126 = bz2StreamScanner._errState;
  if (_126 != 0)
    goto <bb 35>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 35> [0.00%]:
  handle_error (1, 1, "pbzip2: producer_decompress: *ERROR: when reading bzip2 input stream\n");
  goto <bb 44>; [0.00%]

  <bb 36> [100.00%]:
  _128 = bz2StreamScanner._bz2HeaderFound;
  _41 = ~_128;
  if (_128 != 0)
    goto <bb 37>; [0.00%]
  else
    goto <bb 39>; [0.00%]

  <bb 37> [100.00%]:
  _129 = bz2StreamScanner._eof;
  _43 = ~_129;
  if (_129 != 0)
    goto <bb 38>; [0.00%]
  else
    goto <bb 39>; [0.00%]

  <bb 38> [0.00%]:
  # iftmp.118_93 = PHI <0(37)>
  syncSetProducerDone (1);
  goto <bb 41>; [0.00%]

  <bb 39> [0.00%]:

  <bb 40> [0.00%]:
  # iftmp.118_3 = PHI <1(39)>
  handle_error (1, 1, "pbzip2: producer_decompress: *ERROR: input file is not a valid bzip2 stream\n");
  goto <bb 44>; [0.00%]

  <bb 41> [0.00%]:
  _44 = fifo_82(D)->mut;
  safe_mutex_lock (_44);

  <bb 42> [0.00%]:
  _45 = fifo_82(D)->notEmpty;
  safe_cond_broadcast (_45);

  <bb 43> [0.00%]:
  _46 = fifo_82(D)->mut;
  safe_mutex_unlock (_46);

  <bb 44> [0.00%]:
  # _48 = PHI <0(15), 0(27), -1(35), -1(40), 0(43)>
  pbzip2::BZ2StreamScanner::~BZ2StreamScanner (&bz2StreamScanner);
  bz2StreamScanner ={v} {CLOBBER};
  fileData ={v} {CLOBBER};
  return _48;

<L31> [0.00%]:
  pbzip2::BZ2StreamScanner::~BZ2StreamScanner (&bz2StreamScanner);
  resx 2

<L32> [0.00%]:
  bz2StreamScanner ={v} {CLOBBER};
  fileData ={v} {CLOBBER};
  resx 1

}



;; Function main (main, funcdef_no=2005, decl_uid=39705, cgraph_uid=748, symbol_order=796)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
argc = &NONLOCAL
argv = &NONLOCAL
outFilename = &outFilename
outFilename = &NULL
outFilename = &NULL
_849 = NONLOCAL
ESCAPED = &tvStartTime
ESCAPED = &tz
_ZL12OutputStdOut = NONLOCAL
_ZL12OutputStdOut = &NONLOCAL
ESCAPED = &NONLOCAL
keep_684 = &NULL
keep_684 = &NONLOCAL
progName_856 = *argv
progNamePos_857 = *argv
progName_295 = progName_856
progName_295 = progName_297
progNamePos_296 = progNamePos_857
progNamePos_296 = progNamePos_859
_2 = *progNamePos_296
_3 = *progNamePos_296
progName_858 = progNamePos_296
progName_297 = progName_295
progName_297 = progName_858
progNamePos_859 = progNamePos_296
_1161 = progName_295
_1161 = &NULL
_1164 = progName_295
_1164 = &NULL
decompress_647 = &NULL
decompress_647 = &NONLOCAL
_1119 = progName_295
_1119 = &NULL
_1122 = progName_295
_1122 = &NULL
_ZL12OutputStdOut = &NONLOCAL
ESCAPED = &NONLOCAL
decompress_863 = _ZL12OutputStdOut
decompress_648 = decompress_647
decompress_648 = decompress_863
keep_685 = keep_684
keep_685 = &NONLOCAL
CALLUSED(38) = CALLUSED(38) + UNKNOWN
CALLUSED(38) = *CALLUSED(38) + UNKNOWN
CALLUSED(38) = progName_295
CALLUSED(38) = &STRING
_8 = CALLUSED(38)
_8 = NONLOCAL
CALLUSED(41) = CALLUSED(41) + UNKNOWN
CALLUSED(41) = *CALLUSED(41) + UNKNOWN
CALLUSED(41) = progName_295
CALLUSED(41) = &STRING
_9 = CALLUSED(41)
_9 = NONLOCAL
CALLUSED(44) = CALLUSED(44) + UNKNOWN
CALLUSED(44) = *CALLUSED(44) + UNKNOWN
CALLUSED(44) = progName_295
CALLUSED(44) = &STRING
_10 = CALLUSED(44)
_10 = NONLOCAL
CALLUSED(47) = CALLUSED(47) + UNKNOWN
CALLUSED(47) = *CALLUSED(47) + UNKNOWN
CALLUSED(47) = progName_295
CALLUSED(47) = &STRING
_11 = CALLUSED(47)
_11 = NONLOCAL
CALLUSED(50) = CALLUSED(50) + UNKNOWN
CALLUSED(50) = *CALLUSED(50) + UNKNOWN
CALLUSED(50) = progName_295
CALLUSED(50) = &STRING
_12 = CALLUSED(50)
_12 = NONLOCAL
CALLUSED(53) = CALLUSED(53) + UNKNOWN
CALLUSED(53) = *CALLUSED(53) + UNKNOWN
CALLUSED(53) = progName_295
CALLUSED(53) = &STRING
_13 = CALLUSED(53)
_13 = NONLOCAL
_ZL25IgnoreTrailingGarbageFlag = NONLOCAL
_ZL25IgnoreTrailingGarbageFlag = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL13FileListCount = NONLOCAL
_ZL13FileListCount = &NULL
ESCAPED = &NULL
_866 = argc
iftmp.451_868 = _866
iftmp.451_868 = &NONLOCAL
ESCAPED = iftmp.451_868
_ZSt7nothrow = NONLOCAL
ESCAPED = &_ZSt7nothrow
_14 = NONLOCAL
stderr = NONLOCAL
stderr.453_16 = stderr
ESCAPED = stderr.453_16
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1409 = NONLOCAL
_ZL20NumBufferedBlocksMax = NONLOCAL
_ZL20NumBufferedBlocksMax = &NULL
ESCAPED = &NULL
_17 = NONLOCAL
_ZL6numCPU = NONLOCAL
_ZL6numCPU = _17
ESCAPED = _17
numCPUtotal_875 = _ZL6numCPU
useLoadAverage_608 = &NULL
useLoadAverage_608 = useLoadAverage_612
readEntireFile_618 = &NULL
readEntireFile_618 = readEntireFile_622
blockSize_632 = &NONLOCAL
blockSize_632 = blockSize_635
maxMemory_639 = &NONLOCAL
maxMemory_639 = maxMemory_642
maxMemorySwitch_643 = &NULL
maxMemorySwitch_643 = maxMemorySwitch_646
decompress_649 = decompress_648
decompress_649 = decompress_653
compress_654 = &NULL
compress_654 = compress_658
testFile_659 = &NULL
testFile_659 = testFile_663
keep_686 = keep_685
keep_686 = keep_690
force_693 = &NULL
force_693 = force_697
i_699 = &NONLOCAL
i_699 = i_985
_18 = i_699
_19 = i_699
_19 = &NONLOCAL
_20 = argv
_21 = *_20
_22 = *_21
_23 = i_699
_23 = &NONLOCAL
_24 = argv
_25 = *_24
_27 = *_25
_28 = i_699
_28 = &NONLOCAL
_29 = argv
FileListCount.455_31 = _ZL13FileListCount
_32 = FileListCount.455_31
_33 = _32
_33 = &NONLOCAL
_34 = _14
_35 = *_29
*_34 = _35
FileListCount.456_36 = _ZL13FileListCount
_37 = FileListCount.456_36
_37 = &NONLOCAL
_ZL13FileListCount = _37
ESCAPED = _37
_38 = i_699
_38 = &NONLOCAL
_39 = argv
_40 = *_39
_42 = *_40
_43 = i_699
_43 = &NONLOCAL
_44 = argv
_45 = *_44
CALLUSED(120) = CALLUSED(120) + UNKNOWN
CALLUSED(120) = *CALLUSED(120) + UNKNOWN
CALLUSED(120) = _45
CALLUSED(120) = &STRING
_46 = CALLUSED(120)
_46 = NONLOCAL
_ZL12BWTblockSize = NONLOCAL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
_47 = i_699
_47 = &NONLOCAL
_48 = argv
_49 = *_48
CALLUSED(127) = CALLUSED(127) + UNKNOWN
CALLUSED(127) = *CALLUSED(127) + UNKNOWN
CALLUSED(127) = _49
CALLUSED(127) = &STRING
_50 = CALLUSED(127)
_50 = NONLOCAL
_51 = i_699
_51 = &NONLOCAL
_52 = argv
_53 = *_52
CALLUSED(133) = CALLUSED(133) + UNKNOWN
CALLUSED(133) = *CALLUSED(133) + UNKNOWN
CALLUSED(133) = _53
CALLUSED(133) = &STRING
_54 = CALLUSED(133)
_54 = NONLOCAL
_55 = i_699
_55 = &NONLOCAL
_56 = argv
_57 = *_56
CALLUSED(139) = CALLUSED(139) + UNKNOWN
CALLUSED(139) = *CALLUSED(139) + UNKNOWN
CALLUSED(139) = _57
CALLUSED(139) = &STRING
_58 = CALLUSED(139)
_58 = NONLOCAL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
_59 = i_699
_59 = &NONLOCAL
_60 = argv
_61 = *_60
CALLUSED(145) = CALLUSED(145) + UNKNOWN
CALLUSED(145) = *CALLUSED(145) + UNKNOWN
CALLUSED(145) = _61
CALLUSED(145) = &STRING
_62 = CALLUSED(145)
_62 = NONLOCAL
_ZL14ForceOverwrite = NONLOCAL
_ZL14ForceOverwrite = &NONLOCAL
ESCAPED = &NONLOCAL
_63 = i_699
_63 = &NONLOCAL
_64 = argv
_65 = *_64
CALLUSED(152) = CALLUSED(152) + UNKNOWN
CALLUSED(152) = *CALLUSED(152) + UNKNOWN
CALLUSED(152) = _65
CALLUSED(152) = &STRING
_66 = CALLUSED(152)
_66 = NONLOCAL
_67 = *argv
ESCAPED = _67
ESCAPED = &STRING
_68 = i_699
_68 = &NONLOCAL
_69 = argv
_70 = *_69
CALLUSED(160) = CALLUSED(160) + UNKNOWN
CALLUSED(160) = *CALLUSED(160) + UNKNOWN
CALLUSED(160) = _70
CALLUSED(160) = &STRING
_71 = CALLUSED(160)
_71 = NONLOCAL
_72 = i_699
_72 = &NONLOCAL
_73 = argv
_74 = *_73
CALLUSED(166) = CALLUSED(166) + UNKNOWN
CALLUSED(166) = *CALLUSED(166) + UNKNOWN
CALLUSED(166) = _74
CALLUSED(166) = &STRING
_75 = CALLUSED(166)
_75 = NONLOCAL
_76 = *argv
ESCAPED = _76
ESCAPED = &STRING
_77 = i_699
_77 = &NONLOCAL
_78 = argv
_79 = *_78
CALLUSED(173) = CALLUSED(173) + UNKNOWN
CALLUSED(173) = *CALLUSED(173) + UNKNOWN
CALLUSED(173) = _79
CALLUSED(173) = &STRING
_80 = CALLUSED(173)
_80 = NONLOCAL
_81 = i_699
_81 = &NONLOCAL
_82 = argv
_83 = *_82
CALLUSED(179) = CALLUSED(179) + UNKNOWN
CALLUSED(179) = *CALLUSED(179) + UNKNOWN
CALLUSED(179) = _83
CALLUSED(179) = &STRING
_84 = CALLUSED(179)
_84 = NONLOCAL
_ZL9QuietMode = NONLOCAL
_ZL9QuietMode = &NONLOCAL
ESCAPED = &NONLOCAL
_85 = i_699
_85 = &NONLOCAL
_86 = argv
_87 = *_86
CALLUSED(186) = CALLUSED(186) + UNKNOWN
CALLUSED(186) = *CALLUSED(186) + UNKNOWN
CALLUSED(186) = _87
CALLUSED(186) = &STRING
_88 = CALLUSED(186)
_88 = NONLOCAL
_89 = i_699
_89 = &NONLOCAL
_90 = argv
_91 = *_90
CALLUSED(192) = CALLUSED(192) + UNKNOWN
CALLUSED(192) = *CALLUSED(192) + UNKNOWN
CALLUSED(192) = _91
CALLUSED(192) = &STRING
_92 = CALLUSED(192)
_92 = NONLOCAL
_ZL12OutputStdOut = &NONLOCAL
ESCAPED = &NONLOCAL
_93 = i_699
_93 = &NONLOCAL
_94 = argv
_95 = *_94
CALLUSED(198) = CALLUSED(198) + UNKNOWN
CALLUSED(198) = *CALLUSED(198) + UNKNOWN
CALLUSED(198) = _95
CALLUSED(198) = &STRING
_96 = CALLUSED(198)
_96 = NONLOCAL
_97 = i_699
_97 = &NONLOCAL
_98 = argv
_99 = *_98
CALLUSED(204) = CALLUSED(204) + UNKNOWN
CALLUSED(204) = *CALLUSED(204) + UNKNOWN
CALLUSED(204) = _99
CALLUSED(204) = &STRING
_100 = CALLUSED(204)
_100 = NONLOCAL
_ZL9QuietMode = &NULL
ESCAPED = &NULL
_101 = i_699
_101 = &NONLOCAL
_102 = argv
_103 = *_102
CALLUSED(210) = CALLUSED(210) + UNKNOWN
CALLUSED(210) = *CALLUSED(210) + UNKNOWN
CALLUSED(210) = _103
CALLUSED(210) = &STRING
_104 = CALLUSED(210)
_104 = NONLOCAL
ESCAPED = &NULL
_105 = i_699
_105 = &NONLOCAL
_106 = argv
_107 = *_106
CALLUSED(218) = CALLUSED(218) + UNKNOWN
CALLUSED(218) = *CALLUSED(218) + UNKNOWN
CALLUSED(218) = _107
CALLUSED(218) = &STRING
_108 = CALLUSED(218)
_108 = NONLOCAL
_ZL25IgnoreTrailingGarbageFlag = &NONLOCAL
ESCAPED = &NONLOCAL
_109 = i_699
_109 = &NONLOCAL
_110 = argv
_111 = *_110
CALLUSED(224) = CALLUSED(224) + UNKNOWN
CALLUSED(224) = *CALLUSED(224) + UNKNOWN
CALLUSED(224) = _111
CALLUSED(224) = &STRING
_112 = CALLUSED(224)
_112 = NONLOCAL
_ZL25IgnoreTrailingGarbageFlag = &NONLOCAL
ESCAPED = &NONLOCAL
_113 = i_699
_113 = &NONLOCAL
_114 = argv
_115 = *_114
CALLUSED(230) = CALLUSED(230) + UNKNOWN
CALLUSED(230) = *CALLUSED(230) + UNKNOWN
CALLUSED(230) = _115
CALLUSED(230) = &STRING
_116 = CALLUSED(230)
_116 = NONLOCAL
_ZL25IgnoreTrailingGarbageFlag = &NULL
ESCAPED = &NULL
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = &NONLOCAL
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
useLoadAverage_609 = useLoadAverage_608
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = &NONLOCAL
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
readEntireFile_619 = readEntireFile_618
decompress_650 = decompress_649
decompress_650 = &NONLOCAL
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
decompress_650 = decompress_649
compress_655 = compress_654
compress_655 = compress_654
compress_655 = &NONLOCAL
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
compress_655 = compress_654
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = &NONLOCAL
testFile_660 = testFile_659
testFile_660 = testFile_659
testFile_660 = testFile_659
keep_687 = keep_686
keep_687 = keep_686
keep_687 = keep_686
keep_687 = keep_686
keep_687 = keep_686
keep_687 = keep_686
keep_687 = &NONLOCAL
keep_687 = keep_686
keep_687 = keep_686
keep_687 = keep_686
keep_687 = keep_686
keep_687 = &NONLOCAL
keep_687 = keep_686
keep_687 = keep_686
keep_687 = keep_686
keep_687 = keep_686
force_694 = force_693
force_694 = force_693
force_694 = force_693
force_694 = force_693
force_694 = &NONLOCAL
force_694 = force_693
force_694 = force_693
force_694 = force_693
force_694 = force_693
force_694 = force_693
force_694 = force_693
force_694 = force_693
force_694 = force_693
force_694 = force_693
force_694 = force_693
force_694 = force_693
useLoadAverage_610 = useLoadAverage_608
useLoadAverage_610 = useLoadAverage_611
readEntireFile_620 = readEntireFile_618
readEntireFile_620 = readEntireFile_621
blockSize_633 = blockSize_632
blockSize_633 = blockSize_634
maxMemory_640 = maxMemory_639
maxMemory_640 = maxMemory_641
maxMemorySwitch_644 = maxMemorySwitch_643
maxMemorySwitch_644 = maxMemorySwitch_645
decompress_651 = decompress_649
decompress_651 = decompress_652
compress_656 = compress_654
compress_656 = compress_657
testFile_661 = testFile_659
testFile_661 = testFile_662
keep_688 = keep_686
keep_688 = keep_689
force_695 = force_693
force_695 = force_696
j_703 = &NONLOCAL
j_703 = j_961
_117 = i_699
_117 = &NONLOCAL
_118 = argv
_119 = *_118
_120 = _119
_121 = *_120
_122 = i_699
_122 = &NONLOCAL
_123 = argv
_124 = *_123
_125 = _124
_126 = *_125
_127 = _126
k_885 = j_703
k_885 = &NONLOCAL
_1383 = &cmdLineTemp
_1671 = _1383
cmdLineTempCount_614 = &NULL
cmdLineTempCount_614 = cmdLineTempCount_889
k_705 = k_885
k_705 = k_888
_128 = i_699
_128 = &NONLOCAL
_129 = argv
_130 = *_129
_131 = _130
_132 = *_131
_133 = i_699
_133 = &NONLOCAL
_134 = argv
_135 = *_134
_136 = _135
_137 = *_136
_138 = _137
_139 = _138
_139 = &NONLOCAL
k_888 = k_705
k_888 = &NONLOCAL
cmdLineTempCount_889 = cmdLineTempCount_614
cmdLineTempCount_889 = &NONLOCAL
_140 = *argv
ESCAPED = _140
ESCAPED = &STRING
_141 = cmdLineTempCount_614
_142 = i_699
_142 = &NONLOCAL
_143 = argv
_144 = *_143
_145 = j_703
_145 = &NONLOCAL
_146 = _144
_1354 = &cmdLineTemp
cmdLineTemp = *_146
_1673 = _1354
cmdLineTemp = &NULL
ESCAPED = &cmdLineTemp
ESCAPED = &NULL
ESCAPED = &NONLOCAL
_1379 = NONLOCAL
_1283 = _1379
_ZL6numCPU = _1283
ESCAPED = _1283
numCPU.457_148 = _ZL6numCPU
stderr.458_149 = stderr
ESCAPED = stderr.458_149
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1324 = NONLOCAL
numCPU.459_150 = _ZL6numCPU
stderr.460_151 = stderr
ESCAPED = stderr.460_151
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1252 = NONLOCAL
_152 = cmdLineTempCount_614
j_894 = _152
j_894 = j_703
k_921 = j_703
k_921 = &NONLOCAL
_1248 = &cmdLineTemp
_1689 = _1248
cmdLineTempCount_615 = &NULL
cmdLineTempCount_615 = cmdLineTempCount_926
k_706 = k_921
k_706 = k_925
_153 = i_699
_153 = &NONLOCAL
_154 = argv
_155 = *_154
_156 = _155
_157 = *_156
_158 = i_699
_158 = &NONLOCAL
_159 = argv
_160 = *_159
_161 = _160
_162 = *_161
_163 = _162
_164 = _163
_164 = &NONLOCAL
k_925 = k_706
k_925 = &NONLOCAL
cmdLineTempCount_926 = cmdLineTempCount_615
cmdLineTempCount_926 = &NONLOCAL
_165 = *argv
ESCAPED = _165
ESCAPED = &STRING
_166 = cmdLineTempCount_615
_167 = i_699
_167 = &NONLOCAL
_168 = argv
_169 = *_168
_170 = j_703
_170 = &NONLOCAL
_171 = _169
_1220 = &cmdLineTemp
cmdLineTemp = *_171
_1691 = _1220
cmdLineTemp = &NULL
ESCAPED = &cmdLineTemp
ESCAPED = &NULL
ESCAPED = &NONLOCAL
_1244 = NONLOCAL
_1233 = _1244
blockSize_930 = _1233
blockSize_930 = &NONLOCAL
blockSize.461_173 = blockSize_930
_174 = blockSize.461_173
_174 = &NONLOCAL
stderr.462_175 = stderr
ESCAPED = stderr.462_175
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1207 = NONLOCAL
_176 = cmdLineTempCount_615
j_931 = _176
j_931 = j_703
k_899 = j_703
k_899 = &NONLOCAL
_1201 = &cmdLineTemp
_1681 = _1201
cmdLineTempCount_616 = &NULL
cmdLineTempCount_616 = cmdLineTempCount_904
k_707 = k_899
k_707 = k_903
_177 = i_699
_177 = &NONLOCAL
_178 = argv
_179 = *_178
_180 = _179
_181 = *_180
_182 = i_699
_182 = &NONLOCAL
_183 = argv
_184 = *_183
_185 = _184
_186 = *_185
_187 = _186
_188 = _187
_188 = &NONLOCAL
k_903 = k_707
k_903 = &NONLOCAL
cmdLineTempCount_904 = cmdLineTempCount_616
cmdLineTempCount_904 = &NONLOCAL
_189 = *argv
ESCAPED = _189
ESCAPED = &STRING
_190 = cmdLineTempCount_616
_191 = i_699
_191 = &NONLOCAL
_192 = argv
_193 = *_192
_194 = j_703
_194 = &NONLOCAL
_195 = _193
_1145 = &cmdLineTemp
cmdLineTemp = *_195
_1683 = _1145
cmdLineTemp = &NULL
ESCAPED = &cmdLineTemp
ESCAPED = &NULL
ESCAPED = &NONLOCAL
_1169 = NONLOCAL
_1151 = _1169
maxMemory_908 = _1151
maxMemory_908 = &NONLOCAL
maxMemory.463_197 = maxMemory_908
_198 = maxMemory.463_197
_198 = &NONLOCAL
stderr.464_199 = stderr
ESCAPED = stderr.464_199
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1143 = NONLOCAL
_200 = cmdLineTempCount_616
j_910 = _200
j_910 = j_703
k_936 = j_703
k_936 = &NONLOCAL
_1108 = &cmdLineTemp
_1697 = _1108
_ZL20ChildThreadStackSize = NONLOCAL
_ZL20ChildThreadStackSize = &NONLOCAL
ESCAPED = &NONLOCAL
cmdLineTempCount_617 = &NULL
cmdLineTempCount_617 = cmdLineTempCount_941
k_708 = k_936
k_708 = k_940
_201 = i_699
_201 = &NONLOCAL
_202 = argv
_203 = *_202
_204 = _203
_205 = *_204
_206 = i_699
_206 = &NONLOCAL
_207 = argv
_208 = *_207
_209 = _208
_210 = *_209
_211 = _210
_212 = _211
_212 = &NONLOCAL
k_940 = k_708
k_940 = &NONLOCAL
cmdLineTempCount_941 = cmdLineTempCount_617
cmdLineTempCount_941 = &NONLOCAL
_213 = *argv
ESCAPED = _213
ESCAPED = &STRING
_214 = cmdLineTempCount_617
_215 = i_699
_215 = &NONLOCAL
_216 = argv
_217 = *_216
_218 = j_703
_218 = &NONLOCAL
_219 = _217
_1111 = &cmdLineTemp
cmdLineTemp = *_219
_1699 = _1111
cmdLineTemp = &NULL
ESCAPED = &cmdLineTemp
ESCAPED = &NULL
ESCAPED = &NONLOCAL
_1107 = NONLOCAL
_1104 = _1107
_221 = _1104
_221 = &NONLOCAL
_ZL20ChildThreadStackSize = _221
ESCAPED = _221
ChildThreadStackSize.465_222 = _ZL20ChildThreadStackSize
ChildThreadStackSize.466_223 = _ZL20ChildThreadStackSize
stderr.467_224 = stderr
ESCAPED = stderr.467_224
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ChildThreadStackSize.466_223
_1102 = NONLOCAL
ChildThreadStackSize.468_225 = _ZL20ChildThreadStackSize
ChildThreadStackSize.469_226 = _ZL20ChildThreadStackSize
stderr.470_227 = stderr
ESCAPED = stderr.470_227
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ChildThreadStackSize.469_226
ESCAPED = &NONLOCAL
_1100 = NONLOCAL
_ZL20ChildThreadStackSize = &NONLOCAL
ESCAPED = &NONLOCAL
_228 = cmdLineTempCount_617
j_949 = _228
j_949 = j_703
_ZL12OutputStdOut = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL14ForceOverwrite = &NONLOCAL
ESCAPED = &NONLOCAL
_229 = *argv
ESCAPED = _229
ESCAPED = &STRING
ESCAPED = &NULL
_ZL9QuietMode = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL9QuietMode = &NULL
ESCAPED = &NULL
ESCAPED = &NULL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL12BWTblockSize = &NONLOCAL
ESCAPED = &NONLOCAL
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = &NONLOCAL
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
useLoadAverage_611 = useLoadAverage_610
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = &NONLOCAL
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
readEntireFile_621 = readEntireFile_620
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_930
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
blockSize_634 = blockSize_633
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_908
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemory_641 = maxMemory_640
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = &NONLOCAL
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
maxMemorySwitch_645 = maxMemorySwitch_644
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = &NONLOCAL
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
decompress_652 = decompress_651
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = &NONLOCAL
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
compress_657 = compress_656
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = &NONLOCAL
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
testFile_662 = testFile_661
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = &NONLOCAL
keep_689 = keep_688
keep_689 = keep_688
keep_689 = &NONLOCAL
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
keep_689 = keep_688
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = &NONLOCAL
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
force_696 = force_695
j_704 = j_703
j_704 = j_894
j_704 = j_931
j_704 = j_910
j_704 = j_949
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_704 = j_703
j_961 = j_704
j_961 = &NONLOCAL
_230 = i_699
_230 = &NONLOCAL
_231 = argv
FileListCount.472_233 = _ZL13FileListCount
_234 = FileListCount.472_233
_235 = _234
_235 = &NONLOCAL
_236 = _14
_237 = *_231
*_236 = _237
FileListCount.473_238 = _ZL13FileListCount
_239 = FileListCount.473_238
_239 = &NONLOCAL
_ZL13FileListCount = _239
ESCAPED = _239
useLoadAverage_612 = useLoadAverage_608
useLoadAverage_612 = useLoadAverage_609
useLoadAverage_612 = useLoadAverage_610
useLoadAverage_612 = useLoadAverage_608
readEntireFile_622 = readEntireFile_618
readEntireFile_622 = readEntireFile_619
readEntireFile_622 = readEntireFile_620
readEntireFile_622 = readEntireFile_618
blockSize_635 = blockSize_632
blockSize_635 = blockSize_632
blockSize_635 = blockSize_633
blockSize_635 = blockSize_632
maxMemory_642 = maxMemory_639
maxMemory_642 = maxMemory_639
maxMemory_642 = maxMemory_640
maxMemory_642 = maxMemory_639
maxMemorySwitch_646 = maxMemorySwitch_643
maxMemorySwitch_646 = maxMemorySwitch_643
maxMemorySwitch_646 = maxMemorySwitch_644
maxMemorySwitch_646 = maxMemorySwitch_643
decompress_653 = decompress_649
decompress_653 = decompress_650
decompress_653 = decompress_651
decompress_653 = decompress_649
compress_658 = compress_654
compress_658 = compress_655
compress_658 = compress_656
compress_658 = compress_654
testFile_663 = testFile_659
testFile_663 = testFile_660
testFile_663 = testFile_661
testFile_663 = testFile_659
keep_690 = keep_686
keep_690 = keep_687
keep_690 = keep_688
keep_690 = keep_686
force_697 = force_693
force_697 = force_694
force_697 = force_695
force_697 = force_693
i_985 = i_699
i_985 = &NONLOCAL
BWTblockSize.474_240 = _ZL12BWTblockSize
_241 = BWTblockSize.474_240
_242 = _241
_242 = &NONLOCAL
_ZL13Bz2HeaderZero = NONLOCAL
_ZL13Bz2HeaderZero = _242
ESCAPED = _242
_243 = _ZL13Bz2HeaderZero
_244 = _243
bz2Header = _244
_247 = _245
_247 = _246
stderr.475_248 = stderr
ESCAPED = stderr.475_248
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1098 = NONLOCAL
_249 = *argv
stderr.476_250 = stderr
ESCAPED = stderr.476_250
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _249
_1096 = NONLOCAL
FileListCount.477_251 = _ZL13FileListCount
stdin = NONLOCAL
stdin.479_252 = stdin
ESCAPED = stdin.479_252
_253 = NONLOCAL
ESCAPED = _253
_254 = NONLOCAL
stderr.480_255 = stderr
ESCAPED = stderr.480_255
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1094 = NONLOCAL
_256 = *argv
stderr.481_257 = stderr
ESCAPED = stderr.481_257
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _256
_1068 = NONLOCAL
FileListCount.483_259 = _ZL13FileListCount
_260 = FileListCount.483_259
_261 = _260
_261 = &NONLOCAL
_262 = _14
derefaddrtmp(470) = &stdinFile
*_262 = derefaddrtmp(470)
FileListCount.484_263 = _ZL13FileListCount
_264 = FileListCount.484_263
_264 = &NONLOCAL
_ZL13FileListCount = _264
ESCAPED = _264
stdin.486_265 = stdin
ESCAPED = stdin.486_265
_266 = NONLOCAL
ESCAPED = _266
_267 = NONLOCAL
stderr.487_268 = stderr
ESCAPED = stderr.487_268
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1063 = NONLOCAL
_269 = *argv
stderr.488_270 = stderr
ESCAPED = stderr.488_270
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _269
_1492 = NONLOCAL
_ZL12OutputStdOut = &NONLOCAL
ESCAPED = &NONLOCAL
FileListCount.490_272 = _ZL13FileListCount
_273 = FileListCount.490_272
_274 = _273
_274 = &NONLOCAL
_275 = _14
derefaddrtmp(485) = &stdinFile
*_275 = derefaddrtmp(485)
FileListCount.491_276 = _ZL13FileListCount
_277 = FileListCount.491_276
_277 = &NONLOCAL
_ZL13FileListCount = _277
ESCAPED = _277
OutputStdOut.492_278 = _ZL12OutputStdOut
QuietMode.493_279 = _ZL9QuietMode
stderr.494_280 = stderr
ESCAPED = stderr.494_280
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1493 = NONLOCAL
_ZL12OutputStdOut = &NONLOCAL
ESCAPED = &NONLOCAL
keep_691 = keep_686
keep_691 = &NONLOCAL
stdout = NONLOCAL
stdout.496_281 = stdout
ESCAPED = stdout.496_281
_282 = NONLOCAL
ESCAPED = _282
_283 = NONLOCAL
stderr.497_284 = stderr
ESCAPED = stderr.497_284
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1494 = NONLOCAL
_285 = *argv
stderr.498_286 = stderr
ESCAPED = stderr.498_286
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _285
_1495 = NONLOCAL
FileListCount.500_288 = _ZL13FileListCount
_289 = FileListCount.500_288
_290 = _289
_290 = &NONLOCAL
_291 = _14
derefaddrtmp(506) = &stdinFile
*_291 = derefaddrtmp(506)
FileListCount.501_292 = _ZL13FileListCount
_293 = FileListCount.501_292
_293 = &NONLOCAL
_ZL13FileListCount = _293
ESCAPED = _293
keep_692 = keep_686
keep_692 = &NONLOCAL
keep_692 = keep_686
keep_692 = keep_691
QuietMode.502_294 = _ZL9QuietMode
ESCAPED = &loadAvgArray
ESCAPED = &NONLOCAL
ret_1019 = NONLOCAL
QuietMode.506_298 = _ZL9QuietMode
stderr.507_299 = stderr
ESCAPED = stderr.507_299
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1496 = NONLOCAL
loadAverage_1020 = loadAvgArray
_300 = loadAverage_1020
_300 = &NONLOCAL
_301 = _300
numCPUidle_1021 = numCPUtotal_875
numCPUidle_1021 = _301
numCPU.508_302 = _ZL6numCPU
_ZL6numCPU = numCPUidle_1021
ESCAPED = numCPUidle_1021
numCPU.509_303 = _ZL6numCPU
_ZL6numCPU = &NONLOCAL
ESCAPED = &NONLOCAL
loadAverage_607 = &NONLOCAL
loadAverage_607 = loadAverage_1020
loadAverage_607 = &NONLOCAL
loadAverage_607 = &NONLOCAL
loadAverage_607 = loadAverage_1020
useLoadAverage_613 = useLoadAverage_608
useLoadAverage_613 = useLoadAverage_608
useLoadAverage_613 = &NULL
useLoadAverage_613 = &NULL
useLoadAverage_613 = useLoadAverage_608
_ZL13sigInFilename = NONLOCAL
_ZL13sigInFilename = &NULL
ESCAPED = &NULL
_ZL14sigOutFilename = NONLOCAL
_ZL14sigOutFilename = &NULL
ESCAPED = &NULL
ret_1031 = NONLOCAL
stderr.510_304 = stderr
ESCAPED = stderr.510_304
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_1031
_1497 = NONLOCAL
ret_1033 = NONLOCAL
stderr.511_305 = stderr
ESCAPED = stderr.511_305
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_1033
_1498 = NONLOCAL
numCPU.512_306 = _ZL6numCPU
_ZL6numCPU = &NONLOCAL
ESCAPED = &NONLOCAL
QuietMode.513_307 = _ZL9QuietMode
numCPU.514_308 = _ZL6numCPU
stderr.515_309 = stderr
ESCAPED = stderr.515_309
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = numCPU.514_308
_1499 = NONLOCAL
stderr.516_310 = stderr
ESCAPED = stderr.516_310
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = loadAverage_607
_1500 = NONLOCAL
BWTblockSize.517_311 = _ZL12BWTblockSize
stderr.518_312 = stderr
ESCAPED = stderr.518_312
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = BWTblockSize.517_311
_1501 = NONLOCAL
stderr.519_313 = stderr
ESCAPED = stderr.519_313
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = blockSize_632
_1502 = NONLOCAL
_314 = blockSize_632
_314 = &NONLOCAL
stderr.520_315 = stderr
ESCAPED = stderr.520_315
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _314
_1503 = NONLOCAL
_316 = maxMemory_639
_316 = &NONLOCAL
stderr.521_317 = stderr
ESCAPED = stderr.521_317
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _316
_1504 = NONLOCAL
ChildThreadStackSize.522_318 = _ZL20ChildThreadStackSize
ChildThreadStackSize.523_319 = _ZL20ChildThreadStackSize
_320 = ChildThreadStackSize.523_319
_320 = &NONLOCAL
stderr.524_321 = stderr
ESCAPED = stderr.524_321
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _320
_1505 = NONLOCAL
IgnoreTrailingGarbageFlag.526_322 = _ZL25IgnoreTrailingGarbageFlag
iftmp.525_720 = &STRING
iftmp.525_720 = &STRING
stderr.527_323 = stderr
ESCAPED = stderr.527_323
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = iftmp.525_720
_1506 = NONLOCAL
stderr.528_324 = stderr
ESCAPED = stderr.528_324
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1507 = NONLOCAL
_1047 = NONLOCAL
numCPU.529_325 = _ZL6numCPU
ESCAPED = numCPU.529_325
_1050 = NONLOCAL
_ZL9FifoQueue = NONLOCAL
_ZL9FifoQueue = _1050
ESCAPED = _1050
fifo_1052 = _ZL9FifoQueue
stderr.530_327 = stderr
ESCAPED = stderr.530_327
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1508 = NONLOCAL
zeroByteFile_623 = &NULL
zeroByteFile_623 = zeroByteFile_627
blockSize_636 = blockSize_632
blockSize_636 = blockSize_638
errLevel_664 = &NULL
errLevel_664 = errLevel_675
noThreads_677 = &NULL
noThreads_677 = noThreads_683
fileLoop_698 = &NULL
fileLoop_698 = fileLoop_1421
FileListCount.531_328 = _ZL13FileListCount
_ZL12producerDone = NONLOCAL
_ZL12producerDone = &NULL
ESCAPED = &NULL
_ZL10InFileSize = NONLOCAL
_ZL10InFileSize = &NULL
ESCAPED = &NULL
_ZL9NumBlocks = NONLOCAL
_ZL9NumBlocks = &NULL
ESCAPED = &NULL
_1060 = NONLOCAL
ESCAPED = _1060
_331 = fileLoop_698
_332 = _331
_332 = &NONLOCAL
_333 = _14
InFilename_1062 = *_333
QuietMode.533_334 = _ZL9QuietMode
FileListCount.534_335 = _ZL13FileListCount
_336 = fileLoop_698
_336 = &NONLOCAL
stderr.535_337 = stderr
ESCAPED = stderr.535_337
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _336
ESCAPED = FileListCount.534_335
_1509 = NONLOCAL
CALLUSED(599) = CALLUSED(599) + UNKNOWN
CALLUSED(599) = *CALLUSED(599) + UNKNOWN
CALLUSED(599) = InFilename_1062
CALLUSED(599) = &STRING
_338 = CALLUSED(599)
_338 = NONLOCAL
stderr.536_339 = stderr
ESCAPED = stderr.536_339
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1510 = NONLOCAL
stderr.537_340 = stderr
ESCAPED = stderr.537_340
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1511 = NONLOCAL
ESCAPED = InFilename_1062
_1415 = NONLOCAL
QuietMode.538_341 = _ZL9QuietMode
stderr.539_342 = stderr
ESCAPED = stderr.539_342
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1512 = NONLOCAL
errLevel_665 = errLevel_664
errLevel_665 = &NONLOCAL
errLevel_665 = errLevel_664
QuietMode.540_343 = _ZL9QuietMode
stderr.541_344 = stderr
ESCAPED = stderr.541_344
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1513 = NONLOCAL
_346 = fileLoop_698
_347 = _346
_347 = &NONLOCAL
_348 = _14
_349 = *_348
ESCAPED = &D.39833
ESCAPED = _349
ESCAPED = &D.39832
ESCAPED = &outFilename
ESCAPED = &D.39833
_1591 = D.39833
ESCAPED = _1591
CALLUSED(625) = CALLUSED(625) + UNKNOWN
CALLUSED(625) = *CALLUSED(625) + UNKNOWN
CALLUSED(625) = InFilename_1062
CALLUSED(625) = &STRING
_350 = CALLUSED(625)
_350 = NONLOCAL
ESCAPED = InFilename_1062
ESCAPED = &NULL
_1520 = NONLOCAL
_1524 = _1520
_351 = &NONLOCAL
_352 = *_351
stderr.543_353 = stderr
ESCAPED = stderr.543_353
ESCAPED = _352
stderr.544_354 = stderr
ESCAPED = stderr.544_354
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1527 = NONLOCAL
stderr.545_355 = stderr
ESCAPED = stderr.545_355
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1528 = NONLOCAL
_1530 = &tmpBuff
tmpBuff = &NULL
_1748 = _1530
CALLUSED(644) = CALLUSED(644) + UNKNOWN
CALLUSED(644) = *CALLUSED(644) + UNKNOWN
CALLUSED(644) = &bz2Header
_356 = CALLUSED(644)
_356 = NONLOCAL
_357 = _356
_357 = &NONLOCAL
ESCAPED = _1524
ESCAPED = &tmpBuff
ESCAPED = _357
_1075 = NONLOCAL
size_1076 = _1075
ESCAPED = _1524
CALLUSED(652) = CALLUSED(652) + UNKNOWN
CALLUSED(652) = *CALLUSED(652) + UNKNOWN
CALLUSED(652) = &bz2Header
_359 = CALLUSED(652)
_359 = NONLOCAL
_360 = _359
_360 = &NONLOCAL
_1128 = NONLOCAL
stderr.546_362 = stderr
ESCAPED = _1128
ESCAPED = stderr.546_362
stderr.547_363 = stderr
ESCAPED = stderr.547_363
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1531 = NONLOCAL
stderr.548_364 = stderr
ESCAPED = stderr.548_364
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1532 = NONLOCAL
ESCAPED = &tmpBuff
ESCAPED = &NONLOCAL
ESCAPED = &bz2Header
ESCAPED = &NONLOCAL
_1079 = NONLOCAL
stderr.550_366 = stderr
ESCAPED = stderr.550_366
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1533 = NONLOCAL
stderr.551_367 = stderr
ESCAPED = stderr.551_367
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1534 = NONLOCAL
CALLUSED(669) = CALLUSED(669) + UNKNOWN
CALLUSED(669) = *CALLUSED(669) + UNKNOWN
CALLUSED(669) = &bz2Header
_368 = CALLUSED(669)
_368 = NONLOCAL
_369 = _368
_370 = _369
_370 = &NONLOCAL
_371 = _370
_373 = _1075
_374 = _373
_374 = &NONLOCAL
_375 = _374
ESCAPED = &tmpBuff
ESCAPED = _375
ESCAPED = &bz2Header
ESCAPED = _371
_1082 = NONLOCAL
CALLUSED(679) = CALLUSED(679) + UNKNOWN
CALLUSED(679) = *CALLUSED(679) + UNKNOWN
CALLUSED(679) = &bz2Header
_378 = CALLUSED(679)
_378 = NONLOCAL
_379 = _378
_380 = _379
_380 = &NONLOCAL
_381 = _380
_383 = _1075
_384 = _383
_384 = &NONLOCAL
_385 = _384
ESCAPED = &tmpBuff
ESCAPED = _385
ESCAPED = &_ZL13Bz2HeaderZero
ESCAPED = _381
_1085 = NONLOCAL
stderr.554_388 = stderr
ESCAPED = stderr.554_388
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1535 = NONLOCAL
stderr.555_389 = stderr
ESCAPED = stderr.555_389
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1536 = NONLOCAL
_390 = tmpBuff
_391 = _390
_391 = &NONLOCAL
_392 = tmpBuff
_393 = _392
_ZL16BWTblockSizeChar = NONLOCAL
_ZL16BWTblockSizeChar = _393
ESCAPED = _393
ESCAPED = &bz2Tail
ESCAPED = &STRING
ESCAPED = &D.39850
stderr.556_394 = stderr
ESCAPED = stderr.556_394
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1537 = NONLOCAL
stderr.557_395 = stderr
ESCAPED = stderr.557_395
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1538 = NONLOCAL
ESCAPED = &tbz2Tail
ESCAPED = &STRING
ESCAPED = &D.39853
CALLUSED(708) = CALLUSED(708) + UNKNOWN
CALLUSED(708) = *CALLUSED(708) + UNKNOWN
CALLUSED(708) = &outFilename
CALLUSED(708) = &bz2Tail
retval.558_1103 = CALLUSED(708)
retval.558_1103 = NONLOCAL
_1594 = outFilename
_1593 = bz2Tail
_398 = _1594
_398 = _1593
ESCAPED = &outFilename
ESCAPED = _398
ESCAPED = &NULL
CALLUSED(715) = CALLUSED(715) + UNKNOWN
CALLUSED(715) = *CALLUSED(715) + UNKNOWN
CALLUSED(715) = &outFilename
CALLUSED(715) = &tbz2Tail
retval.559_1105 = CALLUSED(715)
retval.559_1105 = NONLOCAL
_1596 = outFilename
_1595 = tbz2Tail
_401 = _1596
_401 = _1595
ESCAPED = &outFilename
ESCAPED = _401
ESCAPED = &NULL
ESCAPED = &outFilename
ESCAPED = &STRING
_1597 = NONLOCAL
ESCAPED = &outFilename
ESCAPED = &STRING
_1598 = NONLOCAL
_1601 = tbz2Tail
ESCAPED = _1601
_1599 = bz2Tail
ESCAPED = _1599
ESCAPED = &bz2Tail
ESCAPED = &STRING
ESCAPED = &D.39859
ESCAPED = &D.39862
ESCAPED = InFilename_1062
ESCAPED = &D.39861
CALLUSED(730) = CALLUSED(730) + UNKNOWN
CALLUSED(730) = *CALLUSED(730) + UNKNOWN
CALLUSED(730) = &D.39862
CALLUSED(730) = &bz2Tail
retval.560_1148 = CALLUSED(730)
retval.560_1148 = NONLOCAL
_1603 = D.39862
ESCAPED = _1603
stderr.561_402 = stderr
ESCAPED = stderr.561_402
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1539 = NONLOCAL
stderr.562_403 = stderr
ESCAPED = stderr.562_403
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1540 = NONLOCAL
_1605 = bz2Tail
ESCAPED = _1605
_1607 = bz2Tail
_1608 = bz2Tail
ESCAPED = &outFilename
ESCAPED = _1608
ESCAPED = _1607
_1609 = NONLOCAL
_1610 = bz2Tail
ESCAPED = _1610
_ZL17ErrorHandlerMutex = NONLOCAL
ESCAPED = &_ZL17ErrorHandlerMutex
_ZL13sigInFilename = InFilename_1062
ESCAPED = InFilename_1062
_1612 = outFilename
_ZL14sigOutFilename = _1612
ESCAPED = _1612
ESCAPED = &_ZL17ErrorHandlerMutex
CALLUSED(748) = CALLUSED(748) + UNKNOWN
CALLUSED(748) = *CALLUSED(748) + UNKNOWN
CALLUSED(748) = InFilename_1062
CALLUSED(748) = &STRING
_405 = CALLUSED(748)
_405 = NONLOCAL
ESCAPED = InFilename_1062
ESCAPED = &NULL
_1547 = NONLOCAL
_1551 = _1547
stderr.563_406 = stderr
ESCAPED = stderr.563_406
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1554 = NONLOCAL
stderr.564_407 = stderr
ESCAPED = stderr.564_407
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1555 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = _1551
ESCAPED = &statbuf
_1556 = NONLOCAL
_408 = statbuf
_409 = _408
stderr.565_410 = stderr
ESCAPED = stderr.565_410
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1557 = NONLOCAL
stderr.566_411 = stderr
ESCAPED = stderr.566_411
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1558 = NONLOCAL
_412 = statbuf
_413 = _412
stderr.567_414 = stderr
ESCAPED = stderr.567_414
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1559 = NONLOCAL
stderr.568_415 = stderr
ESCAPED = stderr.568_415
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1560 = NONLOCAL
_416 = statbuf
_ZL10InFileSize = _416
ESCAPED = _416
InFileSize.569_417 = _ZL10InFileSize
stderr.570_418 = stderr
ESCAPED = stderr.570_418
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1561 = NONLOCAL
stderr.571_419 = stderr
ESCAPED = stderr.571_419
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1562 = NONLOCAL
zeroByteFile_624 = &NONLOCAL
zeroByteFile_624 = &NULL
ESCAPED = InFilename_1062
_420 = NONLOCAL
stderr.573_421 = stderr
ESCAPED = stderr.573_421
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_1563 = NONLOCAL
stderr.574_422 = stderr
ESCAPED = stderr.574_422
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1564 = NONLOCAL
zeroByteFile_625 = zeroByteFile_623
zeroByteFile_625 = zeroByteFile_623
zeroByteFile_625 = zeroByteFile_623
zeroByteFile_625 = zeroByteFile_623
zeroByteFile_625 = zeroByteFile_624
_ZL10InFileSize = &NONLOCAL
ESCAPED = &NONLOCAL
zeroByteFile_626 = zeroByteFile_624
zeroByteFile_626 = zeroByteFile_623
hInfile_628 = _1547
hInfile_628 = &NULL
OutputStdOut.577_423 = _ZL12OutputStdOut
_1613 = outFilename
ESCAPED = _1613
_1203 = NONLOCAL
iftmp.576_1438 = &NONLOCAL
iftmp.576_993 = &NULL
_1614 = outFilename
stderr.578_427 = stderr
ESCAPED = stderr.578_427
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _1614
_1565 = NONLOCAL
stderr.579_428 = stderr
ESCAPED = stderr.579_428
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1566 = NONLOCAL
_1615 = outFilename
ESCAPED = _1615
QuietMode.580_430 = _ZL9QuietMode
stderr.581_431 = stderr
ESCAPED = stderr.581_431
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1567 = NONLOCAL
InFileSize.582_432 = _ZL10InFileSize
numCPU.583_433 = _ZL6numCPU
_434 = numCPU.583_433
_435 = InFileSize.582_432
_435 = _434
blockSize_1213 = _435
blockSize_637 = blockSize_636
blockSize_637 = blockSize_1213
blockSize_637 = blockSize_636
blockSize_637 = blockSize_636
QuietMode.584_436 = _ZL9QuietMode
FileListCount.585_437 = _ZL13FileListCount
_438 = fileLoop_698
_438 = &NONLOCAL
stderr.586_439 = stderr
ESCAPED = stderr.586_439
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _438
ESCAPED = FileListCount.585_437
_1568 = NONLOCAL
iftmp.587_722 = InFilename_1062
iftmp.587_722 = &STRING
stderr.588_440 = stderr
ESCAPED = stderr.588_440
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = iftmp.587_722
_1569 = NONLOCAL
OutputStdOut.589_441 = _ZL12OutputStdOut
_1616 = outFilename
stderr.590_443 = stderr
ESCAPED = stderr.590_443
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _1616
_1570 = NONLOCAL
stderr.591_444 = stderr
ESCAPED = stderr.591_444
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1571 = NONLOCAL
BWTblockSizeChar.592_445 = _ZL16BWTblockSizeChar
_446 = BWTblockSizeChar.592_445
stderr.593_447 = stderr
ESCAPED = stderr.593_447
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _446
_1572 = NONLOCAL
CALLUSED(828) = CALLUSED(828) + UNKNOWN
CALLUSED(828) = *CALLUSED(828) + UNKNOWN
CALLUSED(828) = InFilename_1062
CALLUSED(828) = &STRING
_448 = CALLUSED(828)
_448 = NONLOCAL
InFileSize.594_449 = _ZL10InFileSize
InFileSize.595_450 = InFileSize.594_449
stderr.596_451 = stderr
ESCAPED = stderr.596_451
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFileSize.595_450
_1573 = NONLOCAL
numCPU.597_452 = _ZL6numCPU
InFileSize.598_453 = _ZL10InFileSize
noThreads_678 = &NONLOCAL
noThreads_678 = &NULL
noThreads_678 = &NONLOCAL
numCPU.599_454 = _ZL6numCPU
CALLUSED(839) = CALLUSED(839) + UNKNOWN
CALLUSED(839) = *CALLUSED(839) + UNKNOWN
CALLUSED(839) = InFilename_1062
CALLUSED(839) = &STRING
_455 = CALLUSED(839)
_455 = NONLOCAL
InFileSize.600_456 = _ZL10InFileSize
_457 = blockSize_637
InFileSize.601_458 = _ZL10InFileSize
_459 = _457
_459 = InFileSize.601_458
_460 = _459
_460 = &NONLOCAL
_461 = blockSize_637
_462 = _460
_462 = _461
numBlocks_1225 = _462
numCPU.602_463 = _ZL6numCPU
numBlocks_630 = numBlocks_1225
numBlocks_630 = &NONLOCAL
numBlocks_630 = numBlocks_1225
numBlocks_630 = numBlocks_1225
noThreads_679 = &NULL
noThreads_679 = noThreads_677
noThreads_679 = &NONLOCAL
noThreads_679 = &NONLOCAL
OutputStdOut.603_464 = _ZL12OutputStdOut
_1617 = outFilename
ESCAPED = _1617
_1231 = NONLOCAL
_1618 = outFilename
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _1618
hOutfile_629 = &NONLOCAL
hOutfile_629 = _1231
ESCAPED = hOutfile_629
ESCAPED = &_ZL13Bz2HeaderZero
ESCAPED = &NONLOCAL
_1238 = NONLOCAL
ret_1239 = _1238
OutputStdOut.604_468 = _ZL12OutputStdOut
ESCAPED = hOutfile_629
_1242 = NONLOCAL
_1619 = outFilename
ESCAPED = _1619
_1246 = NONLOCAL
_1620 = outFilename
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _1620
close_ret_718 = &NULL
close_ret_718 = _1242
close_ret_718 = _1242
_474 = _472
_474 = _473
_1621 = outFilename
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _1621
stderr.606_476 = stderr
ESCAPED = stderr.606_476
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1574 = NONLOCAL
QuietMode.607_477 = _ZL9QuietMode
stderr.608_478 = stderr
ESCAPED = stderr.608_478
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NONLOCAL
_1575 = NONLOCAL
stderr.609_479 = stderr
ESCAPED = stderr.609_479
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1576 = NONLOCAL
OutputStdOut.611_483 = _ZL12OutputStdOut
_1622 = outFilename
ESCAPED = &NONLOCAL
ESCAPED = _1622
ESCAPED = &statbuf
_1577 = NONLOCAL
iftmp.610_1083 = &NULL
iftmp.610_1011 = &NONLOCAL
ESCAPED = InFilename_1062
_1258 = NONLOCAL
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
numBlocks_631 = &NULL
numBlocks_631 = numBlocks_630
numBlocks_631 = &NULL
numBlocks_631 = &NULL
noThreads_680 = noThreads_678
noThreads_680 = noThreads_679
noThreads_680 = noThreads_678
noThreads_680 = &NULL
_ZL18NumBlocksEstimated = NONLOCAL
_ZL18NumBlocksEstimated = numBlocks_631
ESCAPED = numBlocks_631
_487 = maxMemory_639
_487 = blockSize_637
_488 = _487
_ZL20NumBufferedBlocksMax = _488
ESCAPED = _488
NumBufferedBlocksMax.613_489 = _ZL20NumBufferedBlocksMax
_490 = NumBufferedBlocksMax.613_489
numCPU.614_491 = _ZL6numCPU
_492 = numCPU.614_491
_492 = &NONLOCAL
_493 = _490
_493 = _492
_ZL20NumBufferedBlocksMax = &NONLOCAL
ESCAPED = &NONLOCAL
NumBufferedBlocksMax.615_494 = _ZL20NumBufferedBlocksMax
numCPU.616_495 = _ZL6numCPU
_496 = numCPU.616_495
_496 = &NONLOCAL
_497 = _496
_498 = NumBufferedBlocksMax.615_494
_498 = _497
_ZL20NumBufferedBlocksMax = _498
ESCAPED = _498
numCPU.617_499 = _ZL6numCPU
_500 = numCPU.617_499
NumBufferedBlocksMax.618_501 = _ZL20NumBufferedBlocksMax
numCPU.619_502 = _ZL6numCPU
_503 = numCPU.619_502
_ZL20NumBufferedBlocksMax = _503
ESCAPED = _503
QuietMode.620_504 = _ZL9QuietMode
numCPU.621_505 = _ZL6numCPU
numCPU.622_506 = _ZL6numCPU
_507 = numCPU.622_506
_507 = &NONLOCAL
_508 = _507
NumBufferedBlocksMax.623_509 = _ZL20NumBufferedBlocksMax
_510 = _508
_510 = NumBufferedBlocksMax.623_509
_511 = blockSize_637
_512 = _510
_512 = _511
_513 = _512
_513 = &NONLOCAL
stderr.624_514 = stderr
ESCAPED = stderr.624_514
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _513
ESCAPED = numCPU.621_505
_1578 = NONLOCAL
QuietMode.625_515 = _ZL9QuietMode
stderr.626_516 = stderr
ESCAPED = stderr.626_516
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1579 = NONLOCAL
_ZL13LastGoodBlock = NONLOCAL
_ZL13LastGoodBlock = &NONLOCAL
ESCAPED = &NONLOCAL
_ZL13MinErrorBlock = NONLOCAL
_ZL13MinErrorBlock = &NONLOCAL
ESCAPED = &NONLOCAL
NumBufferedBlocksMax.627_517 = _ZL20NumBufferedBlocksMax
ESCAPED = NumBufferedBlocksMax.627_517
QuietMode.628_518 = _ZL9QuietMode
stderr.629_519 = stderr
ESCAPED = stderr.629_519
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1580 = NONLOCAL
i_700 = &NULL
i_700 = i_1315
_520 = i_700
numCPU.630_521 = _ZL6numCPU
_522 = *fifo_1052 + 640
_523 = i_700
_523 = &NONLOCAL
_524 = _522
ESCAPED = _524
_ZL21ChildThreadAttributes = NONLOCAL
ESCAPED = &_ZL21ChildThreadAttributes
ESCAPED = &consumer_decompress
ESCAPED = fifo_1052
ret_1314 = NONLOCAL
_1317 = NONLOCAL
ESCAPED = _1317
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = i_700
ESCAPED = ret_1314
_ZL16TerminatorThread = NONLOCAL
TerminatorThread.631_526 = _ZL16TerminatorThread
ESCAPED = TerminatorThread.631_526
ESCAPED = &NULL
_1321 = NONLOCAL
i_1315 = i_700
i_1315 = &NONLOCAL
_1623 = outFilename
ESCAPED = &output
ESCAPED = &_ZL21ChildThreadAttributes
ESCAPED = &fileWriter
ESCAPED = _1623
ret_1326 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_1326
TerminatorThread.632_528 = _ZL16TerminatorThread
ESCAPED = TerminatorThread.632_528
ESCAPED = &NULL
_1349 = NONLOCAL
InFileSize.633_529 = _ZL10InFileSize
ESCAPED = hInfile_628
ESCAPED = InFileSize.633_529
ESCAPED = fifo_1052
_1328 = NONLOCAL
output.635_530 = output
ESCAPED = output.635_530
ESCAPED = &NULL
_1335 = NONLOCAL
_1338 = NONLOCAL
ESCAPED = _1338
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _1328
TerminatorThread.636_533 = _ZL16TerminatorThread
ESCAPED = TerminatorThread.636_533
ESCAPED = &NULL
_1344 = NONLOCAL
errLevel_668 = errLevel_664
errLevel_668 = errLevel_664
errLevel_668 = errLevel_664
errLevel_668 = &NONLOCAL
noThreads_681 = noThreads_680
noThreads_681 = noThreads_680
noThreads_681 = &NONLOCAL
noThreads_681 = noThreads_680
switchedMtToSt_709 = &NULL
switchedMtToSt_709 = &NULL
switchedMtToSt_709 = &NONLOCAL
switchedMtToSt_709 = &NULL
errLevelCurrentFile_711 = &NULL
errLevelCurrentFile_711 = &NULL
errLevelCurrentFile_711 = &NULL
errLevelCurrentFile_711 = &NONLOCAL
_536 = _534
_536 = _535
QuietMode.637_537 = _ZL9QuietMode
stderr.638_538 = stderr
ESCAPED = stderr.638_538
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1581 = NONLOCAL
ESCAPED = hInfile_628
_1624 = outFilename
ESCAPED = InFilename_1062
ESCAPED = _1624
_1356 = NONLOCAL
QuietMode.639_540 = _ZL9QuietMode
stderr.640_541 = stderr
ESCAPED = stderr.640_541
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1582 = NONLOCAL
i_701 = &NULL
i_701 = i_1293
_542 = i_701
numCPU.641_543 = _ZL6numCPU
_544 = *fifo_1052 + 640
_545 = i_701
_545 = &NONLOCAL
_546 = _544
ESCAPED = _546
ESCAPED = &_ZL21ChildThreadAttributes
ESCAPED = &consumer
ESCAPED = fifo_1052
ret_1292 = NONLOCAL
_1295 = NONLOCAL
ESCAPED = _1295
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = i_701
ESCAPED = ret_1292
TerminatorThread.642_548 = _ZL16TerminatorThread
ESCAPED = TerminatorThread.642_548
ESCAPED = &NULL
i_1293 = i_701
i_1293 = &NONLOCAL
_1625 = outFilename
ESCAPED = &output
ESCAPED = &_ZL21ChildThreadAttributes
ESCAPED = &fileWriter
ESCAPED = _1625
ret_1302 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_1302
TerminatorThread.643_550 = _ZL16TerminatorThread
ESCAPED = TerminatorThread.643_550
ESCAPED = &NULL
ESCAPED = hInfile_628
ESCAPED = blockSize_637
ESCAPED = fifo_1052
_1304 = NONLOCAL
QuietMode.644_551 = _ZL9QuietMode
stderr.645_552 = stderr
ESCAPED = stderr.645_552
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1583 = NONLOCAL
_1626 = outFilename
InFileSize.646_554 = _ZL10InFileSize
ESCAPED = hInfile_628
ESCAPED = InFileSize.646_554
ESCAPED = blockSize_637
ESCAPED = _1626
_1285 = NONLOCAL
errLevel_669 = &NONLOCAL
errLevel_669 = &NONLOCAL
errLevel_669 = errLevel_664
errLevel_669 = &NONLOCAL
errLevel_669 = errLevel_668
errLevel_669 = errLevel_668
errLevel_669 = errLevel_664
noThreads_682 = noThreads_681
noThreads_682 = noThreads_680
noThreads_682 = noThreads_680
noThreads_682 = noThreads_680
noThreads_682 = noThreads_681
noThreads_682 = noThreads_681
noThreads_682 = noThreads_680
switchedMtToSt_710 = switchedMtToSt_709
switchedMtToSt_710 = &NULL
switchedMtToSt_710 = &NULL
switchedMtToSt_710 = &NULL
switchedMtToSt_710 = switchedMtToSt_709
switchedMtToSt_710 = switchedMtToSt_709
switchedMtToSt_710 = &NULL
errLevelCurrentFile_712 = &NONLOCAL
errLevelCurrentFile_712 = &NONLOCAL
errLevelCurrentFile_712 = &NULL
errLevelCurrentFile_712 = &NONLOCAL
errLevelCurrentFile_712 = errLevelCurrentFile_711
errLevelCurrentFile_712 = errLevelCurrentFile_711
errLevelCurrentFile_712 = &NULL
output.647_555 = output
ESCAPED = output.647_555
ESCAPED = &NULL
_1361 = NONLOCAL
_556 = &NONLOCAL
_557 = *_556
stderr.648_558 = stderr
ESCAPED = stderr.648_558
ESCAPED = _557
errLevel_670 = errLevel_669
errLevel_670 = &NONLOCAL
errLevel_670 = errLevel_669
errLevelCurrentFile_713 = errLevelCurrentFile_712
errLevelCurrentFile_713 = &NONLOCAL
errLevelCurrentFile_713 = errLevelCurrentFile_712
_560 = _559
_560 = switchedMtToSt_710
errLevel_671 = errLevel_670
errLevel_671 = errLevel_672
i_702 = &NULL
i_702 = i_1373
errLevelCurrentFile_714 = errLevelCurrentFile_713
errLevelCurrentFile_714 = errLevelCurrentFile_715
_561 = i_702
numCPU.649_562 = _ZL6numCPU
_563 = *fifo_1052 + 640
_564 = i_702
_564 = &NONLOCAL
_565 = _563
_566 = *_565
ESCAPED = _566
ESCAPED = &NULL
_1368 = NONLOCAL
_567 = &NONLOCAL
_568 = *_567
stderr.650_569 = stderr
ESCAPED = stderr.650_569
ESCAPED = _568
errLevel_672 = errLevel_671
errLevel_672 = &NONLOCAL
errLevelCurrentFile_715 = errLevelCurrentFile_714
errLevelCurrentFile_715 = &NONLOCAL
i_1373 = i_702
i_1373 = &NONLOCAL
errLevel_673 = errLevel_670
errLevel_673 = errLevel_671
errLevelCurrentFile_716 = errLevelCurrentFile_713
errLevelCurrentFile_716 = errLevelCurrentFile_714
_ZL18TerminateFlagMutex = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
_ZL13terminateFlag = NONLOCAL
ret_1627 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
errLevel_674 = errLevel_673
errLevel_674 = &NONLOCAL
errLevelCurrentFile_717 = errLevelCurrentFile_716
errLevelCurrentFile_717 = &NONLOCAL
OutputStdOut.652_571 = _ZL12OutputStdOut
_1628 = outFilename
ESCAPED = _1628
_1381 = NONLOCAL
_1629 = outFilename
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _1629
_577 = _575
_577 = _576
OutputStdOut.655_578 = _ZL12OutputStdOut
_1630 = outFilename
ESCAPED = &NONLOCAL
ESCAPED = _1630
ESCAPED = &statbuf
_1584 = NONLOCAL
iftmp.654_480 = &NULL
iftmp.654_1185 = &NONLOCAL
ESCAPED = InFilename_1062
_1391 = NONLOCAL
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = InFilename_1062
_ZL12OutputBuffer = NONLOCAL
_1631 = _ZL12OutputBuffer
_ZL12OutputBuffer = _1631
ESCAPED = _1631
derefaddrtmp(1055) = &NONLOCAL
*fifo_1052 + 352 = derefaddrtmp(1055)
derefaddrtmp(1056) = &NULL
*fifo_1052 + 320 = derefaddrtmp(1056)
derefaddrtmp(1057) = &NULL
*fifo_1052 + 192 = derefaddrtmp(1057)
derefaddrtmp(1058) = &NULL
*fifo_1052 + 256 = derefaddrtmp(1058)
derefaddrtmp(1059) = &NULL
*fifo_1052 + 128 = derefaddrtmp(1059)
derefaddrtmp(1060) = &NULL
*fifo_1052 + 704 = derefaddrtmp(1060)
derefaddrtmp(1061) = &NULL
*fifo_1052 + 384 = derefaddrtmp(1061)
derefaddrtmp(1062) = &NONLOCAL
*fifo_1052 + 416 = derefaddrtmp(1062)
ESCAPED = &_ZL18TerminateFlagMutex
ret_1632 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
iftmp.658_1382 = &NULL
iftmp.658_1336 = &NONLOCAL
ESCAPED = &_ZL17ErrorHandlerMutex
_ZL13sigInFilename = &NULL
ESCAPED = &NULL
_ZL14sigOutFilename = &NULL
ESCAPED = &NULL
ESCAPED = &_ZL17ErrorHandlerMutex
ESCAPED = &NONLOCAL
QuietMode.659_583 = _ZL9QuietMode
stderr.660_584 = stderr
ESCAPED = stderr.660_584
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_1585 = NONLOCAL
zeroByteFile_627 = zeroByteFile_623
zeroByteFile_627 = zeroByteFile_623
zeroByteFile_627 = zeroByteFile_623
zeroByteFile_627 = zeroByteFile_625
zeroByteFile_627 = zeroByteFile_626
zeroByteFile_627 = zeroByteFile_626
zeroByteFile_627 = zeroByteFile_626
zeroByteFile_627 = zeroByteFile_626
blockSize_638 = blockSize_636
blockSize_638 = blockSize_636
blockSize_638 = blockSize_636
blockSize_638 = blockSize_636
blockSize_638 = blockSize_636
blockSize_638 = blockSize_637
blockSize_638 = blockSize_637
blockSize_638 = blockSize_637
errLevel_675 = errLevel_665
errLevel_675 = &NONLOCAL
errLevel_675 = &NONLOCAL
errLevel_675 = &NONLOCAL
errLevel_675 = &NONLOCAL
errLevel_675 = errLevel_664
errLevel_675 = errLevel_674
errLevel_675 = errLevel_674
noThreads_683 = noThreads_677
noThreads_683 = noThreads_677
noThreads_683 = noThreads_677
noThreads_683 = noThreads_677
noThreads_683 = noThreads_677
noThreads_683 = noThreads_679
noThreads_683 = noThreads_682
noThreads_683 = noThreads_682
fileLoop_1421 = fileLoop_698
fileLoop_1421 = &NONLOCAL
errLevel_676 = errLevel_664
errLevel_676 = &NONLOCAL
errLevel_676 = &NONLOCAL
errLevel_676 = errLevel_674
OutputStdOut.661_585 = _ZL12OutputStdOut
ESCAPED = &NONLOCAL
_1423 = NONLOCAL
_1426 = NONLOCAL
ESCAPED = _1426
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NONLOCAL
_ZL23SIG_HANDLER_QUIT_SIGNAL = NONLOCAL
SIG_HANDLER_QUIT_SIGNAL.662_587 = _ZL23SIG_HANDLER_QUIT_SIGNAL
_ZL19SignalHandlerThread = NONLOCAL
SignalHandlerThread.663_588 = _ZL19SignalHandlerThread
ESCAPED = SignalHandlerThread.663_588
ESCAPED = SIG_HANDLER_QUIT_SIGNAL.662_587
ret_1431 = NONLOCAL
stderr.664_589 = stderr
ESCAPED = stderr.664_589
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = ret_1431
_1586 = NONLOCAL
ESCAPED = errLevel_676
SignalHandlerThread.665_590 = _ZL19SignalHandlerThread
ESCAPED = SignalHandlerThread.665_590
ESCAPED = &NULL
_1433 = NONLOCAL
stderr.666_591 = stderr
ESCAPED = stderr.666_591
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _1433
_1587 = NONLOCAL
ESCAPED = &_ZL18TerminateFlagMutex
ret_1633 = _ZL13terminateFlag
ESCAPED = &_ZL18TerminateFlagMutex
ESCAPED = &NONLOCAL
TerminatorThread.668_593 = _ZL16TerminatorThread
ESCAPED = TerminatorThread.668_593
ESCAPED = &NULL
_1441 = NONLOCAL
stderr.669_594 = stderr
ESCAPED = stderr.669_594
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _1441
_1588 = NONLOCAL
ESCAPED = fifo_1052
ESCAPED = _14
ESCAPED = &tvStopTime
ESCAPED = &tz
_595 = tvStartTime
_596 = _595
_597 = tvStartTime
_598 = _597
_599 = _598
_599 = &NONLOCAL
timeStart_1448 = _596
timeStart_1448 = _599
_600 = tvStopTime
_601 = _600
_602 = tvStopTime
_603 = _602
_604 = _603
_604 = &NONLOCAL
timeStop_1449 = _601
timeStop_1449 = _604
timeCalc_1450 = timeStop_1449
timeCalc_1450 = timeStart_1448
QuietMode.670_605 = _ZL9QuietMode
stderr.671_606 = stderr
ESCAPED = stderr.671_606
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = timeCalc_1450
_1589 = NONLOCAL
ESCAPED = errLevel_676
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = _1047
_719 = &NONLOCAL
_719 = _1415
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_719 = &NONLOCAL
_1635 = outFilename
ESCAPED = _1635
ESCAPED = _719
_1637 = tbz2Tail
ESCAPED = _1637
_1639 = bz2Tail
ESCAPED = _1639
_1641 = bz2Tail
ESCAPED = _1641
_1643 = outFilename
ESCAPED = _1643

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL bz2Header outFilename stdinFile tvStartTime tz _ZSt7nothrow cmdLineTemp _ZL13Bz2HeaderZero loadAvgArray D.39833 D.39832 tmpBuff bz2Tail D.39850 tbz2Tail D.39853 bz2Tail D.39859 D.39862 D.39861 _ZL17ErrorHandlerMutex statbuf statbuf _ZL21ChildThreadAttributes consumer_decompress output fileWriter consumer _ZL18TerminateFlagMutex statbuf tvStopTime } same as _ZL13sigInFilename
NONLOCAL = { ESCAPED NONLOCAL } same as _849
STOREDANYTHING = { }
INTEGER = { ANYTHING }
argc = { NONLOCAL }
argv = { NONLOCAL } same as argc
bz2Header = { ESCAPED NONLOCAL }
outFilename = { NULL ESCAPED NONLOCAL outFilename } same as _1594
stdinFile = { ESCAPED NONLOCAL }
_ZN6pbzip212ErrorContext11getInstanceEv = { }
_849 = { ESCAPED NONLOCAL }
gettimeofday = { }
tvStartTime = { ESCAPED NONLOCAL } same as _595
tz = { ESCAPED NONLOCAL }
_ZL12OutputStdOut = { ESCAPED NONLOCAL } same as _849
keep_684 = { NULL NONLOCAL }
progName_856 = { ESCAPED NONLOCAL }
progNamePos_857 = { ESCAPED NONLOCAL } same as progName_856
progName_295 = { ESCAPED NONLOCAL } same as progName_856
progName_297 = { ESCAPED NONLOCAL } same as progName_856
progNamePos_296 = { ESCAPED NONLOCAL } same as progName_856
progNamePos_859 = { ESCAPED NONLOCAL } same as progName_856
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
progName_858 = { ESCAPED NONLOCAL } same as progName_856
_1161 = { NULL ESCAPED NONLOCAL }
_1164 = { NULL ESCAPED NONLOCAL } same as _1161
decompress_647 = { NULL NONLOCAL } same as keep_684
_1119 = { NULL ESCAPED NONLOCAL } same as _1161
_1122 = { NULL ESCAPED NONLOCAL } same as _1161
decompress_863 = { ESCAPED NONLOCAL } same as _849
decompress_648 = { NULL ESCAPED NONLOCAL }
keep_685 = { NULL NONLOCAL } same as keep_684
strcmp = { }
CALLUSED(38) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(39) = { }
_8 = { STRING ESCAPED NONLOCAL }
CALLUSED(41) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(42) = { }
_9 = { STRING ESCAPED NONLOCAL }
CALLUSED(44) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(45) = { }
_10 = { STRING ESCAPED NONLOCAL }
CALLUSED(47) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(48) = { }
_11 = { STRING ESCAPED NONLOCAL }
CALLUSED(50) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(51) = { }
_12 = { STRING ESCAPED NONLOCAL }
CALLUSED(53) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(54) = { }
_13 = { STRING ESCAPED NONLOCAL }
_ZL25IgnoreTrailingGarbageFlag = { NULL ESCAPED NONLOCAL } same as decompress_648
_ZL13FileListCount = { NULL ESCAPED NONLOCAL } same as decompress_648
_866 = { NONLOCAL } same as argc
iftmp.451_868 = { NONLOCAL } same as argc
_ZnamRKSt9nothrow_t = { }
_ZSt7nothrow = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL } same as _849
__cxa_throw_bad_array_new_length = { }
stderr.453_16 = { ESCAPED NONLOCAL } same as _849
stderr = { ESCAPED NONLOCAL } same as _849
__fprintf_chk = { }
_1409 = { ESCAPED NONLOCAL } same as _849
_ZL20NumBufferedBlocksMax = { NULL ESCAPED NONLOCAL }
_Z10detectCPUsv = { }
_17 = { ESCAPED NONLOCAL } same as _849
_ZL6numCPU = { ESCAPED NONLOCAL }
numCPUtotal_875 = { ESCAPED NONLOCAL } same as _ZL6numCPU
useLoadAverage_608 = { NULL NONLOCAL } same as keep_684
useLoadAverage_612 = { NULL NONLOCAL } same as keep_684
readEntireFile_618 = { NULL NONLOCAL } same as keep_684
readEntireFile_622 = { NULL NONLOCAL } same as keep_684
blockSize_632 = { ESCAPED NONLOCAL } same as _849
blockSize_635 = { ESCAPED NONLOCAL } same as _849
maxMemory_639 = { ESCAPED NONLOCAL } same as _849
maxMemory_642 = { ESCAPED NONLOCAL } same as _849
maxMemorySwitch_643 = { NULL NONLOCAL } same as keep_684
maxMemorySwitch_646 = { NULL NONLOCAL } same as keep_684
decompress_649 = { NULL ESCAPED NONLOCAL } same as decompress_648
decompress_653 = { NULL ESCAPED NONLOCAL } same as decompress_648
compress_654 = { NULL NONLOCAL } same as keep_684
compress_658 = { NULL NONLOCAL } same as keep_684
testFile_659 = { NULL NONLOCAL } same as keep_684
testFile_663 = { NULL NONLOCAL } same as keep_684
keep_686 = { NULL NONLOCAL } same as keep_684
keep_690 = { NULL NONLOCAL } same as keep_684
force_693 = { NULL NONLOCAL } same as keep_684
force_697 = { NULL NONLOCAL } same as keep_684
i_699 = { NONLOCAL } same as argc
i_985 = { NONLOCAL } same as argc
_18 = { NONLOCAL } same as argc
_19 = { NONLOCAL } same as argc
_20 = { NONLOCAL } same as argc
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL }
_23 = { NONLOCAL } same as argc
_24 = { NONLOCAL } same as argc
_25 = { ESCAPED NONLOCAL }
_27 = { ESCAPED NONLOCAL }
_28 = { NONLOCAL } same as argc
_29 = { NONLOCAL } same as argc
FileListCount.455_31 = { NULL ESCAPED NONLOCAL } same as decompress_648
_32 = { NULL ESCAPED NONLOCAL } same as decompress_648
_33 = { NULL ESCAPED NONLOCAL } same as decompress_648
_34 = { ESCAPED NONLOCAL } same as _849
_35 = { ESCAPED NONLOCAL }
FileListCount.456_36 = { NULL ESCAPED NONLOCAL } same as decompress_648
_37 = { NULL ESCAPED NONLOCAL } same as decompress_648
_38 = { NONLOCAL } same as argc
_39 = { NONLOCAL } same as argc
_40 = { ESCAPED NONLOCAL }
_42 = { ESCAPED NONLOCAL }
_43 = { NONLOCAL } same as argc
_44 = { NONLOCAL } same as argc
_45 = { ESCAPED NONLOCAL }
CALLUSED(120) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(121) = { }
_46 = { STRING ESCAPED NONLOCAL }
_ZL12BWTblockSize = { ESCAPED NONLOCAL } same as _849
_47 = { NONLOCAL } same as argc
_48 = { NONLOCAL } same as argc
_49 = { ESCAPED NONLOCAL }
CALLUSED(127) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(128) = { }
_50 = { STRING ESCAPED NONLOCAL }
_51 = { NONLOCAL } same as argc
_52 = { NONLOCAL } same as argc
_53 = { ESCAPED NONLOCAL }
CALLUSED(133) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(134) = { }
_54 = { STRING ESCAPED NONLOCAL }
_55 = { NONLOCAL } same as argc
_56 = { NONLOCAL } same as argc
_57 = { ESCAPED NONLOCAL }
CALLUSED(139) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(140) = { }
_58 = { STRING ESCAPED NONLOCAL }
_59 = { NONLOCAL } same as argc
_60 = { NONLOCAL } same as argc
_61 = { ESCAPED NONLOCAL }
CALLUSED(145) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(146) = { }
_62 = { STRING ESCAPED NONLOCAL }
_ZL14ForceOverwrite = { ESCAPED NONLOCAL } same as _849
_63 = { NONLOCAL } same as argc
_64 = { NONLOCAL } same as argc
_65 = { ESCAPED NONLOCAL }
CALLUSED(152) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(153) = { }
_66 = { STRING ESCAPED NONLOCAL }
_67 = { ESCAPED NONLOCAL } same as progName_856
_Z5usagePcPKc = { }
_68 = { NONLOCAL } same as argc
_69 = { NONLOCAL } same as argc
_70 = { ESCAPED NONLOCAL }
CALLUSED(160) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(161) = { }
_71 = { STRING ESCAPED NONLOCAL }
_72 = { NONLOCAL } same as argc
_73 = { NONLOCAL } same as argc
_74 = { ESCAPED NONLOCAL }
CALLUSED(166) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(167) = { }
_75 = { STRING ESCAPED NONLOCAL }
_76 = { ESCAPED NONLOCAL } same as progName_856
_77 = { NONLOCAL } same as argc
_78 = { NONLOCAL } same as argc
_79 = { ESCAPED NONLOCAL }
CALLUSED(173) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(174) = { }
_80 = { STRING ESCAPED NONLOCAL }
_81 = { NONLOCAL } same as argc
_82 = { NONLOCAL } same as argc
_83 = { ESCAPED NONLOCAL }
CALLUSED(179) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(180) = { }
_84 = { STRING ESCAPED NONLOCAL }
_ZL9QuietMode = { NULL ESCAPED NONLOCAL } same as decompress_648
_85 = { NONLOCAL } same as argc
_86 = { NONLOCAL } same as argc
_87 = { ESCAPED NONLOCAL }
CALLUSED(186) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(187) = { }
_88 = { STRING ESCAPED NONLOCAL }
_89 = { NONLOCAL } same as argc
_90 = { NONLOCAL } same as argc
_91 = { ESCAPED NONLOCAL }
CALLUSED(192) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(193) = { }
_92 = { STRING ESCAPED NONLOCAL }
_93 = { NONLOCAL } same as argc
_94 = { NONLOCAL } same as argc
_95 = { ESCAPED NONLOCAL }
CALLUSED(198) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(199) = { }
_96 = { STRING ESCAPED NONLOCAL }
_97 = { NONLOCAL } same as argc
_98 = { NONLOCAL } same as argc
_99 = { ESCAPED NONLOCAL }
CALLUSED(204) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(205) = { }
_100 = { STRING ESCAPED NONLOCAL }
_101 = { NONLOCAL } same as argc
_102 = { NONLOCAL } same as argc
_103 = { ESCAPED NONLOCAL }
CALLUSED(210) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(211) = { }
_104 = { STRING ESCAPED NONLOCAL }
_Z6bannerv = { }
exit = { }
_105 = { NONLOCAL } same as argc
_106 = { NONLOCAL } same as argc
_107 = { ESCAPED NONLOCAL }
CALLUSED(218) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(219) = { }
_108 = { STRING ESCAPED NONLOCAL }
_109 = { NONLOCAL } same as argc
_110 = { NONLOCAL } same as argc
_111 = { ESCAPED NONLOCAL }
CALLUSED(224) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(225) = { }
_112 = { STRING ESCAPED NONLOCAL }
_113 = { NONLOCAL } same as argc
_114 = { NONLOCAL } same as argc
_115 = { ESCAPED NONLOCAL }
CALLUSED(230) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(231) = { }
_116 = { STRING ESCAPED NONLOCAL }
useLoadAverage_609 = { NULL NONLOCAL } same as keep_684
readEntireFile_619 = { NULL NONLOCAL } same as keep_684
decompress_650 = { NULL ESCAPED NONLOCAL } same as decompress_648
compress_655 = { NULL NONLOCAL } same as keep_684
testFile_660 = { NULL NONLOCAL } same as keep_684
keep_687 = { NULL NONLOCAL } same as keep_684
force_694 = { NULL NONLOCAL } same as keep_684
useLoadAverage_610 = { NULL NONLOCAL } same as keep_684
useLoadAverage_611 = { NULL NONLOCAL } same as keep_684
readEntireFile_620 = { NULL NONLOCAL } same as keep_684
readEntireFile_621 = { NULL NONLOCAL } same as keep_684
blockSize_633 = { ESCAPED NONLOCAL } same as _849
blockSize_634 = { ESCAPED NONLOCAL } same as _849
maxMemory_640 = { ESCAPED NONLOCAL } same as _849
maxMemory_641 = { ESCAPED NONLOCAL } same as _849
maxMemorySwitch_644 = { NULL NONLOCAL } same as keep_684
maxMemorySwitch_645 = { NULL NONLOCAL } same as keep_684
decompress_651 = { NULL ESCAPED NONLOCAL } same as decompress_648
decompress_652 = { NULL ESCAPED NONLOCAL } same as decompress_648
compress_656 = { NULL NONLOCAL } same as keep_684
compress_657 = { NULL NONLOCAL } same as keep_684
testFile_661 = { NULL NONLOCAL } same as keep_684
testFile_662 = { NULL NONLOCAL } same as keep_684
keep_688 = { NULL NONLOCAL } same as keep_684
keep_689 = { NULL NONLOCAL } same as keep_684
force_695 = { NULL NONLOCAL } same as keep_684
force_696 = { NULL NONLOCAL } same as keep_684
j_703 = { NULL NONLOCAL } same as keep_684
j_961 = { NULL NONLOCAL } same as keep_684
_117 = { NONLOCAL } same as argc
_118 = { NONLOCAL } same as argc
_119 = { ESCAPED NONLOCAL }
_120 = { ESCAPED NONLOCAL } same as _119
_121 = { ESCAPED NONLOCAL }
_122 = { NONLOCAL } same as argc
_123 = { NONLOCAL } same as argc
_124 = { ESCAPED NONLOCAL }
_125 = { ESCAPED NONLOCAL } same as _124
_126 = { ESCAPED NONLOCAL }
_127 = { ESCAPED NONLOCAL } same as _126
k_885 = { NULL NONLOCAL } same as keep_684
_1383 = { cmdLineTemp }
cmdLineTemp = { NULL ESCAPED NONLOCAL }
_1671 = { cmdLineTemp } same as _1383
cmdLineTempCount_614 = { NULL NONLOCAL } same as keep_684
cmdLineTempCount_889 = { NULL NONLOCAL } same as keep_684
k_705 = { NULL NONLOCAL } same as keep_684
k_888 = { NULL NONLOCAL } same as keep_684
_128 = { NONLOCAL } same as argc
_129 = { NONLOCAL } same as argc
_130 = { ESCAPED NONLOCAL }
_131 = { ESCAPED NONLOCAL } same as _130
_132 = { ESCAPED NONLOCAL }
_133 = { NONLOCAL } same as argc
_134 = { NONLOCAL } same as argc
_135 = { ESCAPED NONLOCAL }
_136 = { ESCAPED NONLOCAL } same as _135
_137 = { ESCAPED NONLOCAL }
_138 = { ESCAPED NONLOCAL } same as _137
_139 = { ESCAPED NONLOCAL }
_140 = { ESCAPED NONLOCAL } same as progName_856
_141 = { NULL NONLOCAL } same as keep_684
_142 = { NONLOCAL } same as argc
_143 = { NONLOCAL } same as argc
_144 = { ESCAPED NONLOCAL }
_145 = { NULL NONLOCAL } same as keep_684
_146 = { ESCAPED NONLOCAL } same as _144
_1354 = { cmdLineTemp } same as _1383
_1673 = { cmdLineTemp } same as _1383
strtol = { }
_1379 = { ESCAPED NONLOCAL } same as _849
_1283 = { ESCAPED NONLOCAL } same as _849
numCPU.457_148 = { ESCAPED NONLOCAL } same as _ZL6numCPU
stderr.458_149 = { ESCAPED NONLOCAL } same as _849
_1324 = { ESCAPED NONLOCAL } same as _849
numCPU.459_150 = { ESCAPED NONLOCAL } same as _ZL6numCPU
stderr.460_151 = { ESCAPED NONLOCAL } same as _849
_1252 = { ESCAPED NONLOCAL } same as _849
_152 = { NULL NONLOCAL } same as keep_684
j_894 = { NULL NONLOCAL } same as keep_684
k_921 = { NULL NONLOCAL } same as keep_684
_1248 = { cmdLineTemp } same as _1383
_1689 = { cmdLineTemp } same as _1383
cmdLineTempCount_615 = { NULL NONLOCAL } same as keep_684
cmdLineTempCount_926 = { NULL NONLOCAL } same as keep_684
k_706 = { NULL NONLOCAL } same as keep_684
k_925 = { NULL NONLOCAL } same as keep_684
_153 = { NONLOCAL } same as argc
_154 = { NONLOCAL } same as argc
_155 = { ESCAPED NONLOCAL }
_156 = { ESCAPED NONLOCAL } same as _155
_157 = { ESCAPED NONLOCAL }
_158 = { NONLOCAL } same as argc
_159 = { NONLOCAL } same as argc
_160 = { ESCAPED NONLOCAL }
_161 = { ESCAPED NONLOCAL } same as _160
_162 = { ESCAPED NONLOCAL }
_163 = { ESCAPED NONLOCAL } same as _162
_164 = { ESCAPED NONLOCAL }
_165 = { ESCAPED NONLOCAL } same as progName_856
_166 = { NULL NONLOCAL } same as keep_684
_167 = { NONLOCAL } same as argc
_168 = { NONLOCAL } same as argc
_169 = { ESCAPED NONLOCAL }
_170 = { NULL NONLOCAL } same as keep_684
_171 = { ESCAPED NONLOCAL } same as _169
_1220 = { cmdLineTemp } same as _1383
_1691 = { cmdLineTemp } same as _1383
_1244 = { ESCAPED NONLOCAL } same as _849
_1233 = { ESCAPED NONLOCAL } same as _849
blockSize_930 = { ESCAPED NONLOCAL } same as _849
blockSize.461_173 = { ESCAPED NONLOCAL } same as _849
_174 = { ESCAPED NONLOCAL } same as _849
stderr.462_175 = { ESCAPED NONLOCAL } same as _849
_1207 = { ESCAPED NONLOCAL } same as _849
_176 = { NULL NONLOCAL } same as keep_684
j_931 = { NULL NONLOCAL } same as keep_684
k_899 = { NULL NONLOCAL } same as keep_684
_1201 = { cmdLineTemp } same as _1383
_1681 = { cmdLineTemp } same as _1383
cmdLineTempCount_616 = { NULL NONLOCAL } same as keep_684
cmdLineTempCount_904 = { NULL NONLOCAL } same as keep_684
k_707 = { NULL NONLOCAL } same as keep_684
k_903 = { NULL NONLOCAL } same as keep_684
_177 = { NONLOCAL } same as argc
_178 = { NONLOCAL } same as argc
_179 = { ESCAPED NONLOCAL }
_180 = { ESCAPED NONLOCAL } same as _179
_181 = { ESCAPED NONLOCAL }
_182 = { NONLOCAL } same as argc
_183 = { NONLOCAL } same as argc
_184 = { ESCAPED NONLOCAL }
_185 = { ESCAPED NONLOCAL } same as _184
_186 = { ESCAPED NONLOCAL }
_187 = { ESCAPED NONLOCAL } same as _186
_188 = { ESCAPED NONLOCAL }
_189 = { ESCAPED NONLOCAL } same as progName_856
_190 = { NULL NONLOCAL } same as keep_684
_191 = { NONLOCAL } same as argc
_192 = { NONLOCAL } same as argc
_193 = { ESCAPED NONLOCAL }
_194 = { NULL NONLOCAL } same as keep_684
_195 = { ESCAPED NONLOCAL } same as _193
_1145 = { cmdLineTemp } same as _1383
_1683 = { cmdLineTemp } same as _1383
_1169 = { ESCAPED NONLOCAL } same as _849
_1151 = { ESCAPED NONLOCAL } same as _849
maxMemory_908 = { ESCAPED NONLOCAL } same as _849
maxMemory.463_197 = { ESCAPED NONLOCAL } same as _849
_198 = { ESCAPED NONLOCAL } same as _849
stderr.464_199 = { ESCAPED NONLOCAL } same as _849
_1143 = { ESCAPED NONLOCAL } same as _849
_200 = { NULL NONLOCAL } same as keep_684
j_910 = { NULL NONLOCAL } same as keep_684
k_936 = { NULL NONLOCAL } same as keep_684
_1108 = { cmdLineTemp } same as _1383
_1697 = { cmdLineTemp } same as _1383
_ZL20ChildThreadStackSize = { ESCAPED NONLOCAL } same as _849
cmdLineTempCount_617 = { NULL NONLOCAL } same as keep_684
cmdLineTempCount_941 = { NULL NONLOCAL } same as keep_684
k_708 = { NULL NONLOCAL } same as keep_684
k_940 = { NULL NONLOCAL } same as keep_684
_201 = { NONLOCAL } same as argc
_202 = { NONLOCAL } same as argc
_203 = { ESCAPED NONLOCAL }
_204 = { ESCAPED NONLOCAL } same as _203
_205 = { ESCAPED NONLOCAL }
_206 = { NONLOCAL } same as argc
_207 = { NONLOCAL } same as argc
_208 = { ESCAPED NONLOCAL }
_209 = { ESCAPED NONLOCAL } same as _208
_210 = { ESCAPED NONLOCAL }
_211 = { ESCAPED NONLOCAL } same as _210
_212 = { ESCAPED NONLOCAL }
_213 = { ESCAPED NONLOCAL } same as progName_856
_214 = { NULL NONLOCAL } same as keep_684
_215 = { NONLOCAL } same as argc
_216 = { NONLOCAL } same as argc
_217 = { ESCAPED NONLOCAL }
_218 = { NULL NONLOCAL } same as keep_684
_219 = { ESCAPED NONLOCAL } same as _217
_1111 = { cmdLineTemp } same as _1383
_1699 = { cmdLineTemp } same as _1383
_1107 = { ESCAPED NONLOCAL } same as _849
_1104 = { ESCAPED NONLOCAL } same as _849
_221 = { ESCAPED NONLOCAL } same as _849
ChildThreadStackSize.465_222 = { ESCAPED NONLOCAL } same as _849
ChildThreadStackSize.466_223 = { ESCAPED NONLOCAL } same as _849
stderr.467_224 = { ESCAPED NONLOCAL } same as _849
_1102 = { ESCAPED NONLOCAL } same as _849
ChildThreadStackSize.468_225 = { ESCAPED NONLOCAL } same as _849
ChildThreadStackSize.469_226 = { ESCAPED NONLOCAL } same as _849
stderr.470_227 = { ESCAPED NONLOCAL } same as _849
_1100 = { ESCAPED NONLOCAL } same as _849
_228 = { NULL NONLOCAL } same as keep_684
j_949 = { NULL NONLOCAL } same as keep_684
_229 = { ESCAPED NONLOCAL } same as progName_856
j_704 = { NULL NONLOCAL } same as keep_684
_230 = { NONLOCAL } same as argc
_231 = { NONLOCAL } same as argc
FileListCount.472_233 = { NULL ESCAPED NONLOCAL } same as decompress_648
_234 = { NULL ESCAPED NONLOCAL } same as decompress_648
_235 = { NULL ESCAPED NONLOCAL } same as decompress_648
_236 = { ESCAPED NONLOCAL } same as _849
_237 = { ESCAPED NONLOCAL }
FileListCount.473_238 = { NULL ESCAPED NONLOCAL } same as decompress_648
_239 = { NULL ESCAPED NONLOCAL } same as decompress_648
BWTblockSize.474_240 = { ESCAPED NONLOCAL } same as _849
_241 = { ESCAPED NONLOCAL } same as _849
_242 = { ESCAPED NONLOCAL } same as _849
_ZL13Bz2HeaderZero = { ESCAPED NONLOCAL } same as _243
_243 = { ESCAPED NONLOCAL }
_244 = { ESCAPED NONLOCAL } same as _243
_245 = { }
_246 = { }
_247 = { }
stderr.475_248 = { ESCAPED NONLOCAL } same as _849
_1098 = { ESCAPED NONLOCAL } same as _849
_249 = { ESCAPED NONLOCAL } same as progName_856
stderr.476_250 = { ESCAPED NONLOCAL } same as _849
_1096 = { ESCAPED NONLOCAL } same as _849
FileListCount.477_251 = { NULL ESCAPED NONLOCAL } same as decompress_648
stdin.479_252 = { ESCAPED NONLOCAL } same as _849
stdin = { ESCAPED NONLOCAL } same as _849
fileno = { }
_253 = { ESCAPED NONLOCAL } same as _849
isatty = { }
_254 = { ESCAPED NONLOCAL } same as _849
stderr.480_255 = { ESCAPED NONLOCAL } same as _849
_1094 = { ESCAPED NONLOCAL } same as _849
_256 = { ESCAPED NONLOCAL } same as progName_856
stderr.481_257 = { ESCAPED NONLOCAL } same as _849
_1068 = { ESCAPED NONLOCAL } same as _849
FileListCount.483_259 = { NULL ESCAPED NONLOCAL } same as decompress_648
_260 = { NULL ESCAPED NONLOCAL } same as decompress_648
_261 = { NULL ESCAPED NONLOCAL } same as decompress_648
_262 = { ESCAPED NONLOCAL } same as _849
derefaddrtmp(470) = { stdinFile }
FileListCount.484_263 = { NULL ESCAPED NONLOCAL } same as decompress_648
_264 = { NULL ESCAPED NONLOCAL } same as decompress_648
stdin.486_265 = { ESCAPED NONLOCAL } same as _849
_266 = { ESCAPED NONLOCAL } same as _849
_267 = { ESCAPED NONLOCAL } same as _849
stderr.487_268 = { ESCAPED NONLOCAL } same as _849
_1063 = { ESCAPED NONLOCAL } same as _849
_269 = { ESCAPED NONLOCAL } same as progName_856
stderr.488_270 = { ESCAPED NONLOCAL } same as _849
_1492 = { ESCAPED NONLOCAL } same as _849
FileListCount.490_272 = { NULL ESCAPED NONLOCAL } same as decompress_648
_273 = { NULL ESCAPED NONLOCAL } same as decompress_648
_274 = { NULL ESCAPED NONLOCAL } same as decompress_648
_275 = { ESCAPED NONLOCAL } same as _849
derefaddrtmp(485) = { stdinFile } same as derefaddrtmp(470)
FileListCount.491_276 = { NULL ESCAPED NONLOCAL } same as decompress_648
_277 = { NULL ESCAPED NONLOCAL } same as decompress_648
OutputStdOut.492_278 = { ESCAPED NONLOCAL } same as _849
QuietMode.493_279 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.494_280 = { ESCAPED NONLOCAL } same as _849
_1493 = { ESCAPED NONLOCAL } same as _849
keep_691 = { NULL NONLOCAL } same as keep_684
stdout.496_281 = { ESCAPED NONLOCAL } same as _849
stdout = { ESCAPED NONLOCAL } same as _849
_282 = { ESCAPED NONLOCAL } same as _849
_283 = { ESCAPED NONLOCAL } same as _849
stderr.497_284 = { ESCAPED NONLOCAL } same as _849
_1494 = { ESCAPED NONLOCAL } same as _849
_285 = { ESCAPED NONLOCAL } same as progName_856
stderr.498_286 = { ESCAPED NONLOCAL } same as _849
_1495 = { ESCAPED NONLOCAL } same as _849
FileListCount.500_288 = { NULL ESCAPED NONLOCAL } same as decompress_648
_289 = { NULL ESCAPED NONLOCAL } same as decompress_648
_290 = { NULL ESCAPED NONLOCAL } same as decompress_648
_291 = { ESCAPED NONLOCAL } same as _849
derefaddrtmp(506) = { stdinFile } same as derefaddrtmp(470)
FileListCount.501_292 = { NULL ESCAPED NONLOCAL } same as decompress_648
_293 = { NULL ESCAPED NONLOCAL } same as decompress_648
keep_692 = { NULL NONLOCAL } same as keep_684
QuietMode.502_294 = { NULL ESCAPED NONLOCAL } same as decompress_648
getloadavg = { }
loadAvgArray = { ESCAPED NONLOCAL } same as loadAverage_1020
ret_1019 = { ESCAPED NONLOCAL } same as _849
QuietMode.506_298 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.507_299 = { ESCAPED NONLOCAL } same as _849
_1496 = { ESCAPED NONLOCAL } same as _849
loadAverage_1020 = { ESCAPED NONLOCAL }
_300 = { ESCAPED NONLOCAL }
_301 = { ESCAPED NONLOCAL } same as _300
numCPUidle_1021 = { ESCAPED NONLOCAL } same as _ZL6numCPU
numCPU.508_302 = { ESCAPED NONLOCAL } same as _ZL6numCPU
numCPU.509_303 = { ESCAPED NONLOCAL } same as _ZL6numCPU
loadAverage_607 = { ESCAPED NONLOCAL } same as _300
useLoadAverage_613 = { NULL NONLOCAL } same as keep_684
_Z25initChildThreadAttributesv = { }
_ZL13sigInFilename = { NULL STRING ESCAPED NONLOCAL bz2Header outFilename stdinFile tvStartTime tz _ZSt7nothrow cmdLineTemp _ZL13Bz2HeaderZero loadAvgArray D.39833 D.39832 tmpBuff bz2Tail D.39850 tbz2Tail D.39853 bz2Tail D.39859 D.39862 D.39861 _ZL17ErrorHandlerMutex statbuf statbuf _ZL21ChildThreadAttributes consumer_decompress output fileWriter consumer _ZL18TerminateFlagMutex statbuf tvStopTime }
_ZL14sigOutFilename = { NULL ESCAPED NONLOCAL outFilename }
_Z19setupSignalHandlingv = { }
ret_1031 = { ESCAPED NONLOCAL } same as _849
stderr.510_304 = { ESCAPED NONLOCAL } same as _849
_1497 = { ESCAPED NONLOCAL } same as _849
_Z15setupTerminatorv = { }
ret_1033 = { ESCAPED NONLOCAL } same as _849
stderr.511_305 = { ESCAPED NONLOCAL } same as _849
_1498 = { ESCAPED NONLOCAL } same as _849
numCPU.512_306 = { ESCAPED NONLOCAL } same as _ZL6numCPU
QuietMode.513_307 = { NULL ESCAPED NONLOCAL } same as decompress_648
numCPU.514_308 = { ESCAPED NONLOCAL } same as _ZL6numCPU
stderr.515_309 = { ESCAPED NONLOCAL } same as _849
_1499 = { ESCAPED NONLOCAL } same as _849
stderr.516_310 = { ESCAPED NONLOCAL } same as _849
_1500 = { ESCAPED NONLOCAL } same as _849
BWTblockSize.517_311 = { ESCAPED NONLOCAL } same as _849
stderr.518_312 = { ESCAPED NONLOCAL } same as _849
_1501 = { ESCAPED NONLOCAL } same as _849
stderr.519_313 = { ESCAPED NONLOCAL } same as _849
_1502 = { ESCAPED NONLOCAL } same as _849
_314 = { ESCAPED NONLOCAL } same as _849
stderr.520_315 = { ESCAPED NONLOCAL } same as _849
_1503 = { ESCAPED NONLOCAL } same as _849
_316 = { ESCAPED NONLOCAL } same as _849
stderr.521_317 = { ESCAPED NONLOCAL } same as _849
_1504 = { ESCAPED NONLOCAL } same as _849
ChildThreadStackSize.522_318 = { ESCAPED NONLOCAL } same as _849
ChildThreadStackSize.523_319 = { ESCAPED NONLOCAL } same as _849
_320 = { ESCAPED NONLOCAL } same as _849
stderr.524_321 = { ESCAPED NONLOCAL } same as _849
_1505 = { ESCAPED NONLOCAL } same as _849
IgnoreTrailingGarbageFlag.526_322 = { NULL ESCAPED NONLOCAL } same as decompress_648
iftmp.525_720 = { STRING }
stderr.527_323 = { ESCAPED NONLOCAL } same as _849
_1506 = { ESCAPED NONLOCAL } same as _849
stderr.528_324 = { ESCAPED NONLOCAL } same as _849
_1507 = { ESCAPED NONLOCAL } same as _849
_Z11mutexesInitv = { }
_1047 = { ESCAPED NONLOCAL } same as _849
numCPU.529_325 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_Z9queueIniti = { }
_1050 = { ESCAPED NONLOCAL } same as _849
_ZL9FifoQueue = { ESCAPED NONLOCAL } same as _849
fifo_1052 = { ESCAPED NONLOCAL } same as _849
stderr.530_327 = { ESCAPED NONLOCAL } same as _849
_1508 = { ESCAPED NONLOCAL } same as _849
zeroByteFile_623 = { NULL NONLOCAL } same as keep_684
zeroByteFile_627 = { NULL NONLOCAL } same as keep_684
blockSize_636 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
blockSize_638 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
errLevel_664 = { NULL NONLOCAL } same as keep_684
errLevel_675 = { NULL NONLOCAL } same as keep_684
noThreads_677 = { NULL NONLOCAL } same as keep_684
noThreads_683 = { NULL NONLOCAL } same as keep_684
fileLoop_698 = { NULL NONLOCAL } same as keep_684
fileLoop_1421 = { NULL NONLOCAL } same as keep_684
FileListCount.531_328 = { NULL ESCAPED NONLOCAL } same as decompress_648
_ZL12producerDone = { NULL ESCAPED NONLOCAL } same as decompress_648
_ZL10InFileSize = { NULL ESCAPED NONLOCAL }
_ZL9NumBlocks = { NULL ESCAPED NONLOCAL } same as decompress_648
_1060 = { ESCAPED NONLOCAL } same as _849
_ZN6pbzip212ErrorContext5resetEv = { }
_331 = { NULL NONLOCAL } same as keep_684
_332 = { NULL NONLOCAL } same as keep_684
_333 = { ESCAPED NONLOCAL } same as _849
InFilename_1062 = { NULL STRING ESCAPED NONLOCAL bz2Header outFilename stdinFile tvStartTime tz _ZSt7nothrow cmdLineTemp _ZL13Bz2HeaderZero loadAvgArray D.39833 D.39832 tmpBuff bz2Tail D.39850 tbz2Tail D.39853 bz2Tail D.39859 D.39862 D.39861 _ZL17ErrorHandlerMutex statbuf statbuf _ZL21ChildThreadAttributes consumer_decompress output fileWriter consumer _ZL18TerminateFlagMutex statbuf tvStopTime } same as _ZL13sigInFilename
QuietMode.533_334 = { NULL ESCAPED NONLOCAL } same as decompress_648
FileListCount.534_335 = { NULL ESCAPED NONLOCAL } same as decompress_648
_336 = { NULL NONLOCAL } same as keep_684
stderr.535_337 = { ESCAPED NONLOCAL } same as _849
_1509 = { ESCAPED NONLOCAL } same as _849
CALLUSED(599) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(600) = { }
_338 = { STRING ESCAPED NONLOCAL } same as CALLUSED(599)
stderr.536_339 = { ESCAPED NONLOCAL } same as _849
_1510 = { ESCAPED NONLOCAL } same as _849
stderr.537_340 = { ESCAPED NONLOCAL } same as _849
_1511 = { ESCAPED NONLOCAL } same as _849
_Z18testCompressedDataPc = { }
_1415 = { ESCAPED NONLOCAL } same as _849
QuietMode.538_341 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.539_342 = { ESCAPED NONLOCAL } same as _849
_1512 = { ESCAPED NONLOCAL } same as _849
errLevel_665 = { NULL NONLOCAL } same as keep_684
QuietMode.540_343 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.541_344 = { ESCAPED NONLOCAL } same as _849
_1513 = { ESCAPED NONLOCAL } same as _849
_346 = { NULL NONLOCAL } same as keep_684
_347 = { NULL NONLOCAL } same as keep_684
_348 = { ESCAPED NONLOCAL } same as _849
_349 = { NULL STRING ESCAPED NONLOCAL bz2Header outFilename stdinFile tvStartTime tz _ZSt7nothrow cmdLineTemp _ZL13Bz2HeaderZero loadAvgArray D.39833 D.39832 tmpBuff bz2Tail D.39850 tbz2Tail D.39853 bz2Tail D.39859 D.39862 D.39861 _ZL17ErrorHandlerMutex statbuf statbuf _ZL21ChildThreadAttributes consumer_decompress output fileWriter consumer _ZL18TerminateFlagMutex statbuf tvStopTime } same as _ZL13sigInFilename
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_ = { }
D.39833 = { ESCAPED NONLOCAL } same as _1591
D.39832 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_ = { }
_1591 = { ESCAPED NONLOCAL }
_ZdlPv = { }
CALLUSED(625) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(626) = { }
_350 = { STRING ESCAPED NONLOCAL } same as CALLUSED(625)
*open64 = { }
_1520 = { ESCAPED NONLOCAL } same as _849
_1524 = { ESCAPED NONLOCAL } same as _849
__errno_location = { }
_351 = { NONLOCAL } same as argc
_352 = { ESCAPED NONLOCAL }
stderr.543_353 = { ESCAPED NONLOCAL } same as _849
_ZN6pbzip212ErrorContext13printErrnoMsgEP8_IO_FILEi = { }
stderr.544_354 = { ESCAPED NONLOCAL } same as _849
_1527 = { ESCAPED NONLOCAL } same as _849
stderr.545_355 = { ESCAPED NONLOCAL } same as _849
_1528 = { ESCAPED NONLOCAL } same as _849
_1530 = { tmpBuff }
tmpBuff = { NULL ESCAPED NONLOCAL } same as _390
_1748 = { tmpBuff } same as _1530
strlen = { }
CALLUSED(644) = { ESCAPED NONLOCAL bz2Header }
CALLCLOBBERED(645) = { }
_356 = { ESCAPED NONLOCAL bz2Header }
_357 = { ESCAPED NONLOCAL bz2Header } same as _356
_Z7do_readiPvm = { }
_1075 = { ESCAPED NONLOCAL } same as _849
size_1076 = { ESCAPED NONLOCAL } same as _849
_Z8do_closei = { }
CALLUSED(652) = { ESCAPED NONLOCAL bz2Header }
CALLCLOBBERED(653) = { }
_359 = { ESCAPED NONLOCAL bz2Header }
_360 = { ESCAPED NONLOCAL bz2Header } same as _359
_1128 = { ESCAPED NONLOCAL } same as _849
stderr.546_362 = { ESCAPED NONLOCAL } same as _849
_ZN6pbzip212ErrorContext18printErrorMessagesEP8_IO_FILE = { }
stderr.547_363 = { ESCAPED NONLOCAL } same as _849
_1531 = { ESCAPED NONLOCAL } same as _849
stderr.548_364 = { ESCAPED NONLOCAL } same as _849
_1532 = { ESCAPED NONLOCAL } same as _849
_Z6memstrIPhPcET_S2_iT0_i = { }
_1079 = { ESCAPED NONLOCAL } same as _849
stderr.550_366 = { ESCAPED NONLOCAL } same as _849
_1533 = { ESCAPED NONLOCAL } same as _849
stderr.551_367 = { ESCAPED NONLOCAL } same as _849
_1534 = { ESCAPED NONLOCAL } same as _849
CALLUSED(669) = { ESCAPED NONLOCAL bz2Header }
CALLCLOBBERED(670) = { }
_368 = { ESCAPED NONLOCAL bz2Header }
_369 = { ESCAPED NONLOCAL bz2Header } same as _368
_370 = { ESCAPED NONLOCAL bz2Header } same as _368
_371 = { ESCAPED NONLOCAL bz2Header } same as _368
_373 = { ESCAPED NONLOCAL } same as _849
_374 = { ESCAPED NONLOCAL } same as _849
_375 = { ESCAPED NONLOCAL } same as _849
_1082 = { ESCAPED NONLOCAL } same as _849
CALLUSED(679) = { ESCAPED NONLOCAL bz2Header }
CALLCLOBBERED(680) = { }
_378 = { ESCAPED NONLOCAL bz2Header }
_379 = { ESCAPED NONLOCAL bz2Header } same as _378
_380 = { ESCAPED NONLOCAL bz2Header } same as _378
_381 = { ESCAPED NONLOCAL bz2Header } same as _378
_383 = { ESCAPED NONLOCAL } same as _849
_384 = { ESCAPED NONLOCAL } same as _849
_385 = { ESCAPED NONLOCAL } same as _849
_Z6memstrIPhS0_ET_S1_iT0_i = { }
_1085 = { ESCAPED NONLOCAL } same as _849
stderr.554_388 = { ESCAPED NONLOCAL } same as _849
_1535 = { ESCAPED NONLOCAL } same as _849
stderr.555_389 = { ESCAPED NONLOCAL } same as _849
_1536 = { ESCAPED NONLOCAL } same as _849
_390 = { NULL ESCAPED NONLOCAL }
_391 = { NULL ESCAPED NONLOCAL }
_392 = { NULL ESCAPED NONLOCAL } same as _390
_393 = { NULL ESCAPED NONLOCAL } same as _390
_ZL16BWTblockSizeChar = { NULL ESCAPED NONLOCAL }
bz2Tail = { ESCAPED NONLOCAL } same as _1593
D.39850 = { ESCAPED NONLOCAL }
stderr.556_394 = { ESCAPED NONLOCAL } same as _849
_1537 = { ESCAPED NONLOCAL } same as _849
stderr.557_395 = { ESCAPED NONLOCAL } same as _849
_1538 = { ESCAPED NONLOCAL } same as _849
tbz2Tail = { ESCAPED NONLOCAL } same as _1595
D.39853 = { ESCAPED NONLOCAL }
_Z15ends_with_icaseIcEbRKNSt7__cxx1112basic_stringIT_St11char_traitsIS2_ESaIS2_EEES8_ = { }
CALLUSED(708) = { NULL ESCAPED NONLOCAL outFilename bz2Tail }
CALLCLOBBERED(709) = { }
retval.558_1103 = { NULL ESCAPED NONLOCAL outFilename bz2Tail }
_1594 = { NULL ESCAPED NONLOCAL outFilename }
_1593 = { ESCAPED NONLOCAL }
_398 = { NULL ESCAPED NONLOCAL outFilename }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc = { }
CALLUSED(715) = { NULL ESCAPED NONLOCAL outFilename tbz2Tail }
CALLCLOBBERED(716) = { }
retval.559_1105 = { NULL ESCAPED NONLOCAL outFilename tbz2Tail }
_1596 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
_1595 = { ESCAPED NONLOCAL }
_401 = { NULL ESCAPED NONLOCAL outFilename }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc = { }
_1597 = { ESCAPED NONLOCAL } same as _849
_1598 = { ESCAPED NONLOCAL } same as _849
_1601 = { ESCAPED NONLOCAL } same as _1595
_1599 = { ESCAPED NONLOCAL } same as _1593
bz2Tail = { ESCAPED NONLOCAL } same as _1605
D.39859 = { ESCAPED NONLOCAL }
D.39862 = { ESCAPED NONLOCAL } same as _1603
D.39861 = { ESCAPED NONLOCAL }
CALLUSED(730) = { ESCAPED NONLOCAL bz2Tail D.39862 }
CALLCLOBBERED(731) = { }
retval.560_1148 = { ESCAPED NONLOCAL bz2Tail D.39862 }
_1603 = { ESCAPED NONLOCAL }
stderr.561_402 = { ESCAPED NONLOCAL } same as _849
_1539 = { ESCAPED NONLOCAL } same as _849
stderr.562_403 = { ESCAPED NONLOCAL } same as _849
_1540 = { ESCAPED NONLOCAL } same as _849
_1605 = { ESCAPED NONLOCAL }
_1607 = { ESCAPED NONLOCAL } same as _1605
_1608 = { ESCAPED NONLOCAL } same as _1605
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm = { }
_1609 = { ESCAPED NONLOCAL } same as _849
_1610 = { ESCAPED NONLOCAL } same as _1605
_Z15safe_mutex_lockP15pthread_mutex_t = { }
_ZL17ErrorHandlerMutex = { ESCAPED NONLOCAL }
_1612 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
_Z17safe_mutex_unlockP15pthread_mutex_t = { }
CALLUSED(748) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(749) = { }
_405 = { STRING ESCAPED NONLOCAL } same as CALLUSED(748)
_1547 = { ESCAPED NONLOCAL } same as _849
_1551 = { ESCAPED NONLOCAL } same as _849
stderr.563_406 = { ESCAPED NONLOCAL } same as _849
_1554 = { ESCAPED NONLOCAL } same as _849
stderr.564_407 = { ESCAPED NONLOCAL } same as _849
_1555 = { ESCAPED NONLOCAL } same as _849
*__fxstat64 = { }
statbuf = { ESCAPED NONLOCAL } same as _408
_1556 = { ESCAPED NONLOCAL } same as _849
_408 = { ESCAPED NONLOCAL }
_409 = { ESCAPED NONLOCAL } same as _408
stderr.565_410 = { ESCAPED NONLOCAL } same as _849
_1557 = { ESCAPED NONLOCAL } same as _849
stderr.566_411 = { ESCAPED NONLOCAL } same as _849
_1558 = { ESCAPED NONLOCAL } same as _849
_412 = { ESCAPED NONLOCAL } same as _408
_413 = { ESCAPED NONLOCAL } same as _408
stderr.567_414 = { ESCAPED NONLOCAL } same as _849
_1559 = { ESCAPED NONLOCAL } same as _849
stderr.568_415 = { ESCAPED NONLOCAL } same as _849
_1560 = { ESCAPED NONLOCAL } same as _849
_416 = { ESCAPED NONLOCAL } same as _408
InFileSize.569_417 = { NULL ESCAPED NONLOCAL } same as _ZL10InFileSize
stderr.570_418 = { ESCAPED NONLOCAL } same as _849
_1561 = { ESCAPED NONLOCAL } same as _849
stderr.571_419 = { ESCAPED NONLOCAL } same as _849
_1562 = { ESCAPED NONLOCAL } same as _849
zeroByteFile_624 = { NULL NONLOCAL } same as keep_684
_Z15getFileMetaDataPKc = { }
_420 = { ESCAPED NONLOCAL } same as _849
stderr.573_421 = { ESCAPED NONLOCAL } same as _849
_1563 = { ESCAPED NONLOCAL } same as _849
stderr.574_422 = { ESCAPED NONLOCAL } same as _849
_1564 = { ESCAPED NONLOCAL } same as _849
zeroByteFile_625 = { NULL NONLOCAL } same as keep_684
zeroByteFile_626 = { NULL NONLOCAL } same as keep_684
hInfile_628 = { NULL ESCAPED NONLOCAL } same as decompress_648
OutputStdOut.577_423 = { ESCAPED NONLOCAL } same as _849
_1613 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
_Z17check_file_existsPKc = { }
_1203 = { ESCAPED NONLOCAL } same as _849
iftmp.576_1438 = { NONLOCAL } same as argc
iftmp.576_993 = { NULL }
_1614 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
stderr.578_427 = { ESCAPED NONLOCAL } same as _849
_1565 = { ESCAPED NONLOCAL } same as _849
stderr.579_428 = { ESCAPED NONLOCAL } same as _849
_1566 = { ESCAPED NONLOCAL } same as _849
_1615 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
remove = { }
QuietMode.580_430 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.581_431 = { ESCAPED NONLOCAL } same as _849
_1567 = { ESCAPED NONLOCAL } same as _849
InFileSize.582_432 = { NULL ESCAPED NONLOCAL } same as _ZL10InFileSize
numCPU.583_433 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_434 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_435 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
blockSize_1213 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
blockSize_637 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
QuietMode.584_436 = { NULL ESCAPED NONLOCAL } same as decompress_648
FileListCount.585_437 = { NULL ESCAPED NONLOCAL } same as decompress_648
_438 = { NULL NONLOCAL } same as keep_684
stderr.586_439 = { ESCAPED NONLOCAL } same as _849
_1568 = { ESCAPED NONLOCAL } same as _849
iftmp.587_722 = { NULL STRING ESCAPED NONLOCAL bz2Header outFilename stdinFile tvStartTime tz _ZSt7nothrow cmdLineTemp _ZL13Bz2HeaderZero loadAvgArray D.39833 D.39832 tmpBuff bz2Tail D.39850 tbz2Tail D.39853 bz2Tail D.39859 D.39862 D.39861 _ZL17ErrorHandlerMutex statbuf statbuf _ZL21ChildThreadAttributes consumer_decompress output fileWriter consumer _ZL18TerminateFlagMutex statbuf tvStopTime } same as _ZL13sigInFilename
stderr.588_440 = { ESCAPED NONLOCAL } same as _849
_1569 = { ESCAPED NONLOCAL } same as _849
OutputStdOut.589_441 = { ESCAPED NONLOCAL } same as _849
_1616 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
stderr.590_443 = { ESCAPED NONLOCAL } same as _849
_1570 = { ESCAPED NONLOCAL } same as _849
stderr.591_444 = { ESCAPED NONLOCAL } same as _849
_1571 = { ESCAPED NONLOCAL } same as _849
BWTblockSizeChar.592_445 = { NULL ESCAPED NONLOCAL } same as _ZL16BWTblockSizeChar
_446 = { NULL ESCAPED NONLOCAL } same as _ZL16BWTblockSizeChar
stderr.593_447 = { ESCAPED NONLOCAL } same as _849
_1572 = { ESCAPED NONLOCAL } same as _849
CALLUSED(828) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(829) = { }
_448 = { STRING ESCAPED NONLOCAL } same as CALLUSED(828)
InFileSize.594_449 = { NULL ESCAPED NONLOCAL } same as _ZL10InFileSize
InFileSize.595_450 = { NULL ESCAPED NONLOCAL } same as _ZL10InFileSize
stderr.596_451 = { ESCAPED NONLOCAL } same as _849
_1573 = { ESCAPED NONLOCAL } same as _849
numCPU.597_452 = { ESCAPED NONLOCAL } same as _ZL6numCPU
InFileSize.598_453 = { NULL ESCAPED NONLOCAL } same as _ZL10InFileSize
noThreads_678 = { NULL NONLOCAL } same as keep_684
numCPU.599_454 = { ESCAPED NONLOCAL } same as _ZL6numCPU
CALLUSED(839) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(840) = { }
_455 = { STRING ESCAPED NONLOCAL } same as CALLUSED(839)
InFileSize.600_456 = { NULL ESCAPED NONLOCAL } same as _ZL10InFileSize
_457 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
InFileSize.601_458 = { NULL ESCAPED NONLOCAL } same as _ZL10InFileSize
_459 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_460 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_461 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_462 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
numBlocks_1225 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
numCPU.602_463 = { ESCAPED NONLOCAL } same as _ZL6numCPU
numBlocks_630 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
noThreads_679 = { NULL NONLOCAL } same as keep_684
OutputStdOut.603_464 = { ESCAPED NONLOCAL } same as _849
_1617 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
_Z16safe_open_outputPKc = { }
_1231 = { ESCAPED NONLOCAL } same as _849
_1618 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
_Z12handle_error8ExitFlagiPKcz = { }
hOutfile_629 = { ESCAPED NONLOCAL } same as _849
_Z8do_writeiPKvm = { }
_1238 = { ESCAPED NONLOCAL } same as _849
ret_1239 = { ESCAPED NONLOCAL } same as _849
OutputStdOut.604_468 = { ESCAPED NONLOCAL } same as _849
_1242 = { ESCAPED NONLOCAL } same as _849
_1619 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
_Z17writeFileMetaDataPKc = { }
_1246 = { ESCAPED NONLOCAL } same as _849
_1620 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
close_ret_718 = { NULL ESCAPED NONLOCAL } same as decompress_648
_472 = { }
_473 = { }
_474 = { }
_1621 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
stderr.606_476 = { ESCAPED NONLOCAL } same as _849
_1574 = { ESCAPED NONLOCAL } same as _849
QuietMode.607_477 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.608_478 = { ESCAPED NONLOCAL } same as _849
_1575 = { ESCAPED NONLOCAL } same as _849
stderr.609_479 = { ESCAPED NONLOCAL } same as _849
_1576 = { ESCAPED NONLOCAL } same as _849
OutputStdOut.611_483 = { ESCAPED NONLOCAL } same as _849
_1622 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
*__xstat64 = { }
statbuf = { ESCAPED NONLOCAL }
_1577 = { ESCAPED NONLOCAL } same as _849
iftmp.610_1083 = { NULL } same as iftmp.576_993
iftmp.610_1011 = { NONLOCAL } same as argc
_Z9do_removePKc = { }
_1258 = { ESCAPED NONLOCAL } same as _849
numBlocks_631 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
noThreads_680 = { NULL NONLOCAL } same as keep_684
_ZL18NumBlocksEstimated = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_487 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_488 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
NumBufferedBlocksMax.613_489 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_490 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
numCPU.614_491 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_492 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_493 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
NumBufferedBlocksMax.615_494 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
numCPU.616_495 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_496 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_497 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_498 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
numCPU.617_499 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_500 = { ESCAPED NONLOCAL } same as _ZL6numCPU
NumBufferedBlocksMax.618_501 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
numCPU.619_502 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_503 = { ESCAPED NONLOCAL } same as _ZL6numCPU
QuietMode.620_504 = { NULL ESCAPED NONLOCAL } same as decompress_648
numCPU.621_505 = { ESCAPED NONLOCAL } same as _ZL6numCPU
numCPU.622_506 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_507 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_508 = { ESCAPED NONLOCAL } same as _ZL6numCPU
NumBufferedBlocksMax.623_509 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_510 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_511 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_512 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_513 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
stderr.624_514 = { ESCAPED NONLOCAL } same as _849
_1578 = { ESCAPED NONLOCAL } same as _849
QuietMode.625_515 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.626_516 = { ESCAPED NONLOCAL } same as _849
_1579 = { ESCAPED NONLOCAL } same as _849
_ZL13LastGoodBlock = { ESCAPED NONLOCAL } same as _849
_ZL13MinErrorBlock = { ESCAPED NONLOCAL } same as _849
NumBufferedBlocksMax.627_517 = { NULL ESCAPED NONLOCAL } same as _ZL20NumBufferedBlocksMax
_Z16outputBufferInitm = { }
QuietMode.628_518 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.629_519 = { ESCAPED NONLOCAL } same as _849
_1580 = { ESCAPED NONLOCAL } same as _849
i_700 = { NULL NONLOCAL } same as keep_684
i_1315 = { NULL NONLOCAL } same as keep_684
_520 = { NULL NONLOCAL } same as keep_684
numCPU.630_521 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_522 = { ESCAPED NONLOCAL }
_523 = { NULL NONLOCAL } same as keep_684
_524 = { ESCAPED NONLOCAL } same as _522
pthread_create = { }
_ZL21ChildThreadAttributes = { ESCAPED NONLOCAL }
consumer_decompress = { ESCAPED NONLOCAL }
ret_1314 = { ESCAPED NONLOCAL } same as _849
_1317 = { ESCAPED NONLOCAL } same as _849
_ZN6pbzip212ErrorContext9saveErrorEv = { }
TerminatorThread.631_526 = { ESCAPED NONLOCAL } same as _849
_ZL16TerminatorThread = { ESCAPED NONLOCAL } same as _849
pthread_join = { }
_1321 = { ESCAPED NONLOCAL } same as _849
_1623 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
output = { ESCAPED NONLOCAL } same as output.635_530
fileWriter = { ESCAPED NONLOCAL }
ret_1326 = { ESCAPED NONLOCAL } same as _849
TerminatorThread.632_528 = { ESCAPED NONLOCAL } same as _849
_1349 = { ESCAPED NONLOCAL } same as _849
InFileSize.633_529 = { NULL ESCAPED NONLOCAL } same as _ZL10InFileSize
_Z19producer_decompressilP5queue = { }
_1328 = { ESCAPED NONLOCAL } same as _849
output.635_530 = { ESCAPED NONLOCAL }
_1335 = { ESCAPED NONLOCAL } same as _849
_1338 = { ESCAPED NONLOCAL } same as _849
TerminatorThread.636_533 = { ESCAPED NONLOCAL } same as _849
_1344 = { ESCAPED NONLOCAL } same as _849
errLevel_668 = { NULL NONLOCAL } same as keep_684
noThreads_681 = { NULL NONLOCAL } same as keep_684
switchedMtToSt_709 = { NULL NONLOCAL } same as keep_684
errLevelCurrentFile_711 = { NULL NONLOCAL } same as keep_684
_534 = { }
_535 = { }
_536 = { }
QuietMode.637_537 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.638_538 = { ESCAPED NONLOCAL } same as _849
_1581 = { ESCAPED NONLOCAL } same as _849
close = { }
_1624 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
_Z16directdecompressPKcS0_ = { }
_1356 = { ESCAPED NONLOCAL } same as _849
QuietMode.639_540 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.640_541 = { ESCAPED NONLOCAL } same as _849
_1582 = { ESCAPED NONLOCAL } same as _849
i_701 = { NULL NONLOCAL } same as keep_684
i_1293 = { NULL NONLOCAL } same as keep_684
_542 = { NULL NONLOCAL } same as keep_684
numCPU.641_543 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_544 = { ESCAPED NONLOCAL }
_545 = { NULL NONLOCAL } same as keep_684
_546 = { ESCAPED NONLOCAL } same as _544
consumer = { ESCAPED NONLOCAL }
ret_1292 = { ESCAPED NONLOCAL } same as _849
_1295 = { ESCAPED NONLOCAL } same as _849
TerminatorThread.642_548 = { ESCAPED NONLOCAL } same as _849
_1625 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
ret_1302 = { ESCAPED NONLOCAL } same as _849
TerminatorThread.643_550 = { ESCAPED NONLOCAL } same as _849
_Z8produceriiP5queue = { }
_1304 = { ESCAPED NONLOCAL } same as _849
QuietMode.644_551 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.645_552 = { ESCAPED NONLOCAL } same as _849
_1583 = { ESCAPED NONLOCAL } same as _849
_1626 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
InFileSize.646_554 = { NULL ESCAPED NONLOCAL } same as _ZL10InFileSize
_Z14directcompressiliPKc = { }
_1285 = { ESCAPED NONLOCAL } same as _849
errLevel_669 = { NULL NONLOCAL } same as keep_684
noThreads_682 = { NULL NONLOCAL } same as keep_684
switchedMtToSt_710 = { NULL NONLOCAL } same as keep_684
errLevelCurrentFile_712 = { NULL NONLOCAL } same as keep_684
output.647_555 = { ESCAPED NONLOCAL } same as output.635_530
_1361 = { ESCAPED NONLOCAL } same as _849
_556 = { NONLOCAL } same as argc
_557 = { ESCAPED NONLOCAL }
stderr.648_558 = { ESCAPED NONLOCAL } same as _849
errLevel_670 = { NULL NONLOCAL } same as keep_684
errLevelCurrentFile_713 = { NULL NONLOCAL } same as keep_684
_559 = { }
_560 = { NULL NONLOCAL } same as keep_684
errLevel_671 = { NULL NONLOCAL } same as keep_684
errLevel_672 = { NULL NONLOCAL } same as keep_684
i_702 = { NULL NONLOCAL } same as keep_684
i_1373 = { NULL NONLOCAL } same as keep_684
errLevelCurrentFile_714 = { NULL NONLOCAL } same as keep_684
errLevelCurrentFile_715 = { NULL NONLOCAL } same as keep_684
_561 = { NULL NONLOCAL } same as keep_684
numCPU.649_562 = { ESCAPED NONLOCAL } same as _ZL6numCPU
_563 = { ESCAPED NONLOCAL }
_564 = { NULL NONLOCAL } same as keep_684
_565 = { ESCAPED NONLOCAL } same as _563
_566 = { ESCAPED NONLOCAL }
_1368 = { ESCAPED NONLOCAL } same as _849
_567 = { NONLOCAL } same as argc
_568 = { ESCAPED NONLOCAL }
stderr.650_569 = { ESCAPED NONLOCAL } same as _849
errLevel_673 = { NULL NONLOCAL } same as keep_684
errLevelCurrentFile_716 = { NULL NONLOCAL } same as keep_684
_ZL18TerminateFlagMutex = { ESCAPED NONLOCAL }
ret_1627 = { ESCAPED NONLOCAL } same as _849
_ZL13terminateFlag = { ESCAPED NONLOCAL } same as _849
errLevel_674 = { NULL NONLOCAL } same as keep_684
errLevelCurrentFile_717 = { NULL NONLOCAL } same as keep_684
OutputStdOut.652_571 = { ESCAPED NONLOCAL } same as _849
_1628 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
_1381 = { ESCAPED NONLOCAL } same as _849
_1629 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
_575 = { }
_576 = { }
_577 = { }
OutputStdOut.655_578 = { ESCAPED NONLOCAL } same as _849
_1630 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
statbuf = { ESCAPED NONLOCAL }
_1584 = { ESCAPED NONLOCAL } same as _849
iftmp.654_480 = { NULL } same as iftmp.576_993
iftmp.654_1185 = { NONLOCAL } same as argc
_1391 = { ESCAPED NONLOCAL } same as _849
_1631 = { ESCAPED NONLOCAL } same as _849
_ZL12OutputBuffer = { ESCAPED NONLOCAL } same as _849
derefaddrtmp(1055) = { NONLOCAL } same as argc
derefaddrtmp(1056) = { NULL } same as iftmp.576_993
derefaddrtmp(1057) = { NULL } same as iftmp.576_993
derefaddrtmp(1058) = { NULL } same as iftmp.576_993
derefaddrtmp(1059) = { NULL } same as iftmp.576_993
derefaddrtmp(1060) = { NULL } same as iftmp.576_993
derefaddrtmp(1061) = { NULL } same as iftmp.576_993
derefaddrtmp(1062) = { NONLOCAL } same as argc
ret_1632 = { ESCAPED NONLOCAL } same as _849
iftmp.658_1382 = { NULL } same as iftmp.576_993
iftmp.658_1336 = { NONLOCAL } same as argc
_Z20syncSetTerminateFlagi = { }
QuietMode.659_583 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.660_584 = { ESCAPED NONLOCAL } same as _849
_1585 = { ESCAPED NONLOCAL } same as _849
errLevel_676 = { NULL NONLOCAL } same as keep_684
OutputStdOut.661_585 = { ESCAPED NONLOCAL } same as _849
_1423 = { ESCAPED NONLOCAL } same as _849
_1426 = { ESCAPED NONLOCAL } same as _849
SIG_HANDLER_QUIT_SIGNAL.662_587 = { ESCAPED NONLOCAL } same as _849
_ZL23SIG_HANDLER_QUIT_SIGNAL = { ESCAPED NONLOCAL } same as _849
SignalHandlerThread.663_588 = { ESCAPED NONLOCAL } same as _849
_ZL19SignalHandlerThread = { ESCAPED NONLOCAL } same as _849
pthread_kill = { }
ret_1431 = { ESCAPED NONLOCAL } same as _849
stderr.664_589 = { ESCAPED NONLOCAL } same as _849
_1586 = { ESCAPED NONLOCAL } same as _849
SignalHandlerThread.665_590 = { ESCAPED NONLOCAL } same as _849
_1433 = { ESCAPED NONLOCAL } same as _849
stderr.666_591 = { ESCAPED NONLOCAL } same as _849
_1587 = { ESCAPED NONLOCAL } same as _849
ret_1633 = { ESCAPED NONLOCAL } same as _849
_Z19syncSetFinishedFlagi = { }
TerminatorThread.668_593 = { ESCAPED NONLOCAL } same as _849
_1441 = { ESCAPED NONLOCAL } same as _849
stderr.669_594 = { ESCAPED NONLOCAL } same as _849
_1588 = { ESCAPED NONLOCAL } same as _849
_Z11queueDeleteP5queue = { }
_Z13mutexesDeletev = { }
_ZdaPv = { }
tvStopTime = { ESCAPED NONLOCAL } same as _600
_595 = { ESCAPED NONLOCAL }
_596 = { ESCAPED NONLOCAL } same as _595
_597 = { ESCAPED NONLOCAL } same as _595
_598 = { ESCAPED NONLOCAL } same as _595
_599 = { ESCAPED NONLOCAL }
timeStart_1448 = { ESCAPED NONLOCAL } same as _599
_600 = { ESCAPED NONLOCAL }
_601 = { ESCAPED NONLOCAL } same as _600
_602 = { ESCAPED NONLOCAL } same as _600
_603 = { ESCAPED NONLOCAL } same as _600
_604 = { ESCAPED NONLOCAL }
timeStop_1449 = { ESCAPED NONLOCAL } same as _604
timeCalc_1450 = { ESCAPED NONLOCAL }
QuietMode.670_605 = { NULL ESCAPED NONLOCAL } same as decompress_648
stderr.671_606 = { ESCAPED NONLOCAL } same as _849
_1589 = { ESCAPED NONLOCAL } same as _849
_719 = { ESCAPED NONLOCAL } same as _849
_1635 = { NULL ESCAPED NONLOCAL outFilename } same as _1594
_1637 = { ESCAPED NONLOCAL } same as _1595
_1639 = { ESCAPED NONLOCAL } same as _1593
_1641 = { ESCAPED NONLOCAL } same as _1605
_1643 = { NULL ESCAPED NONLOCAL outFilename } same as _1594


Alias information for main

Aliased symbols

statbuf, UID D.39867, struct stat, is addressable
statbuf, UID D.39865, struct stat, is addressable
statbuf, UID D.39863, struct stat, is addressable
bz2Tail, UID D.39857, struct string, is addressable
tbz2Tail, UID D.39851, struct string, is addressable
bz2Tail, UID D.39848, struct string, is addressable
loadAvgArray, UID D.39774, double[3], is addressable
tz, UID D.39772, struct timezone, is addressable
tvStopTime, UID D.39771, struct timeval, is addressable
tvStartTime, UID D.39770, struct timeval, is addressable
stdinFile, UID D.39769, char[2], is addressable
tmpBuff, UID D.39768, unsigned char[50], is addressable
cmdLineTemp, UID D.39767, char[2048], is addressable
outFilename, UID D.39714, struct string, is addressable
bz2Header, UID D.39713, char[11], is addressable
output, UID D.39708, pthread_t, is addressable
D.39861, UID D.39861, struct allocator, is addressable
D.39862, UID D.39862, struct string, is addressable
D.39859, UID D.39859, struct allocator, is addressable
D.39853, UID D.39853, struct allocator, is addressable
D.39850, UID D.39850, struct allocator, is addressable
D.39832, UID D.39832, struct allocator, is addressable
D.39833, UID D.39833, struct string, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.11311 D.37416 D.38585 D.38685 D.38823 D.39708 D.39713 D.39714 D.39767 D.39768 D.39769 D.39770 D.39771 D.39772 D.39774 D.39832 D.39833 D.39848 D.39850 D.39851 D.39853 D.39857 D.39859 D.39861 D.39862 D.39863 D.39865 D.39867 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.453_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_39, points-to non-local, points-to NULL, points-to vars: { }
_40, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_44, points-to non-local, points-to NULL, points-to vars: { }
_45, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_48, points-to non-local, points-to NULL, points-to vars: { }
_49, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_52, points-to non-local, points-to NULL, points-to vars: { }
_53, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_56, points-to non-local, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_60, points-to non-local, points-to NULL, points-to vars: { }
_61, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_64, points-to non-local, points-to NULL, points-to vars: { }
_65, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_67, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_69, points-to non-local, points-to NULL, points-to vars: { }
_70, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_73, points-to non-local, points-to NULL, points-to vars: { }
_74, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_76, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_78, points-to non-local, points-to NULL, points-to vars: { }
_79, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_82, points-to non-local, points-to NULL, points-to vars: { }
_83, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_86, points-to non-local, points-to NULL, points-to vars: { }
_87, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_90, points-to non-local, points-to NULL, points-to vars: { }
_91, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_94, points-to non-local, points-to NULL, points-to vars: { }
_95, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_98, points-to non-local, points-to NULL, points-to vars: { }
_99, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_102, points-to non-local, points-to NULL, points-to vars: { }
_103, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_106, points-to non-local, points-to NULL, points-to vars: { }
_107, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_110, points-to non-local, points-to NULL, points-to vars: { }
_111, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_114, points-to non-local, points-to NULL, points-to vars: { }
_115, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_118, points-to non-local, points-to NULL, points-to vars: { }
_119, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_120, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_123, points-to non-local, points-to NULL, points-to vars: { }
_124, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_125, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_129, points-to non-local, points-to NULL, points-to vars: { }
_130, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_131, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_134, points-to non-local, points-to NULL, points-to vars: { }
_135, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_136, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_140, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_143, points-to non-local, points-to NULL, points-to vars: { }
_144, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_146, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.458_149, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.460_151, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_154, points-to non-local, points-to NULL, points-to vars: { }
_155, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_156, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_159, points-to non-local, points-to NULL, points-to vars: { }
_160, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_161, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_165, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_168, points-to non-local, points-to NULL, points-to vars: { }
_169, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_171, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.462_175, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_178, points-to non-local, points-to NULL, points-to vars: { }
_179, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_180, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_183, points-to non-local, points-to NULL, points-to vars: { }
_184, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_185, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_189, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_192, points-to non-local, points-to NULL, points-to vars: { }
_193, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_195, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.464_199, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_202, points-to non-local, points-to NULL, points-to vars: { }
_203, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_204, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_207, points-to non-local, points-to NULL, points-to vars: { }
_208, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_209, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_213, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_216, points-to non-local, points-to NULL, points-to vars: { }
_217, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_219, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.467_224, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.470_227, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_229, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_231, points-to non-local, points-to NULL, points-to vars: { }
_236, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_237, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.475_248, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_249, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.476_250, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.479_252, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.480_255, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_256, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.481_257, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_262, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdin.486_265, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.487_268, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_269, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.488_270, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_275, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.494_280, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stdout.496_281, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.497_284, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_285, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.498_286, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_291, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
progName_295, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
progNamePos_296, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
progName_297, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.507_299, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.510_304, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.511_305, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.515_309, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.516_310, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.518_312, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.519_313, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.520_315, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.521_317, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.524_321, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.527_323, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.528_324, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.530_327, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_333, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.535_337, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.536_339, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.537_340, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.539_342, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.541_344, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_348, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_349, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.11311 D.37416 D.38585 D.38685 D.38823 D.39708 D.39713 D.39714 D.39767 D.39768 D.39769 D.39770 D.39771 D.39772 D.39774 D.39832 D.39833 D.39848 D.39850 D.39851 D.39853 D.39857 D.39859 D.39861 D.39862 D.39863 D.39865 D.39867 } (nonlocal, escaped, interposable)
_351, points-to non-local, points-to NULL, points-to vars: { }
stderr.543_353, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.544_354, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.545_355, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.546_362, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.547_363, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.548_364, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.550_366, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.551_367, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.554_388, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.555_389, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.556_394, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.557_395, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.561_402, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.562_403, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.563_406, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.564_407, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.565_410, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.566_411, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.567_414, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.568_415, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.570_418, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.571_419, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.573_421, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.574_422, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.578_427, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.579_428, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.581_431, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.586_439, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.588_440, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.590_443, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.591_444, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.593_447, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.596_451, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.606_476, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.608_478, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.609_479, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.624_514, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.626_516, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.629_519, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_522, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_524, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.638_538, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.640_541, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_544, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_546, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.645_552, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_556, points-to non-local, points-to NULL, points-to vars: { }
stderr.648_558, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_563, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_565, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_567, points-to non-local, points-to NULL, points-to vars: { }
stderr.650_569, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.660_584, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.664_589, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.666_591, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.669_594, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.671_606, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
iftmp.525_720, points-to NULL, points-to vars: { }
iftmp.587_722, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.11311 D.37416 D.38585 D.38685 D.38823 D.39708 D.39713 D.39714 D.39767 D.39768 D.39769 D.39770 D.39771 D.39772 D.39774 D.39832 D.39833 D.39848 D.39850 D.39851 D.39853 D.39857 D.39859 D.39861 D.39862 D.39863 D.39865 D.39867 } (nonlocal, escaped, interposable)
_849, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
argv_855(D), points-to non-local, points-to NULL, points-to vars: { }
progName_856, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
progNamePos_857, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
progName_858, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
progNamePos_859, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1050, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
fifo_1052, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1060, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
InFilename_1062, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.11311 D.37416 D.38585 D.38685 D.38823 D.39708 D.39713 D.39714 D.39767 D.39768 D.39769 D.39770 D.39771 D.39772 D.39774 D.39832 D.39833 D.39848 D.39850 D.39851 D.39853 D.39857 D.39859 D.39861 D.39862 D.39863 D.39865 D.39867 } (nonlocal, escaped, interposable)
_1079, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1082, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1085, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1108, points-to NULL, points-to vars: { D.39767 } (escaped)
_1111, points-to NULL, points-to vars: { D.39767 } (escaped)
_1119, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1122, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1128, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1145, points-to NULL, points-to vars: { D.39767 } (escaped)
_1161, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1164, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1201, points-to NULL, points-to vars: { D.39767 } (escaped)
_1220, points-to NULL, points-to vars: { D.39767 } (escaped)
_1248, points-to NULL, points-to vars: { D.39767 } (escaped)
_1295, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1317, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1338, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1354, points-to NULL, points-to vars: { D.39767 } (escaped)
_1383, points-to NULL, points-to vars: { D.39767 } (escaped)
_1426, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1530, points-to NULL, points-to vars: { D.39768 } (escaped)
_1591, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1597, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1598, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1599, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1601, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1603, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1605, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1608, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1609, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1610, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1612, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1613, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1614, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1615, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1616, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1617, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1618, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1619, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1620, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1621, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1622, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1623, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1624, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1625, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1626, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1628, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1629, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1630, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1631, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1635, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1637, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1639, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1641, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_1643, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.39714 } (escaped)
_1671, points-to NULL, points-to vars: { D.39767 } (escaped)
_1673, points-to NULL, points-to vars: { D.39767 } (escaped)
_1681, points-to NULL, points-to vars: { D.39767 } (escaped)
_1683, points-to NULL, points-to vars: { D.39767 } (escaped)
_1689, points-to NULL, points-to vars: { D.39767 } (escaped)
_1691, points-to NULL, points-to vars: { D.39767 } (escaped)
_1697, points-to NULL, points-to vars: { D.39767 } (escaped)
_1699, points-to NULL, points-to vars: { D.39767 } (escaped)
_1748, points-to NULL, points-to vars: { D.39768 } (escaped)

main (int argc, char * * argv)
{
  int ret;
  int D.49300;
  int ret;
  int D.49298;
  const char * D.49294;
  const char * D.49292;
  const char * D.49290;
  int ret;
  int D.49288;
  const char * D.49286;
  const char * D.49284;
  const char * D.49282;
  const char * D.49280;
  const char * D.49278;
  const char * D.49276;
  const char * D.49274;
  const char * D.49272;
  const char * D.49270;
  const char * D.49268;
  const char * D.49266;
  const char * D.49264;
  const char * D.49262;
  const char * D.49260;
  const char * D.49258;
  struct basic_string & D.49255;
  struct basic_string & D.49244;
  struct basic_string & D.49241;
  size_type D.49238;
  size_type D.49236;
  size_type D.49232;
  size_type D.49230;
  int D.49218;
  int D.49215;
  int D.49212;
  int D.49209;
  int D.49206;
  int D.49203;
  int D.49200;
  int D.49197;
  int D.49194;
  int D.49191;
  int D.49188;
  int D.49185;
  int D.49182;
  int D.49179;
  int D.49176;
  int D.49173;
  int D.49170;
  int D.49167;
  int D.49164;
  int D.49161;
  int D.49158;
  int D.49155;
  int D.49152;
  int D.49149;
  int D.49146;
  int D.49143;
  int D.49140;
  int D.49137;
  int D.49134;
  int D.49131;
  int D.49128;
  int D.49125;
  int D.49122;
  int D.49119;
  int D.49116;
  int D.49113;
  int D.49110;
  int D.49109;
  int D.49108;
  int D.49105;
  int D.49102;
  int D.49099;
  int D.49096;
  int D.49093;
  int D.49090;
  int D.49087;
  int D.49084;
  int D.49081;
  int D.49078;
  void * D.49075;
  int D.49071;
  int D.49068;
  int D.49065;
  int D.49064;
  int D.49063;
  int D.49060;
  int D.49057;
  int D.49054;
  int D.49051;
  int D.49048;
  int D.49045;
  int D.49042;
  int D.49039;
  int D.49036;
  int D.49033;
  int D.49030;
  int D.49027;
  int D.49024;
  int D.49021;
  int D.49018;
  int D.49015;
  int D.49012;
  int D.49009;
  int D.49006;
  int D.49003;
  int D.49000;
  int D.48997;
  int D.48994;
  int D.48991;
  int D.48988;
  int D.48985;
  int D.48982;
  int D.48979;
  int D.48976;
  char * D.48973;
  int D.48969;
  char * D.48967;
  int D.48964;
  char * D.48961;
  int D.48957;
  char * D.48955;
  int D.48952;
  char * D.48949;
  int D.48945;
  char * D.48943;
  int D.48940;
  int D.48937;
  char * D.48934;
  int D.48930;
  char * D.48928;
  int D.48925;
  char * D.48922;
  char * D.48919;
  char * D.48916;
  char * D.48913;
  bool removeFlag;
  struct stat statbuf;
  bool removeFlag;
  struct stat statbuf;
  int close_ret;
  struct stat statbuf;
  struct string bz2Tail;
  struct string tbz2Tail;
  struct string bz2Tail;
  size_t size;
  int errLevelCurrentFile;
  int mutexesInitRet;
  bool switchedMtToSt;
  size_t k;
  size_t j;
  size_t i;
  int fileLoop;
  int ret;
  int force;
  int keep;
  int noThreads;
  int errLevel;
  int testFile;
  int compress;
  int decompress;
  int maxMemorySwitch;
  int maxMemory;
  int blockSize;
  int numBlocks;
  int hOutfile;
  int hInfile;
  int zeroByteFile;
  int readEntireFile;
  int cmdLineTempCount;
  double timeStop;
  double timeStart;
  double timeCalc;
  int numCPUidle;
  int numCPUtotal;
  int useLoadAverage;
  double loadAvgArray[3];
  double loadAverage;
  struct timezone tz;
  struct timeval tvStopTime;
  struct timeval tvStartTime;
  char stdinFile[2];
  unsigned char tmpBuff[50];
  char cmdLineTemp[2048];
  struct string outFilename;
  char bz2Header[11];
  char * progNamePos;
  char * progName;
  char * InFilename;
  char * * FileList;
  pthread_t output;
  struct queue * fifo;
  struct allocator D.39861;
  struct string D.39862;
  struct allocator D.39859;
  struct allocator D.39853;
  struct allocator D.39850;
  struct allocator D.39832;
  struct string D.39833;
  char _2;
  char _3;
  int _8;
  int _9;
  int _10;
  int _11;
  int _12;
  int _13;
  void * _14;
  struct FILE * stderr.453_16;
  int _17;
  int _18;
  long unsigned int _19;
  char * * _20;
  char * _21;
  char _22;
  long unsigned int _23;
  char * * _24;
  char * _25;
  char _27;
  long unsigned int _28;
  char * * _29;
  int FileListCount.455_31;
  long unsigned int _32;
  long unsigned int _33;
  char * * _34;
  char * _35;
  int FileListCount.456_36;
  int _37;
  long unsigned int _38;
  char * * _39;
  char * _40;
  char _42;
  long unsigned int _43;
  char * * _44;
  char * _45;
  int _46;
  long unsigned int _47;
  char * * _48;
  char * _49;
  int _50;
  long unsigned int _51;
  char * * _52;
  char * _53;
  int _54;
  long unsigned int _55;
  char * * _56;
  char * _57;
  int _58;
  long unsigned int _59;
  char * * _60;
  char * _61;
  int _62;
  long unsigned int _63;
  char * * _64;
  char * _65;
  int _66;
  char * _67;
  long unsigned int _68;
  char * * _69;
  char * _70;
  int _71;
  long unsigned int _72;
  char * * _73;
  char * _74;
  int _75;
  char * _76;
  long unsigned int _77;
  char * * _78;
  char * _79;
  int _80;
  long unsigned int _81;
  char * * _82;
  char * _83;
  int _84;
  long unsigned int _85;
  char * * _86;
  char * _87;
  int _88;
  long unsigned int _89;
  char * * _90;
  char * _91;
  int _92;
  long unsigned int _93;
  char * * _94;
  char * _95;
  int _96;
  long unsigned int _97;
  char * * _98;
  char * _99;
  int _100;
  long unsigned int _101;
  char * * _102;
  char * _103;
  int _104;
  long unsigned int _105;
  char * * _106;
  char * _107;
  int _108;
  long unsigned int _109;
  char * * _110;
  char * _111;
  int _112;
  long unsigned int _113;
  char * * _114;
  char * _115;
  int _116;
  long unsigned int _117;
  char * * _118;
  char * _119;
  char * _120;
  char _121;
  long unsigned int _122;
  char * * _123;
  char * _124;
  char * _125;
  char _126;
  int _127;
  long unsigned int _128;
  char * * _129;
  char * _130;
  char * _131;
  char _132;
  long unsigned int _133;
  char * * _134;
  char * _135;
  char * _136;
  char _137;
  unsigned char _138;
  unsigned char _139;
  char * _140;
  long unsigned int _141;
  long unsigned int _142;
  char * * _143;
  char * _144;
  sizetype _145;
  char * _146;
  int numCPU.457_148;
  struct FILE * stderr.458_149;
  int numCPU.459_150;
  struct FILE * stderr.460_151;
  long unsigned int _152;
  long unsigned int _153;
  char * * _154;
  char * _155;
  char * _156;
  char _157;
  long unsigned int _158;
  char * * _159;
  char * _160;
  char * _161;
  char _162;
  unsigned char _163;
  unsigned char _164;
  char * _165;
  long unsigned int _166;
  long unsigned int _167;
  char * * _168;
  char * _169;
  sizetype _170;
  char * _171;
  unsigned int blockSize.461_173;
  unsigned int _174;
  struct FILE * stderr.462_175;
  long unsigned int _176;
  long unsigned int _177;
  char * * _178;
  char * _179;
  char * _180;
  char _181;
  long unsigned int _182;
  char * * _183;
  char * _184;
  char * _185;
  char _186;
  unsigned char _187;
  unsigned char _188;
  char * _189;
  long unsigned int _190;
  long unsigned int _191;
  char * * _192;
  char * _193;
  sizetype _194;
  char * _195;
  unsigned int maxMemory.463_197;
  unsigned int _198;
  struct FILE * stderr.464_199;
  long unsigned int _200;
  long unsigned int _201;
  char * * _202;
  char * _203;
  char * _204;
  char _205;
  long unsigned int _206;
  char * * _207;
  char * _208;
  char * _209;
  char _210;
  unsigned char _211;
  unsigned char _212;
  char * _213;
  long unsigned int _214;
  long unsigned int _215;
  char * * _216;
  char * _217;
  sizetype _218;
  char * _219;
  int _221;
  int ChildThreadStackSize.465_222;
  int ChildThreadStackSize.466_223;
  struct FILE * stderr.467_224;
  int ChildThreadStackSize.468_225;
  int ChildThreadStackSize.469_226;
  struct FILE * stderr.470_227;
  long unsigned int _228;
  char * _229;
  long unsigned int _230;
  char * * _231;
  int FileListCount.472_233;
  long unsigned int _234;
  long unsigned int _235;
  char * * _236;
  char * _237;
  int FileListCount.473_238;
  int _239;
  int BWTblockSize.474_240;
  unsigned char _241;
  unsigned char _242;
  unsigned char _243;
  char _244;
  bool _245;
  bool _246;
  bool _247;
  struct FILE * stderr.475_248;
  char * _249;
  struct FILE * stderr.476_250;
  int FileListCount.477_251;
  struct FILE * stdin.479_252;
  int _253;
  int _254;
  struct FILE * stderr.480_255;
  char * _256;
  struct FILE * stderr.481_257;
  int FileListCount.483_259;
  long unsigned int _260;
  long unsigned int _261;
  char * * _262;
  int FileListCount.484_263;
  int _264;
  struct FILE * stdin.486_265;
  int _266;
  int _267;
  struct FILE * stderr.487_268;
  char * _269;
  struct FILE * stderr.488_270;
  int FileListCount.490_272;
  long unsigned int _273;
  long unsigned int _274;
  char * * _275;
  int FileListCount.491_276;
  int _277;
  int OutputStdOut.492_278;
  int QuietMode.493_279;
  struct FILE * stderr.494_280;
  struct FILE * stdout.496_281;
  int _282;
  int _283;
  struct FILE * stderr.497_284;
  char * _285;
  struct FILE * stderr.498_286;
  int FileListCount.500_288;
  long unsigned int _289;
  long unsigned int _290;
  char * * _291;
  int FileListCount.501_292;
  int _293;
  int QuietMode.502_294;
  int QuietMode.506_298;
  struct FILE * stderr.507_299;
  double _300;
  int _301;
  int numCPU.508_302;
  int numCPU.509_303;
  struct FILE * stderr.510_304;
  struct FILE * stderr.511_305;
  int numCPU.512_306;
  int QuietMode.513_307;
  int numCPU.514_308;
  struct FILE * stderr.515_309;
  struct FILE * stderr.516_310;
  int BWTblockSize.517_311;
  struct FILE * stderr.518_312;
  struct FILE * stderr.519_313;
  int _314;
  struct FILE * stderr.520_315;
  int _316;
  struct FILE * stderr.521_317;
  int ChildThreadStackSize.522_318;
  int ChildThreadStackSize.523_319;
  int _320;
  struct FILE * stderr.524_321;
  int IgnoreTrailingGarbageFlag.526_322;
  struct FILE * stderr.527_323;
  struct FILE * stderr.528_324;
  int numCPU.529_325;
  struct FILE * stderr.530_327;
  int FileListCount.531_328;
  long unsigned int _331;
  long unsigned int _332;
  char * * _333;
  int QuietMode.533_334;
  int FileListCount.534_335;
  int _336;
  struct FILE * stderr.535_337;
  int _338;
  struct FILE * stderr.536_339;
  struct FILE * stderr.537_340;
  int QuietMode.538_341;
  struct FILE * stderr.539_342;
  int QuietMode.540_343;
  struct FILE * stderr.541_344;
  long unsigned int _346;
  long unsigned int _347;
  char * * _348;
  char * _349;
  int _350;
  int * _351;
  int _352;
  struct FILE * stderr.543_353;
  struct FILE * stderr.544_354;
  struct FILE * stderr.545_355;
  long unsigned int _356;
  long unsigned int _357;
  long unsigned int _359;
  long unsigned int _360;
  struct FILE * stderr.546_362;
  struct FILE * stderr.547_363;
  struct FILE * stderr.548_364;
  struct FILE * stderr.550_366;
  struct FILE * stderr.551_367;
  long unsigned int _368;
  unsigned int _369;
  unsigned int _370;
  int _371;
  unsigned int _373;
  unsigned int _374;
  int _375;
  long unsigned int _378;
  unsigned int _379;
  unsigned int _380;
  int _381;
  unsigned int _383;
  unsigned int _384;
  int _385;
  struct FILE * stderr.554_388;
  struct FILE * stderr.555_389;
  unsigned char _390;
  unsigned char _391;
  unsigned char _392;
  char _393;
  struct FILE * stderr.556_394;
  struct FILE * stderr.557_395;
  long unsigned int _398;
  long unsigned int _401;
  struct FILE * stderr.561_402;
  struct FILE * stderr.562_403;
  int _405;
  struct FILE * stderr.563_406;
  struct FILE * stderr.564_407;
  unsigned int _408;
  unsigned int _409;
  struct FILE * stderr.565_410;
  struct FILE * stderr.566_411;
  unsigned int _412;
  unsigned int _413;
  struct FILE * stderr.567_414;
  struct FILE * stderr.568_415;
  long int _416;
  long int InFileSize.569_417;
  struct FILE * stderr.570_418;
  struct FILE * stderr.571_419;
  int _420;
  struct FILE * stderr.573_421;
  struct FILE * stderr.574_422;
  int OutputStdOut.577_423;
  struct FILE * stderr.578_427;
  struct FILE * stderr.579_428;
  int QuietMode.580_430;
  struct FILE * stderr.581_431;
  long int InFileSize.582_432;
  int numCPU.583_433;
  long int _434;
  long int _435;
  int QuietMode.584_436;
  int FileListCount.585_437;
  int _438;
  struct FILE * stderr.586_439;
  struct FILE * stderr.588_440;
  int OutputStdOut.589_441;
  struct FILE * stderr.590_443;
  struct FILE * stderr.591_444;
  char BWTblockSizeChar.592_445;
  int _446;
  struct FILE * stderr.593_447;
  int _448;
  long int InFileSize.594_449;
  long unsigned int InFileSize.595_450;
  struct FILE * stderr.596_451;
  int numCPU.597_452;
  long int InFileSize.598_453;
  int numCPU.599_454;
  int _455;
  long int InFileSize.600_456;
  long int _457;
  long int InFileSize.601_458;
  long int _459;
  long int _460;
  long int _461;
  long int _462;
  int numCPU.602_463;
  int OutputStdOut.603_464;
  int OutputStdOut.604_468;
  bool _472;
  bool _473;
  bool _474;
  struct FILE * stderr.606_476;
  int QuietMode.607_477;
  struct FILE * stderr.608_478;
  struct FILE * stderr.609_479;
  bool iftmp.654_480;
  int OutputStdOut.611_483;
  int _487;
  long unsigned int _488;
  long unsigned int NumBufferedBlocksMax.613_489;
  int _490;
  int numCPU.614_491;
  int _492;
  int _493;
  long unsigned int NumBufferedBlocksMax.615_494;
  int numCPU.616_495;
  int _496;
  long unsigned int _497;
  long unsigned int _498;
  int numCPU.617_499;
  long unsigned int _500;
  long unsigned int NumBufferedBlocksMax.618_501;
  int numCPU.619_502;
  long unsigned int _503;
  int QuietMode.620_504;
  int numCPU.621_505;
  int numCPU.622_506;
  int _507;
  long unsigned int _508;
  long unsigned int NumBufferedBlocksMax.623_509;
  long unsigned int _510;
  long unsigned int _511;
  long unsigned int _512;
  long unsigned int _513;
  struct FILE * stderr.624_514;
  int QuietMode.625_515;
  struct FILE * stderr.626_516;
  long unsigned int NumBufferedBlocksMax.627_517;
  int QuietMode.628_518;
  struct FILE * stderr.629_519;
  int _520;
  int numCPU.630_521;
  pthread_t * _522;
  long unsigned int _523;
  pthread_t * _524;
  long unsigned int TerminatorThread.631_526;
  long unsigned int TerminatorThread.632_528;
  long int InFileSize.633_529;
  long unsigned int output.635_530;
  long unsigned int TerminatorThread.636_533;
  bool _534;
  bool _535;
  bool _536;
  int QuietMode.637_537;
  struct FILE * stderr.638_538;
  int QuietMode.639_540;
  struct FILE * stderr.640_541;
  int _542;
  int numCPU.641_543;
  pthread_t * _544;
  long unsigned int _545;
  pthread_t * _546;
  long unsigned int TerminatorThread.642_548;
  long unsigned int TerminatorThread.643_550;
  int QuietMode.644_551;
  struct FILE * stderr.645_552;
  long int InFileSize.646_554;
  long unsigned int output.647_555;
  int * _556;
  int _557;
  struct FILE * stderr.648_558;
  bool _559;
  bool _560;
  int _561;
  int numCPU.649_562;
  pthread_t * _563;
  long unsigned int _564;
  pthread_t * _565;
  long unsigned int _566;
  int * _567;
  int _568;
  struct FILE * stderr.650_569;
  int OutputStdOut.652_571;
  bool _575;
  bool _576;
  bool _577;
  int OutputStdOut.655_578;
  int QuietMode.659_583;
  struct FILE * stderr.660_584;
  int OutputStdOut.661_585;
  int SIG_HANDLER_QUIT_SIGNAL.662_587;
  long unsigned int SignalHandlerThread.663_588;
  struct FILE * stderr.664_589;
  long unsigned int SignalHandlerThread.665_590;
  struct FILE * stderr.666_591;
  long unsigned int TerminatorThread.668_593;
  struct FILE * stderr.669_594;
  long int _595;
  double _596;
  long int _597;
  double _598;
  double _599;
  long int _600;
  double _601;
  long int _602;
  double _603;
  double _604;
  int QuietMode.670_605;
  struct FILE * stderr.671_606;
  int _719;
  const char * iftmp.525_720;
  const char * iftmp.587_722;
  struct ErrorContext * _849;
  sizetype _866;
  size_t iftmp.451_868;
  bool iftmp.576_993;
  bool iftmp.610_1011;
  int _1047;
  struct queue * _1050;
  struct ErrorContext * _1060;
  int _1063;
  int _1068;
  long int _1075;
  unsigned char * _1079;
  unsigned char * _1082;
  bool iftmp.610_1083;
  unsigned char * _1085;
  int _1094;
  int _1096;
  int _1098;
  int _1100;
  int _1102;
  bool retval.558_1103;
  int _1104;
  bool retval.559_1105;
  long int _1107;
  char * _1108;
  char * _1111;
  char * _1119;
  char * _1122;
  struct ErrorContext * _1128;
  int _1143;
  char * _1145;
  bool retval.560_1148;
  int _1151;
  char * _1161;
  char * _1164;
  long int _1169;
  bool iftmp.654_1185;
  char * _1201;
  bool _1203;
  int _1207;
  char * _1220;
  int _1231;
  int _1233;
  long int _1238;
  int _1242;
  long int _1244;
  int _1246;
  char * _1248;
  int _1252;
  int _1258;
  int _1283;
  int _1285;
  struct ErrorContext * _1295;
  int _1304;
  struct ErrorContext * _1317;
  int _1321;
  int _1324;
  int _1328;
  int _1335;
  bool iftmp.658_1336;
  struct ErrorContext * _1338;
  int _1344;
  int _1349;
  char * _1354;
  int _1356;
  int _1361;
  int _1368;
  long int _1379;
  int _1381;
  bool iftmp.658_1382;
  char * _1383;
  int _1391;
  int _1409;
  int _1415;
  int _1423;
  struct ErrorContext * _1426;
  int _1433;
  bool iftmp.576_1438;
  int _1441;
  int _1492;
  int _1493;
  int _1494;
  int _1495;
  int _1496;
  int _1497;
  int _1498;
  int _1499;
  int _1500;
  int _1501;
  int _1502;
  int _1503;
  int _1504;
  int _1505;
  int _1506;
  int _1507;
  int _1508;
  int _1509;
  int _1510;
  int _1511;
  int _1512;
  int _1513;
  int _1520;
  int _1524;
  int _1527;
  int _1528;
  void * _1530;
  int _1531;
  int _1532;
  int _1533;
  int _1534;
  int _1535;
  int _1536;
  int _1537;
  int _1538;
  int _1539;
  int _1540;
  int _1547;
  int _1551;
  int _1554;
  int _1555;
  int _1556;
  int _1557;
  int _1558;
  int _1559;
  int _1560;
  int _1561;
  int _1562;
  int _1563;
  int _1564;
  int _1565;
  int _1566;
  int _1567;
  int _1568;
  int _1569;
  int _1570;
  int _1571;
  int _1572;
  int _1573;
  int _1574;
  int _1575;
  int _1576;
  int _1577;
  int _1578;
  int _1579;
  int _1580;
  int _1581;
  int _1582;
  int _1583;
  int _1584;
  int _1585;
  int _1586;
  int _1587;
  int _1588;
  int _1589;
  char * _1591;
  long unsigned int _1593;
  long unsigned int _1594;
  long unsigned int _1595;
  long unsigned int _1596;
  struct basic_string & _1597;
  struct basic_string & _1598;
  char * _1599;
  char * _1601;
  char * _1603;
  char * _1605;
  long unsigned int _1607;
  char * _1608;
  struct basic_string & _1609;
  char * _1610;
  char * _1612;
  char * _1613;
  char * _1614;
  char * _1615;
  char * _1616;
  char * _1617;
  char * _1618;
  char * _1619;
  char * _1620;
  char * _1621;
  char * _1622;
  char * _1623;
  char * _1624;
  char * _1625;
  char * _1626;
  char * _1628;
  char * _1629;
  char * _1630;
  struct outBuff * _1631;
  char * _1635;
  char * _1637;
  char * _1639;
  char * _1641;
  char * _1643;

  <bb 2> [100.00%]:
  bz2Header = "BZh91AY&SY";
  MEM[(struct  &)&outFilename] ={v} {CLOBBER};
  MEM[(struct  &)&outFilename] ={v} {CLOBBER};
  MEM[(struct _Alloc_hider *)&outFilename]._M_p = &outFilename.D.18739._M_local_buf;
  outFilename._M_string_length = 0;
  MEM[(char_type &)&outFilename + 16] = 0;
  stdinFile = "-";
  _849 = pbzip2::ErrorContext::getInstance ();

  <bb 3> [0.00%]:
  if (_849 == 0B)
    goto <bb 503>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [0.00%]:
  gettimeofday (&tvStartTime, &tz);
  if (argc_852(D) <= 1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  OutputStdOut = 1;

  <bb 6> [0.00%]:
  # keep_684 = PHI <0(4), 1(5)>
  progName_856 = *argv_855(D);
  progNamePos_857 = *argv_855(D);

  <bb 7> [0.00%]:
  # progName_295 = PHI <progName_856(6), progName_297(10)>
  # progNamePos_296 = PHI <progNamePos_857(6), progNamePos_859(10)>
  _2 = *progNamePos_296;
  if (_2 == 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  _3 = *progNamePos_296;
  if (_3 == 47)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  progName_858 = progNamePos_296 + 1;

  <bb 10> [0.00%]:
  # progName_297 = PHI <progName_295(8), progName_858(9)>
  progNamePos_859 = progNamePos_296 + 1;
  goto <bb 7>; [0.00%]

  <bb 11> [100.00%]:
  _1161 = strstr (progName_295, "unzip");
  if (_1161 != 0B)
    goto <bb 13>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [100.00%]:
  _1164 = strstr (progName_295, "UNZIP");
  if (_1164 != 0B)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:

  <bb 14> [100.00%]:
  # decompress_647 = PHI <0(12), 1(13)>
  _1119 = strstr (progName_295, "zcat");
  if (_1119 != 0B)
    goto <bb 16>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [100.00%]:
  _1122 = strstr (progName_295, "ZCAT");
  if (_1122 != 0B)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  OutputStdOut = 1;
  decompress_863 = OutputStdOut;

  <bb 17> [0.00%]:
  # decompress_648 = PHI <decompress_647(15), decompress_863(16)>
  # keep_685 = PHI <keep_684(15), 1(16)>
  _8 = strcmp (progName_295, "bzip2");
  if (_8 == 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [0.00%]:
  _9 = strcmp (progName_295, "BZIP2");
  if (_9 == 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 19> [0.00%]:
  _10 = strcmp (progName_295, "bunzip2");
  if (_10 == 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  _11 = strcmp (progName_295, "BUNZIP2");
  if (_11 == 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  _12 = strcmp (progName_295, "bzcat");
  if (_12 == 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 22> [0.00%]:
  _13 = strcmp (progName_295, "BZCAT");
  if (_13 == 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 23> [0.00%]:
  IgnoreTrailingGarbageFlag = 1;

  <bb 24> [0.00%]:
  FileListCount = 0;
  _866 = (sizetype) argc_852(D);
  if (_866 <= 1152921504606846975)
    goto <bb 25>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 25> [0.00%]:
  iftmp.451_868 = _866 * 8;
  _14 = operator new[] (iftmp.451_868, &nothrow);
  if (_14 == 0B)
    goto <bb 27>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 26> [0.00%]:
  __cxa_throw_bad_array_new_length ();

  <bb 27> [100.00%]:
  stderr.453_16 = stderr;
  _1409 = __fprintf_chk (stderr.453_16, 1, "pbzip2: *ERROR: Not enough memory!  Aborting...\n");
  goto <bb 503>; [100.00%]

  <bb 28> [0.00%]:
  NumBufferedBlocksMax = 0;
  _17 = detectCPUs ();
  numCPU = _17;
  numCPUtotal_875 = numCPU;

  <bb 29> [0.00%]:
  # useLoadAverage_608 = PHI <0(28), useLoadAverage_612(139)>
  # readEntireFile_618 = PHI <0(28), readEntireFile_622(139)>
  # blockSize_632 = PHI <900000(28), blockSize_635(139)>
  # maxMemory_639 = PHI <100000000(28), maxMemory_642(139)>
  # maxMemorySwitch_643 = PHI <0(28), maxMemorySwitch_646(139)>
  # decompress_649 = PHI <decompress_648(28), decompress_653(139)>
  # compress_654 = PHI <0(28), compress_658(139)>
  # testFile_659 = PHI <0(28), testFile_663(139)>
  # keep_686 = PHI <keep_685(28), keep_690(139)>
  # force_693 = PHI <0(28), force_697(139)>
  # i_699 = PHI <1(28), i_985(139)>
  _18 = (int) i_699;
  if (_18 >= argc_852(D))
    goto <bb 140>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 30> [0.00%]:
  _19 = i_699 * 8;
  _20 = argv_855(D) + _19;
  _21 = *_20;
  _22 = *_21;
  if (_22 == 45)
    goto <bb 31>; [0.00%]
  else
    goto <bb 138>; [0.00%]

  <bb 31> [0.00%]:
  _23 = i_699 * 8;
  _24 = argv_855(D) + _23;
  _25 = *_24;
  _27 = MEM[(char *)_25 + 1B];
  if (_27 == 0)
    goto <bb 32>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 32> [0.00%]:
  _28 = i_699 * 8;
  _29 = argv_855(D) + _28;
  FileListCount.455_31 = FileListCount;
  _32 = (long unsigned int) FileListCount.455_31;
  _33 = _32 * 8;
  _34 = _14 + _33;
  _35 = *_29;
  *_34 = _35;
  FileListCount.456_36 = FileListCount;
  _37 = FileListCount.456_36 + 1;
  FileListCount = _37;
  // predicted unlikely by continue predictor.
  goto <bb 139>; [0.00%]

  <bb 33> [0.00%]:
  _38 = i_699 * 8;
  _39 = argv_855(D) + _38;
  _40 = *_39;
  _42 = MEM[(char *)_40 + 1B];
  if (_42 == 45)
    goto <bb 34>; [0.00%]
  else
    goto <bb 66>; [0.00%]

  <bb 34> [0.00%]:
  _43 = i_699 * 8;
  _44 = argv_855(D) + _43;
  _45 = *_44;
  _46 = strcmp (_45, "--best");
  if (_46 == 0)
    goto <bb 35>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 35> [0.00%]:
  BWTblockSize = 9;
  goto <bb 65>; [0.00%]

  <bb 36> [0.00%]:
  _47 = i_699 * 8;
  _48 = argv_855(D) + _47;
  _49 = *_48;
  _50 = strcmp (_49, "--decompress");
  if (_50 == 0)
    goto <bb 65>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 37> [0.00%]:
  _51 = i_699 * 8;
  _52 = argv_855(D) + _51;
  _53 = *_52;
  _54 = strcmp (_53, "--compress");
  if (_54 == 0)
    goto <bb 65>; [0.00%]
  else
    goto <bb 38>; [0.00%]

  <bb 38> [0.00%]:
  _55 = i_699 * 8;
  _56 = argv_855(D) + _55;
  _57 = *_56;
  _58 = strcmp (_57, "--fast");
  if (_58 == 0)
    goto <bb 39>; [0.00%]
  else
    goto <bb 40>; [0.00%]

  <bb 39> [0.00%]:
  BWTblockSize = 1;
  goto <bb 65>; [0.00%]

  <bb 40> [0.00%]:
  _59 = i_699 * 8;
  _60 = argv_855(D) + _59;
  _61 = *_60;
  _62 = strcmp (_61, "--force");
  if (_62 == 0)
    goto <bb 41>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 41> [0.00%]:
  ForceOverwrite = 1;
  goto <bb 65>; [0.00%]

  <bb 42> [0.00%]:
  _63 = i_699 * 8;
  _64 = argv_855(D) + _63;
  _65 = *_64;
  _66 = strcmp (_65, "--help");
  if (_66 == 0)
    goto <bb 43>; [0.00%]
  else
    goto <bb 44>; [0.00%]

  <bb 43> [0.00%]:
  _67 = *argv_855(D);
  usage (_67, "HELP");

  <bb 44> [0.00%]:
  _68 = i_699 * 8;
  _69 = argv_855(D) + _68;
  _70 = *_69;
  _71 = strcmp (_70, "--keep");
  if (_71 == 0)
    goto <bb 65>; [0.00%]
  else
    goto <bb 45>; [0.00%]

  <bb 45> [0.00%]:
  _72 = i_699 * 8;
  _73 = argv_855(D) + _72;
  _74 = *_73;
  _75 = strcmp (_74, "--license");
  if (_75 == 0)
    goto <bb 46>; [0.00%]
  else
    goto <bb 47>; [0.00%]

  <bb 46> [0.00%]:
  _76 = *argv_855(D);
  usage (_76, "HELP");

  <bb 47> [0.00%]:
  _77 = i_699 * 8;
  _78 = argv_855(D) + _77;
  _79 = *_78;
  _80 = strcmp (_79, "--loadavg");
  if (_80 == 0)
    goto <bb 65>; [0.00%]
  else
    goto <bb 48>; [0.00%]

  <bb 48> [0.00%]:
  _81 = i_699 * 8;
  _82 = argv_855(D) + _81;
  _83 = *_82;
  _84 = strcmp (_83, "--quiet");
  if (_84 == 0)
    goto <bb 49>; [0.00%]
  else
    goto <bb 50>; [0.00%]

  <bb 49> [0.00%]:
  QuietMode = 1;
  goto <bb 65>; [0.00%]

  <bb 50> [0.00%]:
  _85 = i_699 * 8;
  _86 = argv_855(D) + _85;
  _87 = *_86;
  _88 = strcmp (_87, "--read");
  if (_88 == 0)
    goto <bb 65>; [0.00%]
  else
    goto <bb 51>; [0.00%]

  <bb 51> [0.00%]:
  _89 = i_699 * 8;
  _90 = argv_855(D) + _89;
  _91 = *_90;
  _92 = strcmp (_91, "--stdout");
  if (_92 == 0)
    goto <bb 52>; [0.00%]
  else
    goto <bb 53>; [0.00%]

  <bb 52> [0.00%]:
  OutputStdOut = 1;
  goto <bb 65>; [0.00%]

  <bb 53> [0.00%]:
  _93 = i_699 * 8;
  _94 = argv_855(D) + _93;
  _95 = *_94;
  _96 = strcmp (_95, "--test");
  if (_96 == 0)
    goto <bb 65>; [0.00%]
  else
    goto <bb 54>; [0.00%]

  <bb 54> [0.00%]:
  _97 = i_699 * 8;
  _98 = argv_855(D) + _97;
  _99 = *_98;
  _100 = strcmp (_99, "--verbose");
  if (_100 == 0)
    goto <bb 55>; [0.00%]
  else
    goto <bb 56>; [0.00%]

  <bb 55> [0.00%]:
  QuietMode = 0;
  goto <bb 65>; [0.00%]

  <bb 56> [0.00%]:
  _101 = i_699 * 8;
  _102 = argv_855(D) + _101;
  _103 = *_102;
  _104 = strcmp (_103, "--version");
  if (_104 == 0)
    goto <bb 57>; [0.00%]
  else
    goto <bb 59>; [0.00%]

  <bb 57> [0.00%]:
  banner ();

  <bb 58> [0.00%]:
  exit (0);

  <bb 59> [0.00%]:
  _105 = i_699 * 8;
  _106 = argv_855(D) + _105;
  _107 = *_106;
  _108 = strcmp (_107, "--ignore-trailing-garbage");
  if (_108 == 0)
    goto <bb 60>; [0.00%]
  else
    goto <bb 61>; [0.00%]

  <bb 60> [0.00%]:
  IgnoreTrailingGarbageFlag = 1;
  goto <bb 65>; [0.00%]

  <bb 61> [0.00%]:
  _109 = i_699 * 8;
  _110 = argv_855(D) + _109;
  _111 = *_110;
  _112 = strcmp (_111, "--ignore-trailing-garbage=1");
  if (_112 == 0)
    goto <bb 62>; [0.00%]
  else
    goto <bb 63>; [0.00%]

  <bb 62> [0.00%]:
  IgnoreTrailingGarbageFlag = 1;
  goto <bb 65>; [0.00%]

  <bb 63> [0.00%]:
  _113 = i_699 * 8;
  _114 = argv_855(D) + _113;
  _115 = *_114;
  _116 = strcmp (_115, "--ignore-trailing-garbage=0");
  if (_116 == 0)
    goto <bb 64>; [0.00%]
  else
    goto <bb 65>; [0.00%]

  <bb 64> [0.00%]:
  IgnoreTrailingGarbageFlag = 0;

  <bb 65> [0.00%]:
  # useLoadAverage_609 = PHI <useLoadAverage_608(35), useLoadAverage_608(36), useLoadAverage_608(37), useLoadAverage_608(39), useLoadAverage_608(41), useLoadAverage_608(64), useLoadAverage_608(44), useLoadAverage_608(63), 1(47), useLoadAverage_608(49), useLoadAverage_608(50), useLoadAverage_608(52), useLoadAverage_608(53), useLoadAverage_608(55), useLoadAverage_608(60), useLoadAverage_608(62)>
  # readEntireFile_619 = PHI <readEntireFile_618(35), readEntireFile_618(36), readEntireFile_618(37), readEntireFile_618(39), readEntireFile_618(41), readEntireFile_618(64), readEntireFile_618(44), readEntireFile_618(63), readEntireFile_618(47), readEntireFile_618(49), 1(50), readEntireFile_618(52), readEntireFile_618(53), readEntireFile_618(55), readEntireFile_618(60), readEntireFile_618(62)>
  # decompress_650 = PHI <decompress_649(35), 1(36), decompress_649(37), decompress_649(39), decompress_649(41), decompress_649(64), decompress_649(44), decompress_649(63), decompress_649(47), decompress_649(49), decompress_649(50), decompress_649(52), decompress_649(53), decompress_649(55), decompress_649(60), decompress_649(62)>
  # compress_655 = PHI <compress_654(35), compress_654(36), 1(37), compress_654(39), compress_654(41), compress_654(64), compress_654(44), compress_654(63), compress_654(47), compress_654(49), compress_654(50), compress_654(52), compress_654(53), compress_654(55), compress_654(60), compress_654(62)>
  # testFile_660 = PHI <testFile_659(35), testFile_659(36), testFile_659(37), testFile_659(39), testFile_659(41), testFile_659(64), testFile_659(44), testFile_659(63), testFile_659(47), testFile_659(49), testFile_659(50), testFile_659(52), 1(53), testFile_659(55), testFile_659(60), testFile_659(62)>
  # keep_687 = PHI <keep_686(35), keep_686(36), keep_686(37), keep_686(39), keep_686(41), keep_686(64), 1(44), keep_686(63), keep_686(47), keep_686(49), keep_686(50), 1(52), keep_686(53), keep_686(55), keep_686(60), keep_686(62)>
  # force_694 = PHI <force_693(35), force_693(36), force_693(37), force_693(39), 1(41), force_693(64), force_693(44), force_693(63), force_693(47), force_693(49), force_693(50), force_693(52), force_693(53), force_693(55), force_693(60), force_693(62)>
  // predicted unlikely by continue predictor.
  goto <bb 139>; [0.00%]

  <bb 66> [0.00%]:
  # useLoadAverage_610 = PHI <useLoadAverage_608(33), useLoadAverage_611(137)>
  # readEntireFile_620 = PHI <readEntireFile_618(33), readEntireFile_621(137)>
  # blockSize_633 = PHI <blockSize_632(33), blockSize_634(137)>
  # maxMemory_640 = PHI <maxMemory_639(33), maxMemory_641(137)>
  # maxMemorySwitch_644 = PHI <maxMemorySwitch_643(33), maxMemorySwitch_645(137)>
  # decompress_651 = PHI <decompress_649(33), decompress_652(137)>
  # compress_656 = PHI <compress_654(33), compress_657(137)>
  # testFile_661 = PHI <testFile_659(33), testFile_662(137)>
  # keep_688 = PHI <keep_686(33), keep_689(137)>
  # force_695 = PHI <force_693(33), force_696(137)>
  # j_703 = PHI <1(33), j_961(137)>
  _117 = i_699 * 8;
  _118 = argv_855(D) + _117;
  _119 = *_118;
  _120 = _119 + j_703;
  _121 = *_120;
  if (_121 == 0)
    goto <bb 139>; [0.00%]
  else
    goto <bb 67>; [0.00%]

  <bb 67> [0.00%]:
  _122 = i_699 * 8;
  _123 = argv_855(D) + _122;
  _124 = *_123;
  _125 = _124 + j_703;
  _126 = *_125;
  _127 = (int) _126;
  switch (_126) <default: <L163> [0.00%], case 49: <L154> [0.00%], case 50: <L155> [0.00%], case 51: <L156> [0.00%], case 52: <L157> [0.00%], case 53: <L158> [0.00%], case 54: <L159> [0.00%], case 55: <L160> [0.00%], case 56: <L161> [0.00%], case 57: <L162> [0.00%], case 76: <L147> [0.00%], case 83: <L126> [0.00%], case 86: <L152> [0.00%], case 98: <L104> [0.00%], case 99: <L142> [0.00%], case 100: <L141> [0.00%], case 102: <L143> [0.00%], case 104: <L144> [0.00%], case 107: <L145> [0.00%], case 108: <L146> [0.00%], case 109: <L115> [0.00%], case 112: <L91> [0.00%], case 113: <L148> [0.00%], case 114: <L149> [0.00%], case 116: <L150> [0.00%], case 118: <L151> [0.00%], case 122: <L153> [0.00%]>

<L91> [100.00%]:
  k_885 = j_703 + 1;
  _1383 = memcpy (&cmdLineTemp, "2", 2);
  _1671 = _1383;

  <bb 69> [0.00%]:
  # cmdLineTempCount_614 = PHI <0(68), cmdLineTempCount_889(72)>
  # k_705 = PHI <k_885(68), k_888(72)>
  _128 = i_699 * 8;
  _129 = argv_855(D) + _128;
  _130 = *_129;
  _131 = _130 + k_705;
  _132 = *_131;
  if (_132 == 0)
    goto <bb 73>; [0.00%]
  else
    goto <bb 70>; [0.00%]

  <bb 70> [0.00%]:
  if (k_705 > 2047)
    goto <bb 73>; [0.00%]
  else
    goto <bb 71>; [0.00%]

  <bb 71> [0.00%]:
  _133 = i_699 * 8;
  _134 = argv_855(D) + _133;
  _135 = *_134;
  _136 = _135 + k_705;
  _137 = *_136;
  _138 = (unsigned char) _137;
  _139 = _138 + 208;
  if (_139 > 9)
    goto <bb 73>; [0.00%]
  else
    goto <bb 72>; [0.00%]

  <bb 72> [0.00%]:
  k_888 = k_705 + 1;
  cmdLineTempCount_889 = cmdLineTempCount_614 + 1;
  goto <bb 69>; [0.00%]

  <bb 73> [0.00%]:
  if (cmdLineTempCount_614 == 0)
    goto <bb 74>; [0.00%]
  else
    goto <bb 75>; [0.00%]

  <bb 74> [0.00%]:
  _140 = *argv_855(D);
  usage (_140, "Cannot parse -p argument");

  <bb 75> [100.00%]:
  _141 = (long unsigned int) cmdLineTempCount_614;
  _142 = i_699 * 8;
  _143 = argv_855(D) + _142;
  _144 = *_143;
  _145 = j_703 + 1;
  _146 = _144 + _145;
  _1354 = __strncpy_chk (&cmdLineTemp, _146, _141, 2048);
  _1673 = _1354;
  cmdLineTemp[cmdLineTempCount_614] = 0;
  _1379 = strtol (&cmdLineTemp, 0B, 10);
  _1283 = (int) _1379;
  numCPU = _1283;
  numCPU.457_148 = numCPU;
  if (numCPU.457_148 > 4096)
    goto <bb 76>; [0.00%]
  else
    goto <bb 77>; [0.00%]

  <bb 76> [100.00%]:
  stderr.458_149 = stderr;
  _1324 = __fprintf_chk (stderr.458_149, 1, "pbzip2: *ERROR: Maximal number of supported processors is 4096!  Aborting...\n");
  goto <bb 503>; [100.00%]

  <bb 77> [0.00%]:
  numCPU.459_150 = numCPU;
  if (numCPU.459_150 <= 0)
    goto <bb 78>; [0.00%]
  else
    goto <bb 79>; [0.00%]

  <bb 78> [100.00%]:
  stderr.460_151 = stderr;
  _1252 = __fprintf_chk (stderr.460_151, 1, "pbzip2: *ERROR: Minimum number of supported processors is 1!  Aborting...\n");
  goto <bb 503>; [100.00%]

  <bb 79> [0.00%]:
  _152 = (long unsigned int) cmdLineTempCount_614;
  j_894 = _152 + j_703;
  goto <bb 137> (<L163>); [0.00%]

<L104> [100.00%]:
  k_921 = j_703 + 1;
  _1248 = memcpy (&cmdLineTemp, "9", 2);
  _1689 = _1248;

  <bb 81> [0.00%]:
  # cmdLineTempCount_615 = PHI <0(80), cmdLineTempCount_926(84)>
  # k_706 = PHI <k_921(80), k_925(84)>
  _153 = i_699 * 8;
  _154 = argv_855(D) + _153;
  _155 = *_154;
  _156 = _155 + k_706;
  _157 = *_156;
  if (_157 == 0)
    goto <bb 85>; [0.00%]
  else
    goto <bb 82>; [0.00%]

  <bb 82> [0.00%]:
  if (k_706 > 2047)
    goto <bb 85>; [0.00%]
  else
    goto <bb 83>; [0.00%]

  <bb 83> [0.00%]:
  _158 = i_699 * 8;
  _159 = argv_855(D) + _158;
  _160 = *_159;
  _161 = _160 + k_706;
  _162 = *_161;
  _163 = (unsigned char) _162;
  _164 = _163 + 208;
  if (_164 > 9)
    goto <bb 85>; [0.00%]
  else
    goto <bb 84>; [0.00%]

  <bb 84> [0.00%]:
  k_925 = k_706 + 1;
  cmdLineTempCount_926 = cmdLineTempCount_615 + 1;
  goto <bb 81>; [0.00%]

  <bb 85> [0.00%]:
  if (cmdLineTempCount_615 == 0)
    goto <bb 86>; [0.00%]
  else
    goto <bb 87>; [0.00%]

  <bb 86> [0.00%]:
  _165 = *argv_855(D);
  usage (_165, "Cannot parse file block size");

  <bb 87> [100.00%]:
  _166 = (long unsigned int) cmdLineTempCount_615;
  _167 = i_699 * 8;
  _168 = argv_855(D) + _167;
  _169 = *_168;
  _170 = j_703 + 1;
  _171 = _169 + _170;
  _1220 = __strncpy_chk (&cmdLineTemp, _171, _166, 2048);
  _1691 = _1220;
  cmdLineTemp[cmdLineTempCount_615] = 0;
  _1244 = strtol (&cmdLineTemp, 0B, 10);
  _1233 = (int) _1244;
  blockSize_930 = _1233 * 100000;
  blockSize.461_173 = (unsigned int) blockSize_930;
  _174 = blockSize.461_173 + 4294867296;
  if (_174 > 999900000)
    goto <bb 88>; [0.00%]
  else
    goto <bb 89>; [0.00%]

  <bb 88> [100.00%]:
  stderr.462_175 = stderr;
  _1207 = __fprintf_chk (stderr.462_175, 1, "pbzip2: *ERROR: File block size Min: 100k and Max: 1000000k!  Aborting...\n");
  goto <bb 503>; [100.00%]

  <bb 89> [0.00%]:
  _176 = (long unsigned int) cmdLineTempCount_615;
  j_931 = _176 + j_703;
  goto <bb 137> (<L163>); [0.00%]

<L115> [100.00%]:
  k_899 = j_703 + 1;
  _1201 = memcpy (&cmdLineTemp, "1", 2);
  _1681 = _1201;

  <bb 91> [0.00%]:
  # cmdLineTempCount_616 = PHI <0(90), cmdLineTempCount_904(94)>
  # k_707 = PHI <k_899(90), k_903(94)>
  _177 = i_699 * 8;
  _178 = argv_855(D) + _177;
  _179 = *_178;
  _180 = _179 + k_707;
  _181 = *_180;
  if (_181 == 0)
    goto <bb 95>; [0.00%]
  else
    goto <bb 92>; [0.00%]

  <bb 92> [0.00%]:
  if (k_707 > 2047)
    goto <bb 95>; [0.00%]
  else
    goto <bb 93>; [0.00%]

  <bb 93> [0.00%]:
  _182 = i_699 * 8;
  _183 = argv_855(D) + _182;
  _184 = *_183;
  _185 = _184 + k_707;
  _186 = *_185;
  _187 = (unsigned char) _186;
  _188 = _187 + 208;
  if (_188 > 9)
    goto <bb 95>; [0.00%]
  else
    goto <bb 94>; [0.00%]

  <bb 94> [0.00%]:
  k_903 = k_707 + 1;
  cmdLineTempCount_904 = cmdLineTempCount_616 + 1;
  goto <bb 91>; [0.00%]

  <bb 95> [0.00%]:
  if (cmdLineTempCount_616 == 0)
    goto <bb 96>; [0.00%]
  else
    goto <bb 97>; [0.00%]

  <bb 96> [0.00%]:
  _189 = *argv_855(D);
  usage (_189, "Cannot parse -m argument");

  <bb 97> [100.00%]:
  _190 = (long unsigned int) cmdLineTempCount_616;
  _191 = i_699 * 8;
  _192 = argv_855(D) + _191;
  _193 = *_192;
  _194 = j_703 + 1;
  _195 = _193 + _194;
  _1145 = __strncpy_chk (&cmdLineTemp, _195, _190, 2048);
  _1683 = _1145;
  cmdLineTemp[cmdLineTempCount_616] = 0;
  _1169 = strtol (&cmdLineTemp, 0B, 10);
  _1151 = (int) _1169;
  maxMemory_908 = _1151 * 1000000;
  maxMemory.463_197 = (unsigned int) maxMemory_908;
  _198 = maxMemory.463_197 + 4293967296;
  if (_198 > 1999000000)
    goto <bb 98>; [0.00%]
  else
    goto <bb 99>; [0.00%]

  <bb 98> [100.00%]:
  stderr.464_199 = stderr;
  _1143 = __fprintf_chk (stderr.464_199, 1, "pbzip2: *ERROR: Memory usage size Min: 1MB and Max: 2000MB!  Aborting...\n");
  goto <bb 503>; [100.00%]

  <bb 99> [0.00%]:
  _200 = (long unsigned int) cmdLineTempCount_616;
  j_910 = _200 + j_703;
  goto <bb 137> (<L163>); [0.00%]

<L126> [100.00%]:
  k_936 = j_703 + 1;
  _1108 = memcpy (&cmdLineTemp, "0", 2);
  _1697 = _1108;
  ChildThreadStackSize = -1;

  <bb 101> [0.00%]:
  # cmdLineTempCount_617 = PHI <0(100), cmdLineTempCount_941(104)>
  # k_708 = PHI <k_936(100), k_940(104)>
  _201 = i_699 * 8;
  _202 = argv_855(D) + _201;
  _203 = *_202;
  _204 = _203 + k_708;
  _205 = *_204;
  if (_205 == 0)
    goto <bb 105>; [0.00%]
  else
    goto <bb 102>; [0.00%]

  <bb 102> [0.00%]:
  if (k_708 > 2047)
    goto <bb 105>; [0.00%]
  else
    goto <bb 103>; [0.00%]

  <bb 103> [0.00%]:
  _206 = i_699 * 8;
  _207 = argv_855(D) + _206;
  _208 = *_207;
  _209 = _208 + k_708;
  _210 = *_209;
  _211 = (unsigned char) _210;
  _212 = _211 + 208;
  if (_212 > 9)
    goto <bb 105>; [0.00%]
  else
    goto <bb 104>; [0.00%]

  <bb 104> [0.00%]:
  k_940 = k_708 + 1;
  cmdLineTempCount_941 = cmdLineTempCount_617 + 1;
  goto <bb 101>; [0.00%]

  <bb 105> [0.00%]:
  if (cmdLineTempCount_617 == 0)
    goto <bb 106>; [0.00%]
  else
    goto <bb 107>; [0.00%]

  <bb 106> [0.00%]:
  _213 = *argv_855(D);
  usage (_213, "Cannot parse -S argument");

  <bb 107> [100.00%]:
  _214 = (long unsigned int) cmdLineTempCount_617;
  _215 = i_699 * 8;
  _216 = argv_855(D) + _215;
  _217 = *_216;
  _218 = j_703 + 1;
  _219 = _217 + _218;
  _1111 = __strncpy_chk (&cmdLineTemp, _219, _214, 2048);
  _1699 = _1111;
  cmdLineTemp[cmdLineTempCount_617] = 0;
  _1107 = strtol (&cmdLineTemp, 0B, 10);
  _1104 = (int) _1107;
  _221 = _1104 * 1024;
  ChildThreadStackSize = _221;
  ChildThreadStackSize.465_222 = ChildThreadStackSize;
  if (ChildThreadStackSize.465_222 < 0)
    goto <bb 108>; [0.00%]
  else
    goto <bb 109>; [0.00%]

  <bb 108> [100.00%]:
  ChildThreadStackSize.466_223 = ChildThreadStackSize;
  stderr.467_224 = stderr;
  _1102 = __fprintf_chk (stderr.467_224, 1, "pbzip2: *ERROR: Parsing -S: invalid stack size specified [%d]!  Ignoring...\n", ChildThreadStackSize.466_223);
  goto <bb 112>; [100.00%]

  <bb 109> [0.00%]:
  ChildThreadStackSize.468_225 = ChildThreadStackSize;
  if (ChildThreadStackSize.468_225 <= 16383)
    goto <bb 110>; [0.00%]
  else
    goto <bb 112>; [0.00%]

  <bb 110> [100.00%]:
  ChildThreadStackSize.469_226 = ChildThreadStackSize;
  stderr.470_227 = stderr;
  _1100 = __fprintf_chk (stderr.470_227, 1, "pbzip2: *WARNING: Stack size %d bytes less than minumum - adjusting to %d bytes.\n", ChildThreadStackSize.469_226, 16384);

  <bb 111> [100.00%]:
  ChildThreadStackSize = 16384;

  <bb 112> [0.00%]:
  _228 = (long unsigned int) cmdLineTempCount_617;
  j_949 = _228 + j_703;
  goto <bb 137> (<L163>); [0.00%]

<L141> [0.00%]:
  goto <bb 137> (<L163>); [0.00%]

<L142> [0.00%]:
  OutputStdOut = 1;
  goto <bb 137> (<L163>); [0.00%]

<L143> [0.00%]:
  ForceOverwrite = 1;
  goto <bb 137> (<L163>); [0.00%]

<L144> [0.00%]:
  _229 = *argv_855(D);
  usage (_229, "HELP");

<L145> [0.00%]:
  goto <bb 137> (<L163>); [0.00%]

<L146> [0.00%]:
  goto <bb 137> (<L163>); [0.00%]

<L147> [0.00%]:
  banner ();

  <bb 120> [0.00%]:
  exit (0);

<L148> [0.00%]:
  QuietMode = 1;
  goto <bb 137> (<L163>); [0.00%]

<L149> [0.00%]:
  goto <bb 137> (<L163>); [0.00%]

<L150> [0.00%]:
  goto <bb 137> (<L163>); [0.00%]

<L151> [0.00%]:
  QuietMode = 0;
  goto <bb 137> (<L163>); [0.00%]

<L152> [0.00%]:
  banner ();

  <bb 126> [0.00%]:
  exit (0);

<L153> [0.00%]:
  goto <bb 137> (<L163>); [0.00%]

<L154> [0.00%]:
  BWTblockSize = 1;
  goto <bb 137> (<L163>); [0.00%]

<L155> [0.00%]:
  BWTblockSize = 2;
  goto <bb 137> (<L163>); [0.00%]

<L156> [0.00%]:
  BWTblockSize = 3;
  goto <bb 137> (<L163>); [0.00%]

<L157> [0.00%]:
  BWTblockSize = 4;
  goto <bb 137> (<L163>); [0.00%]

<L158> [0.00%]:
  BWTblockSize = 5;
  goto <bb 137> (<L163>); [0.00%]

<L159> [0.00%]:
  BWTblockSize = 6;
  goto <bb 137> (<L163>); [0.00%]

<L160> [0.00%]:
  BWTblockSize = 7;
  goto <bb 137> (<L163>); [0.00%]

<L161> [0.00%]:
  BWTblockSize = 8;
  goto <bb 137> (<L163>); [0.00%]

<L162> [0.00%]:
  BWTblockSize = 9;

  # useLoadAverage_611 = PHI <useLoadAverage_610(67), useLoadAverage_610(79), useLoadAverage_610(89), useLoadAverage_610(99), useLoadAverage_610(112), useLoadAverage_610(113), useLoadAverage_610(114), useLoadAverage_610(115), useLoadAverage_610(136), useLoadAverage_610(117), 1(118), useLoadAverage_610(121), useLoadAverage_610(122), useLoadAverage_610(123), useLoadAverage_610(124), useLoadAverage_610(127), useLoadAverage_610(128), useLoadAverage_610(129), useLoadAverage_610(130), useLoadAverage_610(131), useLoadAverage_610(132), useLoadAverage_610(133), useLoadAverage_610(134), useLoadAverage_610(135)>
  # readEntireFile_621 = PHI <readEntireFile_620(67), readEntireFile_620(79), readEntireFile_620(89), readEntireFile_620(99), readEntireFile_620(112), readEntireFile_620(113), readEntireFile_620(114), readEntireFile_620(115), readEntireFile_620(136), readEntireFile_620(117), readEntireFile_620(118), readEntireFile_620(121), 1(122), readEntireFile_620(123), readEntireFile_620(124), readEntireFile_620(127), readEntireFile_620(128), readEntireFile_620(129), readEntireFile_620(130), readEntireFile_620(131), readEntireFile_620(132), readEntireFile_620(133), readEntireFile_620(134), readEntireFile_620(135)>
  # blockSize_634 = PHI <blockSize_633(67), blockSize_633(79), blockSize_930(89), blockSize_633(99), blockSize_633(112), blockSize_633(113), blockSize_633(114), blockSize_633(115), blockSize_633(136), blockSize_633(117), blockSize_633(118), blockSize_633(121), blockSize_633(122), blockSize_633(123), blockSize_633(124), blockSize_633(127), blockSize_633(128), blockSize_633(129), blockSize_633(130), blockSize_633(131), blockSize_633(132), blockSize_633(133), blockSize_633(134), blockSize_633(135)>
  # maxMemory_641 = PHI <maxMemory_640(67), maxMemory_640(79), maxMemory_640(89), maxMemory_908(99), maxMemory_640(112), maxMemory_640(113), maxMemory_640(114), maxMemory_640(115), maxMemory_640(136), maxMemory_640(117), maxMemory_640(118), maxMemory_640(121), maxMemory_640(122), maxMemory_640(123), maxMemory_640(124), maxMemory_640(127), maxMemory_640(128), maxMemory_640(129), maxMemory_640(130), maxMemory_640(131), maxMemory_640(132), maxMemory_640(133), maxMemory_640(134), maxMemory_640(135)>
  # maxMemorySwitch_645 = PHI <maxMemorySwitch_644(67), maxMemorySwitch_644(79), maxMemorySwitch_644(89), 1(99), maxMemorySwitch_644(112), maxMemorySwitch_644(113), maxMemorySwitch_644(114), maxMemorySwitch_644(115), maxMemorySwitch_644(136), maxMemorySwitch_644(117), maxMemorySwitch_644(118), maxMemorySwitch_644(121), maxMemorySwitch_644(122), maxMemorySwitch_644(123), maxMemorySwitch_644(124), maxMemorySwitch_644(127), maxMemorySwitch_644(128), maxMemorySwitch_644(129), maxMemorySwitch_644(130), maxMemorySwitch_644(131), maxMemorySwitch_644(132), maxMemorySwitch_644(133), maxMemorySwitch_644(134), maxMemorySwitch_644(135)>
  # decompress_652 = PHI <decompress_651(67), decompress_651(79), decompress_651(89), decompress_651(99), decompress_651(112), 1(113), decompress_651(114), decompress_651(115), decompress_651(136), decompress_651(117), decompress_651(118), decompress_651(121), decompress_651(122), decompress_651(123), decompress_651(124), decompress_651(127), decompress_651(128), decompress_651(129), decompress_651(130), decompress_651(131), decompress_651(132), decompress_651(133), decompress_651(134), decompress_651(135)>
  # compress_657 = PHI <compress_656(67), compress_656(79), compress_656(89), compress_656(99), compress_656(112), compress_656(113), compress_656(114), compress_656(115), compress_656(136), compress_656(117), compress_656(118), compress_656(121), compress_656(122), compress_656(123), compress_656(124), 1(127), compress_656(128), compress_656(129), compress_656(130), compress_656(131), compress_656(132), compress_656(133), compress_656(134), compress_656(135)>
  # testFile_662 = PHI <testFile_661(67), testFile_661(79), testFile_661(89), testFile_661(99), testFile_661(112), testFile_661(113), testFile_661(114), testFile_661(115), testFile_661(136), testFile_661(117), testFile_661(118), testFile_661(121), testFile_661(122), 1(123), testFile_661(124), testFile_661(127), testFile_661(128), testFile_661(129), testFile_661(130), testFile_661(131), testFile_661(132), testFile_661(133), testFile_661(134), testFile_661(135)>
  # keep_689 = PHI <keep_688(67), keep_688(79), keep_688(89), keep_688(99), keep_688(112), keep_688(113), 1(114), keep_688(115), keep_688(136), 1(117), keep_688(118), keep_688(121), keep_688(122), keep_688(123), keep_688(124), keep_688(127), keep_688(128), keep_688(129), keep_688(130), keep_688(131), keep_688(132), keep_688(133), keep_688(134), keep_688(135)>
  # force_696 = PHI <force_695(67), force_695(79), force_695(89), force_695(99), force_695(112), force_695(113), force_695(114), 1(115), force_695(136), force_695(117), force_695(118), force_695(121), force_695(122), force_695(123), force_695(124), force_695(127), force_695(128), force_695(129), force_695(130), force_695(131), force_695(132), force_695(133), force_695(134), force_695(135)>
  # j_704 = PHI <j_703(67), j_894(79), j_931(89), j_910(99), j_949(112), j_703(113), j_703(114), j_703(115), j_703(136), j_703(117), j_703(118), j_703(121), j_703(122), j_703(123), j_703(124), j_703(127), j_703(128), j_703(129), j_703(130), j_703(131), j_703(132), j_703(133), j_703(134), j_703(135)>
<L163> [0.00%]:
  j_961 = j_704 + 1;
  goto <bb 66>; [0.00%]

  <bb 138> [0.00%]:
  _230 = i_699 * 8;
  _231 = argv_855(D) + _230;
  FileListCount.472_233 = FileListCount;
  _234 = (long unsigned int) FileListCount.472_233;
  _235 = _234 * 8;
  _236 = _14 + _235;
  _237 = *_231;
  *_236 = _237;
  FileListCount.473_238 = FileListCount;
  _239 = FileListCount.473_238 + 1;
  FileListCount = _239;

  <bb 139> [0.00%]:
  # useLoadAverage_612 = PHI <useLoadAverage_608(32), useLoadAverage_609(65), useLoadAverage_610(66), useLoadAverage_608(138)>
  # readEntireFile_622 = PHI <readEntireFile_618(32), readEntireFile_619(65), readEntireFile_620(66), readEntireFile_618(138)>
  # blockSize_635 = PHI <blockSize_632(32), blockSize_632(65), blockSize_633(66), blockSize_632(138)>
  # maxMemory_642 = PHI <maxMemory_639(32), maxMemory_639(65), maxMemory_640(66), maxMemory_639(138)>
  # maxMemorySwitch_646 = PHI <maxMemorySwitch_643(32), maxMemorySwitch_643(65), maxMemorySwitch_644(66), maxMemorySwitch_643(138)>
  # decompress_653 = PHI <decompress_649(32), decompress_650(65), decompress_651(66), decompress_649(138)>
  # compress_658 = PHI <compress_654(32), compress_655(65), compress_656(66), compress_654(138)>
  # testFile_663 = PHI <testFile_659(32), testFile_660(65), testFile_661(66), testFile_659(138)>
  # keep_690 = PHI <keep_686(32), keep_687(65), keep_688(66), keep_686(138)>
  # force_697 = PHI <force_693(32), force_694(65), force_695(66), force_693(138)>
  i_985 = i_699 + 1;
  goto <bb 29>; [0.00%]

  <bb 140> [0.00%]:
  BWTblockSize.474_240 = BWTblockSize;
  _241 = (unsigned char) BWTblockSize.474_240;
  _242 = _241 + 48;
  Bz2HeaderZero[3] = _242;
  _243 = Bz2HeaderZero[3];
  _244 = (char) _243;
  bz2Header[3] = _244;
  _245 = compress_654 == 1;
  _246 = decompress_649 == 1;
  _247 = _245 & _246;
  if (_247 != 0)
    goto <bb 141>; [0.00%]
  else
    goto <bb 143>; [0.00%]

  <bb 141> [100.00%]:
  stderr.475_248 = stderr;
  _1098 = __fprintf_chk (stderr.475_248, 1, "pbzip2: *ERROR: Can\'t compress and uncompress data at same time.  Aborting!\n");

  <bb 142> [100.00%]:
  _249 = *argv_855(D);
  stderr.476_250 = stderr;
  _1096 = __fprintf_chk (stderr.476_250, 1, "pbzip2: For help type: %s -h\n", _249);
  goto <bb 503>; [100.00%]

  <bb 143> [0.00%]:
  FileListCount.477_251 = FileListCount;
  if (FileListCount.477_251 == 0)
    goto <bb 144>; [0.00%]
  else
    goto <bb 162>; [0.00%]

  <bb 144> [0.00%]:
  if (testFile_659 == 1)
    goto <bb 145>; [0.00%]
  else
    goto <bb 149>; [0.00%]

  <bb 145> [0.00%]:
  stdin.479_252 = stdin;
  _253 = fileno (stdin.479_252);
  _254 = isatty (_253);
  if (_254 != 0)
    goto <bb 146>; [0.00%]
  else
    goto <bb 148>; [0.00%]

  <bb 146> [100.00%]:
  stderr.480_255 = stderr;
  _1094 = __fprintf_chk (stderr.480_255, 1, "pbzip2: *ERROR: Won\'t read compressed data from terminal.  Aborting!\n");

  <bb 147> [100.00%]:
  _256 = *argv_855(D);
  stderr.481_257 = stderr;
  _1068 = __fprintf_chk (stderr.481_257, 1, "pbzip2: For help type: %s -h\n", _256);
  goto <bb 503>; [100.00%]

  <bb 148> [0.00%]:
  FileListCount.483_259 = FileListCount;
  _260 = (long unsigned int) FileListCount.483_259;
  _261 = _260 * 8;
  _262 = _14 + _261;
  *_262 = &stdinFile;
  FileListCount.484_263 = FileListCount;
  _264 = FileListCount.484_263 + 1;
  FileListCount = _264;
  goto <bb 162>; [0.00%]

  <bb 149> [0.00%]:
  if (decompress_649 == 1)
    goto <bb 150>; [0.00%]
  else
    goto <bb 154>; [0.00%]

  <bb 150> [0.00%]:
  stdin.486_265 = stdin;
  _266 = fileno (stdin.486_265);
  _267 = isatty (_266);
  if (_267 != 0)
    goto <bb 151>; [0.00%]
  else
    goto <bb 153>; [0.00%]

  <bb 151> [100.00%]:
  stderr.487_268 = stderr;
  _1063 = __fprintf_chk (stderr.487_268, 1, "pbzip2: *ERROR: Won\'t read compressed data from terminal.  Aborting!\n");

  <bb 152> [100.00%]:
  _269 = *argv_855(D);
  stderr.488_270 = stderr;
  _1492 = __fprintf_chk (stderr.488_270, 1, "pbzip2: For help type: %s -h\n", _269);
  goto <bb 503>; [100.00%]

  <bb 153> [0.00%]:
  OutputStdOut = 1;
  FileListCount.490_272 = FileListCount;
  _273 = (long unsigned int) FileListCount.490_272;
  _274 = _273 * 8;
  _275 = _14 + _274;
  *_275 = &stdinFile;
  FileListCount.491_276 = FileListCount;
  _277 = FileListCount.491_276 + 1;
  FileListCount = _277;
  goto <bb 162>; [0.00%]

  <bb 154> [0.00%]:
  OutputStdOut.492_278 = OutputStdOut;
  if (OutputStdOut.492_278 == 0)
    goto <bb 155>; [0.00%]
  else
    goto <bb 158>; [0.00%]

  <bb 155> [0.00%]:
  QuietMode.493_279 = QuietMode;
  if (QuietMode.493_279 != 1)
    goto <bb 156>; [0.00%]
  else
    goto <bb 157>; [0.00%]

  <bb 156> [100.00%]:
  stderr.494_280 = stderr;
  _1493 = __fprintf_chk (stderr.494_280, 1, "pbzip2: Assuming input data coming from stdin...\n\n");

  <bb 157> [0.00%]:
  OutputStdOut = 1;

  <bb 158> [0.00%]:
  # keep_691 = PHI <keep_686(154), 1(157)>
  stdout.496_281 = stdout;
  _282 = fileno (stdout.496_281);
  _283 = isatty (_282);
  if (_283 != 0)
    goto <bb 159>; [0.00%]
  else
    goto <bb 161>; [0.00%]

  <bb 159> [100.00%]:
  stderr.497_284 = stderr;
  _1494 = __fprintf_chk (stderr.497_284, 1, "pbzip2: *ERROR: Won\'t write compressed data to terminal.  Aborting!\n");

  <bb 160> [100.00%]:
  _285 = *argv_855(D);
  stderr.498_286 = stderr;
  _1495 = __fprintf_chk (stderr.498_286, 1, "pbzip2: For help type: %s -h\n", _285);
  goto <bb 503>; [100.00%]

  <bb 161> [0.00%]:
  FileListCount.500_288 = FileListCount;
  _289 = (long unsigned int) FileListCount.500_288;
  _290 = _289 * 8;
  _291 = _14 + _290;
  *_291 = &stdinFile;
  FileListCount.501_292 = FileListCount;
  _293 = FileListCount.501_292 + 1;
  FileListCount = _293;

  <bb 162> [0.00%]:
  # keep_692 = PHI <keep_686(143), 1(153), keep_686(148), keep_691(161)>
  QuietMode.502_294 = QuietMode;
  if (QuietMode.502_294 != 1)
    goto <bb 163>; [0.00%]
  else
    goto <bb 164>; [0.00%]

  <bb 163> [0.00%]:
  banner ();

  <bb 164> [0.00%]:
  if (useLoadAverage_608 == 1)
    goto <bb 165>; [0.00%]
  else
    goto <bb 172>; [0.00%]

  <bb 165> [0.00%]:
  ret_1019 = getloadavg (&loadAvgArray, 3);
  if (ret_1019 != 3)
    goto <bb 166>; [0.00%]
  else
    goto <bb 168>; [0.00%]

  <bb 166> [0.00%]:
  QuietMode.506_298 = QuietMode;
  if (QuietMode.506_298 != 1)
    goto <bb 167>; [0.00%]
  else
    goto <bb 172>; [0.00%]

  <bb 167> [100.00%]:
  stderr.507_299 = stderr;
  _1496 = __fprintf_chk (stderr.507_299, 1, "pbzip2:  *WARNING: Could not get load average!  Using requested processors...\n");
  goto <bb 172>; [100.00%]

  <bb 168> [0.00%]:
  loadAverage_1020 = loadAvgArray[0];
  _300 = loadAverage_1020 + 5.0e-1;
  _301 = (int) _300;
  numCPUidle_1021 = numCPUtotal_875 - _301;
  numCPU.508_302 = numCPU;
  if (numCPU.508_302 > numCPUidle_1021)
    goto <bb 169>; [0.00%]
  else
    goto <bb 170>; [0.00%]

  <bb 169> [0.00%]:
  numCPU = numCPUidle_1021;

  <bb 170> [0.00%]:
  numCPU.509_303 = numCPU;
  if (numCPU.509_303 <= 0)
    goto <bb 171>; [0.00%]
  else
    goto <bb 172>; [0.00%]

  <bb 171> [0.00%]:
  numCPU = 1;

  <bb 172> [0.00%]:
  # loadAverage_607 = PHI <0.0(164), loadAverage_1020(170), 0.0(167), 0.0(166), loadAverage_1020(171)>
  # useLoadAverage_613 = PHI <useLoadAverage_608(164), useLoadAverage_608(170), 0(167), 0(166), useLoadAverage_608(171)>
  initChildThreadAttributes ();

  <bb 173> [0.00%]:
  sigInFilename = 0B;
  sigOutFilename = 0B;
  ret_1031 = setupSignalHandling ();
  if (ret_1031 != 0)
    goto <bb 174>; [0.00%]
  else
    goto <bb 175>; [0.00%]

  <bb 174> [100.00%]:
  stderr.510_304 = stderr;
  _1497 = __fprintf_chk (stderr.510_304, 1, "pbzip2: *ERROR: Can\'t setup signal handling [%d]. Aborting!\n", ret_1031);
  goto <bb 503>; [100.00%]

  <bb 175> [0.00%]:
  ret_1033 = setupTerminator ();
  if (ret_1033 != 0)
    goto <bb 176>; [0.00%]
  else
    goto <bb 177>; [0.00%]

  <bb 176> [100.00%]:
  stderr.511_305 = stderr;
  _1498 = __fprintf_chk (stderr.511_305, 1, "pbzip2: *ERROR: Can\'t setup terminator thread [%d]. Aborting!\n", ret_1033);
  goto <bb 503>; [100.00%]

  <bb 177> [0.00%]:
  numCPU.512_306 = numCPU;
  if (numCPU.512_306 <= 0)
    goto <bb 178>; [0.00%]
  else
    goto <bb 179>; [0.00%]

  <bb 178> [0.00%]:
  numCPU = 1;

  <bb 179> [0.00%]:
  QuietMode.513_307 = QuietMode;
  if (QuietMode.513_307 != 1)
    goto <bb 180>; [0.00%]
  else
    goto <bb 197>; [0.00%]

  <bb 180> [0.00%]:
  if (testFile_659 != 1)
    goto <bb 181>; [0.00%]
  else
    goto <bb 196>; [0.00%]

  <bb 181> [100.00%]:
  numCPU.514_308 = numCPU;
  stderr.515_309 = stderr;
  _1499 = __fprintf_chk (stderr.515_309, 1, "\n         # CPUs: %d\n", numCPU.514_308);

  <bb 182> [100.00%]:
  if (useLoadAverage_613 == 1)
    goto <bb 183>; [0.00%]
  else
    goto <bb 184>; [0.00%]

  <bb 183> [100.00%]:
  stderr.516_310 = stderr;
  _1500 = __fprintf_chk (stderr.516_310, 1, "   Load Average: %.2f\n", loadAverage_607);

  <bb 184> [0.00%]:
  if (decompress_649 != 1)
    goto <bb 185>; [0.00%]
  else
    goto <bb 189>; [0.00%]

  <bb 185> [100.00%]:
  BWTblockSize.517_311 = BWTblockSize;
  stderr.518_312 = stderr;
  _1501 = __fprintf_chk (stderr.518_312, 1, " BWT Block Size: %d00 KB\n", BWTblockSize.517_311);

  <bb 186> [100.00%]:
  if (blockSize_632 <= 99999)
    goto <bb 187>; [0.00%]
  else
    goto <bb 188>; [0.00%]

  <bb 187> [100.00%]:
  stderr.519_313 = stderr;
  _1502 = __fprintf_chk (stderr.519_313, 1, "File Block Size: %d bytes\n", blockSize_632);
  goto <bb 189>; [100.00%]

  <bb 188> [100.00%]:
  _314 = blockSize_632 / 1000;
  stderr.520_315 = stderr;
  _1503 = __fprintf_chk (stderr.520_315, 1, "File Block Size: %d KB\n", _314);

  <bb 189> [100.00%]:
  _316 = maxMemory_639 / 1000000;
  stderr.521_317 = stderr;
  _1504 = __fprintf_chk (stderr.521_317, 1, " Maximum Memory: %d MB\n", _316);

  <bb 190> [100.00%]:
  ChildThreadStackSize.522_318 = ChildThreadStackSize;
  if (ChildThreadStackSize.522_318 > 0)
    goto <bb 191>; [0.00%]
  else
    goto <bb 192>; [0.00%]

  <bb 191> [100.00%]:
  ChildThreadStackSize.523_319 = ChildThreadStackSize;
  _320 = ChildThreadStackSize.523_319 / 1024;
  stderr.524_321 = stderr;
  _1505 = __fprintf_chk (stderr.524_321, 1, "     Stack Size: %d KB\n", _320);

  <bb 192> [0.00%]:
  if (decompress_649 == 1)
    goto <bb 193>; [0.00%]
  else
    goto <bb 196>; [0.00%]

  <bb 193> [0.00%]:
  IgnoreTrailingGarbageFlag.526_322 = IgnoreTrailingGarbageFlag;
  if (IgnoreTrailingGarbageFlag.526_322 == 1)
    goto <bb 195>; [0.00%]
  else
    goto <bb 194>; [0.00%]

  <bb 194> [0.00%]:

  <bb 195> [100.00%]:
  # iftmp.525_720 = PHI <"on"(193), "off"(194)>
  stderr.527_323 = stderr;
  _1506 = __fprintf_chk (stderr.527_323, 1, " Ignore Trailing Garbage: %s\n", iftmp.525_720);

  <bb 196> [100.00%]:
  stderr.528_324 = stderr;
  _1507 = __fprintf_chk (stderr.528_324, 1, "-------------------------------------------\n");

  <bb 197> [0.00%]:
  _1047 = mutexesInit ();

  <bb 198> [0.00%]:
  if (_1047 != 0)
    goto <bb 503>; [0.00%]
  else
    goto <bb 199>; [0.00%]

  <bb 199> [0.00%]:
  numCPU.529_325 = numCPU;
  _1050 = queueInit (numCPU.529_325);

  <bb 200> [0.00%]:
  FifoQueue = _1050;
  fifo_1052 = FifoQueue;
  if (fifo_1052 == 0B)
    goto <bb 201>; [0.00%]
  else
    goto <bb 202>; [0.00%]

  <bb 201> [100.00%]:
  stderr.530_327 = stderr;
  _1508 = __fprintf_chk (stderr.530_327, 1, "pbzip2: *ERROR: Queue Init failed.  Aborting...\n");
  goto <bb 503>; [100.00%]

  <bb 202> [0.00%]:
  # zeroByteFile_623 = PHI <0(200), zeroByteFile_627(477)>
  # blockSize_636 = PHI <blockSize_632(200), blockSize_638(477)>
  # errLevel_664 = PHI <0(200), errLevel_675(477)>
  # noThreads_677 = PHI <0(200), noThreads_683(477)>
  # fileLoop_698 = PHI <0(200), fileLoop_1421(477)>
  FileListCount.531_328 = FileListCount;
  if (FileListCount.531_328 <= fileLoop_698)
    goto <bb 478>; [0.00%]
  else
    goto <bb 203>; [0.00%]

  <bb 203> [0.00%]:
  producerDone = 0;
  InFileSize = 0;
  NumBlocks = 0;
  _1060 = pbzip2::ErrorContext::getInstance ();

  <bb 204> [0.00%]:
  pbzip2::ErrorContext::reset (_1060);

  <bb 205> [0.00%]:
  _331 = (long unsigned int) fileLoop_698;
  _332 = _331 * 8;
  _333 = _14 + _332;
  InFilename_1062 = *_333;
  if (testFile_659 != 0)
    goto <bb 206>; [0.00%]
  else
    goto <bb 219>; [0.00%]

  <bb 206> [0.00%]:
  QuietMode.533_334 = QuietMode;
  if (QuietMode.533_334 != 1)
    goto <bb 207>; [0.00%]
  else
    goto <bb 211>; [0.00%]

  <bb 207> [100.00%]:
  FileListCount.534_335 = FileListCount;
  _336 = fileLoop_698 + 1;
  stderr.535_337 = stderr;
  _1509 = __fprintf_chk (stderr.535_337, 1, "      File #: %d of %d\n", _336, FileListCount.534_335);

  <bb 208> [100.00%]:
  _338 = strcmp (InFilename_1062, "-");
  if (_338 != 0)
    goto <bb 209>; [0.00%]
  else
    goto <bb 210>; [0.00%]

  <bb 209> [100.00%]:
  stderr.536_339 = stderr;
  _1510 = __fprintf_chk (stderr.536_339, 1, "     Testing: %s\n", InFilename_1062);
  goto <bb 211>; [100.00%]

  <bb 210> [100.00%]:
  stderr.537_340 = stderr;
  _1511 = __fprintf_chk (stderr.537_340, 1, "     Testing: <stdin>\n");

  <bb 211> [0.00%]:
  _1415 = testCompressedData (InFilename_1062);

  <bb 212> [0.00%]:
  if (_1415 > 0)
    goto <bb 503>; [0.00%]
  else
    goto <bb 213>; [0.00%]

  <bb 213> [0.00%]:
  if (_1415 == 0)
    goto <bb 214>; [0.00%]
  else
    goto <bb 216>; [0.00%]

  <bb 214> [0.00%]:
  QuietMode.538_341 = QuietMode;
  if (QuietMode.538_341 != 1)
    goto <bb 215>; [0.00%]
  else
    goto <bb 216>; [0.00%]

  <bb 215> [100.00%]:
  stderr.539_342 = stderr;
  _1512 = __fprintf_chk (stderr.539_342, 1, "        Test: OK\n");

  <bb 216> [0.00%]:
  # errLevel_665 = PHI <errLevel_664(215), 2(213), errLevel_664(214)>
  QuietMode.540_343 = QuietMode;
  if (QuietMode.540_343 != 1)
    goto <bb 217>; [0.00%]
  else
    goto <bb 218>; [0.00%]

  <bb 217> [100.00%]:
  stderr.541_344 = stderr;
  _1513 = __fprintf_chk (stderr.541_344, 1, "-------------------------------------------\n");

  <bb 218> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 477>; [0.00%]

  <bb 219> [0.00%]:
  _346 = (long unsigned int) fileLoop_698;
  _347 = _346 * 8;
  _348 = _14 + _347;
  _349 = *_348;
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (&D.39833, _349, &D.39832);

  <bb 220> [100.00%]:
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator= (&outFilename, &D.39833);
  _1591 = D.39833._M_dataplus._M_p;
  if (&D.39833.D.18739._M_local_buf != _1591)
    goto <bb 221>; [57.44%]
  else
    goto <bb 222>; [42.56%]

  <bb 221> [57.44%]:
  operator delete (_1591);

  <bb 222> [100.00%]:
  MEM[(struct  &)&D.39833] ={v} {CLOBBER};
  D.39833 ={v} {CLOBBER};
  D.39832 ={v} {CLOBBER};
  if (decompress_649 == 1)
    goto <bb 223>; [0.00%]
  else
    goto <bb 266>; [0.00%]

  <bb 223> [0.00%]:
  _350 = strcmp (InFilename_1062, "-");
  if (_350 != 0)
    goto <bb 224>; [0.00%]
  else
    goto <bb 266>; [0.00%]

  <bb 224> [100.00%]:
  _1520 = *open64 (InFilename_1062, 0);

  <bb 225> [100.00%]:
  # _1524 = PHI <_1520(224)>
  if (_1520 == -1)
    goto <bb 226>; [0.00%]
  else
    goto <bb 230>; [0.00%]

  <bb 226> [0.00%]:
  _351 = __errno_location ();
  _352 = *_351;
  stderr.543_353 = stderr;
  pbzip2::ErrorContext::printErrnoMsg (stderr.543_353, _352);

  <bb 227> [100.00%]:
  stderr.544_354 = stderr;
  _1527 = __fprintf_chk (stderr.544_354, 1, "pbzip2: *ERROR: File [%s] NOT found!  Skipping...\n", InFilename_1062);

  <bb 228> [100.00%]:
  stderr.545_355 = stderr;
  _1528 = __fprintf_chk (stderr.545_355, 1, "-------------------------------------------\n");

  <bb 229> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 265>; [0.00%]

  <bb 230> [100.00%]:
  _1530 = memset (&tmpBuff, 0, 50);
  _1748 = _1530;
  _356 = strlen (&bz2Header);
  _357 = _356 + 1;
  _1075 = do_read (_1524, &tmpBuff, _357);

  <bb 231> [0.00%]:
  size_1076 = (size_t) _1075;
  do_close (_1524);

  <bb 232> [0.00%]:
  if (size_1076 == 18446744073709551615)
    goto <bb 234>; [0.00%]
  else
    goto <bb 233>; [0.00%]

  <bb 233> [0.00%]:
  _359 = strlen (&bz2Header);
  _360 = _359 + 1;
  if (_360 > size_1076)
    goto <bb 234>; [0.00%]
  else
    goto <bb 239>; [0.00%]

  <bb 234> [0.00%]:
  _1128 = pbzip2::ErrorContext::getInstance ();

  <bb 235> [0.00%]:
  stderr.546_362 = stderr;
  pbzip2::ErrorContext::printErrorMessages (_1128, stderr.546_362);

  <bb 236> [100.00%]:
  stderr.547_363 = stderr;
  _1531 = __fprintf_chk (stderr.547_363, 1, "pbzip2: *ERROR: File [%s] is NOT a valid bzip2!  Skipping...\n", InFilename_1062);

  <bb 237> [100.00%]:
  stderr.548_364 = stderr;
  _1532 = __fprintf_chk (stderr.548_364, 1, "-------------------------------------------\n");

  <bb 238> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 265>; [0.00%]

  <bb 239> [0.00%]:
  _1079 = memstr<unsigned char*, char*> (&tmpBuff, 4, &bz2Header, 3);
  if (_1079 == 0B)
    goto <bb 240>; [0.00%]
  else
    goto <bb 243>; [0.00%]

  <bb 240> [100.00%]:
  stderr.550_366 = stderr;
  _1533 = __fprintf_chk (stderr.550_366, 1, "pbzip2: *ERROR: File [%s] is NOT a valid bzip2!  Skipping...\n", InFilename_1062);

  <bb 241> [100.00%]:
  stderr.551_367 = stderr;
  _1534 = __fprintf_chk (stderr.551_367, 1, "-------------------------------------------\n");

  <bb 242> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 265>; [0.00%]

  <bb 243> [0.00%]:
  _368 = strlen (&bz2Header);
  _369 = (unsigned int) _368;
  _370 = _369 + 4294967292;
  _371 = (int) _370;
  _373 = (unsigned int) _1075;
  _374 = _373 + 4294967292;
  _375 = (int) _374;
  _1082 = memstr<unsigned char*, char*> (&MEM[(void *)&tmpBuff + 4B], _375, &MEM[(void *)&bz2Header + 4B], _371);
  if (_1082 == 0B)
    goto <bb 244>; [0.00%]
  else
    goto <bb 248>; [0.00%]

  <bb 244> [0.00%]:
  _378 = strlen (&bz2Header);
  _379 = (unsigned int) _378;
  _380 = _379 + 4294967292;
  _381 = (int) _380;
  _383 = (unsigned int) _1075;
  _384 = _383 + 4294967292;
  _385 = (int) _384;
  _1085 = memstr<unsigned char*, unsigned char*> (&MEM[(void *)&tmpBuff + 4B], _385, &MEM[(void *)&Bz2HeaderZero + 4B], _381);
  if (_1085 == 0B)
    goto <bb 245>; [0.00%]
  else
    goto <bb 248>; [0.00%]

  <bb 245> [100.00%]:
  stderr.554_388 = stderr;
  _1535 = __fprintf_chk (stderr.554_388, 1, "pbzip2: *ERROR: File [%s] is NOT a valid bzip2!  Skipping...\n", InFilename_1062);

  <bb 246> [100.00%]:
  stderr.555_389 = stderr;
  _1536 = __fprintf_chk (stderr.555_389, 1, "-------------------------------------------\n");

  <bb 247> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 265>; [0.00%]

  <bb 248> [0.00%]:
  _390 = tmpBuff[3];
  _391 = _390 + 207;
  if (_391 <= 8)
    goto <bb 249>; [0.00%]
  else
    goto <bb 250>; [0.00%]

  <bb 249> [100.00%]:
  _392 = tmpBuff[3];
  _393 = (char) _392;
  BWTblockSizeChar = _393;
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (&bz2Tail, ".bz2", &D.39850);
  goto <bb 253>; [0.00%]

  <bb 250> [100.00%]:
  stderr.556_394 = stderr;
  _1537 = __fprintf_chk (stderr.556_394, 1, "pbzip2: *ERROR: File [%s] is NOT a valid bzip2!  Skipping...\n", InFilename_1062);

  <bb 251> [100.00%]:
  stderr.557_395 = stderr;
  _1538 = __fprintf_chk (stderr.557_395, 1, "-------------------------------------------\n");

  <bb 252> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 265>; [0.00%]

  <bb 253> [0.00%]:
  D.39850 ={v} {CLOBBER};
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (&tbz2Tail, ".tbz2", &D.39853);

  <bb 254> [0.00%]:
  D.39853 ={v} {CLOBBER};
  retval.558_1103 = ends_with_icase<char> (&outFilename, &bz2Tail);
  if (retval.558_1103 != 0)
    goto <bb 255>; [0.00%]
  else
    goto <bb 256>; [0.00%]

  <bb 255> [100.00%]:
  _1594 = outFilename._M_string_length;
  _1593 = bz2Tail._M_string_length;
  _398 = _1594 - _1593;
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (&outFilename, _398, 0);
  goto <bb 260>; [100.00%]

  <bb 256> [0.00%]:
  retval.559_1105 = ends_with_icase<char> (&outFilename, &tbz2Tail);
  if (retval.559_1105 != 0)
    goto <bb 257>; [0.00%]
  else
    goto <bb 259>; [0.00%]

  <bb 257> [100.00%]:
  _1596 = outFilename._M_string_length;
  _1595 = tbz2Tail._M_string_length;
  _401 = _1596 - _1595;
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (&outFilename, _401, 0);

  <bb 258> [100.00%]:
  _1597 = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (&outFilename, ".tar");
  goto <bb 260>; [100.00%]

  <bb 259> [100.00%]:
  _1598 = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (&outFilename, ".out");

  <bb 260> [100.00%]:
  _1601 = tbz2Tail._M_dataplus._M_p;
  if (&tbz2Tail.D.18739._M_local_buf != _1601)
    goto <bb 261>; [57.44%]
  else
    goto <bb 262>; [42.56%]

  <bb 261> [57.44%]:
  operator delete (_1601);

  <bb 262> [100.00%]:
  MEM[(struct  &)&tbz2Tail] ={v} {CLOBBER};
  _1599 = bz2Tail._M_dataplus._M_p;
  if (&bz2Tail.D.18739._M_local_buf != _1599)
    goto <bb 263>; [57.44%]
  else
    goto <bb 264>; [42.56%]

  <bb 263> [57.44%]:
  operator delete (_1599);

  <bb 264> [100.00%]:
  MEM[(struct  &)&bz2Tail] ={v} {CLOBBER};
  bz2Tail ={v} {CLOBBER};
  tbz2Tail ={v} {CLOBBER};
  goto <bb 280>; [0.00%]

  <bb 265> [0.00%]:
  bz2Tail ={v} {CLOBBER};
  tbz2Tail ={v} {CLOBBER};
  goto <bb 477>; [0.00%]

  <bb 266> [0.00%]:
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (&bz2Tail, ".bz2", &D.39859);

  <bb 267> [0.00%]:
  D.39859 ={v} {CLOBBER};
  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (&D.39862, InFilename_1062, &D.39861);

  <bb 268> [100.00%]:
  retval.560_1148 = ends_with_icase<char> (&D.39862, &bz2Tail);
  _1603 = D.39862._M_dataplus._M_p;
  if (&D.39862.D.18739._M_local_buf != _1603)
    goto <bb 269>; [57.44%]
  else
    goto <bb 270>; [42.56%]

  <bb 269> [57.44%]:
  operator delete (_1603);

  <bb 270> [100.00%]:
  MEM[(struct  &)&D.39862] ={v} {CLOBBER};
  D.39862 ={v} {CLOBBER};
  D.39861 ={v} {CLOBBER};
  if (retval.560_1148 != 0)
    goto <bb 271>; [0.00%]
  else
    goto <bb 276>; [0.00%]

  <bb 271> [100.00%]:
  stderr.561_402 = stderr;
  _1539 = __fprintf_chk (stderr.561_402, 1, "pbzip2: *ERROR: Input file [%s] already has a .bz2 extension!  Skipping...\n", InFilename_1062);

  <bb 272> [100.00%]:
  stderr.562_403 = stderr;
  _1540 = __fprintf_chk (stderr.562_403, 1, "-------------------------------------------\n");

  <bb 273> [100.00%]:
  // predicted unlikely by continue predictor.
  _1605 = bz2Tail._M_dataplus._M_p;
  if (&bz2Tail.D.18739._M_local_buf != _1605)
    goto <bb 274>; [57.44%]
  else
    goto <bb 275>; [42.56%]

  <bb 274> [57.44%]:
  operator delete (_1605);

  <bb 275> [100.00%]:
  MEM[(struct  &)&bz2Tail] ={v} {CLOBBER};
  bz2Tail ={v} {CLOBBER};
  goto <bb 477>; [0.00%]

  <bb 276> [100.00%]:
  _1607 = bz2Tail._M_string_length;
  _1608 = bz2Tail._M_dataplus._M_p;
  _1609 = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append (&outFilename, _1608, _1607);

  <bb 277> [100.00%]:
  _1610 = bz2Tail._M_dataplus._M_p;
  if (&bz2Tail.D.18739._M_local_buf != _1610)
    goto <bb 278>; [57.44%]
  else
    goto <bb 279>; [42.56%]

  <bb 278> [57.44%]:
  operator delete (_1610);

  <bb 279> [100.00%]:
  MEM[(struct  &)&bz2Tail] ={v} {CLOBBER};
  bz2Tail ={v} {CLOBBER};

  <bb 280> [0.00%]:
  safe_mutex_lock (&ErrorHandlerMutex);

  <bb 281> [100.00%]:
  sigInFilename = InFilename_1062;
  _1612 = outFilename._M_dataplus._M_p;
  sigOutFilename = _1612;
  safe_mutex_unlock (&ErrorHandlerMutex);

  <bb 282> [0.00%]:
  _405 = strcmp (InFilename_1062, "-");
  if (_405 != 0)
    goto <bb 283>; [0.00%]
  else
    goto <bb 307>; [0.00%]

  <bb 283> [100.00%]:
  _1547 = *open64 (InFilename_1062, 0);

  <bb 284> [100.00%]:
  # _1551 = PHI <_1547(283)>
  if (_1547 == -1)
    goto <bb 285>; [0.00%]
  else
    goto <bb 288>; [0.00%]

  <bb 285> [100.00%]:
  stderr.563_406 = stderr;
  _1554 = __fprintf_chk (stderr.563_406, 1, "pbzip2: *ERROR: File [%s] NOT found!  Skipping...\n", InFilename_1062);

  <bb 286> [100.00%]:
  stderr.564_407 = stderr;
  _1555 = __fprintf_chk (stderr.564_407, 1, "-------------------------------------------\n");

  <bb 287> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 306>; [0.00%]

  <bb 288> [100.00%]:
  _1556 = *__fxstat64 (1, _1551, &statbuf);
  _408 = statbuf.st_mode;
  _409 = _408 & 61440;
  if (_409 == 16384)
    goto <bb 289>; [0.00%]
  else
    goto <bb 292>; [0.00%]

  <bb 289> [100.00%]:
  stderr.565_410 = stderr;
  _1557 = __fprintf_chk (stderr.565_410, 1, "pbzip2: *ERROR: File [%s] is a directory!  Skipping...\n", InFilename_1062);

  <bb 290> [100.00%]:
  stderr.566_411 = stderr;
  _1558 = __fprintf_chk (stderr.566_411, 1, "-------------------------------------------\n");

  <bb 291> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 306>; [0.00%]

  <bb 292> [0.00%]:
  _412 = statbuf.st_mode;
  _413 = _412 & 61440;
  if (_413 != 32768)
    goto <bb 293>; [0.00%]
  else
    goto <bb 296>; [0.00%]

  <bb 293> [100.00%]:
  stderr.567_414 = stderr;
  _1559 = __fprintf_chk (stderr.567_414, 1, "pbzip2: *ERROR: File [%s] is not a regular file!  Skipping...\n", InFilename_1062);

  <bb 294> [100.00%]:
  stderr.568_415 = stderr;
  _1560 = __fprintf_chk (stderr.568_415, 1, "-------------------------------------------\n");

  <bb 295> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 306>; [0.00%]

  <bb 296> [0.00%]:
  _416 = statbuf.st_size;
  InFileSize = _416;
  InFileSize.569_417 = InFileSize;
  if (InFileSize.569_417 == 0)
    goto <bb 297>; [0.00%]
  else
    goto <bb 301>; [0.00%]

  <bb 297> [0.00%]:
  if (decompress_649 == 1)
    goto <bb 298>; [0.00%]
  else
    goto <bb 301>; [0.00%]

  <bb 298> [100.00%]:
  stderr.570_418 = stderr;
  _1561 = __fprintf_chk (stderr.570_418, 1, "pbzip2: *ERROR: File is of size 0 [%s]!  Skipping...\n", InFilename_1062);

  <bb 299> [100.00%]:
  stderr.571_419 = stderr;
  _1562 = __fprintf_chk (stderr.571_419, 1, "-------------------------------------------\n");

  <bb 300> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 306>; [0.00%]

  <bb 301> [0.00%]:
  # zeroByteFile_624 = PHI <1(297), 0(296)>
  _420 = getFileMetaData (InFilename_1062);
  if (_420 != 0)
    goto <bb 302>; [0.00%]
  else
    goto <bb 305>; [0.00%]

  <bb 302> [100.00%]:
  stderr.573_421 = stderr;
  _1563 = __fprintf_chk (stderr.573_421, 1, "pbzip2: *ERROR: Could not get file meta data from [%s]!  Skipping...\n", InFilename_1062);

  <bb 303> [100.00%]:
  stderr.574_422 = stderr;
  _1564 = __fprintf_chk (stderr.574_422, 1, "-------------------------------------------\n");

  <bb 304> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 306>; [0.00%]

  <bb 305> [0.00%]:
  statbuf ={v} {CLOBBER};
  goto <bb 308>; [0.00%]

  <bb 306> [0.00%]:
  # zeroByteFile_625 = PHI <zeroByteFile_623(287), zeroByteFile_623(291), zeroByteFile_623(295), zeroByteFile_623(300), zeroByteFile_624(304)>
  statbuf ={v} {CLOBBER};
  goto <bb 477>; [0.00%]

  <bb 307> [0.00%]:
  InFileSize = -1;

  <bb 308> [0.00%]:
  # zeroByteFile_626 = PHI <zeroByteFile_624(305), zeroByteFile_623(307)>
  # hInfile_628 = PHI <_1547(305), 0(307)>
  OutputStdOut.577_423 = OutputStdOut;
  if (OutputStdOut.577_423 == 0)
    goto <bb 309>; [0.00%]
  else
    goto <bb 312>; [0.00%]

  <bb 309> [100.00%]:
  _1613 = outFilename._M_dataplus._M_p;
  _1203 = check_file_exists (_1613);

  <bb 310> [0.00%]:
  if (_1203 != 0)
    goto <bb 311>; [0.00%]
  else
    goto <bb 312>; [0.00%]

  <bb 311> [0.00%]:
  # iftmp.576_1438 = PHI <1(310)>
  if (force_693 != 1)
    goto <bb 314>; [0.00%]
  else
    goto <bb 317>; [0.00%]

  <bb 312> [0.00%]:

  <bb 313> [0.00%]:
  # iftmp.576_993 = PHI <0(312)>
  goto <bb 318>; [100.00%]

  <bb 314> [100.00%]:
  _1614 = outFilename._M_dataplus._M_p;
  stderr.578_427 = stderr;
  _1565 = __fprintf_chk (stderr.578_427, 1, "pbzip2: *ERROR: Output file [%s] already exists!  Use -f to overwrite...\n", _1614);

  <bb 315> [100.00%]:
  stderr.579_428 = stderr;
  _1566 = __fprintf_chk (stderr.579_428, 1, "-------------------------------------------\n");

  <bb 316> [100.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 477>; [0.00%]

  <bb 317> [100.00%]:
  _1615 = outFilename._M_dataplus._M_p;
  remove (_1615);

  <bb 318> [0.00%]:
  if (readEntireFile_618 == 1)
    goto <bb 319>; [0.00%]
  else
    goto <bb 323>; [0.00%]

  <bb 319> [0.00%]:
  if (hInfile_628 == 0)
    goto <bb 320>; [0.00%]
  else
    goto <bb 322>; [0.00%]

  <bb 320> [0.00%]:
  QuietMode.580_430 = QuietMode;
  if (QuietMode.580_430 != 1)
    goto <bb 321>; [0.00%]
  else
    goto <bb 323>; [0.00%]

  <bb 321> [100.00%]:
  stderr.581_431 = stderr;
  _1567 = __fprintf_chk (stderr.581_431, 1, " *Warning: Ignoring -r switch since input is stdin.\n");
  goto <bb 323>; [100.00%]

  <bb 322> [0.00%]:
  InFileSize.582_432 = InFileSize;
  numCPU.583_433 = numCPU;
  _434 = (long int) numCPU.583_433;
  _435 = InFileSize.582_432 / _434;
  blockSize_1213 = (int) _435;

  <bb 323> [0.00%]:
  # blockSize_637 = PHI <blockSize_636(318), blockSize_1213(322), blockSize_636(321), blockSize_636(320)>
  QuietMode.584_436 = QuietMode;
  if (QuietMode.584_436 != 1)
    goto <bb 324>; [0.00%]
  else
    goto <bb 335>; [0.00%]

  <bb 324> [100.00%]:
  FileListCount.585_437 = FileListCount;
  _438 = fileLoop_698 + 1;
  stderr.586_439 = stderr;
  _1568 = __fprintf_chk (stderr.586_439, 1, "         File #: %d of %d\n", _438, FileListCount.585_437);

  <bb 325> [100.00%]:
  if (hInfile_628 != 0)
    goto <bb 327>; [0.00%]
  else
    goto <bb 326>; [0.00%]

  <bb 326> [0.00%]:

  <bb 327> [100.00%]:
  # iftmp.587_722 = PHI <InFilename_1062(325), "<stdin>"(326)>
  stderr.588_440 = stderr;
  _1569 = __fprintf_chk (stderr.588_440, 1, "     Input Name: %s\n", iftmp.587_722);

  <bb 328> [100.00%]:
  OutputStdOut.589_441 = OutputStdOut;
  if (OutputStdOut.589_441 == 0)
    goto <bb 329>; [0.00%]
  else
    goto <bb 330>; [0.00%]

  <bb 329> [100.00%]:
  _1616 = outFilename._M_dataplus._M_p;
  stderr.590_443 = stderr;
  _1570 = __fprintf_chk (stderr.590_443, 1, "    Output Name: %s\n\n", _1616);
  goto <bb 331>; [100.00%]

  <bb 330> [100.00%]:
  stderr.591_444 = stderr;
  _1571 = __fprintf_chk (stderr.591_444, 1, "    Output Name: <stdout>\n\n");

  <bb 331> [0.00%]:
  if (decompress_649 == 1)
    goto <bb 332>; [0.00%]
  else
    goto <bb 333>; [0.00%]

  <bb 332> [100.00%]:
  BWTblockSizeChar.592_445 = BWTblockSizeChar;
  _446 = (int) BWTblockSizeChar.592_445;
  stderr.593_447 = stderr;
  _1572 = __fprintf_chk (stderr.593_447, 1, " BWT Block Size: %c00k\n", _446);

  <bb 333> [0.00%]:
  _448 = strcmp (InFilename_1062, "-");
  if (_448 != 0)
    goto <bb 334>; [0.00%]
  else
    goto <bb 335>; [0.00%]

  <bb 334> [100.00%]:
  InFileSize.594_449 = InFileSize;
  InFileSize.595_450 = (long unsigned int) InFileSize.594_449;
  stderr.596_451 = stderr;
  _1573 = __fprintf_chk (stderr.596_451, 1, "     Input Size: %lu bytes\n", InFileSize.595_450);

  <bb 335> [0.00%]:
  if (decompress_649 == 1)
    goto <bb 336>; [0.00%]
  else
    goto <bb 342>; [0.00%]

  <bb 336> [0.00%]:
  numCPU.597_452 = numCPU;
  if (numCPU.597_452 == 1)
    goto <bb 339>; [0.00%]
  else
    goto <bb 337>; [0.00%]

  <bb 337> [0.00%]:
  InFileSize.598_453 = InFileSize;
  if (InFileSize.598_453 <= 999999)
    goto <bb 339>; [0.00%]
  else
    goto <bb 338>; [0.00%]

  <bb 338> [0.00%]:

  <bb 339> [0.00%]:
  # noThreads_678 = PHI <1(337), 0(338), 1(336)>
  numCPU.599_454 = numCPU;
  if (numCPU.599_454 > 1)
    goto <bb 340>; [0.00%]
  else
    goto <bb 373>; [0.00%]

  <bb 340> [0.00%]:
  _455 = strcmp (InFilename_1062, "-");
  if (_455 == 0)
    goto <bb 341>; [0.00%]
  else
    goto <bb 373>; [0.00%]

  <bb 341> [0.00%]:
  goto <bb 373>; [0.00%]

  <bb 342> [0.00%]:
  InFileSize.600_456 = InFileSize;
  if (InFileSize.600_456 > 0)
    goto <bb 343>; [0.00%]
  else
    goto <bb 346>; [0.00%]

  <bb 343> [0.00%]:
  _457 = (long int) blockSize_637;
  InFileSize.601_458 = InFileSize;
  _459 = _457 + InFileSize.601_458;
  _460 = _459 + -1;
  _461 = (long int) blockSize_637;
  _462 = _460 / _461;
  numBlocks_1225 = (int) _462;
  if (numBlocks_1225 == 1)
    goto <bb 346>; [0.00%]
  else
    goto <bb 344>; [0.00%]

  <bb 344> [0.00%]:
  numCPU.602_463 = numCPU;
  if (numCPU.602_463 == 1)
    goto <bb 346>; [0.00%]
  else
    goto <bb 345>; [0.00%]

  <bb 345> [0.00%]:

  <bb 346> [0.00%]:
  # numBlocks_630 = PHI <numBlocks_1225(345), 10000(342), numBlocks_1225(344), numBlocks_1225(343)>
  # noThreads_679 = PHI <0(345), noThreads_677(342), 1(344), 1(343)>
  if (zeroByteFile_626 == 1)
    goto <bb 347>; [0.00%]
  else
    goto <bb 373>; [0.00%]

  <bb 347> [0.00%]:
  OutputStdOut.603_464 = OutputStdOut;
  if (OutputStdOut.603_464 == 0)
    goto <bb 348>; [0.00%]
  else
    goto <bb 351>; [0.00%]

  <bb 348> [100.00%]:
  _1617 = outFilename._M_dataplus._M_p;
  _1231 = safe_open_output (_1617);

  <bb 349> [0.00%]:
  if (_1231 == -1)
    goto <bb 350>; [0.00%]
  else
    goto <bb 351>; [0.00%]

  <bb 350> [100.00%]:
  _1618 = outFilename._M_dataplus._M_p;
  handle_error (1, 1, "pbzip2: *ERROR: Could not create output file [%s]!\n", _1618);
  goto <bb 478>; [0.00%]

  <bb 351> [0.00%]:
  # hOutfile_629 = PHI <1(347), _1231(349)>
  _1238 = do_write (hOutfile_629, &Bz2HeaderZero, 14);

  <bb 352> [0.00%]:
  ret_1239 = (int) _1238;
  OutputStdOut.604_468 = OutputStdOut;
  if (OutputStdOut.604_468 == 0)
    goto <bb 353>; [0.00%]
  else
    goto <bb 357>; [0.00%]

  <bb 353> [0.00%]:
  _1242 = do_close (hOutfile_629);

  <bb 354> [100.00%]:
  _1619 = outFilename._M_dataplus._M_p;
  _1246 = writeFileMetaData (_1619);

  <bb 355> [0.00%]:
  if (_1246 != 0)
    goto <bb 356>; [0.00%]
  else
    goto <bb 357>; [0.00%]

  <bb 356> [100.00%]:
  _1620 = outFilename._M_dataplus._M_p;
  handle_error (0, -1, "pbzip2: *ERROR: Could not write file meta data to [%s]!\n", _1620);

  <bb 357> [0.00%]:
  # close_ret_718 = PHI <0(352), _1242(356), _1242(355)>
  _472 = ret_1239 != 14;
  _473 = close_ret_718 == -1;
  _474 = _472 | _473;
  if (_474 != 0)
    goto <bb 358>; [0.00%]
  else
    goto <bb 360>; [0.00%]

  <bb 358> [100.00%]:
  _1621 = outFilename._M_dataplus._M_p;
  handle_error (1, 1, "pbzip2: *ERROR: Could not write to file [%s]! Aborting...\n", _1621);

  <bb 359> [100.00%]:
  stderr.606_476 = stderr;
  _1574 = __fprintf_chk (stderr.606_476, 1, "-------------------------------------------\n");
  goto <bb 478>; [100.00%]

  <bb 360> [0.00%]:
  QuietMode.607_477 = QuietMode;
  if (QuietMode.607_477 != 1)
    goto <bb 361>; [0.00%]
  else
    goto <bb 363>; [0.00%]

  <bb 361> [100.00%]:
  stderr.608_478 = stderr;
  _1575 = __fprintf_chk (stderr.608_478, 1, "    Output Size: %u bytes\n", 14);

  <bb 362> [100.00%]:
  stderr.609_479 = stderr;
  _1576 = __fprintf_chk (stderr.609_479, 1, "-------------------------------------------\n");

  <bb 363> [0.00%]:
  if (keep_692 != 1)
    goto <bb 364>; [0.00%]
  else
    goto <bb 372>; [0.00%]

  <bb 364> [0.00%]:
  OutputStdOut.611_483 = OutputStdOut;
  if (OutputStdOut.611_483 != 0)
    goto <bb 367>; [0.00%]
  else
    goto <bb 365>; [0.00%]

  <bb 365> [100.00%]:
  _1622 = outFilename._M_dataplus._M_p;
  _1577 = *__xstat64 (1, _1622, &statbuf);
  if (_1577 == 0)
    goto <bb 367>; [0.00%]
  else
    goto <bb 366>; [0.00%]

  <bb 366> [0.00%]:
  # iftmp.610_1083 = PHI <0(365)>
  goto <bb 371>; [100.00%]

  <bb 367> [0.00%]:

  <bb 368> [0.00%]:
  # iftmp.610_1011 = PHI <1(367)>
  _1258 = do_remove (InFilename_1062);

  <bb 369> [0.00%]:
  if (_1258 == -1)
    goto <bb 370>; [0.00%]
  else
    goto <bb 371>; [0.00%]

  <bb 370> [0.00%]:
  handle_error (0, 1, "Can\'t remove input file [%s]!", InFilename_1062);

  <bb 371> [0.00%]:
  statbuf ={v} {CLOBBER};

  <bb 372> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 477>; [0.00%]

  <bb 373> [0.00%]:
  # numBlocks_631 = PHI <0(340), numBlocks_630(346), 0(339), 0(341)>
  # noThreads_680 = PHI <noThreads_678(340), noThreads_679(346), noThreads_678(339), 0(341)>
  NumBlocksEstimated = numBlocks_631;
  _487 = maxMemory_639 / blockSize_637;
  _488 = (long unsigned int) _487;
  NumBufferedBlocksMax = _488;
  NumBufferedBlocksMax.613_489 = NumBufferedBlocksMax;
  _490 = (int) NumBufferedBlocksMax.613_489;
  numCPU.614_491 = numCPU;
  _492 = numCPU.614_491 * 2;
  _493 = _490 - _492;
  if (_493 <= 0)
    goto <bb 374>; [0.00%]
  else
    goto <bb 375>; [0.00%]

  <bb 374> [0.00%]:
  NumBufferedBlocksMax = 1;
  goto <bb 376>; [0.00%]

  <bb 375> [0.00%]:
  NumBufferedBlocksMax.615_494 = NumBufferedBlocksMax;
  numCPU.616_495 = numCPU;
  _496 = numCPU.616_495 * 2;
  _497 = (long unsigned int) _496;
  _498 = NumBufferedBlocksMax.615_494 - _497;
  NumBufferedBlocksMax = _498;

  <bb 376> [0.00%]:
  numCPU.617_499 = numCPU;
  _500 = (long unsigned int) numCPU.617_499;
  NumBufferedBlocksMax.618_501 = NumBufferedBlocksMax;
  if (_500 > NumBufferedBlocksMax.618_501)
    goto <bb 377>; [0.00%]
  else
    goto <bb 382>; [0.00%]

  <bb 377> [0.00%]:
  if (maxMemorySwitch_643 == 0)
    goto <bb 378>; [0.00%]
  else
    goto <bb 380>; [0.00%]

  <bb 378> [0.00%]:
  numCPU.619_502 = numCPU;
  _503 = (long unsigned int) numCPU.619_502;
  NumBufferedBlocksMax = _503;
  QuietMode.620_504 = QuietMode;
  if (QuietMode.620_504 != 1)
    goto <bb 379>; [0.00%]
  else
    goto <bb 382>; [0.00%]

  <bb 379> [100.00%]:
  numCPU.621_505 = numCPU;
  numCPU.622_506 = numCPU;
  _507 = numCPU.622_506 * 2;
  _508 = (long unsigned int) _507;
  NumBufferedBlocksMax.623_509 = NumBufferedBlocksMax;
  _510 = _508 + NumBufferedBlocksMax.623_509;
  _511 = (long unsigned int) blockSize_637;
  _512 = _510 * _511;
  _513 = _512 / 1000000;
  stderr.624_514 = stderr;
  _1578 = __fprintf_chk (stderr.624_514, 1, "*Warning* Max memory limit increased to %lu MB to support %d CPUs\n", _513, numCPU.621_505);
  goto <bb 382>; [100.00%]

  <bb 380> [0.00%]:
  QuietMode.625_515 = QuietMode;
  if (QuietMode.625_515 != 1)
    goto <bb 381>; [0.00%]
  else
    goto <bb 382>; [0.00%]

  <bb 381> [100.00%]:
  stderr.626_516 = stderr;
  _1579 = __fprintf_chk (stderr.626_516, 1, "*Warning* CPU usage and performance may be suboptimal due to max memory limit.\n");

  <bb 382> [0.00%]:
  LastGoodBlock = -1;
  MinErrorBlock = -1;
  NumBufferedBlocksMax.627_517 = NumBufferedBlocksMax;
  outputBufferInit (NumBufferedBlocksMax.627_517);

  <bb 383> [0.00%]:
  if (decompress_649 == 1)
    goto <bb 384>; [0.00%]
  else
    goto <bb 416>; [0.00%]

  <bb 384> [0.00%]:
  if (noThreads_680 == 0)
    goto <bb 385>; [0.00%]
  else
    goto <bb 408>; [0.00%]

  <bb 385> [0.00%]:
  QuietMode.628_518 = QuietMode;
  if (QuietMode.628_518 != 1)
    goto <bb 386>; [0.00%]
  else
    goto <bb 387>; [0.00%]

  <bb 386> [100.00%]:
  stderr.629_519 = stderr;
  _1580 = __fprintf_chk (stderr.629_519, 1, "Decompressing data...\n");

  <bb 387> [0.00%]:

  <bb 388> [0.00%]:
  # i_700 = PHI <0(387), i_1315(394)>
  _520 = (int) i_700;
  numCPU.630_521 = numCPU;
  if (_520 >= numCPU.630_521)
    goto <bb 395>; [0.00%]
  else
    goto <bb 389>; [0.00%]

  <bb 389> [0.00%]:
  _522 = fifo_1052->consumers;
  _523 = i_700 * 8;
  _524 = _522 + _523;
  ret_1314 = pthread_create (_524, &ChildThreadAttributes, consumer_decompress, fifo_1052);
  if (ret_1314 != 0)
    goto <bb 390>; [0.00%]
  else
    goto <bb 394>; [0.00%]

  <bb 390> [0.00%]:
  _1317 = pbzip2::ErrorContext::getInstance ();

  <bb 391> [0.00%]:
  pbzip2::ErrorContext::saveError (_1317);

  <bb 392> [0.00%]:
  handle_error (1, 1, "pbzip2: *ERROR: Not enough resources to create consumer thread #%u (code = %d)  Aborting...\n", i_700, ret_1314);

  <bb 393> [0.00%]:
  TerminatorThread.631_526 = TerminatorThread;
  _1321 = pthread_join (TerminatorThread.631_526, 0B);
  goto <bb 503>; [0.00%]

  <bb 394> [0.00%]:
  i_1315 = i_700 + 1;
  goto <bb 388>; [0.00%]

  <bb 395> [100.00%]:
  _1623 = outFilename._M_dataplus._M_p;
  ret_1326 = pthread_create (&output, &ChildThreadAttributes, fileWriter, _1623);
  if (ret_1326 != 0)
    goto <bb 396>; [0.00%]
  else
    goto <bb 398>; [0.00%]

  <bb 396> [0.00%]:
  handle_error (1, 1, "pbzip2: *ERROR: Not enough resources to create fileWriter thread (code = %d)  Aborting...\n", ret_1326);

  <bb 397> [0.00%]:
  TerminatorThread.632_528 = TerminatorThread;
  _1349 = pthread_join (TerminatorThread.632_528, 0B);
  goto <bb 503>; [0.00%]

  <bb 398> [0.00%]:
  InFileSize.633_529 = InFileSize;
  _1328 = producer_decompress (hInfile_628, InFileSize.633_529, fifo_1052);

  <bb 399> [0.00%]:
  if (_1328 == -99)
    goto <bb 400>; [0.00%]
  else
    goto <bb 406>; [0.00%]

  <bb 400> [0.00%]:
  output.635_530 = output;
  _1335 = pthread_join (output.635_530, 0B);

  <bb 401> [0.00%]:
  if (_1335 != 0)
    goto <bb 402>; [0.00%]
  else
    goto <bb 408>; [0.00%]

  <bb 402> [0.00%]:
  _1338 = pbzip2::ErrorContext::getInstance ();

  <bb 403> [0.00%]:
  pbzip2::ErrorContext::saveError (_1338);

  <bb 404> [0.00%]:
  handle_error (1, 1, "pbzip2: *ERROR: Error joining fileWriter thread (code = %d)  Aborting...\n", _1328);

  <bb 405> [0.00%]:
  TerminatorThread.636_533 = TerminatorThread;
  _1344 = pthread_join (TerminatorThread.636_533, 0B);
  goto <bb 503>; [0.00%]

  <bb 406> [0.00%]:
  if (_1328 != 0)
    goto <bb 407>; [0.00%]
  else
    goto <bb 408>; [0.00%]

  <bb 407> [0.00%]:

  <bb 408> [0.00%]:
  # errLevel_668 = PHI <errLevel_664(384), errLevel_664(406), errLevel_664(401), 1(407)>
  # noThreads_681 = PHI <noThreads_680(384), noThreads_680(406), 1(401), noThreads_680(407)>
  # switchedMtToSt_709 = PHI <0(384), 0(406), 1(401), 0(407)>
  # errLevelCurrentFile_711 = PHI <0(384), 0(406), 0(401), 1(407)>
  _534 = noThreads_681 == 1;
  _535 = errLevelCurrentFile_711 == 0;
  _536 = _534 & _535;
  if (_536 != 0)
    goto <bb 409>; [0.00%]
  else
    goto <bb 438>; [0.00%]

  <bb 409> [0.00%]:
  QuietMode.637_537 = QuietMode;
  if (QuietMode.637_537 != 1)
    goto <bb 410>; [0.00%]
  else
    goto <bb 411>; [0.00%]

  <bb 410> [100.00%]:
  stderr.638_538 = stderr;
  _1581 = __fprintf_chk (stderr.638_538, 1, "Decompressing data (no threads)...\n");

  <bb 411> [0.00%]:
  if (hInfile_628 > 0)
    goto <bb 412>; [0.00%]
  else
    goto <bb 413>; [0.00%]

  <bb 412> [0.00%]:
  close (hInfile_628);

  <bb 413> [100.00%]:
  _1624 = outFilename._M_dataplus._M_p;
  _1356 = directdecompress (InFilename_1062, _1624);

  <bb 414> [0.00%]:
  if (_1356 != 0)
    goto <bb 415>; [0.00%]
  else
    goto <bb 438>; [0.00%]

  <bb 415> [0.00%]:
  goto <bb 438>; [0.00%]

  <bb 416> [0.00%]:
  if (noThreads_680 == 0)
    goto <bb 417>; [0.00%]
  else
    goto <bb 433>; [0.00%]

  <bb 417> [0.00%]:
  QuietMode.639_540 = QuietMode;
  if (QuietMode.639_540 != 1)
    goto <bb 418>; [0.00%]
  else
    goto <bb 419>; [0.00%]

  <bb 418> [100.00%]:
  stderr.640_541 = stderr;
  _1582 = __fprintf_chk (stderr.640_541, 1, "Compressing data...\n");

  <bb 419> [0.00%]:

  <bb 420> [0.00%]:
  # i_701 = PHI <0(419), i_1293(426)>
  _542 = (int) i_701;
  numCPU.641_543 = numCPU;
  if (_542 >= numCPU.641_543)
    goto <bb 427>; [0.00%]
  else
    goto <bb 421>; [0.00%]

  <bb 421> [0.00%]:
  _544 = fifo_1052->consumers;
  _545 = i_701 * 8;
  _546 = _544 + _545;
  ret_1292 = pthread_create (_546, &ChildThreadAttributes, consumer, fifo_1052);
  if (ret_1292 != 0)
    goto <bb 422>; [0.00%]
  else
    goto <bb 426>; [0.00%]

  <bb 422> [0.00%]:
  _1295 = pbzip2::ErrorContext::getInstance ();

  <bb 423> [0.00%]:
  pbzip2::ErrorContext::saveError (_1295);

  <bb 424> [0.00%]:
  handle_error (1, 1, "pbzip2: *ERROR: Not enough resources to create consumer thread #%u (code = %d)  Aborting...\n", i_701, ret_1292);

  <bb 425> [0.00%]:
  TerminatorThread.642_548 = TerminatorThread;
  pthread_join (TerminatorThread.642_548, 0B);
  goto <bb 503>; [0.00%]

  <bb 426> [0.00%]:
  i_1293 = i_701 + 1;
  goto <bb 420>; [0.00%]

  <bb 427> [100.00%]:
  _1625 = outFilename._M_dataplus._M_p;
  ret_1302 = pthread_create (&output, &ChildThreadAttributes, fileWriter, _1625);
  if (ret_1302 != 0)
    goto <bb 428>; [0.00%]
  else
    goto <bb 430>; [0.00%]

  <bb 428> [0.00%]:
  handle_error (1, 1, "pbzip2: *ERROR: Not enough resources to create fileWriter thread (code = %d)  Aborting...\n", ret_1302);

  <bb 429> [0.00%]:
  TerminatorThread.643_550 = TerminatorThread;
  pthread_join (TerminatorThread.643_550, 0B);
  goto <bb 503>; [0.00%]

  <bb 430> [0.00%]:
  _1304 = producer (hInfile_628, blockSize_637, fifo_1052);

  <bb 431> [0.00%]:
  if (_1304 != 0)
    goto <bb 432>; [0.00%]
  else
    goto <bb 438>; [0.00%]

  <bb 432> [0.00%]:
  goto <bb 438>; [0.00%]

  <bb 433> [0.00%]:
  QuietMode.644_551 = QuietMode;
  if (QuietMode.644_551 != 1)
    goto <bb 434>; [0.00%]
  else
    goto <bb 435>; [0.00%]

  <bb 434> [100.00%]:
  stderr.645_552 = stderr;
  _1583 = __fprintf_chk (stderr.645_552, 1, "Compressing data (no threads)...\n");

  <bb 435> [100.00%]:
  _1626 = outFilename._M_dataplus._M_p;
  InFileSize.646_554 = InFileSize;
  _1285 = directcompress (hInfile_628, InFileSize.646_554, blockSize_637, _1626);

  <bb 436> [0.00%]:
  if (_1285 != 0)
    goto <bb 437>; [0.00%]
  else
    goto <bb 438>; [0.00%]

  <bb 437> [0.00%]:

  <bb 438> [0.00%]:
  # errLevel_669 = PHI <1(415), 1(432), errLevel_664(436), 1(437), errLevel_668(408), errLevel_668(414), errLevel_664(431)>
  # noThreads_682 = PHI <noThreads_681(415), noThreads_680(432), noThreads_680(436), noThreads_680(437), noThreads_681(408), noThreads_681(414), noThreads_680(431)>
  # switchedMtToSt_710 = PHI <switchedMtToSt_709(415), 0(432), 0(436), 0(437), switchedMtToSt_709(408), switchedMtToSt_709(414), 0(431)>
  # errLevelCurrentFile_712 = PHI <1(415), 1(432), 0(436), 1(437), errLevelCurrentFile_711(408), errLevelCurrentFile_711(414), 0(431)>
  if (noThreads_682 == 0)
    goto <bb 439>; [0.00%]
  else
    goto <bb 442>; [0.00%]

  <bb 439> [0.00%]:
  output.647_555 = output;
  _1361 = pthread_join (output.647_555, 0B);

  <bb 440> [0.00%]:
  if (_1361 != 0)
    goto <bb 441>; [0.00%]
  else
    goto <bb 442>; [0.00%]

  <bb 441> [0.00%]:
  _556 = __errno_location ();
  _557 = *_556;
  stderr.648_558 = stderr;
  pbzip2::ErrorContext::printErrnoMsg (stderr.648_558, _557);

  <bb 442> [0.00%]:
  # errLevel_670 = PHI <errLevel_669(438), 1(441), errLevel_669(440)>
  # errLevelCurrentFile_713 = PHI <errLevelCurrentFile_712(438), 1(441), errLevelCurrentFile_712(440)>
  _559 = noThreads_682 == 0;
  _560 = _559 | switchedMtToSt_710;
  if (_560 != 0)
    goto <bb 443>; [0.00%]
  else
    goto <bb 448>; [0.00%]

  <bb 443> [0.00%]:
  # errLevel_671 = PHI <errLevel_670(442), errLevel_672(447)>
  # i_702 = PHI <0(442), i_1373(447)>
  # errLevelCurrentFile_714 = PHI <errLevelCurrentFile_713(442), errLevelCurrentFile_715(447)>
  _561 = (int) i_702;
  numCPU.649_562 = numCPU;
  if (_561 >= numCPU.649_562)
    goto <bb 448>; [0.00%]
  else
    goto <bb 444>; [0.00%]

  <bb 444> [0.00%]:
  _563 = fifo_1052->consumers;
  _564 = i_702 * 8;
  _565 = _563 + _564;
  _566 = *_565;
  _1368 = pthread_join (_566, 0B);

  <bb 445> [0.00%]:
  if (_1368 != 0)
    goto <bb 446>; [0.00%]
  else
    goto <bb 447>; [0.00%]

  <bb 446> [0.00%]:
  _567 = __errno_location ();
  _568 = *_567;
  stderr.650_569 = stderr;
  pbzip2::ErrorContext::printErrnoMsg (stderr.650_569, _568);

  <bb 447> [0.00%]:
  # errLevel_672 = PHI <errLevel_671(445), 1(446)>
  # errLevelCurrentFile_715 = PHI <errLevelCurrentFile_714(445), 1(446)>
  i_1373 = i_702 + 1;
  goto <bb 443>; [0.00%]

  <bb 448> [100.00%]:
  # errLevel_673 = PHI <errLevel_670(442), errLevel_671(443)>
  # errLevelCurrentFile_716 = PHI <errLevelCurrentFile_713(442), errLevelCurrentFile_714(443)>
  safe_mutex_lock (&TerminateFlagMutex);

  <bb 449> [100.00%]:
  ret_1627 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 450> [100.00%]:
  if (ret_1627 != 0)
    goto <bb 451>; [0.00%]
  else
    goto <bb 452>; [0.00%]

  <bb 451> [0.00%]:

  <bb 452> [0.00%]:
  # errLevel_674 = PHI <errLevel_673(450), 1(451)>
  # errLevelCurrentFile_717 = PHI <errLevelCurrentFile_716(450), 1(451)>
  OutputStdOut.652_571 = OutputStdOut;
  if (OutputStdOut.652_571 == 0)
    goto <bb 453>; [0.00%]
  else
    goto <bb 456>; [0.00%]

  <bb 453> [100.00%]:
  _1628 = outFilename._M_dataplus._M_p;
  _1381 = writeFileMetaData (_1628);

  <bb 454> [0.00%]:
  if (_1381 != 0)
    goto <bb 455>; [0.00%]
  else
    goto <bb 456>; [0.00%]

  <bb 455> [100.00%]:
  _1629 = outFilename._M_dataplus._M_p;
  handle_error (0, -1, "pbzip2: *ERROR: Could not write file meta data to [%s]!\n", _1629);

  <bb 456> [0.00%]:
  _575 = keep_692 != 1;
  _576 = errLevelCurrentFile_717 == 0;
  _577 = _575 & _576;
  if (_577 != 0)
    goto <bb 457>; [0.00%]
  else
    goto <bb 465>; [0.00%]

  <bb 457> [0.00%]:
  OutputStdOut.655_578 = OutputStdOut;
  if (OutputStdOut.655_578 != 0)
    goto <bb 460>; [0.00%]
  else
    goto <bb 458>; [0.00%]

  <bb 458> [100.00%]:
  _1630 = outFilename._M_dataplus._M_p;
  _1584 = *__xstat64 (1, _1630, &statbuf);
  if (_1584 == 0)
    goto <bb 460>; [0.00%]
  else
    goto <bb 459>; [0.00%]

  <bb 459> [0.00%]:
  # iftmp.654_480 = PHI <0(458)>
  goto <bb 464>; [100.00%]

  <bb 460> [0.00%]:

  <bb 461> [0.00%]:
  # iftmp.654_1185 = PHI <1(460)>
  _1391 = do_remove (InFilename_1062);

  <bb 462> [0.00%]:
  if (_1391 == -1)
    goto <bb 463>; [0.00%]
  else
    goto <bb 464>; [0.00%]

  <bb 463> [0.00%]:
  handle_error (0, 1, "Can\'t remove input file [%s]!", InFilename_1062);

  <bb 464> [0.00%]:
  statbuf ={v} {CLOBBER};

  <bb 465> [100.00%]:
  _1631 = OutputBuffer.D.38528._M_impl._M_start;
  OutputBuffer.D.38528._M_impl._M_finish = _1631;
  MEM[(struct queue *)fifo_1052].empty = 1;
  MEM[(struct queue *)fifo_1052].full = 0;
  MEM[(struct queue *)fifo_1052].head = 0;
  MEM[(struct queue *)fifo_1052].tail = 0;
  MEM[(struct queue *)fifo_1052].count = 0;
  MEM[(struct queue *)fifo_1052].lastElement = 0B;
  MEM[(struct queue *)fifo_1052].topLevelFull = 0;
  MEM[(struct queue *)fifo_1052].topLevelEmpty = 1;
  if (errLevelCurrentFile_717 == 0)
    goto <bb 466>; [0.00%]
  else
    goto <bb 469>; [0.00%]

  <bb 466> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);

  <bb 467> [100.00%]:
  ret_1632 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 468> [100.00%]:
  if (ret_1632 == 0)
    goto <bb 471>; [0.00%]
  else
    goto <bb 469>; [0.00%]

  <bb 469> [0.00%]:

  <bb 470> [0.00%]:
  # iftmp.658_1382 = PHI <0(469)>
  goto <bb 473>; [100.00%]

  <bb 471> [0.00%]:
  # iftmp.658_1336 = PHI <1(468)>
  safe_mutex_lock (&ErrorHandlerMutex);

  <bb 472> [0.00%]:
  sigInFilename = 0B;
  sigOutFilename = 0B;
  safe_mutex_unlock (&ErrorHandlerMutex);

  <bb 473> [0.00%]:
  if (errLevelCurrentFile_717 == 1)
    goto <bb 474>; [0.00%]
  else
    goto <bb 475>; [0.00%]

  <bb 474> [0.00%]:
  syncSetTerminateFlag (1);
  goto <bb 478>; [0.00%]

  <bb 475> [0.00%]:
  QuietMode.659_583 = QuietMode;
  if (QuietMode.659_583 != 1)
    goto <bb 476>; [0.00%]
  else
    goto <bb 477>; [0.00%]

  <bb 476> [100.00%]:
  stderr.660_584 = stderr;
  _1585 = __fprintf_chk (stderr.660_584, 1, "-------------------------------------------\n");

  <bb 477> [0.00%]:
  # zeroByteFile_627 = PHI <zeroByteFile_623(218), zeroByteFile_623(265), zeroByteFile_623(275), zeroByteFile_625(306), zeroByteFile_626(316), zeroByteFile_626(372), zeroByteFile_626(475), zeroByteFile_626(476)>
  # blockSize_638 = PHI <blockSize_636(218), blockSize_636(265), blockSize_636(275), blockSize_636(306), blockSize_636(316), blockSize_637(372), blockSize_637(475), blockSize_637(476)>
  # errLevel_675 = PHI <errLevel_665(218), 1(265), 1(275), 1(306), 1(316), errLevel_664(372), errLevel_674(475), errLevel_674(476)>
  # noThreads_683 = PHI <noThreads_677(218), noThreads_677(265), noThreads_677(275), noThreads_677(306), noThreads_677(316), noThreads_679(372), noThreads_682(475), noThreads_682(476)>
  fileLoop_1421 = fileLoop_698 + 1;
  goto <bb 202>; [0.00%]

  <bb 478> [0.00%]:
  # errLevel_676 = PHI <errLevel_664(202), 1(350), 1(359), errLevel_674(474)>
  OutputStdOut.661_585 = OutputStdOut;
  if (OutputStdOut.661_585 == 1)
    goto <bb 479>; [0.00%]
  else
    goto <bb 485>; [0.00%]

  <bb 479> [0.00%]:
  _1423 = close (1);

  <bb 480> [0.00%]:
  if (_1423 == -1)
    goto <bb 481>; [0.00%]
  else
    goto <bb 485>; [0.00%]

  <bb 481> [0.00%]:
  _1426 = pbzip2::ErrorContext::getInstance ();

  <bb 482> [0.00%]:
  pbzip2::ErrorContext::saveError (_1426);

  <bb 483> [0.00%]:
  handle_error (1, 1, "pbzip2: *ERROR: Failed to close STDOUT! Aborting...\n");

  <bb 484> [0.00%]:
  exit (1);

  <bb 485> [0.00%]:
  SIG_HANDLER_QUIT_SIGNAL.662_587 = SIG_HANDLER_QUIT_SIGNAL;
  SignalHandlerThread.663_588 = SignalHandlerThread;
  ret_1431 = pthread_kill (SignalHandlerThread.663_588, SIG_HANDLER_QUIT_SIGNAL.662_587);
  if (ret_1431 != 0)
    goto <bb 486>; [0.00%]
  else
    goto <bb 488>; [0.00%]

  <bb 486> [100.00%]:
  stderr.664_589 = stderr;
  _1586 = __fprintf_chk (stderr.664_589, 1, "Couldn\'t signal signal QUIT to SignalHandlerThread [%d]. Quitting prematurely!\n", ret_1431);

  <bb 487> [100.00%]:
  exit (errLevel_676);

  <bb 488> [0.00%]:
  SignalHandlerThread.665_590 = SignalHandlerThread;
  _1433 = pthread_join (SignalHandlerThread.665_590, 0B);

  <bb 489> [0.00%]:
  if (_1433 != 0)
    goto <bb 490>; [0.00%]
  else
    goto <bb 491>; [0.00%]

  <bb 490> [100.00%]:
  stderr.666_591 = stderr;
  _1587 = __fprintf_chk (stderr.666_591, 1, "Error on join of SignalHandlerThread [%d]\n", _1433);

  <bb 491> [100.00%]:
  safe_mutex_lock (&TerminateFlagMutex);

  <bb 492> [100.00%]:
  ret_1633 = terminateFlag;
  safe_mutex_unlock (&TerminateFlagMutex);

  <bb 493> [100.00%]:
  if (ret_1633 == 0)
    goto <bb 494>; [0.00%]
  else
    goto <bb 495>; [0.00%]

  <bb 494> [0.00%]:
  syncSetFinishedFlag (1);

  <bb 495> [0.00%]:
  TerminatorThread.668_593 = TerminatorThread;
  _1441 = pthread_join (TerminatorThread.668_593, 0B);

  <bb 496> [0.00%]:
  if (_1441 != 0)
    goto <bb 497>; [0.00%]
  else
    goto <bb 498>; [0.00%]

  <bb 497> [100.00%]:
  stderr.669_594 = stderr;
  _1588 = __fprintf_chk (stderr.669_594, 1, "Error on join of TerminatorThread [%d]\n", _1441);

  <bb 498> [100.00%]:
  queueDelete (fifo_1052);
  mutexesDelete ();
  if (_14 != 0B)
    goto <bb 499>; [57.44%]
  else
    goto <bb 500>; [42.56%]

  <bb 499> [57.44%]:
  operator delete[] (_14);

  <bb 500> [0.00%]:
  gettimeofday (&tvStopTime, &tz);
  _595 = tvStartTime.tv_sec;
  _596 = (double) _595;
  _597 = tvStartTime.tv_usec;
  _598 = (double) _597;
  _599 = _598 / 1.0e+6;
  timeStart_1448 = _596 + _599;
  _600 = tvStopTime.tv_sec;
  _601 = (double) _600;
  _602 = tvStopTime.tv_usec;
  _603 = (double) _602;
  _604 = _603 / 1.0e+6;
  timeStop_1449 = _601 + _604;
  timeCalc_1450 = timeStop_1449 - timeStart_1448;
  QuietMode.670_605 = QuietMode;
  if (QuietMode.670_605 != 1)
    goto <bb 501>; [0.00%]
  else
    goto <bb 502>; [0.00%]

  <bb 501> [100.00%]:
  stderr.671_606 = stderr;
  _1589 = __fprintf_chk (stderr.671_606, 1, "\n     Wall Clock: %f seconds\n", timeCalc_1450);

  <bb 502> [0.00%]:
  exit (errLevel_676);

  <bb 503> [100.00%]:
  # _719 = PHI <1(3), 1(27), 1(76), 1(78), 1(88), 1(98), 1(142), 1(147), 1(152), 1(160), 1(174), 1(176), _1047(198), 1(201), _1415(212), 1(393), 1(397), 1(405), 1(425), 1(429)>
  _1635 = outFilename._M_dataplus._M_p;
  if (&outFilename.D.18739._M_local_buf != _1635)
    goto <bb 504>; [57.44%]
  else
    goto <bb 505>; [42.56%]

  <bb 504> [57.44%]:
  operator delete (_1635);

  <bb 505> [100.00%]:
  MEM[(struct  &)&outFilename] ={v} {CLOBBER};
  output ={v} {CLOBBER};
  bz2Header ={v} {CLOBBER};
  outFilename ={v} {CLOBBER};
  cmdLineTemp ={v} {CLOBBER};
  tmpBuff ={v} {CLOBBER};
  stdinFile ={v} {CLOBBER};
  tvStartTime ={v} {CLOBBER};
  tvStopTime ={v} {CLOBBER};
  tz ={v} {CLOBBER};
  loadAvgArray ={v} {CLOBBER};
  return _719;

<L554> [100.00%]:
  resx 4

<L555> [0.00%]:
  D.39832 ={v} {CLOBBER};
  resx 3

<L556> [100.00%]:
  resx 11

<L557> [0.00%]:
  D.39850 ={v} {CLOBBER};
  resx 10

<L558> [100.00%]:
  resx 17

<L559> [0.00%]:
  D.39853 ={v} {CLOBBER};
  resx 16

<L560> [100.00%]:
  _1637 = tbz2Tail._M_dataplus._M_p;
  if (&tbz2Tail.D.18739._M_local_buf != _1637)
    goto <bb 513>; [57.44%]
  else
    goto <bb 514>; [42.56%]

  <bb 513> [57.44%]:
  operator delete (_1637);

  <bb 514> [100.00%]:
  MEM[(struct  &)&tbz2Tail] ={v} {CLOBBER};
  resx 21

<L561> [100.00%]:
  _1639 = bz2Tail._M_dataplus._M_p;
  if (&bz2Tail.D.18739._M_local_buf != _1639)
    goto <bb 516>; [57.44%]
  else
    goto <bb 517>; [42.56%]

  <bb 516> [57.44%]:
  operator delete (_1639);

  <bb 517> [100.00%]:
  MEM[(struct  &)&bz2Tail] ={v} {CLOBBER};
  resx 15

<L562> [0.00%]:
  bz2Tail ={v} {CLOBBER};
  tbz2Tail ={v} {CLOBBER};
  resx 9

<L563> [100.00%]:
  resx 27

<L564> [0.00%]:
  D.39859 ={v} {CLOBBER};
  resx 26

<L565> [100.00%]:
  resx 33

<L566> [0.00%]:
  D.39861 ={v} {CLOBBER};
  resx 32

<L567> [100.00%]:
  _1641 = bz2Tail._M_dataplus._M_p;
  if (&bz2Tail.D.18739._M_local_buf != _1641)
    goto <bb 524>; [57.44%]
  else
    goto <bb 525>; [42.56%]

  <bb 524> [57.44%]:
  operator delete (_1641);

  <bb 525> [100.00%]:
  MEM[(struct  &)&bz2Tail] ={v} {CLOBBER};
  resx 31

<L568> [0.00%]:
  bz2Tail ={v} {CLOBBER};
  resx 25

<L569> [0.00%]:
  statbuf ={v} {CLOBBER};
  resx 40

<L570> [0.00%]:
  statbuf ={v} {CLOBBER};
  resx 42

<L571> [0.00%]:
  statbuf ={v} {CLOBBER};
  resx 44

<L572> [100.00%]:
  _1643 = outFilename._M_dataplus._M_p;
  if (&outFilename.D.18739._M_local_buf != _1643)
    goto <bb 531>; [57.44%]
  else
    goto <bb 532>; [42.56%]

  <bb 531> [57.44%]:
  operator delete (_1643);

  <bb 532> [100.00%]:
  MEM[(struct  &)&outFilename] ={v} {CLOBBER};
  resx 2

<L573> [0.00%]:
  output ={v} {CLOBBER};
  bz2Header ={v} {CLOBBER};
  outFilename ={v} {CLOBBER};
  cmdLineTemp ={v} {CLOBBER};
  tmpBuff ={v} {CLOBBER};
  stdinFile ={v} {CLOBBER};
  tvStartTime ={v} {CLOBBER};
  tvStopTime ={v} {CLOBBER};
  tz ={v} {CLOBBER};
  loadAvgArray ={v} {CLOBBER};
  resx 1

}


