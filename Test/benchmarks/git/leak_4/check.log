../Compiler/newplugin.so 11.2.0 
In file included from ./benchmarks/git/leak_4/git_leak_4.c:10:
./benchmarks/git/leak_4/../git.h: In function ‘copy_array’:
./benchmarks/git/leak_4/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/leak_4/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/leak_4/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/leak_4/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/leak_4/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/leak_4/../git.h: In function ‘move_array’:
./benchmarks/git/leak_4/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/leak_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/leak_4/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/leak_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/leak_4/git_leak_4.c:9:
./benchmarks/git/leak_4/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/leak_4/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/leak_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/leak_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/leak_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/leak_4/git_leak_4.c:10:
./benchmarks/git/leak_4/../git.h: At top level:
./benchmarks/git/leak_4/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/leak_4/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/leak_4/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/leak_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/leak_4/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/leak_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/leak_4/git_leak_4.c: In function ‘remove_redundant’:
./benchmarks/git/leak_4/git_leak_4.c:39:17: warning: implicit declaration of function ‘parse_commit’ [-Wimplicit-function-declaration]
   39 |                 parse_commit(array[i]);
      |                 ^~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:51:26: warning: implicit declaration of function ‘paint_down_to_common’ [-Wimplicit-function-declaration]
   51 |                 common = paint_down_to_common(array[i], filled, work);
      |                          ^~~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:51:24: warning: assignment to ‘struct commit_list *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
   51 |                 common = paint_down_to_common(array[i], filled, work);
      |                        ^
./benchmarks/git/leak_4/git_leak_4.c:57:17: warning: implicit declaration of function ‘clear_commit_marks’ [-Wimplicit-function-declaration]
   57 |                 clear_commit_marks(array[i], all_flags);
      |                 ^~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:60:17: warning: implicit declaration of function ‘free_commit_list’ [-Wimplicit-function-declaration]
   60 |                 free_commit_list(common);
      |                 ^~~~~~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c: In function ‘find_merge_parents’:
./benchmarks/git/leak_4/git_leak_4.c:121:33: warning: implicit declaration of function ‘strchr’ [-Wimplicit-function-declaration]
  121 |                 char *newline = strchr(p, '\n');
      |                                 ^~~~~~
./benchmarks/git/leak_4/git_leak_4.c:11:1: note: include ‘<string.h>’ or provide a declaration of ‘strchr’
   10 | #include "../git.h"
  +++ |+#include <string.h>
   11 | 
./benchmarks/git/leak_4/git_leak_4.c:121:33: warning: incompatible implicit declaration of built-in function ‘strchr’ [-Wbuiltin-declaration-mismatch]
  121 |                 char *newline = strchr(p, '\n');
      |                                 ^~~~~~
./benchmarks/git/leak_4/git_leak_4.c:121:33: note: include ‘<string.h>’ or provide a declaration of ‘strchr’
./benchmarks/git/leak_4/git_leak_4.c:126:47: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
  126 |                 len = newline ? newline - p : strlen(p);
      |                                               ^~~~~~
./benchmarks/git/leak_4/git_leak_4.c:126:47: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/leak_4/git_leak_4.c:126:47: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/leak_4/git_leak_4.c:126:47: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/leak_4/git_leak_4.c:130:21: warning: implicit declaration of function ‘get_oid_hex’ [-Wimplicit-function-declaration]
  130 |                     get_oid_hex(p, &oid) ||
      |                     ^~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:139:23: warning: implicit declaration of function ‘parse_object’ [-Wimplicit-function-declaration]
  139 |                 obj = parse_object(&oid);
      |                       ^~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:139:21: warning: assignment to ‘struct object *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  139 |                 obj = parse_object(&oid);
      |                     ^
./benchmarks/git/leak_4/git_leak_4.c:140:43: warning: implicit declaration of function ‘peel_to_type’ [-Wimplicit-function-declaration]
  140 |                 parent = (struct commit *)peel_to_type(NULL, 0, obj, OBJ_COMMIT);
      |                                           ^~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:140:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
  140 |                 parent = (struct commit *)peel_to_type(NULL, 0, obj, OBJ_COMMIT);
      |                          ^
./benchmarks/git/leak_4/git_leak_4.c:144:17: warning: implicit declaration of function ‘add_merge_parent’; did you mean ‘find_merge_parents’? [-Wimplicit-function-declaration]
  144 |                 add_merge_parent(result, &obj->oid, &parent->object.oid);
      |                 ^~~~~~~~~~~~~~~~
      |                 find_merge_parents
./benchmarks/git/leak_4/git_leak_4.c:146:23: warning: implicit declaration of function ‘lookup_commit’ [-Wimplicit-function-declaration]
  146 |         head_commit = lookup_commit(head);
      |                       ^~~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:146:21: warning: assignment to ‘struct commit *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  146 |         head_commit = lookup_commit(head);
      |                     ^
./benchmarks/git/leak_4/git_leak_4.c:152:39: warning: implicit declaration of function ‘pop_commit’ [-Wimplicit-function-declaration]
  152 |                 struct commit *cmit = pop_commit(&parents);
      |                                       ^~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:152:39: warning: initialization of ‘struct commit *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
./benchmarks/git/leak_4/git_leak_4.c:154:30: warning: implicit declaration of function ‘oidcmp’ [-Wimplicit-function-declaration]
  154 |                         if (!oidcmp(&result->item[i].commit, &cmit->object.oid))
      |                              ^~~~~~
./benchmarks/git/leak_4/git_leak_4.c: In function ‘mark_redundant_parents’:
./benchmarks/git/leak_4/git_leak_4.c:175:24: warning: implicit declaration of function ‘commit_list_count’; did you mean ‘commit_list_insert’? [-Wimplicit-function-declaration]
  175 |         int orig_cnt = commit_list_count(commit->parents);
      |                        ^~~~~~~~~~~~~~~~~
      |                        commit_list_insert

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 45%)
 phase parsing                      :   0.04 (100%)   0.02 ( 67%)   0.06 ( 86%)  1112k ( 39%)
 phase opt and generate             :   0.00 (  0%)   0.01 ( 33%)   0.01 ( 14%)   456k ( 16%)
 callgraph ipa passes               :   0.00 (  0%)   0.01 ( 33%)   0.01 ( 14%)   219k (  8%)
 preprocessing                      :   0.03 ( 75%)   0.01 ( 33%)   0.01 ( 14%)   324k ( 11%)
 lexical analysis                   :   0.01 ( 25%)   0.01 ( 33%)   0.01 ( 14%)     0  (  0%)
 parser (global)                    :   0.00 (  0%)   0.00 (  0%)   0.02 ( 29%)   568k ( 20%)
 parser struct body                 :   0.00 (  0%)   0.00 (  0%)   0.01 ( 14%)    73k (  3%)
 parser function body               :   0.00 (  0%)   0.00 (  0%)   0.01 ( 14%)   115k (  4%)
 tree CCP                           :   0.00 (  0%)   0.01 ( 33%)   0.00 (  0%)  2120  (  0%)
 branch prediction                  :   0.00 (  0%)   0.00 (  0%)   0.01 ( 14%)    27k (  1%)
 TOTAL                              :   0.04          0.03          0.07         2877k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 97%)
 TOTAL                              :   0.00          0.00          0.00         2233k
../Compiler/newplugin.so 11.2.0 
--------plugin argument-----------
contextsentive 1
debugoutput 0
debugmod 0
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
=======node_fun:mark_redundant_parents=========
=======node_fun:find_merge_parents=========
=======node_fun:reduce_heads=========
=======node_fun:remove_redundant=========
=======node_fun:commit_list_insert=========
=======node_fun:copy_array=========
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 66 
===============The second stage : Mapping stmt=================
# .MEM_27 = VDEF <.MEM_17>
commit_list_insert (0B, &list);
# .MEM_19 = VDEF <.MEM_17>
mark_redundant_parents (&revs, _2);
# .MEM_20 = VDEF <.MEM_19>
free_commit_list (_3);
# .MEM_21 = VDEF <.MEM_20>
find_merge_parents (&result, &in, &head);
# .MEM_39 = VDEF <.MEM_38(D)>
h_22 = reduce_heads (_1);
# .MEM_40 = VDEF <.MEM_39>
orig_cnt_24 = commit_list_count (_2);
# .MEM_41 = VDEF <.MEM_40>
cnt_26 = commit_list_count (h_22);
# .MEM_43 = VDEF <.MEM_37>
printf ("mark_redundant_parents %d", orig_cnt_24);
# .MEM_42 = VDEF <.MEM_37>
free_commit_list (h_22);
# VUSE <.MEM_110>
newline_91 = strchr (p_90, 10);
# VUSE <.MEM_110>
_4 = strlen (p_90);
# .MEM_123 = VDEF <.MEM_110>
_8 = get_oid_hex (p_90, &oid);
# .MEM_124 = VDEF <.MEM_123>
_13 = parse_object (&oid);
# .MEM_125 = VDEF <.MEM_124>
_15 = peel_to_type (0B, 0, obj_97, 1);
# .MEM_126 = VDEF <.MEM_125>
commit_list_insert (parent_99, &parents);
# .MEM_127 = VDEF <.MEM_126>
add_merge_parent (result_79(D), _18, _17);
# .MEM_113 = VDEF <.MEM_110>
_21 = lookup_commit (head_73(D));
# .MEM_114 = VDEF <.MEM_113>
commit_list_insert (head_commit_75, &parents);
# .MEM_115 = VDEF <.MEM_103>
_24 = reduce_heads (_23);
# .MEM_120 = VDEF <.MEM_106>
_25 = pop_commit (&parents);
# .MEM_121 = VDEF <.MEM_105>
_33 = oidcmp (_32, _27);
# .MEM_80 = VDEF <.MEM_73>
array_54 = calloc (_13, 8);
# .MEM_81 = VDEF <.MEM_75>
num_head_56 = remove_redundant (array_54, num_head_36);
# .MEM_83 = VDEF <.MEM_76>
_30 = commit_list_insert (_29, tail_34);
# .MEM_162 = VDEF <.MEM_161(D)>
work_112 = calloc (_1, 8);
# .MEM_163 = VDEF <.MEM_162>
redundant_114 = calloc (_2, 1);
# .MEM_164 = VDEF <.MEM_163>
_4 = st_mult (4, _3);
# .MEM_165 = VDEF <.MEM_164>
filled_index_117 = malloc (_5);
# .MEM_180 = VDEF <.MEM_148>
parse_commit (_9);
# .MEM_172 = VDEF <.MEM_150>
_30 = paint_down_to_common (_29, filled_93, work_112);
# .MEM_174 = VDEF <.MEM_160>
clear_commit_marks (_57, 983040);
# .MEM_176 = VDEF <.MEM_153>
clear_commit_marks (_61, 983040);
# .MEM_175 = VDEF <.MEM_153>
free_commit_list (common_133);
# .MEM_166 = VDEF <.MEM_155>
copy_array (work_112, array_120(D), _62, 8);
# .MEM_9 = VDEF <.MEM_8(D)>
new_list_4 = malloc (16);
# .MEM_12 = VDEF <.MEM_11(D)>
_1 = st_mult (size_6(D), n_4(D));
# .MEM_13 = VDEF <.MEM_12>
memcpy (dst_8(D), src_9(D), _2);
===============The second stage : Program slicing=================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 97603128]:
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 976138697]:
commit_list_insert (0B, &list);
i_16 = i_4 + 1;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# i_4 = PHI <0(2), i_16(3)>
if (i_4 <= 9)
  goto <bb 3>; [90.91%]
else
  goto <bb 5>; [9.09%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 97603128]:
_1 = list;
_2 = _1->item;
mark_redundant_parents (&revs, _2);
_3 = list;
free_commit_list (_3);
find_merge_parents (&result, &in, &head);
result ={v} {CLOBBER};
in ={v} {CLOBBER};
head ={v} {CLOBBER};
revs ={v} {CLOBBER};
list ={v} {CLOBBER};
return 0;

=======Mapping node_fun:mark_redundant_parents=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
_1 = commit_20(D)->parents;
h_22 = reduce_heads (_1);
_2 = commit_20(D)->parents;
orig_cnt_24 = commit_list_count (_2);
cnt_26 = commit_list_count (h_22);
po_27 = commit_20(D)->parents;
goto <bb 8>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
if (pn_16 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 6>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
_3 = po_14->item;
_4 = pn_16->item;
if (_3 == _4)
  goto <bb 5>; [30.00%]
else
  goto <bb 6>; [70.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 200682346]:
pn_31 = pn_16->next;
i_32 = i_11 + 1;
goto <bb 7>; [100.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 754947880]:
_5 = po_14->item;
_6 = _5->object.flags;
_7 = po_14->item;
_8 = _6 | 16;
_7->object.flags = _8;
marked_34 = marked_13 + 1;

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 955630225]:
# i_10 = PHI <i_32(5), i_11(6)>
# marked_12 = PHI <marked_13(5), marked_34(6)>
# pn_15 = PHI <pn_31(5), pn_16(6)>
po_35 = po_14->next;

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 1073741824]:
# i_11 = PHI <0(2), i_10(7)>
# marked_13 = PHI <0(2), marked_12(7)>
# po_14 = PHI <po_27(2), po_35(7)>
# pn_16 = PHI <h_22(2), pn_15(7)>
if (po_14 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 9>; [11.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 118111600]:
if (i_11 != cnt_26)
  goto <bb 11>; [0.04%]
else
  goto <bb 10>; [99.96%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 118064356]:
_9 = marked_13 + cnt_26;
if (_9 != orig_cnt_24)
  goto <bb 11>; [0.04%]
else
  goto <bb 12>; [99.96%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 94470]:
printf ("mark_redundant_parents %d", orig_cnt_24);
exit (1);

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 118017130]:
free_commit_list (h_22);
return marked_13;

=======Mapping node_fun:find_merge_parents=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 14598063]:
parents = 0B;
goto <bb 16>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 118111600]:
_1 = in_72(D)->buf;
_2 = (sizetype) pos_54;
p_90 = _1 + _2;
newline_91 = strchr (p_90, 10);
if (newline_91 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 82678120]:
_3 = newline_91 - p_90;
_93 = (int) _3;
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 35433480]:
_4 = strlen (p_90);
_92 = (int) _4;

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 118111600]:
# _59 = PHI <_93(4), _92(5)>
_5 = newline_91 != 0B;
_6 = (int) _5;
_7 = _6 + _59;
pos_94 = _7 + pos_54;
if (_59 <= 42)
  goto <bb 10>; [50.00%]
else
  goto <bb 7>; [50.00%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 59055800]:
_8 = get_oid_hex (p_90, &oid);
if (_8 != 0)
  goto <bb 10>; [33.00%]
else
  goto <bb 8>; [67.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 39567386]:
_10 = MEM[(char *)p_90 + 40B];
if (_10 != 9)
  goto <bb 10>; [48.88%]
else
  goto <bb 9>; [51.12%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 20226848]:
_12 = MEM[(char *)p_90 + 41B];
if (_12 != 9)
  goto <bb 10>; [66.00%]
else
  goto <bb 11>; [34.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 111234472]:
// predicted unlikely by continue predictor.
goto <bb 14>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 6877128]:
_13 = parse_object (&oid);
_14 = (long int) _13;
obj_97 = (struct object *) _14;
_15 = peel_to_type (0B, 0, obj_97, 1);
_16 = (long int) _15;
parent_99 = (struct commit *) _16;
if (_15 == 0)
  goto <bb 12>; [50.00%]
else
  goto <bb 13>; [50.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 3438564]:
// predicted unlikely by continue predictor.
goto <bb 14>; [100.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 3438564]:
commit_list_insert (parent_99, &parents);
_17 = &parent_99->object.oid;
_18 = &obj_97->oid;
add_merge_parent (result_79(D), _18, _17);
oid ={v} {CLOBBER};
goto <bb 15>; [100.00%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 114673036]:
oid ={v} {CLOBBER};

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 118111600]:
# pos_11 = PHI <pos_94(13), pos_94(14)>

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 132709663]:
# pos_54 = PHI <0(2), pos_11(15)>
_19 = (long unsigned int) pos_54;
_20 = in_72(D)->len;
if (_19 < _20)
  goto <bb 3>; [89.00%]
else
  goto <bb 17>; [11.00%]

=======is loop:0=========

 bb index 17 
<bb 17> [local count: 14598063]:
_21 = lookup_commit (head_73(D));
_22 = (long int) _21;
head_commit_75 = (struct commit *) _22;
if (_21 != 0)
  goto <bb 18>; [33.00%]
else
  goto <bb 19>; [67.00%]

=======is loop:0=========

 bb index 18 
<bb 18> [local count: 4817361]:
commit_list_insert (head_commit_75, &parents);

=======is loop:0=========

 bb index 19 
<bb 19> [local count: 14598063]:
_23 = parents;
_24 = reduce_heads (_23);
parents = _24;
goto <bb 25>; [100.00%]

=======is loop:1=========

 bb index 20 
<bb 20> [local count: 118111600]:
_25 = pop_commit (&parents);
_26 = (long int) _25;
cmit_86 = (struct commit *) _26;
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 21 
<bb 21> [local count: 955630225]:
_27 = &cmit_86->object.oid;
_28 = result_79(D)->item;
_29 = (long unsigned int) i_55;
_30 = _29 * 41;
_31 = _28 + _30;
_32 = &_31->commit;
_33 = oidcmp (_32, _27);
if (_33 == 0)
  goto <bb 22>; [50.00%]
else
  goto <bb 23>; [50.00%]

=======is loop:1=========

 bb index 22 
<bb 22> [local count: 477815112]:
_34 = result_79(D)->item;
_35 = (long unsigned int) i_55;
_36 = _35 * 41;
_37 = _34 + _36;
_37->used = 1;

=======is loop:1=========

 bb index 23 
<bb 23> [local count: 955630225]:
i_89 = i_55 + 1;

=======is loop:1=========

 bb index 24 
<bb 24> [local count: 1073741824]:
# i_55 = PHI <0(20), i_89(23)>
_38 = result_79(D)->nr;
if (_38 > i_55)
  goto <bb 21>; [89.00%]
else
  goto <bb 25>; [11.00%]

=======is loop:1=========

 bb index 25 
<bb 25> [local count: 132709663]:
_39 = parents;
if (_39 != 0B)
  goto <bb 20>; [89.00%]
else
  goto <bb 31>; [11.00%]

=======is loop:1=========

 bb index 26 
<bb 26> [local count: 118111600]:
_40 = result_79(D)->item;
_41 = (long unsigned int) i_56;
_42 = _41 * 41;
_43 = _40 + _42;
_44 = _43->used;
if (_44 != 0)
  goto <bb 27>; [50.00%]
else
  goto <bb 30>; [50.00%]

=======is loop:1=========

 bb index 27 
<bb 27> [local count: 59055800]:
if (i_56 != j_58)
  goto <bb 28>; [66.00%]
else
  goto <bb 29>; [34.00%]

=======is loop:1=========

 bb index 28 
<bb 28> [local count: 38976828]:
_45 = result_79(D)->item;
_46 = (long unsigned int) i_56;
_47 = _46 * 41;
_48 = _45 + _47;
_49 = result_79(D)->item;
_50 = (long unsigned int) j_58;
_51 = _50 * 41;
_52 = _49 + _51;
*_52 = *_48;

=======is loop:1=========

 bb index 29 
<bb 29> [local count: 59055800]:
j_83 = j_58 + 1;

=======is loop:1=========

 bb index 30 
<bb 30> [local count: 118111600]:
# j_57 = PHI <j_58(26), j_83(29)>
i_84 = i_56 + 1;

=======is loop:1=========

 bb index 31 
<bb 31> [local count: 132709663]:
# i_56 = PHI <0(25), i_84(30)>
# j_58 = PHI <0(25), j_57(30)>
_53 = result_79(D)->nr;
if (_53 > i_56)
  goto <bb 26>; [89.00%]
else
  goto <bb 32>; [11.00%]

=======is loop:0=========

 bb index 32 
<bb 32> [local count: 14598063]:
result_79(D)->nr = j_58;
parents ={v} {CLOBBER};
return;

=======Mapping node_fun:reduce_heads=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 128760057]:
result = 0B;
if (heads_51(D) == 0B)
  goto <bb 19>; [8.27%]
else
  goto <bb 21>; [91.73%]

=======is loop:0=========

 bb index 21 
<bb 21> [local count: 118111600]:
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = p_31->item;
_2 = _1->object.flags;
_3 = p_31->item;
_4 = _2 & 133955583;
_3->object.flags = _4;
p_70 = p_31->next;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# p_31 = PHI <heads_51(D)(21), p_70(3)>
if (p_31 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 20>; [11.00%]

=======is loop:0=========

 bb index 20 
<bb 20> [local count: 118111600]:
goto <bb 9>; [100.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 955630225]:
_5 = p_32->item;
_6 = _5->object.flags;
_7 = (unsigned int) _6;
_52 = _6 & 262144;
_8 = (unsigned int) _52;
if (_52 != 0)
  goto <bb 6>; [33.00%]
else
  goto <bb 7>; [67.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 315357973]:
// predicted unlikely by continue predictor.
goto <bb 8>; [100.00%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 640272253]:
_9 = p_32->item;
_10 = _9->object.flags;
_11 = p_32->item;
_12 = _10 | 262144;
_11->object.flags = _12;
num_head_67 = num_head_36 + 1;

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 955630225]:
# num_head_35 = PHI <num_head_36(6), num_head_67(7)>
p_68 = p_32->next;

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 1073741824]:
# p_32 = PHI <heads_51(D)(20), p_68(8)>
# num_head_36 = PHI <0(20), num_head_35(8)>
if (p_32 != 0B)
  goto <bb 5>; [89.00%]
else
  goto <bb 10>; [11.00%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 118111600]:
_13 = (long unsigned int) num_head_36;
array_54 = calloc (_13, 8);
goto <bb 14>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 955630225]:
_14 = p_33->item;
_15 = _14->object.flags;
_16 = (unsigned int) _15;
_50 = _15 & 262144;
_17 = (unsigned int) _50;
if (_50 != 0)
  goto <bb 12>; [50.00%]
else
  goto <bb 13>; [50.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 477815112]:
i_62 = i_38 + 1;
_18 = (long unsigned int) i_38;
_19 = _18 * 8;
_20 = array_54 + _19;
_21 = p_33->item;
*_20 = _21;
_22 = p_33->item;
_23 = _22->object.flags;
_24 = p_33->item;
_25 = _23 & 133955583;
_24->object.flags = _25;

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 955630225]:
# i_37 = PHI <i_38(11), i_62(12)>
p_65 = p_33->next;

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 1073741824]:
# p_33 = PHI <heads_51(D)(10), p_65(13)>
# i_38 = PHI <0(10), i_37(13)>
if (p_33 != 0B)
  goto <bb 11>; [89.00%]
else
  goto <bb 15>; [11.00%]

=======is loop:0=========

 bb index 15 
<bb 15> [local count: 118111600]:
num_head_56 = remove_redundant (array_54, num_head_36);
goto <bb 17>; [100.00%]

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 955630225]:
_26 = (long unsigned int) i_39;
_27 = _26 * 8;
_28 = array_54 + _27;
_29 = *_28;
_30 = commit_list_insert (_29, tail_34);
tail_60 = &_30->next;
i_61 = i_39 + 1;

=======is loop:1=========

 bb index 17 
<bb 17> [local count: 1073741824]:
# tail_34 = PHI <&result(15), tail_60(16)>
# i_39 = PHI <0(15), i_61(16)>
if (i_39 < num_head_56)
  goto <bb 16>; [89.00%]
else
  goto <bb 18>; [11.00%]

=======is loop:0=========

 bb index 18 
<bb 18> [local count: 118111600]:
free (array_54);
_58 = result;

=======is loop:0=========

 bb index 19 
<bb 19> [local count: 128760057]:
# _40 = PHI <0B(2), _58(18)>
result ={v} {CLOBBER};
return _40;

=======Mapping node_fun:remove_redundant=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 34036049]:
_1 = (long unsigned int) cnt_109(D);
work_112 = calloc (_1, 8);
_2 = (long unsigned int) cnt_109(D);
redundant_114 = calloc (_2, 1);
_3 = cnt_109(D) + -1;
_4 = st_mult (4, _3);
_5 = (long unsigned int) _4;
filled_index_117 = malloc (_5);
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 275382582]:
_6 = (long unsigned int) i_83;
_7 = _6 * 8;
_8 = array_120(D) + _7;
_9 = *_8;
parse_commit (_9);
i_147 = i_83 + 1;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 309418631]:
# i_83 = PHI <0(2), i_147(3)>
if (i_83 < cnt_109(D))
  goto <bb 3>; [89.00%]
else
  goto <bb 37>; [11.00%]

=======is loop:0=========

 bb index 37 
<bb 37> [local count: 34036049]:
goto <bb 25>; [100.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 275382600]:
_10 = (sizetype) i_84;
_11 = redundant_114 + _10;
_12 = *_11;
if (_12 != 0)
  goto <bb 6>; [57.11%]
else
  goto <bb 39>; [42.89%]

=======is loop:1=========

 bb index 39 
<bb 39> [local count: 118111598]:
goto <bb 12>; [100.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 157271002]:
// predicted unlikely by continue predictor.
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 955630226]:
if (i_84 == j_87)
  goto <bb 9>; [20.24%]
else
  goto <bb 8>; [79.76%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 762210670]:
_13 = (sizetype) j_87;
_14 = redundant_114 + _13;
_15 = *_14;
if (_15 != 0)
  goto <bb 9>; [33.00%]
else
  goto <bb 10>; [67.00%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 444949076]:
// predicted unlikely by continue predictor.
goto <bb 11>; [100.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 510681150]:
_16 = (long unsigned int) filled_93;
_17 = _16 * 4;
_18 = filled_index_117 + _17;
*_18 = j_87;
_19 = (long unsigned int) j_87;
_20 = _19 * 8;
_21 = array_120(D) + _20;
filled_142 = filled_93 + 1;
_22 = (long unsigned int) filled_93;
_23 = _22 * 8;
_24 = work_112 + _23;
_25 = *_21;
*_24 = _25;

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 955630227]:
# filled_92 = PHI <filled_93(9), filled_142(10)>
j_144 = j_87 + 1;

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 1073741824]:
# j_87 = PHI <0(39), j_144(11)>
# filled_93 = PHI <0(39), filled_92(11)>
if (j_87 < cnt_109(D))
  goto <bb 7>; [89.00%]
else
  goto <bb 13>; [11.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 118111600]:
_26 = (long unsigned int) i_84;
_27 = _26 * 8;
_28 = array_120(D) + _27;
_29 = *_28;
_30 = paint_down_to_common (_29, filled_93, work_112);
_31 = (long int) _30;
common_133 = (struct commit_list *) _31;
_32 = (long unsigned int) i_84;
_33 = _32 * 8;
_34 = array_120(D) + _33;
_35 = *_34;
_36 = _35->object.flags;
_37 = (unsigned int) _36;
_118 = _36 & 131072;
_38 = (unsigned int) _118;
if (_118 != 0)
  goto <bb 14>; [50.00%]
else
  goto <bb 19>; [50.00%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 59055800]:
_39 = (sizetype) i_84;
_40 = redundant_114 + _39;
*_40 = 1;

=======is loop:1=========

 bb index 19 
<bb 19> [local count: 118111600]:
# j_99 = PHI <0(13), 0(14)>
goto <bb 38>; [100.00%]

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 955630225]:
_41 = (long unsigned int) j_88;
_42 = _41 * 8;
_43 = work_112 + _42;
_44 = *_43;
_45 = _44->object.flags;
_46 = (unsigned int) _45;
_119 = _45 & 65536;
_47 = (unsigned int) _119;
if (_119 != 0)
  goto <bb 17>; [50.00%]
else
  goto <bb 18>; [50.00%]

=======is loop:1=========

 bb index 17 
<bb 17> [local count: 477815112]:
_48 = (long unsigned int) j_88;
_49 = _48 * 4;
_50 = filled_index_117 + _49;
_51 = *_50;
_52 = (sizetype) _51;
_53 = redundant_114 + _52;
*_53 = 1;

=======is loop:1=========

 bb index 18 
<bb 18> [local count: 955630225]:
j_140 = j_88 + 1;

=======is loop:1=========

 bb index 38 
<bb 38> [local count: 1073741824]:
# j_88 = PHI <j_99(19), j_140(18)>
if (j_88 < filled_93)
  goto <bb 16>; [89.00%]
else
  goto <bb 20>; [11.00%]

=======is loop:1=========

 bb index 20 
<bb 20> [local count: 118111600]:
_54 = (long unsigned int) i_84;
_55 = _54 * 8;
_56 = array_120(D) + _55;
_57 = *_56;
clear_commit_marks (_57, 983040);
goto <bb 22>; [100.00%]

=======is loop:1=========

 bb index 21 
<bb 21> [local count: 955630225]:
_58 = (long unsigned int) j_89;
_59 = _58 * 8;
_60 = work_112 + _59;
_61 = *_60;
clear_commit_marks (_61, 983040);
j_138 = j_89 + 1;

=======is loop:1=========

 bb index 22 
<bb 22> [local count: 1073741824]:
# j_89 = PHI <0(20), j_138(21)>
if (j_89 < filled_93)
  goto <bb 21>; [89.00%]
else
  goto <bb 23>; [11.00%]

=======is loop:1=========

 bb index 23 
<bb 23> [local count: 118111600]:
free_commit_list (common_133);

=======is loop:1=========

 bb index 24 
<bb 24> [local count: 275382602]:
i_145 = i_84 + 1;

=======is loop:1=========

 bb index 25 
<bb 25> [local count: 309418652]:
# i_84 = PHI <0(37), i_145(24)>
if (i_84 < cnt_109(D))
  goto <bb 5>; [89.00%]
else
  goto <bb 26>; [11.00%]

=======is loop:0=========

 bb index 26 
<bb 26> [local count: 34036052]:
_62 = (long unsigned int) cnt_109(D);
copy_array (work_112, array_120(D), _62, 8);
goto <bb 30>; [100.00%]

=======is loop:1=========

 bb index 27 
<bb 27> [local count: 275382600]:
_63 = (sizetype) i_85;
_64 = redundant_114 + _63;
_65 = *_64;
if (_65 == 0)
  goto <bb 28>; [50.00%]
else
  goto <bb 29>; [50.00%]

=======is loop:1=========

 bb index 28 
<bb 28> [local count: 137691300]:
_66 = (long unsigned int) i_85;
_67 = _66 * 8;
_68 = work_112 + _67;
filled_129 = filled_95 + 1;
_69 = (long unsigned int) filled_95;
_70 = _69 * 8;
_71 = array_120(D) + _70;
_72 = *_68;
*_71 = _72;

=======is loop:1=========

 bb index 29 
<bb 29> [local count: 275382600]:
# filled_94 = PHI <filled_95(27), filled_129(28)>
i_131 = i_85 + 1;

=======is loop:1=========

 bb index 30 
<bb 30> [local count: 309418652]:
# i_85 = PHI <0(26), i_131(29)>
# filled_95 = PHI <0(26), filled_94(29)>
if (i_85 < cnt_109(D))
  goto <bb 27>; [89.00%]
else
  goto <bb 36>; [11.00%]

=======is loop:0=========

 bb index 36 
<bb 36> [local count: 34036052]:
goto <bb 34>; [100.00%]

=======is loop:1=========

 bb index 31 
<bb 31> [local count: 275382600]:
_73 = (sizetype) i_86;
_74 = redundant_114 + _73;
_75 = *_74;
if (_75 != 0)
  goto <bb 32>; [50.00%]
else
  goto <bb 33>; [50.00%]

=======is loop:1=========

 bb index 32 
<bb 32> [local count: 137691300]:
_76 = (long unsigned int) i_86;
_77 = _76 * 8;
_78 = work_112 + _77;
j_126 = j_91 + 1;
_79 = (long unsigned int) j_91;
_80 = _79 * 8;
_81 = array_120(D) + _80;
_82 = *_78;
*_81 = _82;

=======is loop:1=========

 bb index 33 
<bb 33> [local count: 275382600]:
# j_90 = PHI <j_91(31), j_126(32)>
i_128 = i_86 + 1;

=======is loop:1=========

 bb index 34 
<bb 34> [local count: 309418652]:
# i_86 = PHI <0(36), i_128(33)>
# j_91 = PHI <filled_95(36), j_90(33)>
if (i_86 < cnt_109(D))
  goto <bb 31>; [89.00%]
else
  goto <bb 35>; [11.00%]

=======is loop:0=========

 bb index 35 
<bb 35> [local count: 34036052]:
free (work_112);
free (redundant_114);
free (filled_index_117);
return filled_95;

=======Mapping node_fun:commit_list_insert=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
new_list_4 = malloc (16);
new_list_4->item = item_5(D);
_1 = *list_p_7(D);
new_list_4->next = _1;
*list_p_7(D) = new_list_4;
return new_list_4;

=======Mapping node_fun:copy_array=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (n_4(D) != 0)
  goto <bb 3>; [33.00%]
else
  goto <bb 4>; [67.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 354334800]:
_1 = st_mult (size_6(D), n_4(D));
_2 = (long unsigned int) _1;
memcpy (dst_8(D), src_9(D), _2);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 5 [0m
[40;34m    gimple free   count : 4 [0m
[40;34m    all ptable point : 66 [0m
[40;34m    analyzable ptable point : 61 [0m
[40;34m    analyzable ptable all point stmt : 712 [0m
[40;34m    used_stmt array stack totalsize of : 0.018544 mb[0m
[40;34m    collect time: : 0.000457 s [0m
[40;34m    mapping time: : 0.002636 s [0m
[40;34m    algorithm time: 0.034554 s [0m
[40;34m    gimple stmt count : : 331 [0m
[40;34m    this report analysis in Sun Jun 26 13:53:08 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 61%)
 phase opt and generate             :   0.08 (100%)   0.01 (100%)   0.09 (100%)  1305k ( 37%)
 callgraph functions expansion      :   0.05 ( 62%)   0.00 (  0%)   0.05 ( 56%)  1033k ( 29%)
 tree operand scan                  :   0.00 (  0%)   0.00 (  0%)   0.01 ( 11%)    55k (  2%)
 dominator optimization             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 11%)    61k (  2%)
 tree iv optimization               :   0.01 ( 13%)   0.00 (  0%)   0.00 (  0%)    57k (  2%)
 tree modref                        :   0.01 ( 12%)   0.00 (  0%)   0.00 (  0%)  1648  (  0%)
 integrated RA                      :   0.00 (  0%)   0.00 (  0%)   0.02 ( 22%)   254k (  7%)
 LRA virtuals elimination           :   0.00 (  0%)   0.00 (  0%)   0.01 ( 11%)  2616  (  0%)
 final                              :   0.01 ( 12%)   0.00 (  0%)   0.00 (  0%)    40k (  1%)
 plugin execution                   :   0.04 ( 50%)   0.01 (100%)   0.03 ( 33%)  4920  (  0%)
 initialize rtl                     :   0.00 (  0%)   0.00 (  0%)   0.01 ( 11%)    12k (  0%)
 rest of compilation                :   0.01 ( 13%)   0.00 (  0%)   0.00 (  0%)    25k (  1%)
 TOTAL                              :   0.08          0.01          0.09         3531k
/usr/bin/ld: /tmp/ccCI0NNW.ltrans0.ltrans.o: in function `copy_array':
<artificial>:(.text+0x1e): undefined reference to `st_mult'
/usr/bin/ld: /tmp/ccCI0NNW.ltrans0.ltrans.o: in function `remove_redundant':
<artificial>:(.text+0xac): undefined reference to `st_mult'
/usr/bin/ld: <artificial>:(.text+0xdb): undefined reference to `parse_commit'
/usr/bin/ld: <artificial>:(.text+0x13a): undefined reference to `paint_down_to_common'
/usr/bin/ld: <artificial>:(.text+0x216): undefined reference to `clear_commit_marks'
/usr/bin/ld: <artificial>:(.text+0x23e): undefined reference to `clear_commit_marks'
/usr/bin/ld: <artificial>:(.text+0x258): undefined reference to `free_commit_list'
/usr/bin/ld: <artificial>:(.text+0x286): undefined reference to `clear_commit_marks'
/usr/bin/ld: /tmp/ccCI0NNW.ltrans0.ltrans.o: in function `find_merge_parents':
<artificial>:(.text+0x456): undefined reference to `get_oid_hex'
/usr/bin/ld: <artificial>:(.text+0x46e): undefined reference to `parse_object'
/usr/bin/ld: <artificial>:(.text+0x48d): undefined reference to `peel_to_type'
/usr/bin/ld: <artificial>:(.text+0x4ba): undefined reference to `add_merge_parent'
/usr/bin/ld: <artificial>:(.text+0x4cc): undefined reference to `lookup_commit'
/usr/bin/ld: <artificial>:(.text+0x53a): undefined reference to `oidcmp'
/usr/bin/ld: <artificial>:(.text+0x561): undefined reference to `pop_commit'
/usr/bin/ld: /tmp/ccCI0NNW.ltrans0.ltrans.o: in function `mark_redundant_parents':
<artificial>:(.text+0x608): undefined reference to `commit_list_count'
/usr/bin/ld: <artificial>:(.text+0x618): undefined reference to `commit_list_count'
/usr/bin/ld: <artificial>:(.text+0x67d): undefined reference to `free_commit_list'
/usr/bin/ld: /tmp/ccCI0NNW.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x6df): undefined reference to `free_commit_list'
collect2: error: ld returned 1 exit status
