../Compiler/newplugin.so 11.2.0 
In file included from ./benchmarks/git/use_after_free_2/git_uaf_2.c:11:
./benchmarks/git/use_after_free_2/../git.h: In function ‘copy_array’:
./benchmarks/git/use_after_free_2/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/use_after_free_2/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/use_after_free_2/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/use_after_free_2/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/use_after_free_2/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/use_after_free_2/../git.h: In function ‘move_array’:
./benchmarks/git/use_after_free_2/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/use_after_free_2/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/use_after_free_2/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/use_after_free_2/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/use_after_free_2/git_uaf_2.c:10:
./benchmarks/git/use_after_free_2/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/use_after_free_2/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/use_after_free_2/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/use_after_free_2/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/use_after_free_2/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/use_after_free_2/git_uaf_2.c:11:
./benchmarks/git/use_after_free_2/../git.h: At top level:
./benchmarks/git/use_after_free_2/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/use_after_free_2/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/use_after_free_2/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/use_after_free_2/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/use_after_free_2/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: In function ‘default_start_failure’:
./benchmarks/git/use_after_free_2/git_uaf_2.c:138:9: warning: implicit declaration of function ‘strbuf_addstr’ [-Wimplicit-function-declaration]
  138 |         strbuf_addstr(err, "Starting a child failed:");
      |         ^~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:140:17: warning: implicit declaration of function ‘strbuf_addf’ [-Wimplicit-function-declaration]
  140 |                 strbuf_addf(err, " %s", cp->argv[i]);
      |                 ^~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: In function ‘pp_init’:
./benchmarks/git/use_after_free_2/git_uaf_2.c:174:21: warning: implicit declaration of function ‘online_cpus’ [-Wimplicit-function-declaration]
  174 |                 n = online_cpus();
      |                     ^~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:178:9: warning: implicit declaration of function ‘trace_printf’ [-Wimplicit-function-declaration]
  178 |         trace_printf("run_processes_parallel: preparing to run up to %d tasks", n);
      |         ^~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:193:9: warning: implicit declaration of function ‘strbuf_init’ [-Wimplicit-function-declaration]
  193 |         strbuf_init(&pp->buffered_output, 0);
      |         ^~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:197:17: warning: implicit declaration of function ‘child_process_init’ [-Wimplicit-function-declaration]
  197 |                 child_process_init(&pp->children[i].process);
      |                 ^~~~~~~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: In function ‘pp_start_one’:
./benchmarks/git/use_after_free_2/git_uaf_2.c:227:17: warning: implicit declaration of function ‘strbuf_addbuf’ [-Wimplicit-function-declaration]
  227 |                 strbuf_addbuf(&pp->buffered_output, &pp->children[i].err);
      |                 ^~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:228:17: warning: implicit declaration of function ‘strbuf_reset’ [-Wimplicit-function-declaration]
  228 |                 strbuf_reset(&pp->children[i].err);
      |                 ^~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:235:13: warning: implicit declaration of function ‘start_command’ [-Wimplicit-function-declaration]
  235 |         if (start_command(&pp->children[i].process)) {
      |             ^~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: In function ‘kill_children’:
./benchmarks/git/use_after_free_2/git_uaf_2.c:259:25: warning: implicit declaration of function ‘kill’ [-Wimplicit-function-declaration]
  259 |                         kill(pp->children[i].process.pid, signo);
      |                         ^~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: In function ‘pp_collect_finished’:
./benchmarks/git/use_after_free_2/git_uaf_2.c:275:24: warning: implicit declaration of function ‘finish_command’ [-Wimplicit-function-declaration]
  275 |                 code = finish_command(&pp->children[i].process);
      |                        ^~~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: In function ‘finish_command’:
./benchmarks/git/use_after_free_2/git_uaf_2.c:321:15: warning: implicit declaration of function ‘wait_or_whine’ [-Wimplicit-function-declaration]
  321 |     int ret = wait_or_whine(cmd->pid, cmd->argv[0], 0);
      |               ^~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:322:5: warning: implicit declaration of function ‘child_process_clear’ [-Wimplicit-function-declaration]
  322 |     child_process_clear(cmd);
      |     ^~~~~~~~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: At top level:
./benchmarks/git/use_after_free_2/git_uaf_2.c:326:6: warning: conflicting types for ‘child_process_clear’; have ‘void(struct child_process *)’
  326 | void child_process_clear(struct child_process *child)
      |      ^~~~~~~~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:322:5: note: previous implicit declaration of ‘child_process_clear’ with type ‘void(struct child_process *)’
  322 |     child_process_clear(cmd);
      |     ^~~~~~~~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: In function ‘child_process_clear’:
./benchmarks/git/use_after_free_2/git_uaf_2.c:328:9: warning: implicit declaration of function ‘argv_array_clear’ [-Wimplicit-function-declaration]
  328 |         argv_array_clear(&child->args);
      |         ^~~~~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: In function ‘run_processes_parallel’:
./benchmarks/git/use_after_free_2/git_uaf_2.c:361:17: warning: implicit declaration of function ‘pp_buffer_stderr’ [-Wimplicit-function-declaration]
  361 |                 pp_buffer_stderr(&pp, output_timeout);
      |                 ^~~~~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:362:17: warning: implicit declaration of function ‘pp_output’ [-Wimplicit-function-declaration]
  362 |                 pp_output(&pp);
      |                 ^~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:371:9: warning: implicit declaration of function ‘pp_cleanup’ [-Wimplicit-function-declaration]
  371 |         pp_cleanup(&pp);
      |         ^~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: In function ‘parallel_next’:
./benchmarks/git/use_after_free_2/git_uaf_2.c:385:9: warning: implicit declaration of function ‘argv_array_pushv’ [-Wimplicit-function-declaration]
  385 |         argv_array_pushv(&cp->args, d->argv);
      |         ^~~~~~~~~~~~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c: In function ‘main’:
./benchmarks/git/use_after_free_2/git_uaf_2.c:419:14: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
  419 |         if (!strcmp(argv[1], "start-command-ENOENT")) {
      |              ^~~~~~
./benchmarks/git/use_after_free_2/git_uaf_2.c:12:1: note: include ‘<string.h>’ or provide a declaration of ‘strcmp’
   11 | #include "../git.h"
  +++ |+#include <string.h>
   12 | 
./benchmarks/git/use_after_free_2/git_uaf_2.c:426:22: warning: implicit declaration of function ‘run_command’; did you mean ‘finish_command’? [-Wimplicit-function-declaration]
  426 |                 exit(run_command(&proc));
      |                      ^~~~~~~~~~~
      |                      finish_command

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 43%)
 phase parsing                      :   0.02 ( 50%)   0.03 (100%)   0.06 ( 75%)  1197k ( 39%)
 phase opt and generate             :   0.02 ( 50%)   0.00 (  0%)   0.02 ( 25%)   533k ( 18%)
 callgraph ipa passes               :   0.02 ( 50%)   0.00 (  0%)   0.02 ( 25%)   251k (  8%)
 ipa function summary               :   0.01 ( 25%)   0.00 (  0%)   0.00 (  0%)    28k (  1%)
 lto stream compression             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 12%)     0  (  0%)
 ipa free lang data                 :   0.01 ( 25%)   0.00 (  0%)   0.00 (  0%)    11k (  0%)
 preprocessing                      :   0.01 ( 25%)   0.00 (  0%)   0.01 ( 12%)   348k ( 11%)
 lexical analysis                   :   0.00 (  0%)   0.01 ( 33%)   0.03 ( 38%)     0  (  0%)
 parser (global)                    :   0.00 (  0%)   0.00 (  0%)   0.01 ( 12%)   585k ( 19%)
 parser function body               :   0.00 (  0%)   0.01 ( 33%)   0.01 ( 12%)   150k (  5%)
 varconst                           :   0.01 ( 25%)   0.01 ( 33%)   0.00 (  0%)   128  (  0%)
 branch prediction                  :   0.00 (  0%)   0.00 (  0%)   0.01 ( 13%)    16k (  1%)
 TOTAL                              :   0.04          0.03          0.08         3039k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.01 (100%)   0.04 ( 80%)   0.04 ( 67%)  2157k ( 95%)
 phase stream in                    :   0.00 (  0%)   0.01 ( 20%)   0.01 ( 17%)   107k (  5%)
 phase stream out                   :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)     0  (  0%)
 ipa lto decl in                    :   0.00 (  0%)   0.01 ( 20%)   0.01 ( 17%)    80k (  4%)
 ipa lto decl out                   :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)     0  (  0%)
 TOTAL                              :   0.01          0.05          0.06         2267k
../Compiler/newplugin.so 11.2.0 
--------plugin argument-----------
contextsentive 1
debugoutput 0
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
=======node_fun:task_finished=========
=======node_fun:no_job=========
=======node_fun:parallel_next=========
=======node_fun:run_processes_parallel=========
=======node_fun:child_process_clear=========
=======node_fun:finish_command=========
=======node_fun:pp_collect_finished=========
=======node_fun:kill_children=========
=======node_fun:pp_start_one=========
=======node_fun:pp_init=========
=======node_fun:default_task_finished=========
=======node_fun:default_start_failure=========
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 99 
===============The second stage : Mapping stmt=================
# VUSE <.MEM_39>
_3 = strcmp (_2, "start-command-ENOENT");
# .MEM_50 = VDEF <.MEM_39>
_4 = start_command (&proc);
_5 = __errno_location ();
# .MEM_51 = VDEF <.MEM_50>
fprintf (_8, "FAIL %s\n", _7);
# VUSE <.MEM_39>
_10 = strcmp (_9, "run-command");
# .MEM_48 = VDEF <.MEM_39>
_11 = run_command (&proc);
# VUSE <.MEM_39>
jobs_33 = atoi (_12);
# VUSE <.MEM_40>
_15 = strcmp (_14, "run-command-parallel");
# .MEM_46 = VDEF <.MEM_40>
_16 = run_processes_parallel (jobs_33, parallel_next, 0B, 0B, &proc);
# VUSE <.MEM_40>
_18 = strcmp (_17, "run-command-abort");
# .MEM_44 = VDEF <.MEM_40>
_19 = run_processes_parallel (jobs_33, parallel_next, 0B, task_finished, &proc);
# VUSE <.MEM_40>
_21 = strcmp (_20, "run-command-no-jobs");
# .MEM_42 = VDEF <.MEM_40>
_22 = run_processes_parallel (jobs_33, no_job, 0B, task_finished, &proc);
# .MEM_41 = VDEF <.MEM_40>
__builtin_fwrite ("check usage\n", 1, 12, _23);
# .MEM_4 = VDEF <.MEM_3(D)>
strbuf_addf (err_2(D), "asking for a quick stop\n");
# .MEM_4 = VDEF <.MEM_3(D)>
strbuf_addf (err_2(D), "no further jobs available\n");
# .MEM_15 = VDEF <.MEM_14(D)>
argv_array_pushv (_3, _2);
# .MEM_16 = VDEF <.MEM_15>
strbuf_addf (err_12(D), "preloaded output of a child\n");
# .MEM_36 = VDEF <.MEM_35(D)>
pp_init (&pp, n_15(D), get_next_task_16(D), start_failure_17(D), task_finished_18(D), pp_cb_19(D));
# .MEM_37 = VDEF <.MEM_31>
code_22 = pp_start_one (&pp);
# .MEM_39 = VDEF <.MEM_38>
kill_children (&pp, _1);
# .MEM_40 = VDEF <.MEM_32>
pp_buffer_stderr (&pp, 100);
# .MEM_41 = VDEF <.MEM_40>
pp_output (&pp);
# .MEM_42 = VDEF <.MEM_41>
code_29 = pp_collect_finished (&pp);
# .MEM_44 = VDEF <.MEM_43>
kill_children (&pp, _7);
# .MEM_45 = VDEF <.MEM_32>
pp_cleanup (&pp);
# .MEM_5 = VDEF <.MEM_4(D)>
argv_array_clear (_1);
# .MEM_6 = VDEF <.MEM_5>
argv_array_clear (_2);
# .MEM_9 = VDEF <.MEM_8(D)>
ret_7 = wait_or_whine (_3, _2, 0);
# .MEM_10 = VDEF <.MEM_9>
child_process_clear (cmd_5(D));
# .MEM_113 = VDEF <.MEM_111>
code_97 = finish_command (_12);
# .MEM_118 = VDEF <.MEM_117>
child_process_init (_44);
# .MEM_124 = VDEF <.MEM_118>
strbuf_addbuf (_51, _50);
# .MEM_125 = VDEF <.MEM_124>
strbuf_reset (_56);
# .MEM_119 = VDEF <.MEM_118>
fputs (_62, _57);
# .MEM_120 = VDEF <.MEM_119>
strbuf_reset (_67);
# .MEM_121 = VDEF <.MEM_120>
fputs (_69, _68);
# .MEM_122 = VDEF <.MEM_121>
strbuf_reset (_70);
# .MEM_23 = VDEF <.MEM_21>
kill (_10, signo_17(D));
# .MEM_132 = VDEF <.MEM_117(D)>
printf ("BUG: bookkeeping is hard%s", "");
# .MEM_130 = VDEF <.MEM_118>
strbuf_addbuf (_30, _29);
# .MEM_131 = VDEF <.MEM_130>
strbuf_reset (_35);
# .MEM_122 = VDEF <.MEM_121>
_53 = start_command (_52);
# .MEM_127 = VDEF <.MEM_126>
strbuf_addbuf (_76, _75);
# .MEM_128 = VDEF <.MEM_127>
strbuf_reset (_81);
# .MEM_62 = VDEF <.MEM_61(D)>
n_33 = online_cpus ();
# .MEM_64 = VDEF <.MEM_63>
trace_printf ("run_processes_parallel: preparing to run up to %d tasks", n_24);
# .MEM_82 = VDEF <.MEM_65>
printf ("BUG: you need to specify a get_next_task function%s", "");
# .MEM_72 = VDEF <.MEM_71>
_2 = calloc (_1, 120);
# .MEM_74 = VDEF <.MEM_73>
_4 = calloc (_3, 8);
# .MEM_76 = VDEF <.MEM_75>
strbuf_init (_5, 0);
# .MEM_78 = VDEF <.MEM_60>
strbuf_init (_10, 0);
# .MEM_79 = VDEF <.MEM_78>
child_process_init (_15);
# .MEM_24 = VDEF <.MEM_23(D)>
strbuf_addf (err_16(D), "A child failed with return code %d:", result_14(D));
# .MEM_25 = VDEF <.MEM_21>
strbuf_addf (err_16(D), " %s", _5);
# .MEM_21 = VDEF <.MEM_20(D)>
strbuf_addstr (err_14(D), "Starting a child failed:");
# .MEM_22 = VDEF <.MEM_19>
strbuf_addf (err_14(D), " %s", _5);
===============The second stage : Program slicing=================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
proc = {};
proc.args.argv = &empty_argv;
proc.env_array.argv = &empty_argv;
if (argc_30(D) <= 2)
  goto <bb 16>; [34.00%]
else
  goto <bb 3>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 708669601]:
_1 = argv_31(D) + 16;
proc.argv = _1;
_2 = MEM[(char * *)argv_31(D) + 8B];
_3 = strcmp (_2, "start-command-ENOENT");
if (_3 == 0)
  goto <bb 4>; [33.00%]
else
  goto <bb 7>; [67.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 233860967]:
_4 = start_command (&proc);
if (_4 < 0)
  goto <bb 5>; [73.25%]
else
  goto <bb 6>; [26.75%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 171303159]:
_5 = __errno_location ();
_6 = *_5;
if (_6 == 2)
  goto <bb 16>; [34.00%]
else
  goto <bb 6>; [66.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 175617892]:
_7 = MEM[(char * *)argv_31(D) + 8B];
_8 = stderr;
fprintf (_8, "FAIL %s\n", _7);
goto <bb 16>; [100.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 474808634]:
_9 = MEM[(char * *)argv_31(D) + 8B];
_10 = strcmp (_9, "run-command");
if (_10 == 0)
  goto <bb 8>; [0.04%]
else
  goto <bb 9>; [99.96%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 189923]:
_11 = run_command (&proc);
exit (_11);

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 474618711]:
_12 = MEM[(char * *)argv_31(D) + 16B];
jobs_33 = atoi (_12);
_13 = argv_31(D) + 24;
proc.argv = _13;
_14 = MEM[(char * *)argv_31(D) + 8B];
_15 = strcmp (_14, "run-command-parallel");
if (_15 == 0)
  goto <bb 10>; [0.04%]
else
  goto <bb 11>; [99.96%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 189847]:
_16 = run_processes_parallel (jobs_33, parallel_next, 0B, 0B, &proc);
exit (_16);

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 474428864]:
_17 = MEM[(char * *)argv_31(D) + 8B];
_18 = strcmp (_17, "run-command-abort");
if (_18 == 0)
  goto <bb 12>; [0.04%]
else
  goto <bb 13>; [99.96%]

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 189771]:
_19 = run_processes_parallel (jobs_33, parallel_next, 0B, task_finished, &proc);
exit (_19);

=======is loop:0=========

 bb index 13 
<bb 13> [local count: 474239093]:
_20 = MEM[(char * *)argv_31(D) + 8B];
_21 = strcmp (_20, "run-command-no-jobs");
if (_21 == 0)
  goto <bb 14>; [0.04%]
else
  goto <bb 15>; [99.96%]

=======is loop:0=========

 bb index 14 
<bb 14> [local count: 189695]:
_22 = run_processes_parallel (jobs_33, no_job, 0B, task_finished, &proc);
exit (_22);

=======is loop:0=========

 bb index 15 
<bb 15> [local count: 474049397]:
_23 = stderr;
__builtin_fwrite ("check usage\n", 1, 12, _23);

=======is loop:0=========

 bb index 16 
<bb 16> [local count: 1072982589]:
# _24 = PHI <1(2), 0(5), 1(6), 1(15)>
proc ={v} {CLOBBER};
return _24;

=======Mapping node_fun:task_finished=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
strbuf_addf (err_2(D), "asking for a quick stop\n");
return 1;

=======Mapping node_fun:no_job=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
strbuf_addf (err_2(D), "no further jobs available\n");
return 0;

=======Mapping node_fun:parallel_next=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = number_callbacks;
if (_1 > 3)
  goto <bb 4>; [51.12%]
else
  goto <bb 3>; [48.88%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 524845000]:
_2 = MEM[(struct child_process *)cb_8(D)].argv;
_3 = &cp_10(D)->args;
argv_array_pushv (_3, _2);
strbuf_addf (err_12(D), "preloaded output of a child\n");
_4 = number_callbacks;
_5 = _4 + 1;
number_callbacks = _5;

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# _6 = PHI <0(2), 1(3)>
return _6;

=======Mapping node_fun:run_processes_parallel=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 44310769]:
pp_init (&pp, n_15(D), get_next_task_16(D), start_failure_17(D), task_finished_18(D), pp_cb_19(D));

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 46613822]:

=======is loop:1=========

 bb index 17 
<bb 17> [local count: 86184446]:

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 805650347]:
goto <bb 8>; [100.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 812398425]:
code_22 = pp_start_one (&pp);
if (code_22 == 0)
  goto <bb 5>; [33.00%]
else
  goto <bb 6>; [67.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 268091479]:
// predicted unlikely by continue predictor.
i_25 = i_8 + 1;
goto <bb 8>; [100.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 544306946]:
if (code_22 < 0)
  goto <bb 7>; [25.50%]
else
  goto <bb 11>; [74.50%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 138798273]:
pp.shutdown = 1;
_1 = -code_22;
kill_children (&pp, _1);
goto <bb 11>; [100.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 1073741824]:
# i_8 = PHI <0(16), i_25(5)>
if (i_8 <= 3)
  goto <bb 9>; [80.00%]
else
  goto <bb 11>; [20.00%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 858993457]:
_2 = BIT_FIELD_REF <pp, 8, 448>;
_3 = _2 & 1;
if (_3 == 0)
  goto <bb 10>; [97.25%]
else
  goto <bb 11>; [2.75%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 835371135]:
_4 = pp.nr_processes;
_5 = pp.max_processes;
if (_4 < _5)
  goto <bb 4>; [97.25%]
else
  goto <bb 11>; [2.75%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 805650348]:
_6 = pp.nr_processes;
if (_6 == 0)
  goto <bb 15>; [5.50%]
else
  goto <bb 12>; [94.50%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 761339579]:
pp_buffer_stderr (&pp, 100);
pp_output (&pp);
code_29 = pp_collect_finished (&pp);
if (code_29 != 0)
  goto <bb 13>; [5.50%]
else
  goto <bb 19>; [94.50%]

=======is loop:1=========

 bb index 19 
<bb 19> [local count: 719465902]:
goto <bb 16>; [100.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 41873677]:
pp.shutdown = 1;
if (code_29 < 0)
  goto <bb 14>; [5.50%]
else
  goto <bb 18>; [94.50%]

=======is loop:1=========

 bb index 18 
<bb 18> [local count: 39570624]:
goto <bb 17>; [100.00%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 2303052]:
_7 = -code_29;
kill_children (&pp, _7);
goto <bb 3>; [100.00%]

=======is loop:0=========

 bb index 15 
<bb 15> [local count: 44310769]:
pp_cleanup (&pp);
pp ={v} {CLOBBER};
return 0;

=======Mapping node_fun:child_process_clear=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = &child_3(D)->args;
argv_array_clear (_1);
_2 = &child_3(D)->env_array;
argv_array_clear (_2);
return;

=======Mapping node_fun:finish_command=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = cmd_5(D)->argv;
_2 = *_1;
_3 = cmd_5(D)->pid;
ret_7 = wait_or_whine (_3, _2, 0);
child_process_clear (cmd_5(D));
return ret_7;

=======Mapping node_fun:pp_collect_finished=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 12617860]:
n_92 = pp_91(D)->max_processes;
goto <bb 19>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1014686025]:
_1 = pp_91(D)->children;
_2 = (long unsigned int) i_83;
_3 = _2 * 120;
_4 = _1 + _3;
_5 = _4->state;
if (_5 == 2)
  goto <bb 6>; [5.50%]
else
  goto <bb 4>; [94.50%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 958878294]:
i_95 = i_83 + 1;

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 1073741824]:
# i_83 = PHI <i_95(4), 0(20)>
_6 = pp_91(D)->max_processes;
if (_6 > i_83)
  goto <bb 3>; [94.50%]
else
  goto <bb 6>; [5.50%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 114863531]:
_7 = pp_91(D)->max_processes;
if (_7 == i_83)
  goto <bb 18>; [3.66%]
else
  goto <bb 7>; [96.34%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 110659526]:
_8 = pp_91(D)->children;
_9 = (long unsigned int) i_83;
_10 = _9 * 120;
_11 = _8 + _10;
_12 = &_11->process;
code_97 = finish_command (_12);
_13 = pp_91(D)->task_finished;
_14 = pp_91(D)->children;
_15 = (long unsigned int) i_83;
_16 = _15 * 120;
_17 = _14 + _16;
_18 = &_17->data;
_19 = pp_91(D)->data;
_20 = pp_91(D)->children;
_21 = (long unsigned int) i_83;
_22 = _21 * 120;
_23 = _20 + _22;
_24 = &_23->err;
_25 = pp_91(D)->children;
_26 = (long unsigned int) i_83;
_27 = _26 * 120;
_28 = _25 + _27;
_29 = &_28->process;
code_99 = _13 (code_97, _29, _24, _19, _18);
if (code_99 != 0)
  goto <bb 8>; [50.00%]
else
  goto <bb 9>; [50.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 55329763]:

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 110659526]:
# result_85 = PHI <result_86(7), code_99(8)>
if (code_99 < 0)
  goto <bb 18>; [3.66%]
else
  goto <bb 10>; [96.34%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 106609387]:
_30 = pp_91(D)->nr_processes;
_31 = _30 + -1;
pp_91(D)->nr_processes = _31;
_32 = pp_91(D)->children;
_33 = (long unsigned int) i_83;
_34 = _33 * 120;
_35 = _32 + _34;
_35->state = 0;
_36 = pp_91(D)->pfd;
_37 = (long unsigned int) i_83;
_38 = _37 * 8;
_39 = _36 + _38;
_39->fd = -1;
_40 = pp_91(D)->children;
_41 = (long unsigned int) i_83;
_42 = _41 * 120;
_43 = _40 + _42;
_44 = &_43->process;
child_process_init (_44);
_45 = pp_91(D)->output_owner;
if (_45 != i_83)
  goto <bb 11>; [84.00%]
else
  goto <bb 12>; [16.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 89551886]:
_46 = pp_91(D)->children;
_47 = (long unsigned int) i_83;
_48 = _47 * 120;
_49 = _46 + _48;
_50 = &_49->err;
_51 = &pp_91(D)->buffered_output;
strbuf_addbuf (_51, _50);
_52 = pp_91(D)->children;
_53 = (long unsigned int) i_83;
_54 = _53 * 120;
_55 = _52 + _54;
_56 = &_55->err;
strbuf_reset (_56);
goto <bb 17>; [100.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 17057502]:
_57 = stderr;
_58 = pp_91(D)->children;
_59 = (long unsigned int) i_83;
_60 = _59 * 120;
_61 = _58 + _60;
_62 = _61->err.buf;
fputs (_62, _57);
_63 = pp_91(D)->children;
_64 = (long unsigned int) i_83;
_65 = _64 * 120;
_66 = _63 + _65;
_67 = &_66->err;
strbuf_reset (_67);
_68 = stderr;
_69 = pp_91(D)->buffered_output.buf;
fputs (_69, _68);
_70 = &pp_91(D)->buffered_output;
strbuf_reset (_70);
goto <bb 15>; [100.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 150683236]:
_71 = pp_91(D)->children;
_72 = pp_91(D)->output_owner;
_73 = _72 + i_84;
_74 = _73 % n_92;
_75 = (long unsigned int) _74;
_76 = _75 * 120;
_77 = _71 + _76;
_78 = _77->state;
if (_78 == 1)
  goto <bb 16>; [5.50%]
else
  goto <bb 14>; [94.50%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 142395658]:
i_108 = i_84 + 1;

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 159453160]:
# i_84 = PHI <0(12), i_108(14)>
if (i_84 < n_92)
  goto <bb 13>; [94.50%]
else
  goto <bb 16>; [5.50%]

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 17057502]:
_79 = pp_91(D)->output_owner;
_80 = _79 + i_84;
_81 = _80 % n_92;
pp_91(D)->output_owner = _81;

=======is loop:1=========

 bb index 17 
<bb 17> [local count: 106609387]:
# result_93 = PHI <result_85(11), result_85(16)>

=======is loop:1=========

 bb index 19 
<bb 19> [local count: 119227248]:
# result_86 = PHI <0(2), result_93(17)>
_82 = pp_91(D)->nr_processes;
if (_82 > 0)
  goto <bb 20>; [96.34%]
else
  goto <bb 18>; [3.66%]

=======is loop:1=========

 bb index 20 
<bb 20> [local count: 114863530]:
goto <bb 5>; [100.00%]

=======is loop:0=========

 bb index 18 
<bb 18> [local count: 12617862]:
# result_87 = PHI <result_86(6), result_85(9), result_86(19)>
return result_87;

=======Mapping node_fun:kill_children=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
n_16 = pp_15(D)->max_processes;
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = pp_15(D)->children;
_2 = (long unsigned int) i_11;
_3 = _2 * 120;
_4 = _1 + _3;
_5 = _4->state;
if (_5 == 1)
  goto <bb 4>; [20.24%]
else
  goto <bb 5>; [79.76%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 193419556]:
_6 = pp_15(D)->children;
_7 = (long unsigned int) i_11;
_8 = _7 * 120;
_9 = _6 + _8;
_10 = _9->process.pid;
kill (_10, signo_17(D));

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 955630227]:
i_19 = i_11 + 1;

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
# i_11 = PHI <0(2), i_19(5)>
if (i_11 < n_16)
  goto <bb 3>; [89.00%]
else
  goto <bb 7>; [11.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 118111600]:
return;

=======Mapping node_fun:pp_start_one=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 114863530]:
goto <bb 5>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1014686026]:
_1 = pp_102(D)->children;
_2 = (long unsigned int) i_97;
_3 = _2 * 120;
_4 = _1 + _3;
_5 = _4->state;
if (_5 == 0)
  goto <bb 6>; [5.50%]
else
  goto <bb 4>; [94.50%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 958878296]:
i_103 = i_97 + 1;

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 1073741824]:
# i_97 = PHI <0(2), i_103(4)>
_6 = pp_102(D)->max_processes;
if (_6 > i_97)
  goto <bb 3>; [94.50%]
else
  goto <bb 6>; [5.50%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 114863531]:
_7 = pp_102(D)->max_processes;
if (_7 == i_97)
  goto <bb 7>; [0.04%]
else
  goto <bb 8>; [99.96%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 45945]:
printf ("BUG: bookkeeping is hard%s", "");
exit (1);

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 114817586]:
_8 = pp_102(D)->get_next_task;
_9 = pp_102(D)->children;
_10 = (long unsigned int) i_97;
_11 = _10 * 120;
_12 = _9 + _11;
_13 = &_12->data;
_14 = pp_102(D)->data;
_15 = pp_102(D)->children;
_16 = (long unsigned int) i_97;
_17 = _16 * 120;
_18 = _15 + _17;
_19 = &_18->err;
_20 = pp_102(D)->children;
_21 = (long unsigned int) i_97;
_22 = _21 * 120;
_23 = _20 + _22;
_24 = &_23->process;
code_105 = _8 (_24, _19, _14, _13);
if (code_105 == 0)
  goto <bb 9>; [34.00%]
else
  goto <bb 10>; [66.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 39037980]:
_25 = pp_102(D)->children;
_26 = (long unsigned int) i_97;
_27 = _26 * 120;
_28 = _25 + _27;
_29 = &_28->err;
_30 = &pp_102(D)->buffered_output;
strbuf_addbuf (_30, _29);
_31 = pp_102(D)->children;
_32 = (long unsigned int) i_97;
_33 = _32 * 120;
_34 = _31 + _33;
_35 = &_34->err;
strbuf_reset (_35);
goto <bb 15>; [100.00%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 75779606]:
_36 = pp_102(D)->children;
_37 = (long unsigned int) i_97;
_38 = _37 * 120;
_39 = _36 + _38;
_39->process.err = -1;
_40 = pp_102(D)->children;
_41 = (long unsigned int) i_97;
_42 = _41 * 120;
_43 = _40 + _42;
_43->process.stdout_to_stderr = 1;
_44 = pp_102(D)->children;
_45 = (long unsigned int) i_97;
_46 = _45 * 120;
_47 = _44 + _46;
_47->process.no_stdin = 1;
_48 = pp_102(D)->children;
_49 = (long unsigned int) i_97;
_50 = _49 * 120;
_51 = _48 + _50;
_52 = &_51->process;
_53 = start_command (_52);
if (_53 != 0)
  goto <bb 11>; [34.00%]
else
  goto <bb 14>; [66.00%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 25765066]:
_54 = pp_102(D)->start_failure;
_55 = pp_102(D)->children;
_56 = (long unsigned int) i_97;
_57 = _56 * 120;
_58 = _55 + _57;
_59 = &_58->data;
_60 = pp_102(D)->data;
_61 = pp_102(D)->children;
_62 = (long unsigned int) i_97;
_63 = _62 * 120;
_64 = _61 + _63;
_65 = &_64->err;
_66 = pp_102(D)->children;
_67 = (long unsigned int) i_97;
_68 = _67 * 120;
_69 = _66 + _68;
_70 = &_69->process;
code_114 = _54 (_70, _65, _60, _59);
_71 = pp_102(D)->children;
_72 = (long unsigned int) i_97;
_73 = _72 * 120;
_74 = _71 + _73;
_75 = &_74->err;
_76 = &pp_102(D)->buffered_output;
strbuf_addbuf (_76, _75);
_77 = pp_102(D)->children;
_78 = (long unsigned int) i_97;
_79 = _78 * 120;
_80 = _77 + _79;
_81 = &_80->err;
strbuf_reset (_81);
if (code_114 != 0)
  goto <bb 12>; [50.00%]
else
  goto <bb 13>; [50.00%]

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 12882533]:
pp_102(D)->shutdown = 1;

=======is loop:0=========

 bb index 13 
<bb 13> [local count: 25765066]:
goto <bb 15>; [100.00%]

=======is loop:0=========

 bb index 14 
<bb 14> [local count: 50014540]:
_82 = pp_102(D)->nr_processes;
_83 = _82 + 1;
pp_102(D)->nr_processes = _83;
_84 = pp_102(D)->children;
_85 = (long unsigned int) i_97;
_86 = _85 * 120;
_87 = _84 + _86;
_87->state = 1;
_88 = pp_102(D)->children;
_89 = (long unsigned int) i_97;
_90 = _89 * 120;
_91 = _88 + _90;
_92 = pp_102(D)->pfd;
_93 = (long unsigned int) i_97;
_94 = _93 * 8;
_95 = _92 + _94;
_96 = _91->process.err;
_95->fd = _96;

=======is loop:0=========

 bb index 15 
<bb 15> [local count: 114817586]:
# _98 = PHI <1(9), code_114(13), 0(14)>
return _98;

=======Mapping node_fun:pp_init=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118158864]:
if (n_30(D) <= 0)
  goto <bb 3>; [25.50%]
else
  goto <bb 4>; [74.50%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 30130511]:
n_33 = online_cpus ();

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 118158864]:
# n_24 = PHI <n_30(D)(2), n_33(3)>
pp_34(D)->max_processes = n_24;
trace_printf ("run_processes_parallel: preparing to run up to %d tasks", n_24);
pp_34(D)->data = data_37(D);
if (get_next_task_39(D) == 0B)
  goto <bb 5>; [0.04%]
else
  goto <bb 6>; [99.96%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 47263]:
printf ("BUG: you need to specify a get_next_task function%s", "");
exit (1);

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 118111600]:
pp_34(D)->get_next_task = get_next_task_39(D);
if (start_failure_41(D) != 0B)
  goto <bb 8>; [70.00%]
else
  goto <bb 7>; [30.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 35433480]:

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 118111600]:
# _26 = PHI <start_failure_41(D)(6), default_start_failure(7)>
pp_34(D)->start_failure = _26;
if (task_finished_43(D) != 0B)
  goto <bb 10>; [70.00%]
else
  goto <bb 9>; [30.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 35433480]:

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 118111600]:
# _27 = PHI <task_finished_43(D)(8), default_task_finished(9)>
pp_34(D)->task_finished = _27;
pp_34(D)->nr_processes = 0;
pp_34(D)->output_owner = 0;
pp_34(D)->shutdown = 0;
_1 = (long unsigned int) n_24;
_2 = calloc (_1, 120);
pp_34(D)->children = _2;
_3 = (long unsigned int) n_24;
_4 = calloc (_3, 8);
pp_34(D)->pfd = _4;
_5 = &pp_34(D)->buffered_output;
strbuf_init (_5, 0);
goto <bb 12>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 955630226]:
_6 = pp_34(D)->children;
_7 = (long unsigned int) i_25;
_8 = _7 * 120;
_9 = _6 + _8;
_10 = &_9->err;
strbuf_init (_10, 0);
_11 = pp_34(D)->children;
_12 = (long unsigned int) i_25;
_13 = _12 * 120;
_14 = _11 + _13;
_15 = &_14->process;
child_process_init (_15);
_16 = pp_34(D)->pfd;
_17 = (long unsigned int) i_25;
_18 = _17 * 8;
_19 = _16 + _18;
_19->events = 17;
_20 = pp_34(D)->pfd;
_21 = (long unsigned int) i_25;
_22 = _21 * 8;
_23 = _20 + _22;
_23->fd = -1;
i_58 = i_25 + 1;

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 1073741824]:
# i_25 = PHI <0(10), i_58(11)>
if (n_24 > i_25)
  goto <bb 11>; [89.00%]
else
  goto <bb 13>; [11.00%]

=======is loop:0=========

 bb index 13 
<bb 13> [local count: 118111600]:
return;

=======Mapping node_fun:default_task_finished=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 241635845]:
if (result_14(D) == 0)
  goto <bb 6>; [51.12%]
else
  goto <bb 3>; [48.88%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 118111600]:
strbuf_addf (err_16(D), "A child failed with return code %d:", result_14(D));
goto <bb 5>; [100.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 955630225]:
_1 = cp_18(D)->argv;
_2 = (long unsigned int) i_11;
_3 = _2 * 8;
_4 = _1 + _3;
_5 = *_4;
strbuf_addf (err_16(D), " %s", _5);
i_20 = i_11 + 1;

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 1073741824]:
# i_11 = PHI <0(3), i_20(4)>
_6 = cp_18(D)->argv;
_7 = (long unsigned int) i_11;
_8 = _7 * 8;
_9 = _6 + _8;
_10 = *_9;
if (_10 != 0B)
  goto <bb 4>; [89.00%]
else
  goto <bb 6>; [11.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 241635845]:
return 0;

=======Mapping node_fun:default_start_failure=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
strbuf_addstr (err_14(D), "Starting a child failed:");
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = cp_16(D)->argv;
_2 = (long unsigned int) i_11;
_3 = _2 * 8;
_4 = _1 + _3;
_5 = *_4;
strbuf_addf (err_14(D), " %s", _5);
i_18 = i_11 + 1;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# i_11 = PHI <0(2), i_18(3)>
_6 = cp_16(D)->argv;
_7 = (long unsigned int) i_11;
_8 = _7 * 8;
_9 = _6 + _8;
_10 = *_9;
if (_10 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
return 0;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 2 [0m
[40;34m    gimple free   count : 0 [0m
[40;34m    all ptable point : 99 [0m
[40;34m    analyzable ptable point : 95 [0m
[40;34m    analyzable ptable all point stmt : 180 [0m
[40;34m    used_stmt array stack totalsize of : 0.006128 mb[0m
[40;34m    collect time: : 0.001631 s [0m
[40;34m    mapping time: : 0.003425 s [0m
[40;34m    algorithm time: 0.038229 s [0m
[40;34m    gimple stmt count : : 422 [0m
[40;34m    this report analysis in Mon Jun 20 14:57:58 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.01 (  4%)   0.00 (  0%)   0.01 (  1%)  2157k ( 57%)
 phase opt and generate             :   0.24 ( 92%)   0.49 (100%)   0.73 ( 97%)  1518k ( 40%)
 phase stream in                    :   0.01 (  4%)   0.00 (  0%)   0.01 (  1%)    98k (  3%)
 callgraph functions expansion      :   0.20 ( 77%)   0.43 ( 88%)   0.64 ( 85%)  1197k ( 32%)
 lto stream decompression           :   0.00 (  0%)   0.01 (  2%)   0.01 (  1%)     0  (  0%)
 ipa lto gimple in                  :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)   207k (  5%)
 ipa lto decl in                    :   0.01 (  4%)   0.00 (  0%)   0.01 (  1%)    77k (  2%)
 ipa points-to                      :   0.01 (  4%)   0.02 (  4%)   0.02 (  3%)    17k (  0%)
 cfg cleanup                        :   0.00 (  0%)   0.01 (  2%)   0.00 (  0%)   512  (  0%)
 df scan insns                      :   0.02 (  8%)   0.00 (  0%)   0.01 (  1%)   624  (  0%)
 df live regs                       :   0.01 (  4%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 df live&initialized regs           :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)     0  (  0%)
 df reg dead/unused notes           :   0.00 (  0%)   0.03 (  6%)   0.03 (  4%)    25k (  1%)
 alias analysis                     :   0.01 (  4%)   0.00 (  0%)   0.00 (  0%)    37k (  1%)
 tree CFG cleanup                   :   0.01 (  4%)   0.00 (  0%)   0.00 (  0%)   280  (  0%)
 tree copy propagation              :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)  4936  (  0%)
 tree operand scan                  :   0.00 (  0%)   0.01 (  2%)   0.01 (  1%)    77k (  2%)
 dominator optimization             :   0.02 (  8%)   0.01 (  2%)   0.01 (  1%)    53k (  1%)
 tree CCP                           :   0.00 (  0%)   0.01 (  2%)   0.00 (  0%)  1792  (  0%)
 PHI merge                          :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)  1184  (  0%)
 tree iv optimization               :   0.01 (  4%)   0.01 (  2%)   0.01 (  1%)    33k (  1%)
 tree SSA uncprop                   :   0.01 (  4%)   0.06 ( 12%)   0.07 (  9%)     0  (  0%)
 expand                             :   0.03 ( 12%)   0.09 ( 18%)   0.13 ( 17%)   191k (  5%)
 post expand cleanups               :   0.01 (  4%)   0.00 (  0%)   0.01 (  1%)    10k (  0%)
 forward prop                       :   0.01 (  4%)   0.02 (  4%)   0.01 (  1%)  3192  (  0%)
 dead store elim1                   :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)    13k (  0%)
 loop init                          :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)    87k (  2%)
 loop invariant motion              :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)   576  (  0%)
 combiner                           :   0.00 (  0%)   0.02 (  4%)   0.01 (  1%)    35k (  1%)
 integrated RA                      :   0.02 (  8%)   0.04 (  8%)   0.07 (  9%)   375k ( 10%)
 LRA non-specific                   :   0.00 (  0%)   0.02 (  4%)   0.01 (  1%)  7528  (  0%)
 LRA reload inheritance             :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)     0  (  0%)
 reload CSE regs                    :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)    10k (  0%)
 thread pro- & epilogue             :   0.01 (  4%)   0.02 (  4%)   0.06 (  8%)    36k (  1%)
 combine stack adjustments          :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)     0  (  0%)
 hard reg cprop                     :   0.01 (  4%)   0.00 (  0%)   0.00 (  0%)   192  (  0%)
 final                              :   0.00 (  0%)   0.03 (  6%)   0.02 (  3%)    47k (  1%)
 plugin execution                   :   0.03 ( 12%)   0.02 (  4%)   0.04 (  5%)  4448  (  0%)
 initialize rtl                     :   0.00 (  0%)   0.02 (  4%)   0.04 (  5%)    12k (  0%)
 rest of compilation                :   0.02 (  8%)   0.04 (  8%)   0.06 (  8%)    43k (  1%)
 TOTAL                              :   0.26          0.49          0.75         3776k
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `task_finished':
<artificial>:(.text+0x12): undefined reference to `strbuf_addf'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `no_job':
<artificial>:(.text+0x32): undefined reference to `strbuf_addf'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `default_task_finished':
<artificial>:(.text+0x64): undefined reference to `strbuf_addf'
/usr/bin/ld: <artificial>:(.text+0x8d): undefined reference to `strbuf_addf'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `default_start_failure':
<artificial>:(.text+0xc2): undefined reference to `strbuf_addstr'
/usr/bin/ld: <artificial>:(.text+0xeb): undefined reference to `strbuf_addf'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `pp_init':
<artificial>:(.text+0x143): undefined reference to `trace_printf'
/usr/bin/ld: <artificial>:(.text+0x1ca): undefined reference to `strbuf_init'
/usr/bin/ld: <artificial>:(.text+0x200): undefined reference to `strbuf_init'
/usr/bin/ld: <artificial>:(.text+0x213): undefined reference to `child_process_init'
/usr/bin/ld: <artificial>:(.text+0x24d): undefined reference to `online_cpus'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `pp_start_one':
<artificial>:(.text+0x32c): undefined reference to `start_command'
/usr/bin/ld: <artificial>:(.text+0x375): undefined reference to `strbuf_addbuf'
/usr/bin/ld: <artificial>:(.text+0x388): undefined reference to `strbuf_reset'
/usr/bin/ld: <artificial>:(.text+0x3c6): undefined reference to `strbuf_addbuf'
/usr/bin/ld: <artificial>:(.text+0x3d9): undefined reference to `strbuf_reset'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `child_process_clear':
<artificial>:(.text+0x45f): undefined reference to `argv_array_clear'
/usr/bin/ld: <artificial>:(.text+0x46d): undefined reference to `argv_array_clear'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `finish_command':
<artificial>:(.text+0x490): undefined reference to `wait_or_whine'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `pp_collect_finished':
<artificial>:(.text+0x55f): undefined reference to `child_process_init'
/usr/bin/ld: <artificial>:(.text+0x57d): undefined reference to `strbuf_addbuf'
/usr/bin/ld: <artificial>:(.text+0x590): undefined reference to `strbuf_reset'
/usr/bin/ld: <artificial>:(.text+0x5fe): undefined reference to `strbuf_reset'
/usr/bin/ld: <artificial>:(.text+0x61c): undefined reference to `strbuf_reset'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `run_processes_parallel':
<artificial>:(.text+0x6ae): undefined reference to `pp_buffer_stderr'
/usr/bin/ld: <artificial>:(.text+0x6bb): undefined reference to `pp_output'
/usr/bin/ld: <artificial>:(.text+0x722): undefined reference to `pp_cleanup'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `parallel_next':
<artificial>:(.text+0x74c): undefined reference to `argv_array_pushv'
/usr/bin/ld: <artificial>:(.text+0x75e): undefined reference to `strbuf_addf'
/usr/bin/ld: /tmp/ccorlzX3.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x7bc): undefined reference to `empty_argv'
/usr/bin/ld: <artificial>:(.text+0x7c5): undefined reference to `empty_argv'
/usr/bin/ld: <artificial>:(.text+0x893): undefined reference to `start_command'
/usr/bin/ld: <artificial>:(.text+0x8ca): undefined reference to `run_command'
collect2: error: ld returned 1 exit status
