In file included from ./benchmarks/git/leak_9/git_leak_9.c:12:0:
./benchmarks/git/leak_9/../git.h: In function ‘copy_array’:
./benchmarks/git/leak_9/../git.h:161:3: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
   memcpy(dst, src, st_mult(size, n));
   ^~~~~~
./benchmarks/git/leak_9/../git.h:161:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
./benchmarks/git/leak_9/../git.h:161:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/leak_9/../git.h:161:20: warning: implicit declaration of function ‘st_mult’; did you mean ‘stdout’? [-Wimplicit-function-declaration]
   memcpy(dst, src, st_mult(size, n));
                    ^~~~~~~
                    stdout
./benchmarks/git/leak_9/../git.h: In function ‘move_array’:
./benchmarks/git/leak_9/../git.h:169:3: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
   memmove(dst, src, st_mult(size, n));
   ^~~~~~~
./benchmarks/git/leak_9/../git.h:169:3: warning: incompatible implicit declaration of built-in function ‘memmove’
./benchmarks/git/leak_9/../git.h:169:3: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/leak_9/git_leak_9.c:11:0:
./benchmarks/git/leak_9/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/leak_9/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
 #define xstrdup(a) strdup(a)
                    ^
./benchmarks/git/leak_9/../git.h:174:15: note: in expansion of macro ‘xstrdup’
  return str ? xstrdup(str) : NULL;
               ^~~~~~~
./benchmarks/git/leak_9/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’
 #define xstrdup(a) strdup(a)
                    ^
./benchmarks/git/leak_9/../git.h:174:15: note: in expansion of macro ‘xstrdup’
  return str ? xstrdup(str) : NULL;
               ^~~~~~~
In file included from ./benchmarks/git/leak_9/git_leak_9.c:12:0:
./benchmarks/git/leak_9/../git.h: At top level:
./benchmarks/git/leak_9/../git.h:236:55: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  int (*write_archive)(const struct archiver *, struct archiver_args *);
                                                       ^~~~~~~~~~~~~
./benchmarks/git/leak_9/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/leak_9/../git.h:126:2: warning: incompatible implicit declaration of built-in function ‘memcpy’
  memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));  \
  ^
./benchmarks/git/leak_9/../git.h:407:2: note: in expansion of macro ‘SWAP’
  SWAP(*a, *b);
  ^~~~
./benchmarks/git/leak_9/../git.h:126:2: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));  \
  ^
./benchmarks/git/leak_9/../git.h:407:2: note: in expansion of macro ‘SWAP’
  SWAP(*a, *b);
  ^~~~
./benchmarks/git/leak_9/git_leak_9.c: In function ‘strbuf_grow’:
./benchmarks/git/leak_9/git_leak_9.c:102:6: warning: implicit declaration of function ‘unsigned_add_overflows’; did you mean ‘__builtin_add_overflow’? [-Wimplicit-function-declaration]
  if (unsigned_add_overflows(extra, 1) ||
      ^~~~~~~~~~~~~~~~~~~~~~
      __builtin_add_overflow
In file included from ./benchmarks/git/leak_9/git_leak_9.c:12:0:
./benchmarks/git/leak_9/../git.h:112:8: warning: implicit declaration of function ‘alloc_nr’; did you mean ‘alloca’? [-Wimplicit-function-declaration]
    if (alloc_nr(alloc) < (nr)) \
        ^
./benchmarks/git/leak_9/git_leak_9.c:107:2: note: in expansion of macro ‘ALLOC_GROW’
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c: In function ‘strbuf_release’:
./benchmarks/git/leak_9/git_leak_9.c:117:3: warning: implicit declaration of function ‘strbuf_init’; did you mean ‘strbuf_grow’? [-Wimplicit-function-declaration]
   strbuf_init(sb, 0);
   ^~~~~~~~~~~
   strbuf_grow
./benchmarks/git/leak_9/git_leak_9.c: In function ‘strbuf_readlink’:
./benchmarks/git/leak_9/git_leak_9.c:132:9: warning: implicit declaration of function ‘readlink’; did you mean ‘realloc’? [-Wimplicit-function-declaration]
   len = readlink(path, sb->buf, hint);
         ^~~~~~~~
         realloc
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: implicit declaration of function ‘strbuf_setlen’; did you mean ‘strbuf_readlink’? [-Wimplicit-function-declaration]
    strbuf_setlen(sb, len);
    ^~~~~~~~~~~~~
    strbuf_readlink
./benchmarks/git/leak_9/git_leak_9.c: In function ‘files_read_raw_ref’:
./benchmarks/git/leak_9/git_leak_9.c:154:3: warning: implicit declaration of function ‘files_downcast’ [-Wimplicit-function-declaration]
   files_downcast(ref_store, REF_STORE_READ, "read_raw_ref");
   ^~~~~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:154:3: warning: initialization makes pointer from integer without a cast [-Wint-conversion]
./benchmarks/git/leak_9/git_leak_9.c:165:2: warning: implicit declaration of function ‘strbuf_reset’; did you mean ‘strbuf_release’? [-Wimplicit-function-declaration]
  strbuf_reset(&sb_path);
  ^~~~~~~~~~~~
  strbuf_release
./benchmarks/git/leak_9/git_leak_9.c:167:2: warning: implicit declaration of function ‘files_ref_path’; did you mean ‘files_read_raw_ref’? [-Wimplicit-function-declaration]
  files_ref_path(refs, &sb_path, refname);
  ^~~~~~~~~~~~~~
  files_read_raw_ref
./benchmarks/git/leak_9/git_leak_9.c:191:7: warning: implicit declaration of function ‘resolve_packed_ref’ [-Wimplicit-function-declaration]
   if (resolve_packed_ref(refs, refname, sha1, type)) {
       ^~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:208:9: warning: implicit declaration of function ‘starts_with’ [-Wimplicit-function-declaration]
     if (starts_with(sb_contents.buf, "refs/") &&
         ^~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:209:9: warning: implicit declaration of function ‘check_refname_format’ [-Wimplicit-function-declaration]
        !check_refname_format(sb_contents.buf, 0)) {
         ^~~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:217:6: warning: implicit declaration of function ‘strbuf_read’; did you mean ‘strbuf_swap’? [-Wimplicit-function-declaration]
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
      ^~~~~~~~~~~
      strbuf_swap
./benchmarks/git/leak_9/git_leak_9.c:219:3: warning: implicit declaration of function ‘close’; did you mean ‘pclose’? [-Wimplicit-function-declaration]
   close(fd);
   ^~~~~
   pclose
./benchmarks/git/leak_9/git_leak_9.c:223:2: warning: implicit declaration of function ‘strbuf_rtrim’; did you mean ‘strbuf_grow’? [-Wimplicit-function-declaration]
  strbuf_rtrim(&sb_contents);
  ^~~~~~~~~~~~
  strbuf_grow
./benchmarks/git/leak_9/git_leak_9.c:227:10: warning: implicit declaration of function ‘isspace’ [-Wimplicit-function-declaration]
   while (isspace(*buf))
          ^~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:231:3: warning: implicit declaration of function ‘strbuf_addstr’; did you mean ‘strbuf_readlink’? [-Wimplicit-function-declaration]
   strbuf_addstr(referent, buf);
   ^~~~~~~~~~~~~
   strbuf_readlink
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: implicit declaration of function ‘get_sha1_hex’ [-Wimplicit-function-declaration]
  if (get_sha1_hex(buf, sha1) ||
      ^~~~~~~~~~~~
In file included from ./benchmarks/git/leak_9/git_leak_9.c:11:0:
./benchmarks/git/leak_9/git_leak_9.c: In function ‘lock_raw_ref’:
./benchmarks/git/leak_9/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’
 #define xstrdup(a) strdup(a)
                    ^
./benchmarks/git/leak_9/git_leak_9.c:276:19: note: in expansion of macro ‘xstrdup’
  lock->ref_name = xstrdup(refname);
                   ^~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: implicit declaration of function ‘strbuf_addf’; did you mean ‘strbuf_grow’? [-Wimplicit-function-declaration]
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^~~~~~~~~~~
     strbuf_grow
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: implicit declaration of function ‘unlock_ref’; did you mean ‘funlockfile’? [-Wimplicit-function-declaration]
  unlock_ref(lock);
  ^~~~~~~~~~
  funlockfile
./benchmarks/git/leak_9/git_leak_9.c: In function ‘lock_ref_for_update’:
./benchmarks/git/leak_9/git_leak_9.c:335:9: warning: implicit declaration of function ‘split_head_update’ [-Wimplicit-function-declaration]
   ret = split_head_update(update, transaction, head_ref,
         ^~~~~~~~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:348:12: warning: implicit declaration of function ‘strbuf_detach’; did you mean ‘strbuf_release’? [-Wimplicit-function-declaration]
   reason = strbuf_detach(err, NULL);
            ^~~~~~~~~~~~~
            strbuf_release
./benchmarks/git/leak_9/git_leak_9.c:348:10: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
   reason = strbuf_detach(err, NULL);
          ^
./benchmarks/git/leak_9/git_leak_9.c:350:8: warning: implicit declaration of function ‘original_update_refname’ [-Wimplicit-function-declaration]
        original_update_refname(update), reason);
        ^~~~~~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: implicit declaration of function ‘refs_read_ref_full’ [-Wimplicit-function-declaration]
    if (refs_read_ref_full(&refs->base,
        ^~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: implicit declaration of function ‘check_old_oid’ [-Wimplicit-function-declaration]
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^~~~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:384:10: warning: implicit declaration of function ‘split_symref_update’ [-Wimplicit-function-declaration]
    ret = split_symref_update(refs, update,
          ^~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: implicit declaration of function ‘oidcmp’ [-Wimplicit-function-declaration]
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^~~~~~
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: implicit declaration of function ‘write_ref_to_lockfile’ [-Wimplicit-function-declaration]
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^~~~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:409:22: warning: initialization makes pointer from integer without a cast [-Wint-conversion]
    char *write_err = strbuf_detach(err, NULL);
                      ^~~~~~~~~~~~~
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: implicit declaration of function ‘close_ref’ [-Wimplicit-function-declaration]
   if (close_ref(lock)) {
       ^~~~~~~~~
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
--------GIMPLE Cond -------
succs:= 2
succs:= 2
--------GIMPLE Cond -------
succs:= 2
--------GIMPLE Cond -------
succs:= 2
succs:= 3
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
succs:= 6
--------GIMPLE Cond -------
succs:= 7
--------GIMPLE Cond -------
succs:= 8
succs:= 6
--------GIMPLE Cond -------
succs:= 11
--------GIMPLE Cond -------
succs:= 11
succs:= 12
--------GIMPLE Cond -------
succs:= 12
succs:= 14
succs:= 14
--------GIMPLE Cond -------
succs:= 16
--------GIMPLE Cond -------
succs:= 17
succs:= 17
--------GIMPLE Cond -------
succs:= 20
--------GIMPLE Cond -------
succs:= 20
succs:= 22
--------GIMPLE Cond -------
succs:= 23
--------GIMPLE Cond -------
succs:= 23
succs:= 25
succs:= 22
succs:= 25
--------GIMPLE Cond -------
succs:= 16
succs:= 28
succs:= 28
--------GIMPLE Cond -------
succs:= 30
--------GIMPLE Cond -------
succs:= 30
--------GIMPLE Cond -------
succs:= 32
succs:= 31
succs:= 32
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 31
succs:= 35
succs:= 36
succs:= 36
--------GIMPLE Cond -------
succs:= 38
--------GIMPLE Cond -------
succs:= 39
succs:= 38
--------GIMPLE Cond -------
succs:= 40
--------GIMPLE Cond -------
succs:= 41
succs:= 40
succs:= 41
--------GIMPLE Cond -------
succs:= 43
succs:= 43
--------GIMPLE Cond -------
succs:= 45
--------GIMPLE Cond -------
succs:= 48
succs:= 45
--------GIMPLE Cond -------
succs:= 50
--------GIMPLE Cond -------
succs:= 51
--------GIMPLE Cond -------
succs:= 50
succs:= 52
succs:= 5
succs:= 7
succs:= 8
succs:= 51
succs:= 52
--------GIMPLE Cond -------
succs:= 54
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 55
succs:= 56
succs:= 54
succs:= 55
succs:= 56
--------GIMPLE Cond -------
succs:= 58
succs:= 58
--------GIMPLE Cond -------
succs:= 60
--------GIMPLE Cond -------
succs:= 61
--------GIMPLE Cond -------
succs:= 62
--------GIMPLE Cond -------
succs:= 63
succs:= 62
--------GIMPLE Cond -------
succs:= 61
--------GIMPLE Cond -------
succs:= 60
--------GIMPLE Cond -------
succs:= 63
succs:= 65
succs:= 66
succs:= 67
--------GIMPLE Cond -------
succs:= 68
--------GIMPLE Cond -------
succs:= 69
--------GIMPLE Cond -------
succs:= 69
succs:= 70
--------GIMPLE Cond -------
succs:= 71
succs:= 71
succs:= 68
succs:= 70
--------GIMPLE Cond -------
succs:= 74
--------GIMPLE Cond -------
succs:= 3
succs:= 65
succs:= 66
succs:= 67
succs:= 74
succs:= 75
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
# .MEM_199 = VDEF <.MEM_198>
ret_10 = split_head_update (&update, &transaction, head_ref_2(D), &affected_refnames, &err);
# .MEM_204 = VDEF <.MEM_203>
lock_61 = calloc (1, 40);
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
# .MEM_209 = VDEF <.MEM_208>
_70 = files_downcast (_64, 1, "read_raw_ref");
# .MEM_217 = VDEF <.MEM_216>
strbuf_reset (&sb_path);
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
# .MEM_219 = VDEF <.MEM_177>
_77 = lstat (path_73, &st);
_78 = __errno_location ();
# .MEM_263 = VDEF <.MEM_219>
_80 = resolve_packed_ref (refs_72, _12, _63, _11);
_81 = __errno_location ();
# .MEM_220 = VDEF <.MEM_219>
strbuf_reset (&sb_contents);
# .MEM_221 = VDEF <.MEM_186>
_134 = unsigned_add_overflows (hint_122, 1);
# .MEM_222 = VDEF <.MEM_221>
_137 = unsigned_add_overflows (_136, _135);
# .MEM_240 = VDEF <.MEM_178>
_138 = __printf_chk (1, "you want to use way too much memory%s", "");
# .MEM_224 = VDEF <.MEM_179>
_144 = alloc_nr (_143);
# .MEM_225 = VDEF <.MEM_224>
_153 = alloc_nr (_152);
# .MEM_228 = VDEF <.MEM_180>
_156 = st_mult (1, _155);
# .MEM_233 = VDEF <.MEM_182>
_173 = __printf_chk (1, "Out of memory, realloc failed%s", "");
# .MEM_238 = VDEF <.MEM_185>
len_124 = readlink (path_73, _123, hint_122);
_125 = __errno_location ();
# .MEM_239 = VDEF <.MEM_238>
strbuf_setlen (&sb_contents, len_124);
# .MEM_242 = VDEF <.MEM_187>
strbuf_release (&sb_contents);
_83 = __errno_location ();
# .MEM_244 = VDEF <.MEM_188>
_89 = starts_with (_88, "refs/");
# .MEM_245 = VDEF <.MEM_244>
_91 = check_refname_format (_90, 0);
# .MEM_251 = VDEF <.MEM_189>
strbuf_reset (&sb_contents);
# .MEM_252 = VDEF <.MEM_251>
_95 = strbuf_read (&sb_contents, fd_94(D), 256);
_96 = __errno_location ();
# .MEM_261 = VDEF <.MEM_252>
close (fd_94(D));
_98 = __errno_location ();
# .MEM_253 = VDEF <.MEM_252>
strbuf_rtrim (&sb_contents);
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
# VUSE <.MEM_254>
_106 = isspace (_105);
# .MEM_258 = VDEF <.MEM_254>
strbuf_reset (&referent);
# .MEM_259 = VDEF <.MEM_258>
strbuf_addstr (&referent, buf_102);
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
# VUSE <.MEM_255>
_113 = isspace (_112);
_116 = __errno_location ();
_117 = __errno_location ();
# .MEM_265 = VDEF <.MEM_190>
strbuf_release (&sb_path);
# .MEM_266 = VDEF <.MEM_265>
strbuf_release (&sb_contents);
_119 = __errno_location ();
_66 = __errno_location ();
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
# .MEM_275 = VDEF <.MEM_191>
strbuf_release (&ref_file);
# .MEM_291 = VDEF <.MEM_276>
_15 = strbuf_detach (&err, 0B);
# .MEM_292 = VDEF <.MEM_291>
_18 = original_update_refname (&update);
# .MEM_293 = VDEF <.MEM_292>
strbuf_addf (&err, "cannot lock ref \'%s\': %s", _18, reason_17);
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
# .MEM_283 = VDEF <.MEM_281>
_31 = original_update_refname (&update);
# .MEM_284 = VDEF <.MEM_283>
strbuf_addf (&err, "cannot lock ref \'%s\': error reading reference", _31);
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
# .MEM_280 = VDEF <.MEM_278>
ret_36 = split_symref_update (&refs, &update, _35, &transaction, &affected_refnames, &err);
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
# .MEM_288 = VDEF <.MEM_286>
_51 = strbuf_detach (&err, 0B);
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:strbuf_release========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_release  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;33m =======POP node_fun stack:strbuf_init========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:strbuf_release========= [0m
[40;42m =======start_check_funciton:strbuf_release========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9f549bc9d8
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <parm_decl 0x7f9f544f1280 sb>
    def_stmt GIMPLE_NOP
    version 5
    ptr-info 0x7f9f54503750>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
bb index := 3
# VUSE <.MEM_6>
return;
In function ‘strbuf_release’:
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
strbuf_init (sb_5(D), 0);
./benchmarks/git/leak_9/git_leak_9.c:117:3: warning: use location
   strbuf_init(sb, 0);
   ^
this stmt is child function---strbuf_init-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc9d8
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <parm_decl 0x7f9f544f1280 sb>
    def_stmt GIMPLE_NOP
    version 5
    ptr-info 0x7f9f54503750>
trace fucntion name:strbuf_init 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_2 = sb_5(D)->buf;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_2 = sb_5(D)->buf;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_2 = sb_5(D)->buf;
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_2 = sb_5(D)->buf;
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================
_2 = sb_5(D)->buf;
./benchmarks/git/leak_9/git_leak_9.c:116:10: warning: use location
   free(sb->buf);
          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================
free (_2);
./benchmarks/git/leak_9/git_leak_9.c:116:3: warning: use location
   free(sb->buf);
   ^
this stmt is child function---free-----

 ================== find ================== 
free (_2);
./benchmarks/git/leak_9/git_leak_9.c:116:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = sb_5(D)->alloc;
bb index := 2
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = sb_5(D)->alloc;
bb index := 2
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = sb_5(D)->alloc;
bb index := 2
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = sb_5(D)->alloc;
bb index := 2
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 77

======================================================================
_1 = sb_5(D)->alloc;
./benchmarks/git/leak_9/git_leak_9.c:115:8: warning: use location
  if (sb->alloc) {
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 77

======================================================================
if (_1 != 0)
./benchmarks/git/leak_9/git_leak_9.c:115:5: warning: use location
  if (sb->alloc) {
     ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:115:5: warning: use location
Cond in fucntion strbuf_release basic block 2
 ================== possible direct basic block ================= 
from strbuf_release basic block 3
 ================== possible direct basic block ================= 
from strbuf_release basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f549bc9d8
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <parm_decl 0x7f9f544f1280 sb>
    def_stmt GIMPLE_NOP
    version 5
    ptr-info 0x7f9f54503750>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
./benchmarks/git/leak_9/git_leak_9.c:116:3: warning: use location
   free(sb->buf);
   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
./benchmarks/git/leak_9/git_leak_9.c:116:3: warning: Use after free error!: free location 
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
./benchmarks/git/leak_9/git_leak_9.c:117:3: warning: use location
   strbuf_init(sb, 0);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
./benchmarks/git/leak_9/git_leak_9.c:116:3: warning: Use after free error!: free location 
   free(sb->buf);
   ^
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
./benchmarks/git/leak_9/git_leak_9.c:117:3: warning: use location
   strbuf_init(sb, 0);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_release========= [0m
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 37 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:close_ref========= [0m
[40;33m =======POP node_fun stack:close_ref========= [0m
[40;42m =======pre add _ fucntion:strbuf_detach========= [0m
[40;33m =======POP node_fun stack:strbuf_detach========= [0m
[40;42m =======pre add _ fucntion:write_ref_to_lockfile========= [0m
[40;33m =======POP node_fun stack:write_ref_to_lockfile========= [0m
[40;42m =======pre add _ fucntion:oidcmp========= [0m
[40;33m =======POP node_fun stack:oidcmp========= [0m
[40;42m =======pre add _ fucntion:check_old_oid========= [0m
[40;33m =======POP node_fun stack:check_old_oid========= [0m
[40;42m =======pre add _ fucntion:split_symref_update========= [0m
[40;33m =======POP node_fun stack:split_symref_update========= [0m
[40;42m =======pre add _ fucntion:strbuf_addf========= [0m
[40;33m =======POP node_fun stack:strbuf_addf========= [0m
[40;42m =======pre add _ fucntion:original_update_refname========= [0m
[40;33m =======POP node_fun stack:original_update_refname========= [0m
[40;42m =======pre add _ fucntion:refs_read_ref_full========= [0m
[40;33m =======POP node_fun stack:refs_read_ref_full========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:strbuf_release========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_release  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;33m =======POP node_fun stack:strbuf_init========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:strbuf_release========= [0m
[40;42m =======start_check_funciton:strbuf_release========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9f549bc9d8
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <parm_decl 0x7f9f544f1280 sb>
    def_stmt GIMPLE_NOP
    version 5
    ptr-info 0x7f9f54503750>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
strbuf_init (sb_5(D), 0);
In function ‘main’:
./benchmarks/git/leak_9/git_leak_9.c:117:3: warning: use location
   strbuf_init(sb, 0);
   ^
this stmt is child function---strbuf_init-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc9d8
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <parm_decl 0x7f9f544f1280 sb>
    def_stmt GIMPLE_NOP
    version 5
    ptr-info 0x7f9f54503750>
trace fucntion name:strbuf_init 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_2 = sb_5(D)->buf;
bb index := 3
# VUSE <.MEM_6>
return;
In function ‘strbuf_release’:
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_2 = sb_5(D)->buf;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_2 = sb_5(D)->buf;
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_2 = sb_5(D)->buf;
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================
_2 = sb_5(D)->buf;
In function ‘main’:
./benchmarks/git/leak_9/git_leak_9.c:116:10: warning: use location
   free(sb->buf);
          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
bb index := 3
# VUSE <.MEM_6>
return;
In function ‘strbuf_release’:
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
bb index := 3
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 77

======================================================================
free (_2);
In function ‘main’:
./benchmarks/git/leak_9/git_leak_9.c:116:3: warning: use location
   free(sb->buf);
   ^
this stmt is child function---free-----

 ================== find ================== 
free (_2);
./benchmarks/git/leak_9/git_leak_9.c:116:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = sb_5(D)->alloc;
bb index := 2
# VUSE <.MEM_6>
return;
In function ‘strbuf_release’:
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = sb_5(D)->alloc;
bb index := 2
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = sb_5(D)->alloc;
bb index := 2
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = sb_5(D)->alloc;
bb index := 2
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 77

======================================================================
_1 = sb_5(D)->alloc;
In function ‘main’:
./benchmarks/git/leak_9/git_leak_9.c:115:8: warning: use location
  if (sb->alloc) {
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_6>
return;
In function ‘strbuf_release’:
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 77

======================================================================
if (_1 != 0)
In function ‘main’:
./benchmarks/git/leak_9/git_leak_9.c:115:5: warning: use location
  if (sb->alloc) {
     ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:115:5: warning: use location
Cond in fucntion strbuf_release basic block 2
 ================== possible direct basic block ================= 
from strbuf_release basic block 3
 ================== possible direct basic block ================= 
from strbuf_release basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f549bc9d8
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <parm_decl 0x7f9f544f1280 sb>
    def_stmt GIMPLE_NOP
    version 5
    ptr-info 0x7f9f54503750>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
./benchmarks/git/leak_9/git_leak_9.c:116:3: warning: use location
   free(sb->buf);
   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
./benchmarks/git/leak_9/git_leak_9.c:116:3: warning: Use after free error!: free location 
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
./benchmarks/git/leak_9/git_leak_9.c:117:3: warning: use location
   strbuf_init(sb, 0);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (_2);
./benchmarks/git/leak_9/git_leak_9.c:116:3: warning: Use after free error!: free location 
   free(sb->buf);
   ^
# .MEM_9 = VDEF <.MEM_8>
strbuf_init (sb_5(D), 0);
./benchmarks/git/leak_9/git_leak_9.c:117:3: warning: use location
   strbuf_init(sb, 0);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_release========= [0m
[40;42m =======pre add _ fucntion:unlock_ref========= [0m
[40;33m =======POP node_fun stack:unlock_ref========= [0m
[40;42m =======pre add _ fucntion:__errno_location========= [0m
[40;33m =======POP node_fun stack:__errno_location========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;33m =======POP node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:get_sha1_hex========= [0m
[40;33m =======POP node_fun stack:get_sha1_hex========= [0m
[40;42m =======pre add _ fucntion:strbuf_addstr========= [0m
[40;33m =======POP node_fun stack:strbuf_addstr========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:starts_with========= [0m
[40;33m =======POP node_fun stack:starts_with========= [0m
[40;42m =======pre add _ fucntion:strbuf_rtrim========= [0m
[40;33m =======POP node_fun stack:strbuf_rtrim========= [0m
[40;42m =======pre add _ fucntion:close========= [0m
[40;33m =======POP node_fun stack:close========= [0m
[40;42m =======pre add _ fucntion:strbuf_read========= [0m
[40;33m =======POP node_fun stack:strbuf_read========= [0m
[40;42m =======pre add _ fucntion:check_refname_format========= [0m
[40;33m =======POP node_fun stack:check_refname_format========= [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:readlink========= [0m
[40;33m =======POP node_fun stack:readlink========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:unsigned_add_overflows========= [0m
[40;33m =======POP node_fun stack:unsigned_add_overflows========= [0m
[40;42m =======pre add _ fucntion:resolve_packed_ref========= [0m
[40;33m =======POP node_fun stack:resolve_packed_ref========= [0m
[40;42m =======pre add _ fucntion:lstat========= [0m
[40;33m =======POP node_fun stack:lstat========= [0m
[40;42m =======pre add _ fucntion:files_ref_path========= [0m
[40;33m =======POP node_fun stack:files_ref_path========= [0m
[40;42m =======pre add _ fucntion:files_downcast========= [0m
[40;33m =======POP node_fun stack:files_downcast========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:split_head_update========= [0m
[40;33m =======POP node_fun stack:split_head_update========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
# .MEM_204 = VDEF <.MEM_203>
lock_61 = calloc (1, 40);

 ================== trace ptable================== 
trace fucntion name:calloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---calloc-----
this Reserved word function ------calloc-----
 
 Start check Pointer Collect  

======================================================================
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^
this stmt is child function---unlock_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:unlock_ref 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_61->ref_name = _62;
./benchmarks/git/leak_9/git_leak_9.c:276:17: warning: use location
  lock->ref_name = xstrdup(refname);
                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_61->ref_name = _62;
./benchmarks/git/leak_9/git_leak_9.c:276:17: warning: use location
  lock->ref_name = xstrdup(refname);
                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
lock_299 = lock_61;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
lock_299 = lock_61;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_299 = lock_61;
./benchmarks/git/leak_9/git_leak_9.c:274:10: warning: use location
  *lock_p = lock = xcalloc(1, sizeof(*lock));
          ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^
this stmt is child function---close_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:close_ref 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_59 != 0)
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_59 != 0)
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_59 != 0)
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_59 != 0)
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_59 != 0)
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_59 != 0)
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
if (_59 != 0)
./benchmarks/git/leak_9/git_leak_9.c:427:6: warning: use location
   if (close_ref(lock)) {
      ^
if (_59 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:427:6: warning: use location
Cond in fucntion main basic block 75
 ================== possible direct basic block ================= 
from main basic block 77
 ================== possible direct basic block ================= 
from main basic block 76
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
this stmt is child function---write_ref_to_lockfile-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:write_ref_to_lockfile 

 ================== trace ================== 
trace fucntion free:0 
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
this stmt is child function---oidcmp-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:oidcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^
this stmt is child function---check_old_oid-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:check_old_oid 

 ================== trace ================== 
trace fucntion free:0 
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^
this stmt is child function---refs_read_ref_full-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:refs_read_ref_full 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^
this stmt is child function---check_old_oid-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:check_old_oid 

 ================== trace ================== 
trace fucntion free:0 
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^
if (_43 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
Cond in fucntion main basic block 69
 ================== possible direct basic block ================= 
from main basic block 70
 ================== possible direct basic block ================= 
from main basic block 71
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_63 = &lock_61->old_oid.hash;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_63 = &lock_61->old_oid.hash;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_63 = &lock_61->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:285:11: warning: use location
           lock->old_oid.hash, referent, type)) {
           ^
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
this stmt is child function---isspace-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^
if (_110 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
Cond in fucntion main basic block 51
 ================== possible direct basic block ================= 
from main basic block 52
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^
this stmt is child function---starts_with-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:starts_with 

 ================== trace ================== 
trace fucntion free:0 
_80 = resolve_packed_ref (refs_72, _12, _63, _11);
./benchmarks/git/leak_9/git_leak_9.c:191:7: warning: use location
   if (resolve_packed_ref(refs, refname, sha1, type)) {
       ^
this stmt is child function---resolve_packed_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:resolve_packed_ref 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
files_ref_path (refs_72, &sb_path, _12);
./benchmarks/git/leak_9/git_leak_9.c:167:2: warning: use location
  files_ref_path(refs, &sb_path, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^
this stmt is child function---strbuf_addf-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:strbuf_addf 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
files_ref_path (&refs, &ref_file, _12);
./benchmarks/git/leak_9/git_leak_9.c:277:2: warning: use location
  files_ref_path(refs, &ref_file, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:164:8: warning: use location
  *type = 0;
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:272:8: warning: use location
  *type = 0;
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_204 = VDEF <.MEM_203>
lock_61 = calloc (1, 40);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_204 = VDEF <.MEM_203>
lock_61 = calloc (1, 40);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_61 = calloc (1, 40);
./benchmarks/git/leak_9/git_leak_9.c:274:10: warning: use location
  *lock_p = lock = xcalloc(1, sizeof(*lock));
          ^
this stmt is child function---calloc-----

 ================== trace ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
trace fucntion name:calloc 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f549bc6c0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
    var <var_decl 0x7f9f5451d000 lock>
    def_stmt lock_61 = calloc (1, 40);
    version 61
    ptr-info 0x7f9f54503960>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_59 != 0)
./benchmarks/git/leak_9/git_leak_9.c:427:6: warning: use location
   if (close_ref(lock)) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_59 != 0)
./benchmarks/git/leak_9/git_leak_9.c:427:6: warning: use location
   if (close_ref(lock)) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_59 != 0)
./benchmarks/git/leak_9/git_leak_9.c:427:6: warning: use location
   if (close_ref(lock)) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_59 != 0)
./benchmarks/git/leak_9/git_leak_9.c:427:6: warning: use location
   if (close_ref(lock)) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
if (_59 != 0)
./benchmarks/git/leak_9/git_leak_9.c:427:6: warning: use location
   if (close_ref(lock)) {
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54516ea0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _62 = strdup (_12);
    version 62
    ptr-info 0x7f9f54503978>
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^
this stmt is child function---strbuf_addf-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516ea0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _62 = strdup (_12);
    version 62
    ptr-info 0x7f9f54503978>
trace fucntion name:strbuf_addf 

 ================== trace ================== 
trace fucntion free:0 
_80 = resolve_packed_ref (refs_72, _12, _63, _11);
./benchmarks/git/leak_9/git_leak_9.c:191:7: warning: use location
   if (resolve_packed_ref(refs, refname, sha1, type)) {
       ^
this stmt is child function---resolve_packed_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516ea0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _62 = strdup (_12);
    version 62
    ptr-info 0x7f9f54503978>
trace fucntion name:resolve_packed_ref 

 ================== trace ================== 
trace fucntion free:0 
if (_80 != 0)
./benchmarks/git/leak_9/git_leak_9.c:191:6: warning: use location
   if (resolve_packed_ref(refs, refname, sha1, type)) {
      ^
if (_80 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:191:6: warning: use location
Cond in fucntion main basic block 8
 ================== possible direct basic block ================= 
from main basic block 9
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
files_ref_path (refs_72, &sb_path, _12);
./benchmarks/git/leak_9/git_leak_9.c:167:2: warning: use location
  files_ref_path(refs, &sb_path, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516ea0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _62 = strdup (_12);
    version 62
    ptr-info 0x7f9f54503978>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516ea0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _62 = strdup (_12);
    version 62
    ptr-info 0x7f9f54503978>
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
this stmt is child function---isspace-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516ea0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _62 = strdup (_12);
    version 62
    ptr-info 0x7f9f54503978>
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^
if (_110 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
Cond in fucntion main basic block 51
 ================== possible direct basic block ================= 
from main basic block 52
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^
this stmt is child function---starts_with-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516ea0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _62 = strdup (_12);
    version 62
    ptr-info 0x7f9f54503978>
trace fucntion name:starts_with 

 ================== trace ================== 
trace fucntion free:0 
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:164:8: warning: use location
  *type = 0;
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:272:8: warning: use location
  *type = 0;
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
files_ref_path (&refs, &ref_file, _12);
./benchmarks/git/leak_9/git_leak_9.c:277:2: warning: use location
  files_ref_path(refs, &ref_file, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516ea0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _62 = strdup (_12);
    version 62
    ptr-info 0x7f9f54503978>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_62 = strdup (_12);
./benchmarks/git/leak_9/git_leak_9.c:276:19: warning: use location
  lock->ref_name = xstrdup(refname);
                   ^
this stmt is child function---strdup-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516ea0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _62 = strdup (_12);
    version 62
    ptr-info 0x7f9f54503978>
trace fucntion name:strdup 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_61->ref_name = _62;
./benchmarks/git/leak_9/git_leak_9.c:276:17: warning: use location
  lock->ref_name = xstrdup(refname);
                 ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54516ea0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _62 = strdup (_12);
    version 62
    ptr-info 0x7f9f54503978>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f549bc870
    type <pointer_type 0x7f9f549cf0a8
        type <void_type 0x7f9f549c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f9f549cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f549d4bd0>>
    var <var_decl 0x7f9f5453f1b0 ret>
    def_stmt ret_161 = realloc (_158, _157);
    version 161
    ptr-info 0x7f9f54503bd0>
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_235 = ret_174;
lto1: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^
if (ret_172 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
Cond in fucntion main basic block 25
 ================== possible direct basic block ================= 
from main basic block 26
 ================== possible direct basic block ================= 
from main basic block 27
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_170 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
Cond in fucntion main basic block 23
 ================== possible direct basic block ================= 
from main basic block 24
 ================== possible direct basic block ================= 
from main basic block 25
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_162 = ret_161 == 0B;
./benchmarks/git/leak_9/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_164 = _162 & _163;
./benchmarks/git/leak_9/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_163 = _157 == 0;
./benchmarks/git/leak_9/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f549bc870
    type <pointer_type 0x7f9f549cf0a8
        type <void_type 0x7f9f549c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f9f549cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f549d4bd0>>
    var <var_decl 0x7f9f5453f1b0 ret>
    def_stmt ret_161 = realloc (_158, _157);
    version 161
    ptr-info 0x7f9f54503bd0>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_162 = ret_161 == 0B;
./benchmarks/git/leak_9/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_162 = ret_161 == 0B;
./benchmarks/git/leak_9/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_164 = _162 & _163;
./benchmarks/git/leak_9/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_164 = _162 & _163;
./benchmarks/git/leak_9/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_163 = _157 == 0;
./benchmarks/git/leak_9/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_163 = _157 == 0;
./benchmarks/git/leak_9/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f545403a8
    type <pointer_type 0x7f9f549cf0a8
        type <void_type 0x7f9f549c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f9f549cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f549d4bd0>>
    var <var_decl 0x7f9f5453f1b0 ret>
    def_stmt ret_165 = realloc (_158, 1);
    version 165
    ptr-info 0x7f9f54503be8>
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_235 = ret_174;
lto1: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^
if (ret_172 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
Cond in fucntion main basic block 25
 ================== possible direct basic block ================= 
from main basic block 26
 ================== possible direct basic block ================= 
from main basic block 27
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_170 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
Cond in fucntion main basic block 23
 ================== possible direct basic block ================= 
from main basic block 24
 ================== possible direct basic block ================= 
from main basic block 25
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f545403a8
    type <pointer_type 0x7f9f549cf0a8
        type <void_type 0x7f9f549c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f9f549cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f549d4bd0>>
    var <var_decl 0x7f9f5453f1b0 ret>
    def_stmt ret_165 = realloc (_158, 1);
    version 165
    ptr-info 0x7f9f54503be8>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54540438
    type <pointer_type 0x7f9f549cf0a8
        type <void_type 0x7f9f549c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f9f549cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f549d4bd0>>
    var <var_decl 0x7f9f5453f1b0 ret>
    def_stmt ret_167 = realloc (_158, _157);
    version 167
    ptr-info 0x7f9f54503c18>
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_235 = ret_174;
lto1: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^
if (ret_172 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
Cond in fucntion main basic block 25
 ================== possible direct basic block ================= 
from main basic block 26
 ================== possible direct basic block ================= 
from main basic block 27
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_170 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
Cond in fucntion main basic block 23
 ================== possible direct basic block ================= 
from main basic block 24
 ================== possible direct basic block ================= 
from main basic block 25
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_162 = ret_161 == 0B;
./benchmarks/git/leak_9/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_164 = _162 & _163;
./benchmarks/git/leak_9/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_163 = _157 == 0;
./benchmarks/git/leak_9/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54540438
    type <pointer_type 0x7f9f549cf0a8
        type <void_type 0x7f9f549c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f9f549cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f549d4bd0>>
    var <var_decl 0x7f9f5453f1b0 ret>
    def_stmt ret_167 = realloc (_158, _157);
    version 167
    ptr-info 0x7f9f54503c18>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_168 = ret_167 == 0B;
./benchmarks/git/leak_9/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_170 = _168 & _169;
./benchmarks/git/leak_9/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_170 != 0)
./benchmarks/git/leak_9/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_162 = ret_161 == 0B;
./benchmarks/git/leak_9/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_162 = ret_161 == 0B;
./benchmarks/git/leak_9/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_164 = _162 & _163;
./benchmarks/git/leak_9/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_164 = _162 & _163;
./benchmarks/git/leak_9/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_169 = _157 == 0;
./benchmarks/git/leak_9/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_163 = _157 == 0;
./benchmarks/git/leak_9/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_163 = _157 == 0;
./benchmarks/git/leak_9/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54540558
    type <pointer_type 0x7f9f549cf0a8
        type <void_type 0x7f9f549c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f9f549cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f549d4bd0>>
    var <var_decl 0x7f9f5453f1b0 ret>
    def_stmt ret_171 = realloc (_158, 1);
    version 171
    ptr-info 0x7f9f54503c30>
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_235 = ret_174;
lto1: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^
if (ret_172 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
Cond in fucntion main basic block 25
 ================== possible direct basic block ================= 
from main basic block 26
 ================== possible direct basic block ================= 
from main basic block 27
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_162 = ret_161 == 0B;
./benchmarks/git/leak_9/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_164 = _162 & _163;
./benchmarks/git/leak_9/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_164 != 0)
./benchmarks/git/leak_9/../git.h:415:5: warning: use location
  if (!ret && !size)
     ^
if (_164 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/../git.h:415:5: warning: use location
Cond in fucntion main basic block 20
 ================== possible direct basic block ================= 
from main basic block 21
 ================== possible direct basic block ================= 
from main basic block 22
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54540558
    type <pointer_type 0x7f9f549cf0a8
        type <void_type 0x7f9f549c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f9f549cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f549d4bd0>>
    var <var_decl 0x7f9f5453f1b0 ret>
    def_stmt ret_171 = realloc (_158, 1);
    version 171
    ptr-info 0x7f9f54503c30>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_172 = PHI <ret_167(23), ret_171(24)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_174 = PHI <ret_166(22), ret_172(25)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_235 = ret_174;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_159 = _235;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_236 = VDEF <.MEM_183>
sb_contents.buf = _159;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_175 = ret_174;
./benchmarks/git/leak_9/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_172 == 0B)
./benchmarks/git/leak_9/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
ret_166 = PHI <ret_161(20), ret_165(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_162 = ret_161 == 0B;
./benchmarks/git/leak_9/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_162 = ret_161 == 0B;
./benchmarks/git/leak_9/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_164 = _162 & _163;
./benchmarks/git/leak_9/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_164 = _162 & _163;
./benchmarks/git/leak_9/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_164 != 0)
./benchmarks/git/leak_9/../git.h:415:5: warning: use location
  if (!ret && !size)
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_164 != 0)
./benchmarks/git/leak_9/../git.h:415:5: warning: use location
  if (!ret && !size)
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f54511020
    type <pointer_type 0x7f9f544e5150
        type <record_type 0x7f9f544e51f8 ref_update BLK
            size <integer_cst 0x7f9f54a6dc30 constant 640>
            unit size <integer_cst 0x7f9f544e1270 constant 80>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e51f8 fields <field_decl 0x7f9f544e61c8 new_oid> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5150> chain <type_decl 0x7f9f544e6260 D.4014>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e52a0>>
   
    arg 0 <var_decl 0x7f9f54506090 update type <record_type 0x7f9f544e51f8 ref_update>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 437 col 23 size <integer_cst 0x7f9f54a6dc30 640> unit size <integer_cst 0x7f9f544e1270 80>
        align 128 context <function_decl 0x7f9f544dfb00 main>
        chain <var_decl 0x7f9f54506000 transaction type <record_type 0x7f9f544e5498 ref_transaction>
            addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 438 col 28
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 128 context <function_decl 0x7f9f544dfb00 main> chain <var_decl 0x7f9f5574af30 head_ref>>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f9f54503348 type <integer_type 0x7f9f544de9d8 size_t> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
_12 = &update.refname;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^
this stmt is child function---strbuf_addf-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:strbuf_addf 

 ================== trace ================== 
trace fucntion free:0 
_80 = resolve_packed_ref (refs_72, _12, _63, _11);
./benchmarks/git/leak_9/git_leak_9.c:191:7: warning: use location
   if (resolve_packed_ref(refs, refname, sha1, type)) {
       ^
this stmt is child function---resolve_packed_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:resolve_packed_ref 

 ================== trace ================== 
trace fucntion free:0 
if (_80 != 0)
./benchmarks/git/leak_9/git_leak_9.c:191:6: warning: use location
   if (resolve_packed_ref(refs, refname, sha1, type)) {
      ^
if (_80 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:191:6: warning: use location
Cond in fucntion main basic block 8
 ================== possible direct basic block ================= 
from main basic block 9
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
files_ref_path (refs_72, &sb_path, _12);
./benchmarks/git/leak_9/git_leak_9.c:167:2: warning: use location
  files_ref_path(refs, &sb_path, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
this stmt is child function---isspace-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^
if (_110 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
Cond in fucntion main basic block 51
 ================== possible direct basic block ================= 
from main basic block 52
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^
this stmt is child function---starts_with-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:starts_with 

 ================== trace ================== 
trace fucntion free:0 
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:164:8: warning: use location
  *type = 0;
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:272:8: warning: use location
  *type = 0;
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
files_ref_path (&refs, &ref_file, _12);
./benchmarks/git/leak_9/git_leak_9.c:277:2: warning: use location
  files_ref_path(refs, &ref_file, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_62 = strdup (_12);
./benchmarks/git/leak_9/git_leak_9.c:276:19: warning: use location
  lock->ref_name = xstrdup(refname);
                   ^
this stmt is child function---strdup-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:strdup 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_61->ref_name = _62;
./benchmarks/git/leak_9/git_leak_9.c:276:17: warning: use location
  lock->ref_name = xstrdup(refname);
                 ^
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^
this stmt is child function---unlock_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:unlock_ref 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
lock_299 = lock_61;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
lock_299 = lock_61;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_299 = lock_61;
./benchmarks/git/leak_9/git_leak_9.c:274:10: warning: use location
  *lock_p = lock = xcalloc(1, sizeof(*lock));
          ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^
this stmt is child function---close_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:close_ref 

 ================== trace ================== 
trace fucntion free:0 
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
this stmt is child function---write_ref_to_lockfile-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:write_ref_to_lockfile 

 ================== trace ================== 
trace fucntion free:0 
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
this stmt is child function---oidcmp-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:oidcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^
this stmt is child function---check_old_oid-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:check_old_oid 

 ================== trace ================== 
trace fucntion free:0 
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^
this stmt is child function---refs_read_ref_full-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:refs_read_ref_full 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^
this stmt is child function---check_old_oid-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
trace fucntion name:check_old_oid 

 ================== trace ================== 
trace fucntion free:0 
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^
if (_43 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
Cond in fucntion main basic block 69
 ================== possible direct basic block ================= 
from main basic block 70
 ================== possible direct basic block ================= 
from main basic block 71
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_63 = &lock_61->old_oid.hash;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_63 = &lock_61->old_oid.hash;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_63 = &lock_61->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:285:11: warning: use location
           lock->old_oid.hash, referent, type)) {
           ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5450f6c0
    type <pointer_type 0x7f9f544ed930
        type <array_type 0x7f9f544de5e8 type <integer_type 0x7f9f544debd0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f9f544de498>
            pointer_to_this <pointer_type 0x7f9f544ed930>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = &update.refname;
    version 12
    ptr-info 0x7f9f54503798>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f54511fc0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54506120 refs type <record_type 0x7f9f544e5930 files_ref_store>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 436 col 28 size <integer_cst 0x7f9f544e1318 384> unit size <integer_cst 0x7f9f544e1288 48>
        align 128 context <function_decl 0x7f9f544dfb00 main>
        chain <var_decl 0x7f9f54506090 update type <record_type 0x7f9f544e51f8 ref_update>
            addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 437 col 23
            size <integer_cst 0x7f9f54a6dc30 constant 640>
            unit size <integer_cst 0x7f9f544e1270 constant 80>
            align 128 context <function_decl 0x7f9f544dfb00 main> chain <var_decl 0x7f9f54506000 transaction>>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
_64 = &refs.base;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_209 = VDEF <.MEM_208>
_70 = files_downcast (_64, 1, "read_raw_ref");
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_209 = VDEF <.MEM_208>
_70 = files_downcast (_64, 1, "read_raw_ref");
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_70 = files_downcast (_64, 1, "read_raw_ref");
./benchmarks/git/leak_9/git_leak_9.c:154:3: warning: use location
   files_downcast(ref_store, REF_STORE_READ, "read_raw_ref");
   ^
this stmt is child function---files_downcast-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:files_downcast 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_71 = (long int) _70;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_71 = (long int) _70;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_71 = (long int) _70;
./benchmarks/git/leak_9/git_leak_9.c:154:3: warning: use location
   files_downcast(ref_store, REF_STORE_READ, "read_raw_ref");
   ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
refs_72 = (struct files_ref_store *) _71;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
refs_72 = (struct files_ref_store *) _71;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
refs_72 = (struct files_ref_store *) _71;
./benchmarks/git/leak_9/git_leak_9.c:153:26: warning: use location
  struct files_ref_store *refs =
                          ^
_80 = resolve_packed_ref (refs_72, _12, _63, _11);
./benchmarks/git/leak_9/git_leak_9.c:191:7: warning: use location
   if (resolve_packed_ref(refs, refname, sha1, type)) {
       ^
this stmt is child function---resolve_packed_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:resolve_packed_ref 

 ================== trace ================== 
trace fucntion free:0 
if (_80 != 0)
./benchmarks/git/leak_9/git_leak_9.c:191:6: warning: use location
   if (resolve_packed_ref(refs, refname, sha1, type)) {
      ^
if (_80 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:191:6: warning: use location
Cond in fucntion main basic block 8
 ================== possible direct basic block ================= 
from main basic block 9
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^
this stmt is child function---strbuf_addf-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:strbuf_addf 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
files_ref_path (refs_72, &sb_path, _12);
./benchmarks/git/leak_9/git_leak_9.c:167:2: warning: use location
  files_ref_path(refs, &sb_path, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
files_ref_path (&refs, &ref_file, _12);
./benchmarks/git/leak_9/git_leak_9.c:277:2: warning: use location
  files_ref_path(refs, &ref_file, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_62 = strdup (_12);
./benchmarks/git/leak_9/git_leak_9.c:276:19: warning: use location
  lock->ref_name = xstrdup(refname);
                   ^
this stmt is child function---strdup-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:strdup 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_61->ref_name = _62;
./benchmarks/git/leak_9/git_leak_9.c:276:17: warning: use location
  lock->ref_name = xstrdup(refname);
                 ^
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^
this stmt is child function---unlock_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:unlock_ref 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
lock_299 = lock_61;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
lock_299 = lock_61;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_299 = lock_61;
./benchmarks/git/leak_9/git_leak_9.c:274:10: warning: use location
  *lock_p = lock = xcalloc(1, sizeof(*lock));
          ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^
this stmt is child function---close_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:close_ref 

 ================== trace ================== 
trace fucntion free:0 
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
this stmt is child function---write_ref_to_lockfile-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:write_ref_to_lockfile 

 ================== trace ================== 
trace fucntion free:0 
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
this stmt is child function---oidcmp-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:oidcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^
this stmt is child function---check_old_oid-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:check_old_oid 

 ================== trace ================== 
trace fucntion free:0 
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^
this stmt is child function---refs_read_ref_full-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:refs_read_ref_full 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^
this stmt is child function---check_old_oid-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:check_old_oid 

 ================== trace ================== 
trace fucntion free:0 
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^
if (_43 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
Cond in fucntion main basic block 69
 ================== possible direct basic block ================= 
from main basic block 70
 ================== possible direct basic block ================= 
from main basic block 71
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_63 = &lock_61->old_oid.hash;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_63 = &lock_61->old_oid.hash;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_63 = &lock_61->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:285:11: warning: use location
           lock->old_oid.hash, referent, type)) {
           ^
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
this stmt is child function---isspace-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^
if (_110 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
Cond in fucntion main basic block 51
 ================== possible direct basic block ================= 
from main basic block 52
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^
this stmt is child function---starts_with-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
trace fucntion name:starts_with 

 ================== trace ================== 
trace fucntion free:0 
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:164:8: warning: use location
  *type = 0;
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:272:8: warning: use location
  *type = 0;
        ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54516f30
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _64 = &refs.base;
    version 64
    ptr-info 0x7f9f545039a8>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5451ea60
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54526990 sb_path type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 156 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d870 sb_path>
        chain <var_decl 0x7f9f54526a20 path type <pointer_type 0x7f9f544dec78>
            used unsigned DI file ./benchmarks/git/leak_9/git_leak_9.c line 157 col 14 size <integer_cst 0x7f9f549b4be8 64> unit size <integer_cst 0x7f9f549b4c00 8>
            align 64 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d7e0 path> chain <var_decl 0x7f9f54526ab0 buf>>>
    ./benchmarks/git/leak_9/git_leak_9.c:165:2 start: ./benchmarks/git/leak_9/git_leak_9.c:165:2 finish: ./benchmarks/git/leak_9/git_leak_9.c:165:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
refs_72 = (struct files_ref_store *) _71;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_80 = resolve_packed_ref (refs_72, _12, _63, _11);
./benchmarks/git/leak_9/git_leak_9.c:191:7: warning: use location
   if (resolve_packed_ref(refs, refname, sha1, type)) {
       ^
this stmt is child function---resolve_packed_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:resolve_packed_ref 

 ================== trace ================== 
trace fucntion free:0 
if (_80 != 0)
./benchmarks/git/leak_9/git_leak_9.c:191:6: warning: use location
   if (resolve_packed_ref(refs, refname, sha1, type)) {
      ^
if (_80 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:191:6: warning: use location
Cond in fucntion main basic block 8
 ================== possible direct basic block ================= 
from main basic block 9
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^
this stmt is child function---strbuf_addf-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:strbuf_addf 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
files_ref_path (refs_72, &sb_path, _12);
./benchmarks/git/leak_9/git_leak_9.c:167:2: warning: use location
  files_ref_path(refs, &sb_path, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================

 Expand conflict 
 The same function may have multiple branches :files_ref_path
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
./benchmarks/git/leak_9/git_leak_9.c:167:2: warning: use location
  files_ref_path(refs, &sb_path, refname);
  ^
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
./benchmarks/git/leak_9/git_leak_9.c:277:2: warning: use location
  files_ref_path(refs, &ref_file, refname);
  ^
=======================Path Constaint===========================

=succs:= 2
if (head_ref_2(D) != 0B)
./benchmarks/git/leak_9/git_leak_9.c:334:5: warning: use location
  if (head_ref) {
     ^
	relate logic:= 0
=======================Path Constaint===========================

=======================Path Constaint===========================

=succs:= 3
if (ret_10 != 0)
./benchmarks/git/leak_9/git_leak_9.c:337:6: warning: use location
   if (ret)
      ^
	relate logic:= 0
=succs:= 2
if (head_ref_2(D) != 0B)
./benchmarks/git/leak_9/git_leak_9.c:334:5: warning: use location
  if (head_ref) {
     ^
	relate logic:= 1
=======================Path Constaint===========================


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_62 = strdup (_12);
./benchmarks/git/leak_9/git_leak_9.c:276:19: warning: use location
  lock->ref_name = xstrdup(refname);
                   ^
this stmt is child function---strdup-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:strdup 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_61->ref_name = _62;
./benchmarks/git/leak_9/git_leak_9.c:276:17: warning: use location
  lock->ref_name = xstrdup(refname);
                 ^
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^
this stmt is child function---unlock_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:unlock_ref 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
lock_299 = lock_61;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
lock_299 = lock_61;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_299 = lock_61;
./benchmarks/git/leak_9/git_leak_9.c:274:10: warning: use location
  *lock_p = lock = xcalloc(1, sizeof(*lock));
          ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^
this stmt is child function---close_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:close_ref 

 ================== trace ================== 
trace fucntion free:0 
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
this stmt is child function---write_ref_to_lockfile-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:write_ref_to_lockfile 

 ================== trace ================== 
trace fucntion free:0 
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
this stmt is child function---oidcmp-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:oidcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^
this stmt is child function---check_old_oid-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:check_old_oid 

 ================== trace ================== 
trace fucntion free:0 
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^
this stmt is child function---refs_read_ref_full-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:refs_read_ref_full 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^
this stmt is child function---check_old_oid-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:check_old_oid 

 ================== trace ================== 
trace fucntion free:0 
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^
if (_43 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
Cond in fucntion main basic block 69
 ================== possible direct basic block ================= 
from main basic block 70
 ================== possible direct basic block ================= 
from main basic block 71
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_63 = &lock_61->old_oid.hash;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_63 = &lock_61->old_oid.hash;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_63 = &lock_61->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:285:11: warning: use location
           lock->old_oid.hash, referent, type)) {
           ^
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
this stmt is child function---isspace-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^
if (_110 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
Cond in fucntion main basic block 51
 ================== possible direct basic block ================= 
from main basic block 52
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^
this stmt is child function---starts_with-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
trace fucntion name:starts_with 

 ================== trace ================== 
trace fucntion free:0 
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:164:8: warning: use location
  *type = 0;
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:272:8: warning: use location
  *type = 0;
        ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54521cf0
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526870 refs>
    def_stmt refs_72 = (struct files_ref_store *) _71;
    version 72
    ptr-info 0x7f9f545039d8>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54521d38
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526a20 path>
    def_stmt path_73 = sb_path.buf;
    version 73
    ptr-info 0x7f9f545039f0>
# VUSE <.MEM_218>
path_73 = sb_path.buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
len_124 = readlink (path_73, _123, hint_122);
./benchmarks/git/leak_9/git_leak_9.c:132:7: warning: use location
   len = readlink(path, sb->buf, hint);
       ^
this stmt is child function---readlink-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521d38
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526a20 path>
    def_stmt path_73 = sb_path.buf;
    version 73
    ptr-info 0x7f9f545039f0>
trace fucntion name:readlink 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_setlen (&sb_contents, len_124);
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: use location
    strbuf_setlen(sb, len);
    ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521d38
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526a20 path>
    def_stmt path_73 = sb_path.buf;
    version 73
    ptr-info 0x7f9f545039f0>
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_127 = (long unsigned int) len_124;
./benchmarks/git/leak_9/git_leak_9.c:136:18: warning: use location
   } else if (len < hint) {
                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (len_124 < 0)
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
   if (len < 0) {
      ^
if (len_124 < 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
Cond in fucntion main basic block 30
 ================== possible direct basic block ================= 
from main basic block 31
 ================== possible direct basic block ================= 
from main basic block 32
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_134 = unsigned_add_overflows (hint_122, 1);
./benchmarks/git/leak_9/git_leak_9.c:102:6: warning: use location
  if (unsigned_add_overflows(extra, 1) ||
      ^
this stmt is child function---unsigned_add_overflows-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521d38
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526a20 path>
    def_stmt path_73 = sb_path.buf;
    version 73
    ptr-info 0x7f9f545039f0>
trace fucntion name:unsigned_add_overflows 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_150 = hint_122 + _149;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_151 = _150 + 1;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_contents.alloc = _151;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_147 = hint_122 + _146;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_148 = _147 + 1;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_140 = hint_122 + _139;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_141 = _140 + 1;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_141 > _142)
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
if (_141 > _142)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
Cond in fucntion main basic block 16
 ================== possible direct basic block ================= 
from main basic block 17
 ================== possible direct basic block ================= 
from main basic block 28
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (hint_122 <= 8191)
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
  while (hint < STRBUF_MAXLINK) {
        ^
if (hint_122 <= 8191)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
Cond in fucntion main basic block 35
 ================== possible direct basic block ================= 
from main basic block 11
 ================== possible direct basic block ================= 
from main basic block 36
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hint_128 = hint_122 * 2;
./benchmarks/git/leak_9/git_leak_9.c:142:8: warning: use location
   hint *= 2;
        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_77 = lstat (path_73, &st);
./benchmarks/git/leak_9/git_leak_9.c:188:6: warning: use location
  if (lstat(path, &st) < 0) {
      ^
this stmt is child function---lstat-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521d38
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526a20 path>
    def_stmt path_73 = sb_path.buf;
    version 73
    ptr-info 0x7f9f545039f0>
trace fucntion name:lstat 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_77 = lstat (path_73, &st);
./benchmarks/git/leak_9/git_leak_9.c:188:6: warning: use location
this stmt is child function---lstat-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521d38
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526a20 path>
    def_stmt path_73 = sb_path.buf;
    version 73
    ptr-info 0x7f9f545039f0>
trace fucntion name:lstat 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54521d38
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526a20 path>
    def_stmt path_73 = sb_path.buf;
    version 73
    ptr-info 0x7f9f545039f0>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_238 = VDEF <.MEM_185>
len_124 = readlink (path_73, _123, hint_122);
./benchmarks/git/leak_9/git_leak_9.c:132:7: warning: use location
   len = readlink(path, sb->buf, hint);
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_238 = VDEF <.MEM_185>
len_124 = readlink (path_73, _123, hint_122);
./benchmarks/git/leak_9/git_leak_9.c:132:7: warning: use location
   len = readlink(path, sb->buf, hint);
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_238 = VDEF <.MEM_185>
len_124 = readlink (path_73, _123, hint_122);
./benchmarks/git/leak_9/git_leak_9.c:132:7: warning: use location
   len = readlink(path, sb->buf, hint);
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_238 = VDEF <.MEM_185>
len_124 = readlink (path_73, _123, hint_122);
./benchmarks/git/leak_9/git_leak_9.c:132:7: warning: use location
   len = readlink(path, sb->buf, hint);
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_239 = VDEF <.MEM_238>
strbuf_setlen (&sb_contents, len_124);
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: use location
    strbuf_setlen(sb, len);
    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_239 = VDEF <.MEM_238>
strbuf_setlen (&sb_contents, len_124);
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: use location
    strbuf_setlen(sb, len);
    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_239 = VDEF <.MEM_238>
strbuf_setlen (&sb_contents, len_124);
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: use location
    strbuf_setlen(sb, len);
    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_239 = VDEF <.MEM_238>
strbuf_setlen (&sb_contents, len_124);
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: use location
    strbuf_setlen(sb, len);
    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_127 = (long unsigned int) len_124;
./benchmarks/git/leak_9/git_leak_9.c:136:18: warning: use location
   } else if (len < hint) {
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_127 = (long unsigned int) len_124;
./benchmarks/git/leak_9/git_leak_9.c:136:18: warning: use location
   } else if (len < hint) {
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_127 = (long unsigned int) len_124;
./benchmarks/git/leak_9/git_leak_9.c:136:18: warning: use location
   } else if (len < hint) {
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_127 = (long unsigned int) len_124;
./benchmarks/git/leak_9/git_leak_9.c:136:18: warning: use location
   } else if (len < hint) {
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (len_124 < 0)
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
   if (len < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (len_124 < 0)
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
   if (len < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (len_124 < 0)
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
   if (len < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (len_124 < 0)
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
   if (len < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (hint_122 <= 8191)
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
  while (hint < STRBUF_MAXLINK) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (hint_122 <= 8191)
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
  while (hint < STRBUF_MAXLINK) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (hint_122 <= 8191)
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
  while (hint < STRBUF_MAXLINK) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (hint_122 <= 8191)
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
  while (hint < STRBUF_MAXLINK) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
hint_128 = hint_122 * 2;
./benchmarks/git/leak_9/git_leak_9.c:142:8: warning: use location
   hint *= 2;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
hint_128 = hint_122 * 2;
./benchmarks/git/leak_9/git_leak_9.c:142:8: warning: use location
   hint *= 2;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
hint_128 = hint_122 * 2;
./benchmarks/git/leak_9/git_leak_9.c:142:8: warning: use location
   hint *= 2;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
hint_128 = hint_122 * 2;
./benchmarks/git/leak_9/git_leak_9.c:142:8: warning: use location
   hint *= 2;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54521ea0
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _78 = __errno_location ();
    version 78
    ptr-info 0x7f9f54503a08>
_78 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================
_79 = *_78;
./benchmarks/git/leak_9/git_leak_9.c:189:7: warning: use location
   if (errno != ENOENT)
       ^
if (_79 != 2)
./benchmarks/git/leak_9/git_leak_9.c:189:6: warning: use location
   if (errno != ENOENT)
      ^
if (_79 != 2)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:189:6: warning: use location
Cond in fucntion main basic block 7
 ================== possible direct basic block ================= 
from main basic block 54
 ================== possible direct basic block ================= 
from main basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_78 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:189:7: warning: use location
   if (errno != ENOENT)
       ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521ea0
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _78 = __errno_location ();
    version 78
    ptr-info 0x7f9f54503a08>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54521ea0
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _78 = __errno_location ();
    version 78
    ptr-info 0x7f9f54503a08>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54521f78
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _81 = __errno_location ();
    version 81
    ptr-info 0x7f9f54503a20>
_81 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================
*_81 = 2;
./benchmarks/git/leak_9/git_leak_9.c:192:10: warning: use location
    errno = ENOENT;
          ^
_81 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:192:4: warning: use location
    errno = ENOENT;
    ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f9f54521f78
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _81 = __errno_location ();
    version 81
    ptr-info 0x7f9f54503a20>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54521f78
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _81 = __errno_location ();
    version 81
    ptr-info 0x7f9f54503a20>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5451eca0
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54526900 sb_contents type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 155 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d900 sb_contents>
        chain <var_decl 0x7f9f54526990 sb_path type <record_type 0x7f9f544dea80 strbuf>
            addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 156 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
            align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d870 sb_path> chain <var_decl 0x7f9f54526a20 path>>>
    ./benchmarks/git/leak_9/git_leak_9.c:200:5 start: ./benchmarks/git/leak_9/git_leak_9.c:200:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:200:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54533168
    type <integer_type 0x7f9f544de9d8 size_t public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
    var <var_decl 0x7f9f5452be10 hint>
    def_stmt hint_122 = PHI <32(10), hint_128(34)>
    version 122>
hint_122 = PHI <32(10), hint_128(34)>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
len_124 = readlink (path_73, _123, hint_122);
./benchmarks/git/leak_9/git_leak_9.c:132:7: warning: use location
   len = readlink(path, sb->buf, hint);
       ^
this stmt is child function---readlink-----

 ================== trace ================== 
 <ssa_name 0x7f9f54533168
    type <integer_type 0x7f9f544de9d8 size_t public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
    var <var_decl 0x7f9f5452be10 hint>
    def_stmt hint_122 = PHI <32(10), hint_128(34)>
    version 122>
trace fucntion name:readlink 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_setlen (&sb_contents, len_124);
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: use location
    strbuf_setlen(sb, len);
    ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
 <ssa_name 0x7f9f54533168
    type <integer_type 0x7f9f544de9d8 size_t public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
    var <var_decl 0x7f9f5452be10 hint>
    def_stmt hint_122 = PHI <32(10), hint_128(34)>
    version 122>
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_127 = (long unsigned int) len_124;
./benchmarks/git/leak_9/git_leak_9.c:136:18: warning: use location
   } else if (len < hint) {
                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (len_124 < 0)
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
   if (len < 0) {
      ^
if (len_124 < 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
Cond in fucntion main basic block 30
 ================== possible direct basic block ================= 
from main basic block 31
 ================== possible direct basic block ================= 
from main basic block 32
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_77 = lstat (path_73, &st);
./benchmarks/git/leak_9/git_leak_9.c:188:6: warning: use location
  if (lstat(path, &st) < 0) {
      ^
this stmt is child function---lstat-----

 ================== trace ================== 
 <ssa_name 0x7f9f54533168
    type <integer_type 0x7f9f544de9d8 size_t public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
    var <var_decl 0x7f9f5452be10 hint>
    def_stmt hint_122 = PHI <32(10), hint_128(34)>
    version 122>
trace fucntion name:lstat 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_134 = unsigned_add_overflows (hint_122, 1);
./benchmarks/git/leak_9/git_leak_9.c:102:6: warning: use location
  if (unsigned_add_overflows(extra, 1) ||
      ^
this stmt is child function---unsigned_add_overflows-----

 ================== trace ================== 
 <ssa_name 0x7f9f54533168
    type <integer_type 0x7f9f544de9d8 size_t public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
    var <var_decl 0x7f9f5452be10 hint>
    def_stmt hint_122 = PHI <32(10), hint_128(34)>
    version 122>
trace fucntion name:unsigned_add_overflows 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_150 = hint_122 + _149;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_151 = _150 + 1;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_contents.alloc = _151;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_147 = hint_122 + _146;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_148 = _147 + 1;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_140 = hint_122 + _139;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_141 = _140 + 1;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_141 > _142)
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
if (_141 > _142)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
Cond in fucntion main basic block 16
 ================== possible direct basic block ================= 
from main basic block 17
 ================== possible direct basic block ================= 
from main basic block 28
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (hint_122 <= 8191)
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
  while (hint < STRBUF_MAXLINK) {
        ^
if (hint_122 <= 8191)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
Cond in fucntion main basic block 35
 ================== possible direct basic block ================= 
from main basic block 11
 ================== possible direct basic block ================= 
from main basic block 36
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hint_128 = hint_122 * 2;
./benchmarks/git/leak_9/git_leak_9.c:142:8: warning: use location
   hint *= 2;
        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hint_122 = PHI <32(10), hint_128(34)>
lto1: warning: use location
this stmt have mutiple branch --------

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54533168
    type <integer_type 0x7f9f544de9d8 size_t public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
    var <var_decl 0x7f9f5452be10 hint>
    def_stmt hint_122 = PHI <32(10), hint_128(34)>
    version 122>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_238 = VDEF <.MEM_185>
len_124 = readlink (path_73, _123, hint_122);
./benchmarks/git/leak_9/git_leak_9.c:132:7: warning: use location
   len = readlink(path, sb->buf, hint);
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_238 = VDEF <.MEM_185>
len_124 = readlink (path_73, _123, hint_122);
./benchmarks/git/leak_9/git_leak_9.c:132:7: warning: use location
   len = readlink(path, sb->buf, hint);
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_238 = VDEF <.MEM_185>
len_124 = readlink (path_73, _123, hint_122);
./benchmarks/git/leak_9/git_leak_9.c:132:7: warning: use location
   len = readlink(path, sb->buf, hint);
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_238 = VDEF <.MEM_185>
len_124 = readlink (path_73, _123, hint_122);
./benchmarks/git/leak_9/git_leak_9.c:132:7: warning: use location
   len = readlink(path, sb->buf, hint);
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_239 = VDEF <.MEM_238>
strbuf_setlen (&sb_contents, len_124);
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: use location
    strbuf_setlen(sb, len);
    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_239 = VDEF <.MEM_238>
strbuf_setlen (&sb_contents, len_124);
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: use location
    strbuf_setlen(sb, len);
    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_239 = VDEF <.MEM_238>
strbuf_setlen (&sb_contents, len_124);
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: use location
    strbuf_setlen(sb, len);
    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_239 = VDEF <.MEM_238>
strbuf_setlen (&sb_contents, len_124);
./benchmarks/git/leak_9/git_leak_9.c:137:4: warning: use location
    strbuf_setlen(sb, len);
    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_127 = (long unsigned int) len_124;
./benchmarks/git/leak_9/git_leak_9.c:136:18: warning: use location
   } else if (len < hint) {
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_127 = (long unsigned int) len_124;
./benchmarks/git/leak_9/git_leak_9.c:136:18: warning: use location
   } else if (len < hint) {
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_127 = (long unsigned int) len_124;
./benchmarks/git/leak_9/git_leak_9.c:136:18: warning: use location
   } else if (len < hint) {
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_127 = (long unsigned int) len_124;
./benchmarks/git/leak_9/git_leak_9.c:136:18: warning: use location
   } else if (len < hint) {
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (len_124 < 0)
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
   if (len < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (len_124 < 0)
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
   if (len < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (len_124 < 0)
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
   if (len < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (len_124 < 0)
./benchmarks/git/leak_9/git_leak_9.c:133:6: warning: use location
   if (len < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (hint_122 <= 8191)
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
  while (hint < STRBUF_MAXLINK) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (hint_122 <= 8191)
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
  while (hint < STRBUF_MAXLINK) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (hint_122 <= 8191)
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
  while (hint < STRBUF_MAXLINK) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (hint_122 <= 8191)
./benchmarks/git/leak_9/git_leak_9.c:128:8: warning: use location
  while (hint < STRBUF_MAXLINK) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
hint_128 = hint_122 * 2;
./benchmarks/git/leak_9/git_leak_9.c:142:8: warning: use location
   hint *= 2;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
hint_128 = hint_122 * 2;
./benchmarks/git/leak_9/git_leak_9.c:142:8: warning: use location
   hint *= 2;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
hint_128 = hint_122 * 2;
./benchmarks/git/leak_9/git_leak_9.c:142:8: warning: use location
   hint *= 2;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
hint_128 = hint_122 * 2;
./benchmarks/git/leak_9/git_leak_9.c:142:8: warning: use location
   hint *= 2;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
hint_122 = PHI <32(10), hint_128(34)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
hint_122 = PHI <32(10), hint_128(34)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
hint_122 = PHI <32(10), hint_128(34)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
hint_122 = PHI <32(10), hint_128(34)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
hint_122 = PHI <32(10), hint_128(34)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f545373a8
    type <integer_type 0x7f9f549c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f9f549d49d8>>
   
    def_stmt _136 = sb_contents.len;
    version 136>
# VUSE <.MEM_221>
_136 = sb_contents.len;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_137 = unsigned_add_overflows (_136, _135);
./benchmarks/git/leak_9/git_leak_9.c:103:6: warning: use location
      unsigned_add_overflows(sb->len, extra + 1))
      ^
this stmt is child function---unsigned_add_overflows-----

 ================== trace ================== 
 <ssa_name 0x7f9f545373a8
    type <integer_type 0x7f9f549c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f9f549d49d8>>
   
    def_stmt _136 = sb_contents.len;
    version 136>
trace fucntion name:unsigned_add_overflows 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_137 != 0)
./benchmarks/git/leak_9/git_leak_9.c:102:39: warning: use location
  if (unsigned_add_overflows(extra, 1) ||
                                       ^
if (_137 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:102:39: warning: use location
Cond in fucntion main basic block 12
 ================== possible direct basic block ================= 
from main basic block 13
 ================== possible direct basic block ================= 
from main basic block 14
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f545373a8
    type <integer_type 0x7f9f549c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f9f549d49d8>>
   
    def_stmt _136 = sb_contents.len;
    version 136>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f9f549b4f90 type <integer_type 0x7f9f549c85e8 int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7f9f545375a0
    type <integer_type 0x7f9f549c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f9f549d49d8>>
   
    def_stmt _143 = sb_contents.alloc;
    version 143>
# VUSE <.MEM_179>
_143 = sb_contents.alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_144 = alloc_nr (_143);
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f9f545375a0
    type <integer_type 0x7f9f549c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f9f549d49d8>>
   
    def_stmt _143 = sb_contents.alloc;
    version 143>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_145 = (long unsigned int) _144;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_145 < _148)
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
if (_145 < _148)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
Cond in fucntion main basic block 17
 ================== possible direct basic block ================= 
from main basic block 18
 ================== possible direct basic block ================= 
from main basic block 19
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f545375a0
    type <integer_type 0x7f9f549c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f9f549d49d8>>
   
    def_stmt _143 = sb_contents.alloc;
    version 143>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54537828
    type <integer_type 0x7f9f549c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f9f549d49d8>>
   
    def_stmt _152 = sb_contents.alloc;
    version 152>
# VUSE <.MEM_224>
_152 = sb_contents.alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_153 = alloc_nr (_152);
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f9f54537828
    type <integer_type 0x7f9f549c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f9f549d49d8>>
   
    def_stmt _152 = sb_contents.alloc;
    version 152>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_154 = (long unsigned int) _153;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_contents.alloc = _154;
./benchmarks/git/leak_9/git_leak_9.c:107:2: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54537828
    type <integer_type 0x7f9f549c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9f549c8738 precision 64 min <integer_cst 0x7f9f549b4eb8 0> max <integer_cst 0x7f9f549b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f9f549d49d8>>
   
    def_stmt _152 = sb_contents.alloc;
    version 152>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f9f54503648 type <integer_type 0x7f9f549c87e0 long unsigned int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7f9f54533240
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _125 = __errno_location ();
    version 125
    ptr-info 0x7f9f54503b70>
_125 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_126 = *_125;
./benchmarks/git/leak_9/git_leak_9.c:134:8: warning: use location
    if (errno != ERANGE)
        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_126 != 34)
./benchmarks/git/leak_9/git_leak_9.c:134:7: warning: use location
    if (errno != ERANGE)
       ^
if (_126 != 34)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:134:7: warning: use location
Cond in fucntion main basic block 31
 ================== possible direct basic block ================= 
from main basic block 36
 ================== possible direct basic block ================= 
from main basic block 34
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_125 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:134:8: warning: use location
    if (errno != ERANGE)
        ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f9f54533240
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _125 = __errno_location ();
    version 125
    ptr-info 0x7f9f54503b70>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54533240
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _125 = __errno_location ();
    version 125
    ptr-info 0x7f9f54503b70>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_238>
_126 = *_125;
./benchmarks/git/leak_9/git_leak_9.c:134:8: warning: use location
    if (errno != ERANGE)
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_238>
_126 = *_125;
./benchmarks/git/leak_9/git_leak_9.c:134:8: warning: use location
    if (errno != ERANGE)
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_238>
_126 = *_125;
./benchmarks/git/leak_9/git_leak_9.c:134:8: warning: use location
    if (errno != ERANGE)
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_238>
_126 = *_125;
./benchmarks/git/leak_9/git_leak_9.c:134:8: warning: use location
    if (errno != ERANGE)
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_126 != 34)
./benchmarks/git/leak_9/git_leak_9.c:134:7: warning: use location
    if (errno != ERANGE)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_126 != 34)
./benchmarks/git/leak_9/git_leak_9.c:134:7: warning: use location
    if (errno != ERANGE)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_126 != 34)
./benchmarks/git/leak_9/git_leak_9.c:134:7: warning: use location
    if (errno != ERANGE)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_126 != 34)
./benchmarks/git/leak_9/git_leak_9.c:134:7: warning: use location
    if (errno != ERANGE)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_125 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:134:8: warning: use location
    if (errno != ERANGE)
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_125 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:134:8: warning: use location
    if (errno != ERANGE)
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_125 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:134:8: warning: use location
    if (errno != ERANGE)
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_125 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:134:8: warning: use location
    if (errno != ERANGE)
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5452e740
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54526900 sb_contents type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 155 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d900 sb_contents>
        chain <var_decl 0x7f9f54526990 sb_path type <record_type 0x7f9f544dea80 strbuf>
            addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 156 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
            align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d870 sb_path> chain <var_decl 0x7f9f54526a20 path>>>
    ./benchmarks/git/leak_9/git_leak_9.c:201:9 start: ./benchmarks/git/leak_9/git_leak_9.c:201:9 finish: ./benchmarks/git/leak_9/git_leak_9.c:201:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5452e7a0
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54526900 sb_contents type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 155 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d900 sb_contents>
        chain <var_decl 0x7f9f54526990 sb_path type <record_type 0x7f9f544dea80 strbuf>
            addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 156 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
            align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d870 sb_path> chain <var_decl 0x7f9f54526a20 path>>>
    ./benchmarks/git/leak_9/git_leak_9.c:201:9 start: ./benchmarks/git/leak_9/git_leak_9.c:201:9 finish: ./benchmarks/git/leak_9/git_leak_9.c:201:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d048
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _83 = __errno_location ();
    version 83
    ptr-info 0x7f9f54503a38>
_83 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_84 = *_83;
./benchmarks/git/leak_9/git_leak_9.c:202:13: warning: use location
         if (errno == ENOENT || errno == EINVAL)
             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_86 = _84 == 22;
./benchmarks/git/leak_9/git_leak_9.c:202:29: warning: use location
         if (errno == ENOENT || errno == EINVAL)
                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_87 = _85 | _86;
./benchmarks/git/leak_9/git_leak_9.c:202:29: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_87 != 0)
./benchmarks/git/leak_9/git_leak_9.c:202:12: warning: use location
         if (errno == ENOENT || errno == EINVAL)
            ^
if (_87 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:202:12: warning: use location
Cond in fucntion main basic block 39
 ================== possible direct basic block ================= 
from main basic block 5
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_83 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:202:13: warning: use location
         if (errno == ENOENT || errno == EINVAL)
             ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d048
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _83 = __errno_location ();
    version 83
    ptr-info 0x7f9f54503a38>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d048
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _83 = __errno_location ();
    version 83
    ptr-info 0x7f9f54503a38>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_188>
_84 = *_83;
./benchmarks/git/leak_9/git_leak_9.c:202:13: warning: use location
         if (errno == ENOENT || errno == EINVAL)
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_188>
_84 = *_83;
./benchmarks/git/leak_9/git_leak_9.c:202:13: warning: use location
         if (errno == ENOENT || errno == EINVAL)
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_188>
_84 = *_83;
./benchmarks/git/leak_9/git_leak_9.c:202:13: warning: use location
         if (errno == ENOENT || errno == EINVAL)
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_188>
_84 = *_83;
./benchmarks/git/leak_9/git_leak_9.c:202:13: warning: use location
         if (errno == ENOENT || errno == EINVAL)
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_86 = _84 == 22;
./benchmarks/git/leak_9/git_leak_9.c:202:29: warning: use location
         if (errno == ENOENT || errno == EINVAL)
                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_86 = _84 == 22;
./benchmarks/git/leak_9/git_leak_9.c:202:29: warning: use location
         if (errno == ENOENT || errno == EINVAL)
                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_86 = _84 == 22;
./benchmarks/git/leak_9/git_leak_9.c:202:29: warning: use location
         if (errno == ENOENT || errno == EINVAL)
                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_86 = _84 == 22;
./benchmarks/git/leak_9/git_leak_9.c:202:29: warning: use location
         if (errno == ENOENT || errno == EINVAL)
                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_87 = _85 | _86;
./benchmarks/git/leak_9/git_leak_9.c:202:29: warning: use location
         if (errno == ENOENT || errno == EINVAL)
                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_87 = _85 | _86;
./benchmarks/git/leak_9/git_leak_9.c:202:29: warning: use location
         if (errno == ENOENT || errno == EINVAL)
                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_87 = _85 | _86;
./benchmarks/git/leak_9/git_leak_9.c:202:29: warning: use location
         if (errno == ENOENT || errno == EINVAL)
                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_87 = _85 | _86;
./benchmarks/git/leak_9/git_leak_9.c:202:29: warning: use location
         if (errno == ENOENT || errno == EINVAL)
                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_87 != 0)
./benchmarks/git/leak_9/git_leak_9.c:202:12: warning: use location
         if (errno == ENOENT || errno == EINVAL)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_87 != 0)
./benchmarks/git/leak_9/git_leak_9.c:202:12: warning: use location
         if (errno == ENOENT || errno == EINVAL)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_87 != 0)
./benchmarks/git/leak_9/git_leak_9.c:202:12: warning: use location
         if (errno == ENOENT || errno == EINVAL)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_87 != 0)
./benchmarks/git/leak_9/git_leak_9.c:202:12: warning: use location
         if (errno == ENOENT || errno == EINVAL)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_83 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:202:13: warning: use location
         if (errno == ENOENT || errno == EINVAL)
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_83 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:202:13: warning: use location
         if (errno == ENOENT || errno == EINVAL)
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_83 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:202:13: warning: use location
         if (errno == ENOENT || errno == EINVAL)
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_83 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:202:13: warning: use location
         if (errno == ENOENT || errno == EINVAL)
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d1b0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _88 = sb_contents.buf;
    version 88
    ptr-info 0x7f9f54503a50>
# VUSE <.MEM_188>
_88 = sb_contents.buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_89 = starts_with (_88, "refs/");
./benchmarks/git/leak_9/git_leak_9.c:208:9: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
         ^
this stmt is child function---starts_with-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d1b0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _88 = sb_contents.buf;
    version 88
    ptr-info 0x7f9f54503a50>
trace fucntion name:starts_with 

 ================== trace ================== 
trace fucntion free:0 
if (_89 != 0)
./benchmarks/git/leak_9/git_leak_9.c:208:8: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
        ^
if (_89 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:208:8: warning: use location
Cond in fucntion main basic block 40
 ================== possible direct basic block ================= 
from main basic block 41
 ================== possible direct basic block ================= 
from main basic block 43
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d1b0
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _88 = sb_contents.buf;
    version 88
    ptr-info 0x7f9f54503a50>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_244 = VDEF <.MEM_188>
_89 = starts_with (_88, "refs/");
./benchmarks/git/leak_9/git_leak_9.c:208:9: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_244 = VDEF <.MEM_188>
_89 = starts_with (_88, "refs/");
./benchmarks/git/leak_9/git_leak_9.c:208:9: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_244 = VDEF <.MEM_188>
_89 = starts_with (_88, "refs/");
./benchmarks/git/leak_9/git_leak_9.c:208:9: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_244 = VDEF <.MEM_188>
_89 = starts_with (_88, "refs/");
./benchmarks/git/leak_9/git_leak_9.c:208:9: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_89 != 0)
./benchmarks/git/leak_9/git_leak_9.c:208:8: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_89 != 0)
./benchmarks/git/leak_9/git_leak_9.c:208:8: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_89 != 0)
./benchmarks/git/leak_9/git_leak_9.c:208:8: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_89 != 0)
./benchmarks/git/leak_9/git_leak_9.c:208:8: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d240
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _90 = sb_contents.buf;
    version 90
    ptr-info 0x7f9f54503a68>
# VUSE <.MEM_244>
_90 = sb_contents.buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_91 = check_refname_format (_90, 0);
./benchmarks/git/leak_9/git_leak_9.c:209:9: warning: use location
        !check_refname_format(sb_contents.buf, 0)) {
         ^
this stmt is child function---check_refname_format-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d240
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _90 = sb_contents.buf;
    version 90
    ptr-info 0x7f9f54503a68>
trace fucntion name:check_refname_format 

 ================== trace ================== 
trace fucntion free:0 
if (_91 == 0)
./benchmarks/git/leak_9/git_leak_9.c:208:47: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
                                               ^
if (_91 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:208:47: warning: use location
Cond in fucntion main basic block 41
 ================== possible direct basic block ================= 
from main basic block 42
 ================== possible direct basic block ================= 
from main basic block 43
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d240
    type <pointer_type 0x7f9f544de930
        type <integer_type 0x7f9f544de888 char public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544f22a0>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>>
   
    def_stmt _90 = sb_contents.buf;
    version 90
    ptr-info 0x7f9f54503a68>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_245 = VDEF <.MEM_244>
_91 = check_refname_format (_90, 0);
./benchmarks/git/leak_9/git_leak_9.c:209:9: warning: use location
        !check_refname_format(sb_contents.buf, 0)) {
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_245 = VDEF <.MEM_244>
_91 = check_refname_format (_90, 0);
./benchmarks/git/leak_9/git_leak_9.c:209:9: warning: use location
        !check_refname_format(sb_contents.buf, 0)) {
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_245 = VDEF <.MEM_244>
_91 = check_refname_format (_90, 0);
./benchmarks/git/leak_9/git_leak_9.c:209:9: warning: use location
        !check_refname_format(sb_contents.buf, 0)) {
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_245 = VDEF <.MEM_244>
_91 = check_refname_format (_90, 0);
./benchmarks/git/leak_9/git_leak_9.c:209:9: warning: use location
        !check_refname_format(sb_contents.buf, 0)) {
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_91 == 0)
./benchmarks/git/leak_9/git_leak_9.c:208:47: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
                                               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_91 == 0)
./benchmarks/git/leak_9/git_leak_9.c:208:47: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
                                               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_91 == 0)
./benchmarks/git/leak_9/git_leak_9.c:208:47: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
                                               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_91 == 0)
./benchmarks/git/leak_9/git_leak_9.c:208:47: warning: use location
     if (starts_with(sb_contents.buf, "refs/") &&
                                               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5451ef40
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54526900 sb_contents type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 155 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d900 sb_contents>
        chain <var_decl 0x7f9f54526990 sb_path type <record_type 0x7f9f544dea80 strbuf>
            addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 156 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
            align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d870 sb_path> chain <var_decl 0x7f9f54526a20 path>>>
    ./benchmarks/git/leak_9/git_leak_9.c:216:2 start: ./benchmarks/git/leak_9/git_leak_9.c:216:2 finish: ./benchmarks/git/leak_9/git_leak_9.c:216:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5451efc0
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54526900 sb_contents type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 155 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d900 sb_contents>
        chain <var_decl 0x7f9f54526990 sb_path type <record_type 0x7f9f544dea80 strbuf>
            addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 156 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
            align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d870 sb_path> chain <var_decl 0x7f9f54526a20 path>>>
    ./benchmarks/git/leak_9/git_leak_9.c:217:6 start: ./benchmarks/git/leak_9/git_leak_9.c:217:6 finish: ./benchmarks/git/leak_9/git_leak_9.c:217:6>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d3f0
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _96 = __errno_location ();
    version 96
    ptr-info 0x7f9f54503a80>
_96 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================
save_errno_97 = *_96;
./benchmarks/git/leak_9/git_leak_9.c:218:7: warning: use location
   int save_errno = errno;
       ^
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^
_96 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:218:20: warning: use location
   int save_errno = errno;
                    ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d3f0
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _96 = __errno_location ();
    version 96
    ptr-info 0x7f9f54503a80>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d3f0
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _96 = __errno_location ();
    version 96
    ptr-info 0x7f9f54503a80>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_252>
save_errno_97 = *_96;
./benchmarks/git/leak_9/git_leak_9.c:218:7: warning: use location
   int save_errno = errno;
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_252>
save_errno_97 = *_96;
./benchmarks/git/leak_9/git_leak_9.c:218:7: warning: use location
   int save_errno = errno;
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_252>
save_errno_97 = *_96;
./benchmarks/git/leak_9/git_leak_9.c:218:7: warning: use location
   int save_errno = errno;
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_252>
save_errno_97 = *_96;
./benchmarks/git/leak_9/git_leak_9.c:218:7: warning: use location
   int save_errno = errno;
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_96 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:218:20: warning: use location
   int save_errno = errno;
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_96 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:218:20: warning: use location
   int save_errno = errno;
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_96 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:218:20: warning: use location
   int save_errno = errno;
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_96 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:218:20: warning: use location
   int save_errno = errno;
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d360
    type <integer_type 0x7f9f549c85e8 int public SI
        size <integer_cst 0x7f9f549b4e28 constant 32>
        unit size <integer_cst 0x7f9f549b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
        pointer_to_this <pointer_type 0x7f9f549cfa80>>
    var <var_decl 0x7f9f54526b40 fd>
    def_stmt GIMPLE_NOP
    version 94>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_261 = VDEF <.MEM_252>
close (fd_94(D));
close (fd_94(D));
./benchmarks/git/leak_9/git_leak_9.c:219:3: warning: use location
   close(fd);
   ^
this stmt is child function---close-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d360
    type <integer_type 0x7f9f549c85e8 int public SI
        size <integer_cst 0x7f9f549b4e28 constant 32>
        unit size <integer_cst 0x7f9f549b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
        pointer_to_this <pointer_type 0x7f9f549cfa80>>
    var <var_decl 0x7f9f54526b40 fd>
    def_stmt GIMPLE_NOP
    version 94>
trace fucntion name:close 

 ================== trace ================== 
trace fucntion free:0 
_95 = strbuf_read (&sb_contents, fd_94(D), 256);
./benchmarks/git/leak_9/git_leak_9.c:217:6: warning: use location
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
      ^
this stmt is child function---strbuf_read-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d360
    type <integer_type 0x7f9f549c85e8 int public SI
        size <integer_cst 0x7f9f549b4e28 constant 32>
        unit size <integer_cst 0x7f9f549b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
        pointer_to_this <pointer_type 0x7f9f549cfa80>>
    var <var_decl 0x7f9f54526b40 fd>
    def_stmt GIMPLE_NOP
    version 94>
trace fucntion name:strbuf_read 

 ================== trace ================== 
trace fucntion free:0 
if (_95 < 0)
./benchmarks/git/leak_9/git_leak_9.c:217:5: warning: use location
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
     ^
if (_95 < 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:217:5: warning: use location
Cond in fucntion main basic block 43
 ================== possible direct basic block ================= 
from main basic block 44
 ================== possible direct basic block ================= 
from main basic block 45
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d360
    type <integer_type 0x7f9f549c85e8 int public SI
        size <integer_cst 0x7f9f549b4e28 constant 32>
        unit size <integer_cst 0x7f9f549b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
        pointer_to_this <pointer_type 0x7f9f549cfa80>>
    var <var_decl 0x7f9f54526b40 fd>
    def_stmt GIMPLE_NOP
    version 94>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_261 = VDEF <.MEM_252>
close (fd_94(D));
./benchmarks/git/leak_9/git_leak_9.c:219:3: warning: use location
   close(fd);
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_261 = VDEF <.MEM_252>
close (fd_94(D));
./benchmarks/git/leak_9/git_leak_9.c:219:3: warning: use location
   close(fd);
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_261 = VDEF <.MEM_252>
close (fd_94(D));
./benchmarks/git/leak_9/git_leak_9.c:219:3: warning: use location
   close(fd);
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_261 = VDEF <.MEM_252>
close (fd_94(D));
./benchmarks/git/leak_9/git_leak_9.c:219:3: warning: use location
   close(fd);
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_252 = VDEF <.MEM_251>
_95 = strbuf_read (&sb_contents, fd_94(D), 256);
./benchmarks/git/leak_9/git_leak_9.c:217:6: warning: use location
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_252 = VDEF <.MEM_251>
_95 = strbuf_read (&sb_contents, fd_94(D), 256);
./benchmarks/git/leak_9/git_leak_9.c:217:6: warning: use location
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_252 = VDEF <.MEM_251>
_95 = strbuf_read (&sb_contents, fd_94(D), 256);
./benchmarks/git/leak_9/git_leak_9.c:217:6: warning: use location
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_252 = VDEF <.MEM_251>
_95 = strbuf_read (&sb_contents, fd_94(D), 256);
./benchmarks/git/leak_9/git_leak_9.c:217:6: warning: use location
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_95 < 0)
./benchmarks/git/leak_9/git_leak_9.c:217:5: warning: use location
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_95 < 0)
./benchmarks/git/leak_9/git_leak_9.c:217:5: warning: use location
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_95 < 0)
./benchmarks/git/leak_9/git_leak_9.c:217:5: warning: use location
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_95 < 0)
./benchmarks/git/leak_9/git_leak_9.c:217:5: warning: use location
  if (strbuf_read(&sb_contents, fd, 256) < 0) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d480
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _98 = __errno_location ();
    version 98
    ptr-info 0x7f9f54503a98>
_98 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
_98 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:220:3: warning: use location
   errno = save_errno;
   ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d480
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _98 = __errno_location ();
    version 98
    ptr-info 0x7f9f54503a98>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d480
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _98 = __errno_location ();
    version 98
    ptr-info 0x7f9f54503a98>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_262 = VDEF <.MEM_261>
*_98 = save_errno_97;
./benchmarks/git/leak_9/git_leak_9.c:220:9: warning: use location
   errno = save_errno;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_98 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:220:3: warning: use location
   errno = save_errno;
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_98 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:220:3: warning: use location
   errno = save_errno;
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_98 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:220:3: warning: use location
   errno = save_errno;
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_98 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:220:3: warning: use location
   errno = save_errno;
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5452e100
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54526900 sb_contents type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 155 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d900 sb_contents>
        chain <var_decl 0x7f9f54526990 sb_path type <record_type 0x7f9f544dea80 strbuf>
            addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 156 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
            align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d870 sb_path> chain <var_decl 0x7f9f54526a20 path>>>
    ./benchmarks/git/leak_9/git_leak_9.c:223:2 start: ./benchmarks/git/leak_9/git_leak_9.c:223:2 finish: ./benchmarks/git/leak_9/git_leak_9.c:223:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
# VUSE <.MEM_253>
buf_99 = sb_contents.buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
this stmt is child function---isspace-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 
if (_113 == 0)
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                       ^
if (_113 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
Cond in fucntion main basic block 52
 ================== possible direct basic block ================= 
from main basic block 53
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^
if (_110 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
Cond in fucntion main basic block 51
 ================== possible direct basic block ================= 
from main basic block 52
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 
_80 = resolve_packed_ref (refs_72, _12, _63, _11);
./benchmarks/git/leak_9/git_leak_9.c:191:7: warning: use location
   if (resolve_packed_ref(refs, refname, sha1, type)) {
       ^
this stmt is child function---resolve_packed_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:resolve_packed_ref 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_218 = VDEF <.MEM_217>
files_ref_path (refs_72, &sb_path, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
files_ref_path (refs_72, &sb_path, _12);
./benchmarks/git/leak_9/git_leak_9.c:167:2: warning: use location
  files_ref_path(refs, &sb_path, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^
this stmt is child function---strbuf_addf-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:strbuf_addf 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_208 = VDEF <.MEM_207>
files_ref_path (&refs, &ref_file, _12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
files_ref_path (&refs, &ref_file, _12);
./benchmarks/git/leak_9/git_leak_9.c:277:2: warning: use location
  files_ref_path(refs, &ref_file, refname);
  ^
this stmt is child function---files_ref_path-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:files_ref_path 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_206 = VDEF <.MEM_204>
_62 = strdup (_12);
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_62 = strdup (_12);
./benchmarks/git/leak_9/git_leak_9.c:276:19: warning: use location
  lock->ref_name = xstrdup(refname);
                   ^
this stmt is child function---strdup-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:strdup 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_207 = VDEF <.MEM_206>
lock_61->ref_name = _62;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_61->ref_name = _62;
./benchmarks/git/leak_9/git_leak_9.c:276:17: warning: use location
  lock->ref_name = xstrdup(refname);
                 ^
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^
this stmt is child function---unlock_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:unlock_ref 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
lock_299 = lock_61;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
lock_299 = lock_61;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
lock_299 = lock_61;
./benchmarks/git/leak_9/git_leak_9.c:274:10: warning: use location
  *lock_p = lock = xcalloc(1, sizeof(*lock));
          ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_58 = lock_298;
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
bb index := 75
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 75 ,possiable got to succ := 77

======================================================================
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^
this stmt is child function---close_ref-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:close_ref 

 ================== trace ================== 
trace fucntion free:0 
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
this stmt is child function---write_ref_to_lockfile-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:write_ref_to_lockfile 

 ================== trace ================== 
trace fucntion free:0 
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
this stmt is child function---oidcmp-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:oidcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_32 = lock_298;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_33 = &_32->old_oid;
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
bb index := 65
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 65 ,possiable got to succ := 77

======================================================================
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^
this stmt is child function---check_old_oid-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:check_old_oid 

 ================== trace ================== 
trace fucntion free:0 
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^
this stmt is child function---refs_read_ref_full-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:refs_read_ref_full 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_37 = lock_298;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_38 = &_37->old_oid;
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
bb index := 67
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 67 ,possiable got to succ := 77

======================================================================
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^
this stmt is child function---check_old_oid-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:check_old_oid 

 ================== trace ================== 
trace fucntion free:0 
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^
if (_43 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
Cond in fucntion main basic block 69
 ================== possible direct basic block ================= 
from main basic block 70
 ================== possible direct basic block ================= 
from main basic block 71
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_194>
_56 = update.flags;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
beacuse in succ := 4 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_57 = _56 & 32;
bb index := 74
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 74 ,possiable got to succ := 77

======================================================================
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_63 = &lock_61->old_oid.hash;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_63 = &lock_61->old_oid.hash;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
_63 = &lock_61->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:285:11: warning: use location
           lock->old_oid.hash, referent, type)) {
           ^
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_216 = VDEF <.MEM_215>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:164:8: warning: use location
  *type = 0;
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/leak_9/git_leak_9.c:119:1: warning: use location
 }
 ^
beacuse in succ := 4 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_203 = VDEF <.MEM_202>
*_11 = 0;
bb index := 4
# VUSE <.MEM_9>
return 0;
lto1: warning: use location
beacuse in succ := 77 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 77

======================================================================
*_11 = 0;
./benchmarks/git/leak_9/git_leak_9.c:272:8: warning: use location
  *type = 0;
        ^
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^
this stmt is child function---starts_with-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:starts_with 

 ================== trace ================== 
trace fucntion free:0 
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
this stmt is child function---starts_with-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
trace fucntion name:starts_with 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d4c8
    type <pointer_type 0x7f9f544dec78
        type <integer_type 0x7f9f544debd0 char readonly public string-flag QI
            size <integer_cst 0x7f9f549b4cd8 constant 8>
            unit size <integer_cst 0x7f9f549b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f549c83f0 precision 8 min <integer_cst 0x7f9f544e1198 -128> max <integer_cst 0x7f9f544e1180 127>
            pointer_to_this <pointer_type 0x7f9f544dec78>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f9f54526ab0 buf>
    def_stmt buf_99 = sb_contents.buf;
    version 99
    ptr-info 0x7f9f54503ab0>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_111 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:38: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_112 = (int) _111;
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_113 == 0)
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_113 == 0)
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_113 == 0)
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_113 == 0)
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_110 = MEM[(const char *)buf_99 + 40B];
./benchmarks/git/leak_9/git_leak_9.c:242:10: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_110 != 0)
./benchmarks/git/leak_9/git_leak_9.c:241:30: warning: use location
  if (get_sha1_hex(buf, sha1) ||
                              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_255 = VDEF <.MEM_254>
_109 = get_sha1_hex (buf_99, _63);
./benchmarks/git/leak_9/git_leak_9.c:241:6: warning: use location
  if (get_sha1_hex(buf, sha1) ||
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_272 = VDEF <.MEM_270>
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
./benchmarks/git/leak_9/git_leak_9.c:289:5: warning: use location
     strbuf_addf(err, "unable to resolve reference '%s'",
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_273 = VDEF <.MEM_272>
unlock_ref (lock_61);
./benchmarks/git/leak_9/git_leak_9.c:300:2: warning: use location
  unlock_ref(lock);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_58 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_290 = VDEF <.MEM_194>
_59 = close_ref (_58);
./benchmarks/git/leak_9/git_leak_9.c:427:7: warning: use location
   if (close_ref(lock)) {
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_49 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_45 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:402:20: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_46 = &_45->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_32 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:373:42: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_33 = &_32->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_282 = VDEF <.MEM_281>
_34 = check_old_oid (&update, _33, &err);
./benchmarks/git/leak_9/git_leak_9.c:373:15: warning: use location
    } else if (check_old_oid(update, &lock->old_oid, err)) {
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_24 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:366:17: warning: use location
             lock->old_oid.hash, NULL)) {
                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_25 = &_24->old_oid.hash;
./benchmarks/git/leak_9/git_leak_9.c:366:13: warning: use location
             lock->old_oid.hash, NULL)) {
             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_37 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:393:34: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_38 = &_37->old_oid;
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_279 = VDEF <.MEM_278>
_39 = check_old_oid (&update, _38, &err);
./benchmarks/git/leak_9/git_leak_9.c:393:7: warning: use location
   if (check_old_oid(update, &lock->old_oid, err))
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_19 = lock_298;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_278 = VDEF <.MEM_276>
update.backend_data = _19;
./benchmarks/git/leak_9/git_leak_9.c:355:23: warning: use location
  update->backend_data = lock;
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_192>
_42 = update.type;
./benchmarks/git/leak_9/git_leak_9.c:401:15: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_43 = _42 & 1;
./benchmarks/git/leak_9/git_leak_9.c:401:22: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
if (_43 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:6: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_286>
_54 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_55 = _54 | 32;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_287 = VDEF <.MEM_286>
update.flags = _55;
./benchmarks/git/leak_9/git_leak_9.c:418:18: warning: use location
    update->flags |= REF_NEEDS_COMMIT;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# VUSE <.MEM_194>
_56 = update.flags;
./benchmarks/git/leak_9/git_leak_9.c:421:14: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
_57 = _56 & 32;
./benchmarks/git/leak_9/git_leak_9.c:421:22: warning: use location
  if (!(update->flags & REF_NEEDS_COMMIT)) {
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_256 = VDEF <.MEM_255>
*_11 = _115;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_114 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:243:9: warning: use location
   *type |= REF_ISBROKEN;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_260 = VDEF <.MEM_259>
*_11 = _108;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_259>
_107 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:232:9: warning: use location
   *type |= REF_ISSYMREF;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_250 = VDEF <.MEM_249>
*_11 = _93;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_249>
_92 = *_11;
./benchmarks/git/leak_9/git_leak_9.c:211:13: warning: use location
       *type |= REF_ISSYMREF;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_254 = VDEF <.MEM_253>
_100 = starts_with (buf_99, "ref:");
./benchmarks/git/leak_9/git_leak_9.c:225:6: warning: use location
  if (starts_with(buf, "ref:")) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d678
    type <integer_type 0x7f9f549c85e8 int public SI
        size <integer_cst 0x7f9f549b4e28 constant 32>
        unit size <integer_cst 0x7f9f549b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
        pointer_to_this <pointer_type 0x7f9f549cfa80>>
   
    def_stmt _105 = (int) _104;
    version 105>
_105 = (int) _104;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_106 = isspace (_105);
./benchmarks/git/leak_9/git_leak_9.c:227:10: warning: use location
   while (isspace(*buf))
          ^
this stmt is child function---isspace-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d678
    type <integer_type 0x7f9f549c85e8 int public SI
        size <integer_cst 0x7f9f549b4e28 constant 32>
        unit size <integer_cst 0x7f9f549b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
        pointer_to_this <pointer_type 0x7f9f549cfa80>>
   
    def_stmt _105 = (int) _104;
    version 105>
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_106 != 0)
./benchmarks/git/leak_9/git_leak_9.c:227:9: warning: use location
   while (isspace(*buf))
         ^
if (_106 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:227:9: warning: use location
Cond in fucntion main basic block 48
 ================== possible direct basic block ================= 
from main basic block 47
 ================== possible direct basic block ================= 
from main basic block 49
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d678
    type <integer_type 0x7f9f549c85e8 int public SI
        size <integer_cst 0x7f9f549b4e28 constant 32>
        unit size <integer_cst 0x7f9f549b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
        pointer_to_this <pointer_type 0x7f9f549cfa80>>
   
    def_stmt _105 = (int) _104;
    version 105>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_254>
_106 = isspace (_105);
./benchmarks/git/leak_9/git_leak_9.c:227:10: warning: use location
   while (isspace(*buf))
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_254>
_106 = isspace (_105);
./benchmarks/git/leak_9/git_leak_9.c:227:10: warning: use location
   while (isspace(*buf))
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_254>
_106 = isspace (_105);
./benchmarks/git/leak_9/git_leak_9.c:227:10: warning: use location
   while (isspace(*buf))
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_254>
_106 = isspace (_105);
./benchmarks/git/leak_9/git_leak_9.c:227:10: warning: use location
   while (isspace(*buf))
          ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_106 != 0)
./benchmarks/git/leak_9/git_leak_9.c:227:9: warning: use location
   while (isspace(*buf))
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_106 != 0)
./benchmarks/git/leak_9/git_leak_9.c:227:9: warning: use location
   while (isspace(*buf))
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_106 != 0)
./benchmarks/git/leak_9/git_leak_9.c:227:9: warning: use location
   while (isspace(*buf))
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_106 != 0)
./benchmarks/git/leak_9/git_leak_9.c:227:9: warning: use location
   while (isspace(*buf))
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5452e220
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54506e10 referent type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 329 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f545063f0 referent>
        chain <var_decl 0x7f9f54506ea0 mustexist type <integer_type 0x7f9f549c85e8 int>
            used SI file ./benchmarks/git/leak_9/git_leak_9.c line 330 col 6
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f54506360 mustexist> chain <var_decl 0x7f9f54506f30 ret>>>
    ./benchmarks/git/leak_9/git_leak_9.c:341:8 start: ./benchmarks/git/leak_9/git_leak_9.c:341:8 finish: ./benchmarks/git/leak_9/git_leak_9.c:341:8>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5452e280
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54506e10 referent type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 329 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f545063f0 referent>
        chain <var_decl 0x7f9f54506ea0 mustexist type <integer_type 0x7f9f549c85e8 int>
            used SI file ./benchmarks/git/leak_9/git_leak_9.c line 330 col 6
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f54506360 mustexist> chain <var_decl 0x7f9f54506f30 ret>>>
    ./benchmarks/git/leak_9/git_leak_9.c:341:8 start: ./benchmarks/git/leak_9/git_leak_9.c:341:8 finish: ./benchmarks/git/leak_9/git_leak_9.c:341:8>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d870
    type <integer_type 0x7f9f549c85e8 int public SI
        size <integer_cst 0x7f9f549b4e28 constant 32>
        unit size <integer_cst 0x7f9f549b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
        pointer_to_this <pointer_type 0x7f9f549cfa80>>
   
    def_stmt _112 = (int) _111;
    version 112>
_112 = (int) _111;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^
this stmt is child function---isspace-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d870
    type <integer_type 0x7f9f549c85e8 int public SI
        size <integer_cst 0x7f9f549b4e28 constant 32>
        unit size <integer_cst 0x7f9f549b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
        pointer_to_this <pointer_type 0x7f9f549cfa80>>
   
    def_stmt _112 = (int) _111;
    version 112>
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 
if (_113 == 0)
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                       ^
if (_113 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
Cond in fucntion main basic block 52
 ================== possible direct basic block ================= 
from main basic block 53
 ================== possible direct basic block ================= 
from main basic block 54
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d870
    type <integer_type 0x7f9f549c85e8 int public SI
        size <integer_cst 0x7f9f549b4e28 constant 32>
        unit size <integer_cst 0x7f9f549b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
        pointer_to_this <pointer_type 0x7f9f549cfa80>>
   
    def_stmt _112 = (int) _111;
    version 112>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_255>
_113 = isspace (_112);
./benchmarks/git/leak_9/git_leak_9.c:242:27: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_113 == 0)
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_113 == 0)
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_113 == 0)
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_113 == 0)
./benchmarks/git/leak_9/git_leak_9.c:242:23: warning: use location
      (buf[40] != '\0' && !isspace(buf[40]))) {
                       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d990
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _116 = __errno_location ();
    version 116
    ptr-info 0x7f9f54503b10>
_116 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================
*_116 = 22;
./benchmarks/git/leak_9/git_leak_9.c:244:9: warning: use location
   errno = EINVAL;
         ^
_116 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:244:3: warning: use location
   errno = EINVAL;
   ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d990
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _116 = __errno_location ();
    version 116
    ptr-info 0x7f9f54503b10>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d990
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _116 = __errno_location ();
    version 116
    ptr-info 0x7f9f54503b10>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_257 = VDEF <.MEM_256>
*_116 = 22;
./benchmarks/git/leak_9/git_leak_9.c:244:9: warning: use location
   errno = EINVAL;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_257 = VDEF <.MEM_256>
*_116 = 22;
./benchmarks/git/leak_9/git_leak_9.c:244:9: warning: use location
   errno = EINVAL;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_257 = VDEF <.MEM_256>
*_116 = 22;
./benchmarks/git/leak_9/git_leak_9.c:244:9: warning: use location
   errno = EINVAL;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_257 = VDEF <.MEM_256>
*_116 = 22;
./benchmarks/git/leak_9/git_leak_9.c:244:9: warning: use location
   errno = EINVAL;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_116 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:244:3: warning: use location
   errno = EINVAL;
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_116 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:244:3: warning: use location
   errno = EINVAL;
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_116 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:244:3: warning: use location
   errno = EINVAL;
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_116 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:244:3: warning: use location
   errno = EINVAL;
   ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452d9d8
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _117 = __errno_location ();
    version 117
    ptr-info 0x7f9f54503b28>
_117 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================
save_errno_118 = *_117;
./benchmarks/git/leak_9/git_leak_9.c:251:13: warning: use location
  save_errno = errno;
             ^
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^
_117 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:251:15: warning: use location
  save_errno = errno;
               ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452d9d8
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _117 = __errno_location ();
    version 117
    ptr-info 0x7f9f54503b28>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452d9d8
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _117 = __errno_location ();
    version 117
    ptr-info 0x7f9f54503b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_190>
save_errno_118 = *_117;
./benchmarks/git/leak_9/git_leak_9.c:251:13: warning: use location
  save_errno = errno;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_190>
save_errno_118 = *_117;
./benchmarks/git/leak_9/git_leak_9.c:251:13: warning: use location
  save_errno = errno;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_190>
save_errno_118 = *_117;
./benchmarks/git/leak_9/git_leak_9.c:251:13: warning: use location
  save_errno = errno;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_190>
save_errno_118 = *_117;
./benchmarks/git/leak_9/git_leak_9.c:251:13: warning: use location
  save_errno = errno;
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_117 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:251:15: warning: use location
  save_errno = errno;
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_117 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:251:15: warning: use location
  save_errno = errno;
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_117 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:251:15: warning: use location
  save_errno = errno;
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_117 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:251:15: warning: use location
  save_errno = errno;
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5452e400
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54526990 sb_path type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 156 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d870 sb_path>
        chain <var_decl 0x7f9f54526a20 path type <pointer_type 0x7f9f544dec78>
            used unsigned DI file ./benchmarks/git/leak_9/git_leak_9.c line 157 col 14 size <integer_cst 0x7f9f549b4be8 64> unit size <integer_cst 0x7f9f549b4c00 8>
            align 64 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d7e0 path> chain <var_decl 0x7f9f54526ab0 buf>>>
    ./benchmarks/git/leak_9/git_leak_9.c:252:2 start: ./benchmarks/git/leak_9/git_leak_9.c:252:2 finish: ./benchmarks/git/leak_9/git_leak_9.c:252:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5452e480
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54526900 sb_contents type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 155 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d900 sb_contents>
        chain <var_decl 0x7f9f54526990 sb_path type <record_type 0x7f9f544dea80 strbuf>
            addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 156 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
            align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f5451d870 sb_path> chain <var_decl 0x7f9f54526a20 path>>>
    ./benchmarks/git/leak_9/git_leak_9.c:253:2 start: ./benchmarks/git/leak_9/git_leak_9.c:253:2 finish: ./benchmarks/git/leak_9/git_leak_9.c:253:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5452da68
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _119 = __errno_location ();
    version 119
    ptr-info 0x7f9f54503b40>
_119 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
_119 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:254:2: warning: use location
  errno = save_errno;
  ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f9f5452da68
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _119 = __errno_location ();
    version 119
    ptr-info 0x7f9f54503b40>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5452da68
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _119 = __errno_location ();
    version 119
    ptr-info 0x7f9f54503b40>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_267 = VDEF <.MEM_266>
*_119 = save_errno_118;
./benchmarks/git/leak_9/git_leak_9.c:254:8: warning: use location
  errno = save_errno;
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_119 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:254:2: warning: use location
  errno = save_errno;
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_119 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:254:2: warning: use location
  errno = save_errno;
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_119 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:254:2: warning: use location
  errno = save_errno;
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_119 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:254:2: warning: use location
  errno = save_errno;
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f545164c8
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _66 = __errno_location ();
    version 66
    ptr-info 0x7f9f545039c0>
_66 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================
_67 = *_66;
./benchmarks/git/leak_9/git_leak_9.c:286:7: warning: use location
   if (errno == ENOENT) {
       ^
if (_67 == 2)
./benchmarks/git/leak_9/git_leak_9.c:286:6: warning: use location
   if (errno == ENOENT) {
      ^
if (_67 == 2)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:286:6: warning: use location
Cond in fucntion main basic block 55
 ================== possible direct basic block ================= 
from main basic block 56
 ================== possible direct basic block ================= 
from main basic block 58
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_66 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:286:7: warning: use location
   if (errno == ENOENT) {
       ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f9f545164c8
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _66 = __errno_location ();
    version 66
    ptr-info 0x7f9f545039c0>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f545164c8
    type <pointer_type 0x7f9f549cfa80
        type <integer_type 0x7f9f549c85e8 int public SI
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f9f549c85e8 precision 32 min <integer_cst 0x7f9f549b4de0 -2147483648> max <integer_cst 0x7f9f549b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f9f549cfa80>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _66 = __errno_location ();
    version 66
    ptr-info 0x7f9f545039c0>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# VUSE <.MEM_270>
_67 = *_66;
./benchmarks/git/leak_9/git_leak_9.c:286:7: warning: use location
   if (errno == ENOENT) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# VUSE <.MEM_270>
_67 = *_66;
./benchmarks/git/leak_9/git_leak_9.c:286:7: warning: use location
   if (errno == ENOENT) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# VUSE <.MEM_270>
_67 = *_66;
./benchmarks/git/leak_9/git_leak_9.c:286:7: warning: use location
   if (errno == ENOENT) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# VUSE <.MEM_270>
_67 = *_66;
./benchmarks/git/leak_9/git_leak_9.c:286:7: warning: use location
   if (errno == ENOENT) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_67 == 2)
./benchmarks/git/leak_9/git_leak_9.c:286:6: warning: use location
   if (errno == ENOENT) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_67 == 2)
./benchmarks/git/leak_9/git_leak_9.c:286:6: warning: use location
   if (errno == ENOENT) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_67 == 2)
./benchmarks/git/leak_9/git_leak_9.c:286:6: warning: use location
   if (errno == ENOENT) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_67 == 2)
./benchmarks/git/leak_9/git_leak_9.c:286:6: warning: use location
   if (errno == ENOENT) {
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:286:7: warning: use location
   if (errno == ENOENT) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:286:7: warning: use location
   if (errno == ENOENT) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:286:7: warning: use location
   if (errno == ENOENT) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = __errno_location ();
./benchmarks/git/leak_9/git_leak_9.c:286:7: warning: use location
   if (errno == ENOENT) {
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5451e160
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f5574ae10 err type <record_type 0x7f9f544dea80 strbuf>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 441 col 19 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f5451e260
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f5451d090 ref_file type <record_type 0x7f9f544dea80 strbuf>
        addressable used BLK file ./benchmarks/git/leak_9/git_leak_9.c line 268 col 16 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f545106c0 ref_file>
        chain <var_decl 0x7f9f5451d120 ret type <integer_type 0x7f9f549c85e8 int>
            used SI file ./benchmarks/git/leak_9/git_leak_9.c line 270 col 6
            size <integer_cst 0x7f9f549b4e28 constant 32>
            unit size <integer_cst 0x7f9f549b4e40 constant 4>
            align 32 context <function_decl 0x7f9f544dfb00 main> abstract_origin <var_decl 0x7f9f54510630 ret> chain <label_decl 0x7f9f544f1b80 error_return>>>
    ./benchmarks/git/leak_9/git_leak_9.c:304:2 start: ./benchmarks/git/leak_9/git_leak_9.c:304:2 finish: ./benchmarks/git/leak_9/git_leak_9.c:304:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f545112c0
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f5574ae10 err type <record_type 0x7f9f544dea80 strbuf>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 441 col 19 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f54511320
    type <pointer_type 0x7f9f544e5150
        type <record_type 0x7f9f544e51f8 ref_update BLK
            size <integer_cst 0x7f9f54a6dc30 constant 640>
            unit size <integer_cst 0x7f9f544e1270 constant 80>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e51f8 fields <field_decl 0x7f9f544e61c8 new_oid> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5150> chain <type_decl 0x7f9f544e6260 D.4014>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e52a0>>
   
    arg 0 <var_decl 0x7f9f54506090 update type <record_type 0x7f9f544e51f8 ref_update>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 437 col 23 size <integer_cst 0x7f9f54a6dc30 640> unit size <integer_cst 0x7f9f544e1270 80>
        align 128 context <function_decl 0x7f9f544dfb00 main>
        chain <var_decl 0x7f9f54506000 transaction type <record_type 0x7f9f544e5498 ref_transaction>
            addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 438 col 28
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 128 context <function_decl 0x7f9f544dfb00 main> chain <var_decl 0x7f9f5574af30 head_ref>>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f545113a0
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f5574ae10 err type <record_type 0x7f9f544dea80 strbuf>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 441 col 19 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f5450faf8
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _27 = &refs.base;
    version 27
    ptr-info 0x7f9f54503828>
_27 = &refs.base;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^
this stmt is child function---refs_read_ref_full-----

 ================== trace ================== 
 <ssa_name 0x7f9f5450faf8
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _27 = &refs.base;
    version 27
    ptr-info 0x7f9f54503828>
trace fucntion name:refs_read_ref_full 

 ================== trace ================== 
trace fucntion free:0 
if (_28 != 0)
./benchmarks/git/leak_9/git_leak_9.c:364:7: warning: use location
    if (refs_read_ref_full(&refs->base,
       ^
if (_28 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:364:7: warning: use location
Cond in fucntion main basic block 62
 ================== possible direct basic block ================= 
from main basic block 63
 ================== possible direct basic block ================= 
from main basic block 65
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f5450faf8
    type <pointer_type 0x7f9f544e53f0
        type <record_type 0x7f9f544e5348 ref_store BLK
            size <integer_cst 0x7f9f549b4c60 constant 0>
            unit size <integer_cst 0x7f9f549b4c18 constant 0>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e5348 context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e53f0> chain <type_decl 0x7f9f544e62f8 D.4015>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _27 = &refs.base;
    version 27
    ptr-info 0x7f9f54503828>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_281 = VDEF <.MEM_278>
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
./benchmarks/git/leak_9/git_leak_9.c:364:8: warning: use location
    if (refs_read_ref_full(&refs->base,
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_28 != 0)
./benchmarks/git/leak_9/git_leak_9.c:364:7: warning: use location
    if (refs_read_ref_full(&refs->base,
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_28 != 0)
./benchmarks/git/leak_9/git_leak_9.c:364:7: warning: use location
    if (refs_read_ref_full(&refs->base,
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_28 != 0)
./benchmarks/git/leak_9/git_leak_9.c:364:7: warning: use location
    if (refs_read_ref_full(&refs->base,
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_28 != 0)
./benchmarks/git/leak_9/git_leak_9.c:364:7: warning: use location
    if (refs_read_ref_full(&refs->base,
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
if (_28 != 0)
./benchmarks/git/leak_9/git_leak_9.c:364:7: warning: use location
    if (refs_read_ref_full(&refs->base,
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f545115c0
    type <pointer_type 0x7f9f544e5150
        type <record_type 0x7f9f544e51f8 ref_update BLK
            size <integer_cst 0x7f9f54a6dc30 constant 640>
            unit size <integer_cst 0x7f9f544e1270 constant 80>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e51f8 fields <field_decl 0x7f9f544e61c8 new_oid> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5150> chain <type_decl 0x7f9f544e6260 D.4014>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e52a0>>
   
    arg 0 <var_decl 0x7f9f54506090 update type <record_type 0x7f9f544e51f8 ref_update>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 437 col 23 size <integer_cst 0x7f9f54a6dc30 640> unit size <integer_cst 0x7f9f544e1270 80>
        align 128 context <function_decl 0x7f9f544dfb00 main>
        chain <var_decl 0x7f9f54506000 transaction type <record_type 0x7f9f544e5498 ref_transaction>
            addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 438 col 28
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 128 context <function_decl 0x7f9f544dfb00 main> chain <var_decl 0x7f9f5574af30 head_ref>>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f54511640
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f5574ae10 err type <record_type 0x7f9f544dea80 strbuf>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 441 col 19 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f54511700
    type <pointer_type 0x7f9f544e5150
        type <record_type 0x7f9f544e51f8 ref_update BLK
            size <integer_cst 0x7f9f54a6dc30 constant 640>
            unit size <integer_cst 0x7f9f544e1270 constant 80>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e51f8 fields <field_decl 0x7f9f544e61c8 new_oid> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5150> chain <type_decl 0x7f9f544e6260 D.4014>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e52a0>>
   
    arg 0 <var_decl 0x7f9f54506090 update type <record_type 0x7f9f544e51f8 ref_update>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 437 col 23 size <integer_cst 0x7f9f54a6dc30 640> unit size <integer_cst 0x7f9f544e1270 80>
        align 128 context <function_decl 0x7f9f544dfb00 main>
        chain <var_decl 0x7f9f54506000 transaction type <record_type 0x7f9f544e5498 ref_transaction>
            addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 438 col 28
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 128 context <function_decl 0x7f9f544dfb00 main> chain <var_decl 0x7f9f5574af30 head_ref>>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f54511780
    type <pointer_type 0x7f9f544e59d8
        type <record_type 0x7f9f544e5930 files_ref_store BLK
            size <integer_cst 0x7f9f544e1318 constant 384>
            unit size <integer_cst 0x7f9f544e1288 constant 48>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5930 fields <field_decl 0x7f9f544e6d10 base> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e59d8> chain <type_decl 0x7f9f544e6da8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f54506120 refs type <record_type 0x7f9f544e5930 files_ref_store>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 436 col 28 size <integer_cst 0x7f9f544e1318 384> unit size <integer_cst 0x7f9f544e1288 48>
        align 128 context <function_decl 0x7f9f544dfb00 main>
        chain <var_decl 0x7f9f54506090 update type <record_type 0x7f9f544e51f8 ref_update>
            addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 437 col 23
            size <integer_cst 0x7f9f54a6dc30 constant 640>
            unit size <integer_cst 0x7f9f544e1270 constant 80>
            align 128 context <function_decl 0x7f9f544dfb00 main> chain <var_decl 0x7f9f54506000 transaction>>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f545118a0
    type <pointer_type 0x7f9f544e5150
        type <record_type 0x7f9f544e51f8 ref_update BLK
            size <integer_cst 0x7f9f54a6dc30 constant 640>
            unit size <integer_cst 0x7f9f544e1270 constant 80>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e51f8 fields <field_decl 0x7f9f544e61c8 new_oid> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5150> chain <type_decl 0x7f9f544e6260 D.4014>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e52a0>>
   
    arg 0 <var_decl 0x7f9f54506090 update type <record_type 0x7f9f544e51f8 ref_update>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 437 col 23 size <integer_cst 0x7f9f54a6dc30 640> unit size <integer_cst 0x7f9f544e1270 80>
        align 128 context <function_decl 0x7f9f544dfb00 main>
        chain <var_decl 0x7f9f54506000 transaction type <record_type 0x7f9f544e5498 ref_transaction>
            addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 438 col 28
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 128 context <function_decl 0x7f9f544dfb00 main> chain <var_decl 0x7f9f5574af30 head_ref>>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54516090
    type <pointer_type 0x7f9f544eda80
        type <record_type 0x7f9f544e50a8 object_id BLK
            size <integer_cst 0x7f9f544e12b8 constant 160>
            unit size <integer_cst 0x7f9f544e12a0 constant 20>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e50a8 fields <field_decl 0x7f9f544e0be0 hash> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544eda80> chain <type_decl 0x7f9f544e0c78 D.4005>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _46 = &_45->old_oid;
    version 46
    ptr-info 0x7f9f545038e8>
_46 = &_45->old_oid;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^
this stmt is child function---oidcmp-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516090
    type <pointer_type 0x7f9f544eda80
        type <record_type 0x7f9f544e50a8 object_id BLK
            size <integer_cst 0x7f9f544e12b8 constant 160>
            unit size <integer_cst 0x7f9f544e12a0 constant 20>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e50a8 fields <field_decl 0x7f9f544e0be0 hash> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544eda80> chain <type_decl 0x7f9f544e0c78 D.4005>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _46 = &_45->old_oid;
    version 46
    ptr-info 0x7f9f545038e8>
trace fucntion name:oidcmp 

 ================== trace ================== 
trace fucntion free:0 
if (_47 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:38: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                                      ^
if (_47 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:401:38: warning: use location
Cond in fucntion main basic block 70
 ================== possible direct basic block ================= 
from main basic block 74
 ================== possible direct basic block ================= 
from main basic block 71
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54516090
    type <pointer_type 0x7f9f544eda80
        type <record_type 0x7f9f544e50a8 object_id BLK
            size <integer_cst 0x7f9f544e12b8 constant 160>
            unit size <integer_cst 0x7f9f544e12a0 constant 20>
            align 8 symtab 0 alias set -1 canonical type 0x7f9f544e50a8 fields <field_decl 0x7f9f544e0be0 hash> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544eda80> chain <type_decl 0x7f9f544e0c78 D.4005>>
        unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _46 = &_45->old_oid;
    version 46
    ptr-info 0x7f9f545038e8>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_285 = VDEF <.MEM_192>
_47 = oidcmp (_46, _44);
./benchmarks/git/leak_9/git_leak_9.c:402:8: warning: use location
       !oidcmp(&lock->old_oid, &update->new_oid)) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_47 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:38: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_47 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:38: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_47 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:38: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_47 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:38: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                                      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
if (_47 == 0)
./benchmarks/git/leak_9/git_leak_9.c:401:38: warning: use location
   if (!(update->type & REF_ISSYMREF) &&
                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f54516168
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
   
    def_stmt _49 = lock_298;
    version 49
    ptr-info 0x7f9f54503918>
_49 = lock_298;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^
this stmt is child function---write_ref_to_lockfile-----

 ================== trace ================== 
 <ssa_name 0x7f9f54516168
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
   
    def_stmt _49 = lock_298;
    version 49
    ptr-info 0x7f9f54503918>
trace fucntion name:write_ref_to_lockfile 

 ================== trace ================== 
trace fucntion free:0 
if (_50 != 0)
./benchmarks/git/leak_9/git_leak_9.c:407:13: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
             ^
if (_50 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_9/git_leak_9.c:407:13: warning: use location
Cond in fucntion main basic block 71
 ================== possible direct basic block ================= 
from main basic block 72
 ================== possible direct basic block ================= 
from main basic block 73
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9f54516168
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
   
    def_stmt _49 = lock_298;
    version 49
    ptr-info 0x7f9f54503918>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: use location
   free(reason);
   ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
# .MEM_286 = VDEF <.MEM_193>
_50 = write_ref_to_lockfile (_49, _48, &err);
./benchmarks/git/leak_9/git_leak_9.c:407:14: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_229 = VDEF <.MEM_228>
ret_161 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_50 != 0)
./benchmarks/git/leak_9/git_leak_9.c:407:13: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_230 = VDEF <.MEM_229>
ret_165 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_50 != 0)
./benchmarks/git/leak_9/git_leak_9.c:407:13: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_231 = VDEF <.MEM_181>
ret_167 = realloc (_158, _157);
./benchmarks/git/leak_9/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_50 != 0)
./benchmarks/git/leak_9/git_leak_9.c:407:13: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_232 = VDEF <.MEM_231>
ret_171 = realloc (_158, 1);
./benchmarks/git/leak_9/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (_50 != 0)
./benchmarks/git/leak_9/git_leak_9.c:407:13: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_294 = VDEF <.MEM_293>
free (reason_17);
./benchmarks/git/leak_9/git_leak_9.c:351:3: warning: Use after free error!: free location 
   free(reason);
   ^
if (_50 != 0)
./benchmarks/git/leak_9/git_leak_9.c:407:13: warning: use location
   } else if (write_ref_to_lockfile(lock, &update->new_oid,
             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9f54511b00
    type <pointer_type 0x7f9f544deb28
        type <record_type 0x7f9f544dea80 strbuf BLK
            size <integer_cst 0x7f9f549d00a8 constant 192>
            unit size <integer_cst 0x7f9f549d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544dea80 fields <field_decl 0x7f9f544e0390 alloc> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544deb28> chain <type_decl 0x7f9f544e0428 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f9f5574ae10 err type <record_type 0x7f9f544dea80 strbuf>
        addressable BLK file ./benchmarks/git/leak_9/git_leak_9.c line 441 col 19 size <integer_cst 0x7f9f549d00a8 192> unit size <integer_cst 0x7f9f549d0078 24>
        align 128 context <function_decl 0x7f9f544dfb00 main>>
    ./benchmarks/git/leak_9/git_leak_9.c:442:5 start: ./benchmarks/git/leak_9/git_leak_9.c:442:5 finish: ./benchmarks/git/leak_9/git_leak_9.c:442:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9f545163f0
    type <pointer_type 0x7f9f544e5d20
        type <record_type 0x7f9f544e5c78 ref_lock BLK
            size <integer_cst 0x7f9f544e12e8 constant 320>
            unit size <integer_cst 0x7f9f544e1300 constant 40>
            align 64 symtab 0 alias set -1 canonical type 0x7f9f544e5c78 fields <field_decl 0x7f9f544e8000 ref_name> context <translation_unit_decl 0x7f9f549bf168 ./benchmarks/git/leak_9/git_leak_9.c>
            pointer_to_this <pointer_type 0x7f9f544e5d20> chain <type_decl 0x7f9f544e8098 D.4038>>
        public unsigned DI
        size <integer_cst 0x7f9f549b4be8 constant 64>
        unit size <integer_cst 0x7f9f549b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f9f544e5dc8>>
   
    def_stmt _58 = lock_298;
    version 58
    ptr-info 0x7f9f54503948>
_58 = lock_298;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:strbuf_release=========
=======is loop:0=========

 bb index 2 
<bb 2> [100.00%]:
_1 = sb_5(D)->alloc;
if (_1 != 0)
  goto <bb 3>; [36.64%]
else
  goto <bb 4>; [63.36%]

=======is loop:0=========

 bb index 3 
<bb 3> [36.64%]:
_2 = sb_5(D)->buf;
free (_2);
strbuf_init (sb_5(D), 0);

=======is loop:0=========

 bb index 4 
<bb 4> [100.00%]:
return;

=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [6.76%]:
referent.alloc = 0;
referent.len = 0;
referent.buf = &strbuf_slopbuf;
if (head_ref_2(D) != 0B)
  goto <bb 3>; [70.00%]
else
  goto <bb 4>; [30.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [4.73%]:
ret_10 = split_head_update (&update, &transaction, head_ref_2(D), &affected_refnames, &err);
if (ret_10 != 0)
  goto <bb 77>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [4.58%]:
_11 = &update.type;
_12 = &update.refname;
ref_file.alloc = 0;
ref_file.len = 0;
ref_file.buf = &strbuf_slopbuf;
*_11 = 0;
lock_61 = calloc (1, 40);
lock_299 = lock_61;
_62 = strdup (_12);
lock_61->ref_name = _62;
files_ref_path (&refs, &ref_file, _12);
_63 = &lock_61->old_oid.hash;
_64 = &refs.base;
_70 = files_downcast (_64, 1, "read_raw_ref");
_71 = (long int) _70;
refs_72 = (struct files_ref_store *) _71;
sb_contents.alloc = 0;
sb_contents.len = 0;
sb_contents.buf = &strbuf_slopbuf;
sb_path.alloc = 0;
sb_path.len = 0;
sb_path.buf = &strbuf_slopbuf;
*_11 = 0;
strbuf_reset (&sb_path);
files_ref_path (refs_72, &sb_path, _12);
path_73 = sb_path.buf;

=======is loop:1=========

 bb index 5 
# remaining_retries_74 = PHI <3(4), remaining_retries_76(39)>
stat_ref [13.61%]:
_75 = remaining_retries_74;
remaining_retries_76 = remaining_retries_74 + -1;
if (remaining_retries_74 <= 0)
  goto <bb 54> (out); [25.00%]
else
  goto <bb 6>; [75.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [10.21%]:
_77 = lstat (path_73, &st);
if (_77 < 0)
  goto <bb 7>; [3.75%]
else
  goto <bb 10>; [96.25%]

=======is loop:0=========

 bb index 7 
<bb 7> [0.38%]:
_78 = __errno_location ();
_79 = *_78;
if (_79 != 2)
  goto <bb 54> (out); [7.44%]
else
  goto <bb 8>; [92.56%]

=======is loop:0=========

 bb index 8 
<bb 8> [0.35%]:
_80 = resolve_packed_ref (refs_72, _12, _63, _11);
if (_80 != 0)
  goto <bb 9>; [2.00%]
else
  goto <bb 54> (out); [98.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [0.01%]:
_81 = __errno_location ();
*_81 = 2;
goto <bb 54> (out); [100.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [9.82%]:
strbuf_reset (&sb_contents);
oldalloc_121 = sb_contents.alloc;
goto <bb 35>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [95.00%]:
_131 = sb_contents.alloc;
_132 = _131 == 0;
new_buf_133 = (int) _132;
_134 = unsigned_add_overflows (hint_122, 1);
if (_134 != 0)
  goto <bb 13>; [0.04%]
else
  goto <bb 12>; [99.96%]

=======is loop:1=========

 bb index 12 
<bb 12> [94.96%]:
_135 = hint_122 + 1;
_136 = sb_contents.len;
_137 = unsigned_add_overflows (_136, _135);
if (_137 != 0)
  goto <bb 13>; [0.04%]
else
  goto <bb 14>; [99.96%]

=======is loop:0=========

 bb index 13 
<bb 13> [0.08%]:
_138 = __printf_chk (1, "you want to use way too much memory%s", "");
exit (1);

=======is loop:1=========

 bb index 14 
<bb 14> [94.92%]:
if (_131 == 0)
  goto <bb 15>; [50.00%]
else
  goto <bb 16>; [50.00%]

=======is loop:1=========

 bb index 15 
<bb 15> [47.46%]:
sb_contents.buf = 0B;

=======is loop:1=========

 bb index 16 
<bb 16> [94.92%]:
_139 = sb_contents.len;
_140 = hint_122 + _139;
_141 = _140 + 1;
_142 = sb_contents.alloc;
if (_141 > _142)
  goto <bb 17>; [33.00%]
else
  goto <bb 28>; [67.00%]

=======is loop:1=========

 bb index 17 
<bb 17> [31.32%]:
_143 = sb_contents.alloc;
_144 = alloc_nr (_143);
_145 = (long unsigned int) _144;
_146 = sb_contents.len;
_147 = hint_122 + _146;
_148 = _147 + 1;
if (_145 < _148)
  goto <bb 18>; [67.00%]
else
  goto <bb 19>; [33.00%]

=======is loop:1=========

 bb index 18 
<bb 18> [20.99%]:
_149 = sb_contents.len;
_150 = hint_122 + _149;
_151 = _150 + 1;
sb_contents.alloc = _151;
goto <bb 20>; [100.00%]

=======is loop:1=========

 bb index 19 
<bb 19> [10.34%]:
_152 = sb_contents.alloc;
_153 = alloc_nr (_152);
_154 = (long unsigned int) _153;
sb_contents.alloc = _154;

=======is loop:1=========

 bb index 20 
<bb 20> [31.32%]:
_155 = sb_contents.alloc;
_156 = st_mult (1, _155);
_157 = (long unsigned int) _156;
_158 = sb_contents.buf;
ret_161 = realloc (_158, _157);
_162 = ret_161 == 0B;
_163 = _157 == 0;
_164 = _162 & _163;
if (_164 != 0)
  goto <bb 21>; [33.00%]
else
  goto <bb 22>; [67.00%]

=======is loop:1=========

 bb index 21 
<bb 21> [10.34%]:
ret_165 = realloc (_158, 1);

=======is loop:1=========

 bb index 22 
<bb 22> [31.32%]:
# ret_166 = PHI <ret_161(20), ret_165(21)>
if (ret_166 == 0B)
  goto <bb 23>; [19.86%]
else
  goto <bb 27>; [80.14%]

=======is loop:1=========

 bb index 23 
<bb 23> [6.22%]:
ret_167 = realloc (_158, _157);
_168 = ret_167 == 0B;
_169 = _157 == 0;
_170 = _168 & _169;
if (_170 != 0)
  goto <bb 24>; [33.00%]
else
  goto <bb 25>; [67.00%]

=======is loop:1=========

 bb index 24 
<bb 24> [2.05%]:
ret_171 = realloc (_158, 1);

=======is loop:1=========

 bb index 25 
<bb 25> [6.22%]:
# ret_172 = PHI <ret_167(23), ret_171(24)>
if (ret_172 == 0B)
  goto <bb 26>; [0.04%]
else
  goto <bb 27>; [99.96%]

=======is loop:0=========

 bb index 26 
<bb 26> [0.00%]:
_173 = __printf_chk (1, "Out of memory, realloc failed%s", "");
exit (1);

=======is loop:1=========

 bb index 27 
<bb 27> [31.32%]:
# ret_174 = PHI <ret_166(22), ret_172(25)>
_175 = ret_174;
_235 = ret_174;
_159 = _235;
sb_contents.buf = _159;

=======is loop:1=========

 bb index 28 
<bb 28> [94.92%]:
if (_131 == 0)
  goto <bb 29>; [54.00%]
else
  goto <bb 30>; [46.00%]

=======is loop:1=========

 bb index 29 
<bb 29> [51.26%]:
_160 = sb_contents.buf;
*_160 = 0;

=======is loop:1=========

 bb index 30 
<bb 30> [94.92%]:
_123 = sb_contents.buf;
len_124 = readlink (path_73, _123, hint_122);
if (len_124 < 0)
  goto <bb 31>; [36.00%]
else
  goto <bb 32>; [64.00%]

=======is loop:1=========

 bb index 31 
<bb 31> [34.17%]:
_125 = __errno_location ();
_126 = *_125;
if (_126 != 34)
  goto <bb 36>; [5.00%]
else
  goto <bb 34>; [95.00%]

=======is loop:1=========

 bb index 32 
<bb 32> [60.75%]:
_127 = (long unsigned int) len_124;
if (hint_122 > _127)
  goto <bb 33>; [5.00%]
else
  goto <bb 34>; [95.00%]

=======is loop:1=========

 bb index 33 
<bb 33> [3.04%]:
strbuf_setlen (&sb_contents, len_124);
goto <bb 38>; [100.00%]

=======is loop:1=========

 bb index 34 
<bb 34> [90.18%]:
hint_128 = hint_122 * 2;

=======is loop:1=========

 bb index 35 
<bb 35> [100.00%]:
# hint_122 = PHI <32(10), hint_128(34)>
if (hint_122 <= 8191)
  goto <bb 11>; [95.00%]
else
  goto <bb 36>; [5.00%]

=======is loop:1=========

 bb index 36 
<bb 36> [6.71%]:
if (oldalloc_121 == 0)
  goto <bb 37>; [33.00%]
else
  goto <bb 38>; [67.00%]

=======is loop:1=========

 bb index 37 
<bb 37> [2.21%]:
strbuf_release (&sb_contents);

=======is loop:1=========

 bb index 38 
<bb 38> [9.75%]:
# _129 = PHI <0(33), -1(36), -1(37)>
_243 = _129;
_82 = _243;
if (_82 < 0)
  goto <bb 39>; [96.25%]
else
  goto <bb 40>; [3.75%]

=======is loop:1=========

 bb index 39 
<bb 39> [9.38%]:
_83 = __errno_location ();
_84 = *_83;
_85 = _84 == 2;
_86 = _84 == 22;
_87 = _85 | _86;
if (_87 != 0)
  goto <bb 5> (stat_ref); [96.25%]
else
  goto <bb 54> (out); [3.75%]

=======is loop:0=========

 bb index 40 
<bb 40> [0.37%]:
_88 = sb_contents.buf;
_89 = starts_with (_88, "refs/");
if (_89 != 0)
  goto <bb 41>; [50.00%]
else
  goto <bb 43>; [50.00%]

=======is loop:0=========

 bb index 41 
<bb 41> [0.18%]:
_90 = sb_contents.buf;
_91 = check_refname_format (_90, 0);
if (_91 == 0)
  goto <bb 42>; [29.56%]
else
  goto <bb 43>; [70.44%]

=======is loop:0=========

 bb index 42 
<bb 42> [0.05%]:
MEM[(char * {ref-all})&_swap_buffer] = MEM[(char * {ref-all})&sb_contents];
MEM[(char * {ref-all})&sb_contents] = MEM[(char * {ref-all})&referent];
MEM[(char * {ref-all})&referent] = MEM[(char * {ref-all})&_swap_buffer];
_swap_buffer ={v} {CLOBBER};
_92 = *_11;
_93 = _92 | 1;
*_11 = _93;
goto <bb 54> (out); [100.00%]

=======is loop:0=========

 bb index 43 
<bb 43> [0.31%]:
strbuf_reset (&sb_contents);
_95 = strbuf_read (&sb_contents, fd_94(D), 256);
if (_95 < 0)
  goto <bb 44>; [1.13%]
else
  goto <bb 45>; [98.87%]

=======is loop:0=========

 bb index 44 
<bb 44> [0.00%]:
_96 = __errno_location ();
save_errno_97 = *_96;
close (fd_94(D));
_98 = __errno_location ();
*_98 = save_errno_97;
goto <bb 54> (out); [100.00%]

=======is loop:0=========

 bb index 45 
<bb 45> [0.31%]:
strbuf_rtrim (&sb_contents);
buf_99 = sb_contents.buf;
_100 = starts_with (buf_99, "ref:");
if (_100 != 0)
  goto <bb 46>; [67.00%]
else
  goto <bb 50>; [33.00%]

=======is loop:0=========

 bb index 46 
<bb 46> [0.21%]:
buf_101 = buf_99 + 4;
goto <bb 48>; [100.00%]

=======is loop:1=========

 bb index 47 
<bb 47> [1.17%]:
buf_103 = buf_102 + 1;

=======is loop:1=========

 bb index 48 
<bb 48> [1.38%]:
# buf_102 = PHI <buf_101(46), buf_103(47)>
_104 = *buf_102;
_105 = (int) _104;
_106 = isspace (_105);
if (_106 != 0)
  goto <bb 47>; [85.00%]
else
  goto <bb 49>; [15.00%]

=======is loop:0=========

 bb index 49 
<bb 49> [0.21%]:
strbuf_reset (&referent);
strbuf_addstr (&referent, buf_102);
_107 = *_11;
_108 = _107 | 1;
*_11 = _108;
goto <bb 54> (out); [100.00%]

=======is loop:0=========

 bb index 50 
<bb 50> [0.10%]:
_109 = get_sha1_hex (buf_99, _63);
if (_109 != 0)
  goto <bb 53>; [2.00%]
else
  goto <bb 51>; [98.00%]

=======is loop:0=========

 bb index 51 
<bb 51> [0.10%]:
_110 = MEM[(const char *)buf_99 + 40B];
if (_110 != 0)
  goto <bb 52>; [54.00%]
else
  goto <bb 54> (out); [46.00%]

=======is loop:0=========

 bb index 52 
<bb 52> [0.05%]:
_111 = MEM[(const char *)buf_99 + 40B];
_112 = (int) _111;
_113 = isspace (_112);
if (_113 == 0)
  goto <bb 53>; [2.00%]
else
  goto <bb 54> (out); [98.00%]

=======is loop:0=========

 bb index 53 
<bb 53> [0.00%]:
_114 = *_11;
_115 = _114 | 4;
*_11 = _115;
_116 = __errno_location ();
*_116 = 22;

=======is loop:0=========

 bb index 54 
# ret_120 = PHI <-1(5), -1(7), 0(8), -1(9), -1(39), 0(42), -1(44), 0(49), 0(51), 0(52), -1(53)>
out [4.50%]:
_117 = __errno_location ();
save_errno_118 = *_117;
strbuf_release (&sb_path);
strbuf_release (&sb_contents);
_119 = __errno_location ();
*_119 = save_errno_118;
sb_contents ={v} {CLOBBER};
sb_path ={v} {CLOBBER};
st ={v} {CLOBBER};
_271 = ret_120;
_65 = _271;
if (_65 != 0)
  goto <bb 55>; [54.00%]
else
  goto <bb 58> (out); [46.00%]

=======is loop:0=========

 bb index 55 
<bb 55> [2.43%]:
_66 = __errno_location ();
_67 = *_66;
if (_67 == 2)
  goto <bb 56>; [37.68%]
else
  goto <bb 58> (out); [62.32%]

=======is loop:0=========

 bb index 56 
<bb 56> [0.92%]:
if (mustexist_13(D) != 0)
  goto <bb 57>; [1.00%]
else
  goto <bb 58> (out); [99.00%]

=======is loop:0=========

 bb index 57 
<bb 57> [0.01%]:
strbuf_addf (&err, "unable to resolve reference \'%s\'", _12);
unlock_ref (lock_61);
lock_300 = 0B;

=======is loop:0=========

 bb index 58 
# ret_68 = PHI <0(54), 0(55), 0(56), -2(57)>
# lock_298 = PHI <lock_299(54), lock_299(55), lock_299(56), lock_300(57)>
out [4.50%]:
strbuf_release (&ref_file);
_69 = ret_68;
ref_file ={v} {CLOBBER};
_277 = ret_68;
ret_14 = _277;
if (ret_14 != 0)
  goto <bb 59>; [29.56%]
else
  goto <bb 60>; [70.44%]

=======is loop:0=========

 bb index 59 
<bb 59> [1.33%]:
_15 = strbuf_detach (&err, 0B);
_16 = (long int) _15;
reason_17 = (char *) _16;
_18 = original_update_refname (&update);
strbuf_addf (&err, "cannot lock ref \'%s\': %s", _18, reason_17);
free (reason_17);
goto <bb 77>; [100.00%]

=======is loop:0=========

 bb index 60 
<bb 60> [3.17%]:
_19 = lock_298;
update.backend_data = _19;
_20 = update.type;
_21 = _20 & 1;
if (_21 != 0)
  goto <bb 61>; [67.00%]
else
  goto <bb 67>; [33.00%]

=======is loop:0=========

 bb index 61 
<bb 61> [2.12%]:
_22 = update.flags;
_23 = _22 & 1;
if (_23 != 0)
  goto <bb 62>; [50.00%]
else
  goto <bb 66>; [50.00%]

=======is loop:0=========

 bb index 62 
<bb 62> [1.06%]:
_24 = lock_298;
_25 = &_24->old_oid.hash;
_26 = referent.buf;
_27 = &refs.base;
_28 = refs_read_ref_full (_27, _26, 0, _25, 0B);
if (_28 != 0)
  goto <bb 63>; [67.00%]
else
  goto <bb 65>; [33.00%]

=======is loop:0=========

 bb index 63 
<bb 63> [0.71%]:
_29 = update.flags;
_30 = _29 & 16;
if (_30 != 0)
  goto <bb 64>; [1.00%]
else
  goto <bb 68>; [99.00%]

=======is loop:0=========

 bb index 64 
<bb 64> [0.01%]:
_31 = original_update_refname (&update);
strbuf_addf (&err, "cannot lock ref \'%s\': error reading reference", _31);
goto <bb 77>; [100.00%]

=======is loop:0=========

 bb index 65 
<bb 65> [0.35%]:
_32 = lock_298;
_33 = &_32->old_oid;
_34 = check_old_oid (&update, _33, &err);
if (_34 != 0)
  goto <bb 77>; [2.00%]
else
  goto <bb 68>; [98.00%]

=======is loop:0=========

 bb index 66 
<bb 66> [1.06%]:
_35 = referent.buf;
ret_36 = split_symref_update (&refs, &update, _35, &transaction, &affected_refnames, &err);
if (ret_36 != 0)
  goto <bb 77>; [46.00%]
else
  goto <bb 68>; [54.00%]

=======is loop:0=========

 bb index 67 
<bb 67> [1.05%]:
_37 = lock_298;
_38 = &_37->old_oid;
_39 = check_old_oid (&update, _38, &err);
if (_39 != 0)
  goto <bb 77>; [2.00%]
else
  goto <bb 68>; [98.00%]

=======is loop:0=========

 bb index 68 
<bb 68> [2.65%]:
_40 = BIT_FIELD_REF <update, 32, 320>;
_41 = _40 & 138;
if (_41 == 8)
  goto <bb 69>; [34.00%]
else
  goto <bb 74>; [66.00%]

=======is loop:0=========

 bb index 69 
<bb 69> [0.90%]:
_42 = update.type;
_43 = _42 & 1;
if (_43 == 0)
  goto <bb 70>; [50.00%]
else
  goto <bb 71>; [50.00%]

=======is loop:0=========

 bb index 70 
<bb 70> [0.45%]:
_44 = &update.new_oid;
_45 = lock_298;
_46 = &_45->old_oid;
_47 = oidcmp (_46, _44);
if (_47 == 0)
  goto <bb 74>; [50.00%]
else
  goto <bb 71>; [50.00%]

=======is loop:0=========

 bb index 71 
<bb 71> [0.68%]:
_48 = &update.new_oid;
_49 = lock_298;
_50 = write_ref_to_lockfile (_49, _48, &err);
if (_50 != 0)
  goto <bb 72>; [1.00%]
else
  goto <bb 73>; [99.00%]

=======is loop:0=========

 bb index 72 
<bb 72> [0.01%]:
_51 = strbuf_detach (&err, 0B);
_52 = (long int) _51;
write_err_53 = (char *) _52;
update.backend_data = 0B;
goto <bb 77>; [100.00%]

=======is loop:0=========

 bb index 73 
<bb 73> [0.67%]:
_54 = update.flags;
_55 = _54 | 32;
update.flags = _55;

=======is loop:0=========

 bb index 74 
<bb 74> [2.64%]:
_56 = update.flags;
_57 = _56 & 32;
if (_57 == 0)
  goto <bb 75>; [36.64%]
else
  goto <bb 77>; [63.36%]

=======is loop:0=========

 bb index 75 
<bb 75> [0.97%]:
_58 = lock_298;
_59 = close_ref (_58);
if (_59 != 0)
  goto <bb 77>; [2.00%]
else
  goto <bb 76>; [98.00%]

=======is loop:0=========

 bb index 76 
<bb 76> [0.95%]:

=======is loop:0=========

 bb index 77 
<bb 77> [6.68%]:
# _60 = PHI <ret_10(3), ret_14(59), -1(64), -2(65), ret_36(66), -2(67), -2(72), 0(74), -2(75), 0(76)>
referent ={v} {CLOBBER};
_297 = _60;
refs ={v} {CLOBBER};
update ={v} {CLOBBER};
transaction ={v} {CLOBBER};
affected_refnames ={v} {CLOBBER};
err ={v} {CLOBBER};
return 0;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 34 [0m
[40;34m    used_stmt array stack totalsize of : 13216 [0m
[40;34m    collect time: : 0.000815 s [0m
[40;34m    algorithm time: 0.150436 s [0m
[40;34m    gimple stmt count : : 283 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
/usr/bin/ld: /tmp/ccCfAnLA.ltrans0.ltrans.o: warning: relocation against `strbuf_slopbuf' in read-only section `.text'
/usr/bin/ld: /tmp/ccCfAnLA.ltrans0.ltrans.o: in function `strbuf_release':
<artificial>:(.text+0x23): undefined reference to `strbuf_init'
/usr/bin/ld: /tmp/ccCfAnLA.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x62): undefined reference to `strbuf_slopbuf'
/usr/bin/ld: <artificial>:(.text+0xdf): undefined reference to `files_ref_path'
/usr/bin/ld: <artificial>:(.text+0x101): undefined reference to `files_downcast'
/usr/bin/ld: <artificial>:(.text+0x169): undefined reference to `strbuf_reset'
/usr/bin/ld: <artificial>:(.text+0x17c): undefined reference to `files_ref_path'
/usr/bin/ld: <artificial>:(.text+0x1c6): undefined reference to `strbuf_reset'
/usr/bin/ld: <artificial>:(.text+0x212): undefined reference to `resolve_packed_ref'
/usr/bin/ld: <artificial>:(.text+0x292): undefined reference to `alloc_nr'
/usr/bin/ld: <artificial>:(.text+0x318): undefined reference to `unsigned_add_overflows'
/usr/bin/ld: <artificial>:(.text+0x331): undefined reference to `unsigned_add_overflows'
/usr/bin/ld: <artificial>:(.text+0x376): undefined reference to `alloc_nr'
/usr/bin/ld: <artificial>:(.text+0x3ad): undefined reference to `st_mult'
/usr/bin/ld: <artificial>:(.text+0x4f6): undefined reference to `refs_read_ref_full'
/usr/bin/ld: <artificial>:(.text+0x51e): undefined reference to `original_update_refname'
/usr/bin/ld: <artificial>:(.text+0x536): undefined reference to `strbuf_addf'
/usr/bin/ld: <artificial>:(.text+0x54f): undefined reference to `strbuf_setlen'
/usr/bin/ld: <artificial>:(.text+0x568): undefined reference to `starts_with'
/usr/bin/ld: <artificial>:(.text+0x585): undefined reference to `strbuf_reset'
/usr/bin/ld: <artificial>:(.text+0x59c): undefined reference to `strbuf_read'
/usr/bin/ld: <artificial>:(.text+0x5b6): undefined reference to `strbuf_rtrim'
/usr/bin/ld: <artificial>:(.text+0x5d2): undefined reference to `starts_with'
/usr/bin/ld: <artificial>:(.text+0x609): undefined reference to `check_refname_format'
/usr/bin/ld: <artificial>:(.text+0x6c3): undefined reference to `strbuf_reset'
/usr/bin/ld: <artificial>:(.text+0x6d3): undefined reference to `strbuf_addstr'
/usr/bin/ld: <artificial>:(.text+0x6f2): undefined reference to `get_sha1_hex'
/usr/bin/ld: <artificial>:(.text+0x74a): undefined reference to `check_old_oid'
/usr/bin/ld: <artificial>:(.text+0x784): undefined reference to `split_symref_update'
/usr/bin/ld: <artificial>:(.text+0x7aa): undefined reference to `check_old_oid'
/usr/bin/ld: <artificial>:(.text+0x820): undefined reference to `oidcmp'
/usr/bin/ld: <artificial>:(.text+0x840): undefined reference to `write_ref_to_lockfile'
/usr/bin/ld: <artificial>:(.text+0x865): undefined reference to `strbuf_detach'
/usr/bin/ld: <artificial>:(.text+0x885): undefined reference to `close_ref'
/usr/bin/ld: warning: creating DT_TEXTREL in a PIE
collect2: error: ld returned 1 exit status
