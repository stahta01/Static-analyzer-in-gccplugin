In file included from ./benchmarks/git/leak_6/git_leak_6.c:10:0:
./benchmarks/git/leak_6/../git.h: In function ‘copy_array’:
./benchmarks/git/leak_6/../git.h:161:3: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
   memcpy(dst, src, st_mult(size, n));
   ^~~~~~
./benchmarks/git/leak_6/../git.h:161:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
./benchmarks/git/leak_6/../git.h:161:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/leak_6/../git.h:161:20: warning: implicit declaration of function ‘st_mult’; did you mean ‘stdout’? [-Wimplicit-function-declaration]
   memcpy(dst, src, st_mult(size, n));
                    ^~~~~~~
                    stdout
./benchmarks/git/leak_6/../git.h: In function ‘move_array’:
./benchmarks/git/leak_6/../git.h:169:3: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
   memmove(dst, src, st_mult(size, n));
   ^~~~~~~
./benchmarks/git/leak_6/../git.h:169:3: warning: incompatible implicit declaration of built-in function ‘memmove’
./benchmarks/git/leak_6/../git.h:169:3: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/leak_6/git_leak_6.c:9:0:
./benchmarks/git/leak_6/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/leak_6/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
 #define xstrdup(a) strdup(a)
                    ^
./benchmarks/git/leak_6/../git.h:174:15: note: in expansion of macro ‘xstrdup’
  return str ? xstrdup(str) : NULL;
               ^~~~~~~
./benchmarks/git/leak_6/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’
 #define xstrdup(a) strdup(a)
                    ^
./benchmarks/git/leak_6/../git.h:174:15: note: in expansion of macro ‘xstrdup’
  return str ? xstrdup(str) : NULL;
               ^~~~~~~
In file included from ./benchmarks/git/leak_6/git_leak_6.c:10:0:
./benchmarks/git/leak_6/../git.h: At top level:
./benchmarks/git/leak_6/../git.h:236:55: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  int (*write_archive)(const struct archiver *, struct archiver_args *);
                                                       ^~~~~~~~~~~~~
./benchmarks/git/leak_6/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/leak_6/../git.h:126:2: warning: incompatible implicit declaration of built-in function ‘memcpy’
  memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));  \
  ^
./benchmarks/git/leak_6/../git.h:407:2: note: in expansion of macro ‘SWAP’
  SWAP(*a, *b);
  ^~~~
./benchmarks/git/leak_6/../git.h:126:2: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));  \
  ^
./benchmarks/git/leak_6/../git.h:407:2: note: in expansion of macro ‘SWAP’
  SWAP(*a, *b);
  ^~~~
./benchmarks/git/leak_6/git_leak_6.c: In function ‘commit_list_insert_by_date’:
./benchmarks/git/leak_6/git_leak_6.c:22:9: warning: implicit declaration of function ‘commit_list_insert’; did you mean ‘commit_list_insert_by_date’? [-Wimplicit-function-declaration]
  return commit_list_insert(item, pp);
         ^~~~~~~~~~~~~~~~~~
         commit_list_insert_by_date
./benchmarks/git/leak_6/git_leak_6.c:22:9: warning: return makes pointer from integer without a cast [-Wint-conversion]
  return commit_list_insert(item, pp);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c: In function ‘merge_bases_many’:
./benchmarks/git/leak_6/git_leak_6.c:37:11: warning: return makes pointer from integer without a cast [-Wint-conversion]
    return commit_list_insert(one, &result);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:40:6: warning: implicit declaration of function ‘parse_commit’; did you mean ‘parse_timestamp’? [-Wimplicit-function-declaration]
  if (parse_commit(one))
      ^~~~~~~~~~~~
      parse_timestamp
./benchmarks/git/leak_6/git_leak_6.c:47:9: warning: implicit declaration of function ‘paint_down_to_common’ [-Wimplicit-function-declaration]
  list = paint_down_to_common(one, n, twos);
         ^~~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:47:7: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  list = paint_down_to_common(one, n, twos);
       ^
./benchmarks/git/leak_6/git_leak_6.c:50:27: warning: implicit declaration of function ‘pop_commit’ [-Wimplicit-function-declaration]
   struct commit *commit = pop_commit(&list);
                           ^~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:50:27: warning: initialization makes pointer from integer without a cast [-Wint-conversion]
./benchmarks/git/leak_6/git_leak_6.c: At top level:
./benchmarks/git/leak_6/git_leak_6.c:57:21: error: conflicting types for ‘commit_list_insert’
 struct commit_list *commit_list_insert(struct commit *item, struct commit_list **list_p)
                     ^~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:22:9: note: previous implicit declaration of ‘commit_list_insert’ was here
  return commit_list_insert(item, pp);
         ^~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c: In function ‘get_merge_bases_many_0’:
./benchmarks/git/leak_6/git_leak_6.c:83:4: warning: implicit declaration of function ‘clear_commit_marks’ [-Wimplicit-function-declaration]
    clear_commit_marks(one, all_flags);
    ^~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:84:4: warning: implicit declaration of function ‘clear_commit_marks_many’ [-Wimplicit-function-declaration]
    clear_commit_marks_many(n, twos, all_flags);
    ^~~~~~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:90:8: warning: implicit declaration of function ‘commit_list_count’; did you mean ‘commit_list_insert’? [-Wimplicit-function-declaration]
  cnt = commit_list_count(result);
        ^~~~~~~~~~~~~~~~~
        commit_list_insert
./benchmarks/git/leak_6/git_leak_6.c:94:2: warning: implicit declaration of function ‘free_commit_list’ [-Wimplicit-function-declaration]
  free_commit_list(result);
  ^~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:99:8: warning: implicit declaration of function ‘remove_redundant’ [-Wimplicit-function-declaration]
  cnt = remove_redundant(rslt, cnt);
        ^~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c: In function ‘show_merge_base’:
./benchmarks/git/leak_6/git_leak_6.c:124:18: warning: implicit declaration of function ‘oid_to_hex’ [-Wimplicit-function-declaration]
   printf("%s\n", oid_to_hex(&result->item->object.oid));
                  ^~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:124:12: warning: format ‘%s’ expects argument of type ‘char *’, but argument 2 has type ‘int’ [-Wformat=]
   printf("%s\n", oid_to_hex(&result->item->object.oid));
           ~^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           %d
./benchmarks/git/leak_6/git_leak_6.c: In function ‘handle_independent’:
./benchmarks/git/leak_6/git_leak_6.c:140:22: warning: implicit declaration of function ‘get_commit_reference’ [-Wimplicit-function-declaration]
   commit_list_insert(get_commit_reference(args[i]), &revs);
                      ^~~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:140:22: warning: passing argument 1 of ‘commit_list_insert’ makes pointer from integer without a cast [-Wint-conversion]
./benchmarks/git/leak_6/git_leak_6.c:57:21: note: expected ‘struct commit *’ but argument is of type ‘int’
 struct commit_list *commit_list_insert(struct commit *item, struct commit_list **list_p)
                     ^~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:142:11: warning: implicit declaration of function ‘reduce_heads’ [-Wimplicit-function-declaration]
  result = reduce_heads(revs);
           ^~~~~~~~~~~~
./benchmarks/git/leak_6/git_leak_6.c:142:9: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  result = reduce_heads(revs);
         ^
./benchmarks/git/leak_6/git_leak_6.c:147:12: warning: format ‘%s’ expects argument of type ‘char *’, but argument 2 has type ‘int’ [-Wformat=]
   printf("%s\n", oid_to_hex(&result->item->object.oid));
           ~^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           %d
./benchmarks/git/leak_6/git_leak_6.c: In function ‘main’:
./benchmarks/git/leak_6/git_leak_6.c:159:30: warning: passing argument 2 of ‘handle_independent’ from incompatible pointer type [-Wincompatible-pointer-types]
     handle_independent(argc, argv);
                              ^~~~
./benchmarks/git/leak_6/git_leak_6.c:133:12: note: expected ‘const char **’ but argument is of type ‘char **’
 static int handle_independent(int count, const char **args)
            ^~~~~~~~~~~~~~~~~~
