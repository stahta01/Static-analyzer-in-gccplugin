../Compiler/newplugin.so 11.2.0 
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: In function ‘copy_array’:
./benchmarks/git/double_free_4/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/double_free_4/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘move_array’:
./benchmarks/git/double_free_4/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/double_free_4/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: At top level:
./benchmarks/git/double_free_4/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/double_free_4/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
   81 |         if (!strcmp(list->name, name))
      |              ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:11:1: note: include ‘<string.h>’ or provide a declaration of ‘strcmp’
   10 | #include "../git.h"
  +++ |+#include <string.h>
   11 | 
./benchmarks/git/double_free_4/git_df_4.c: In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
   89 |         size_t len = strlen(name);
      |                      ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:91:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/git_df_4.c: In function ‘copy_ref’:
./benchmarks/git/double_free_4/git_df_4.c:107:15: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
  107 |         len = strlen(ref->name);
      |               ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:107:15: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:109:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  109 |         memcpy(cpy, ref, sizeof(struct ref) + len + 1);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:109:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:111:37: note: in expansion of macro ‘xstrdup’
  111 |         cpy->symref = ref->symref ? xstrdup(ref->symref) : NULL;
      |                                     ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘try_explicit_object_name’:
./benchmarks/git/double_free_4/git_df_4.c:124:17: warning: implicit declaration of function ‘hashclr’ [-Wimplicit-function-declaration]
  124 |                 hashclr(ref->new_sha1);
      |                 ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:127:13: warning: implicit declaration of function ‘get_sha1’ [-Wimplicit-function-declaration]
  127 |         if (get_sha1(name, sha1))
      |             ^~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:130:9: warning: implicit declaration of function ‘hashcpy’ [-Wimplicit-function-declaration]
  130 |         hashcpy(ref->new_sha1, sha1);
      |         ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: implicit declaration of function ‘get_local_heads’ [-Wimplicit-function-declaration]
  215 |         local_refs = get_local_heads();
      |                      ^~~~~~~~~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: assignment to ‘struct ref *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  215 |         local_refs = get_local_heads();
      |                    ^

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 50%)
 phase parsing                      :   0.03 (100%)   0.01 ( 50%)   0.04 ( 80%)  1109k ( 42%)
 phase opt and generate             :   0.00 (  0%)   0.01 ( 50%)   0.01 ( 20%)   192k (  7%)
 callgraph ipa passes               :   0.00 (  0%)   0.01 ( 50%)   0.01 ( 20%)   110k (  4%)
 preprocessing                      :   0.01 ( 33%)   0.01 ( 50%)   0.01 ( 20%)   325k ( 12%)
 lexical analysis                   :   0.02 ( 67%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 parser (global)                    :   0.00 (  0%)   0.00 (  0%)   0.02 ( 40%)   575k ( 22%)
 parser function body               :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)    97k (  4%)
 tree CCP                           :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)   784  (  0%)
 loop fini                          :   0.00 (  0%)   0.01 ( 50%)   0.00 (  0%)     0  (  0%)
 TOTAL                              :   0.03          0.02          0.05         2609k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.01 (100%)   0.00 (  0%)   0.01 (100%)  2157k ( 97%)
 TOTAL                              :   0.01          0.00          0.01         2228k
../Compiler/newplugin.so 11.2.0 
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
node:= 2 
 	next_branch :=3
	next_branch :=4
addr_expraddr_expraddr_expraddr_expraddr_expr------get_local_heads--
addr_expraddr_expraddr_expraddr_expraddr_expr------match_refs--
node:= 3 
 	next_branch :=6
node:= 4 
 	next_branch :=5
	next_branch :=6
node:= 5 
 	next_branch :=6
addr_expraddr_expraddr_expraddr_expraddr_expr------__builtin_fwrite--
addr_expraddr_expraddr_expraddr_expraddr_expr------free_refs--
addr_expraddr_expraddr_expraddr_expraddr_expr------free_refs--
=======node_fun:match_refs=========
node:= 2 
 	next_branch :=15
node:= 3 
 	next_branch :=4
	next_branch :=5
node:= 4 
 	next_branch :=14
node:= 5 
 	next_branch :=6
	next_branch :=8
addr_expraddr_expraddr_expraddr_expraddr_expr------find_ref_by_name--
node:= 6 
 	next_branch :=7
	next_branch :=12
node:= 7 
 	next_branch :=13
node:= 8 
 	next_branch :=9
	next_branch :=11
node:= 9 
 	next_branch :=10
	next_branch :=11
node:= 10 
 	next_branch :=13
node:= 11 
 	next_branch :=12
addr_expraddr_expraddr_expraddr_expraddr_expr------make_linked_ref--
addr_expraddr_expraddr_expraddr_expraddr_expr------hashcpy--
node:= 12 
 	next_branch :=13
node:= 13 
 	next_branch :=14
node:= 14 
 	next_branch :=15
node:= 15 
 	next_branch :=3
	next_branch :=16
=======node_fun:make_linked_ref=========
addr_expraddr_expraddr_expraddr_expraddr_expr------alloc_ref--
addr_expraddr_expraddr_expraddr_expraddr_expr------tail_link_ref--
=======node_fun:tail_link_ref=========
node:= 2 
 	next_branch :=4
node:= 3 
 	next_branch :=4
node:= 4 
 	next_branch :=3
	next_branch :=5
=======node_fun:alloc_ref=========
addr_expraddr_expraddr_expraddr_expraddr_expr------alloc_ref_with_prefix--
=======node_fun:alloc_ref_with_prefix=========
addr_expraddr_expraddr_expraddr_expraddr_expr------strlen--
addr_expraddr_expraddr_expraddr_expraddr_expr------memcpy--
addr_expraddr_expraddr_expraddr_expraddr_expr------memcpy--
=======node_fun:find_ref_by_name=========
node:= 2 
 	next_branch :=5
node:= 3 
 	next_branch :=6
	next_branch :=4
addr_expraddr_expraddr_expraddr_expraddr_expr------strcmp--
node:= 4 
 	next_branch :=5
node:= 5 
 	next_branch :=3
	next_branch :=6
=======node_fun:free_refs=========
node:= 2 
 	next_branch :=4
node:= 3 
 	next_branch :=4
addr_expraddr_expraddr_expraddr_expraddr_expr------free_ref--
node:= 4 
 	next_branch :=3
	next_branch :=5
=======node_fun:free_ref=========
node:= 2 
 	next_branch :=4
	next_branch :=3
node:= 3 
 	next_branch :=4
addr_expraddr_expraddr_expraddr_expraddr_expr------free_ref--
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 39 
===============The second stage : Mapping stmt=================
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
===============The second stage : Program slicing=================
=============== *this point analyzable =================
_1 = get_local_heads ();
========================================================
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
========================================================
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
========================================================
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
=============== *this point analyzable =================
free_refs (_7);
========================================================
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
=============== *this point analyzable =================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
========================================================
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
=============== *this point analyzable =================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
========================================================
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
=============== *this point analyzable =================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
========================================================
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
=============== *this point analyzable =================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
========================================================
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
=============== *this point analyzable =================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
========================================================
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
=============== *this point analyzable =================
hashcpy (_7, _6);
========================================================
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
=============== *this point analyzable =================
hashcpy (_7, _6);
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
========================================================
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
=============== *this point analyzable =================
tail_link_ref (ret_4, tail_5(D));
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
========================================================
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
========================================================
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
========================================================
=============== *this point analyzable =================
ref_11 = calloc (1, _2);
========================================================
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
========================================================
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
========================================================
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
========================================================
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
=============== *this point analyzable =================
memcpy (_5, name_7(D), len_8);
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
========================================================
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>
=============== *this point analyzable =================
free_ref (ref_1);
========================================================
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
=============== *this point analyzable =================
free_ref (_1);
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_refs========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path free_refs  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:free_ref========= [0m
[40;42m =======pre_check_funciton:free_refs========= [0m
[40;42m =======start_check_funciton:free_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_5 = ref_1->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: free in this location
   73 |                 free_ref(ref);
      |                 ^

===== possiable asias =====
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:free_refs========= [0m
[40;42m =======pre add _ fucntion:__builtin_fwrite========= [0m
[40;33m =======POP node_fun stack:__builtin_fwrite========= [0m
[40;42m =======pre add _ fucntion:match_refs========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path match_refs  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;33m =======POP node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :4========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt call this function :calloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
is Other function 

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f0d7b693540
    type <array_type 0x7f0d7b683e70
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        QI size <integer_cst 0x7f0d7bb63ca8 8> unit-size <integer_cst 0x7f0d7bb63cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f0d7b683dc8 type <integer_type 0x7f0d7bb78000 sizetype>
            DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63be8 0> max <integer_cst 0x7f0d7bb63be8 0>>
        pointer_to_this <pointer_type 0x7f0d7b688348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
return _4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_linked_ref========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:find_ref_by_name========= [0m
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>

 ================== pre trace ptable ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
is Other function find_ref_by_name
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>

 ================== pre trace ptable ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :889========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :890========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
is Other function make_linked_ref
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6bc18
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f0d7b693738>
 <ssa_name 0x7f0d7bb6bc18
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f0d7b693738>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6bc18
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f0d7b693738>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6bc18
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f0d7b693738>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:match_refs========= [0m
[40;42m =======pre add _ fucntion:get_local_heads========= [0m
[40;33m =======POP node_fun stack:get_local_heads========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:get_local_heads 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
is Other function get_local_heads
 
 Start check Pointer Collect  

======================================================================
_2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
this stmt call this function :get_local_heads
trace fucntion name:get_local_heads 

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6b5e8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6b828
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7c40bcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f0d7b6936f0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6b678
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f0d7b693678>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <var_decl 0x7f0d7c40bb40 remote_tail
    type <pointer_type 0x7f0d7b683738
        type <pointer_type 0x7f0d7b683690 type <record_type 0x7f0d7b6835e8 ref>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b683738>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b6883f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6b7e0
    type <pointer_type 0x7f0d7b6830a8
        type <pointer_type 0x7f0d7b683000 type <integer_type 0x7f0d7b67bbd0 char>
            unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b6830a8>>
        unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f0d7b6936d8>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>

 ================== pre trace ptable ================== 
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :888========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :889========  [0m
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :890========  [0m
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :890========  [0m
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :891========  [0m
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
is Other function match_refs
 
 Start check Pointer Collect  

======================================================================
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6b6c0
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f0d7b68a2d0
    type <array_type 0x7f0d7b688dc8
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        BLK
        size <integer_cst 0x7f0d7b672948 constant 432>
        unit-size <integer_cst 0x7f0d7b672990 constant 54>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f0d7b688d20 type <integer_type 0x7f0d7bb78000 sizetype>
            DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63be8 0> max <integer_cst 0x7f0d7b672978 53>>
        pointer_to_this <pointer_type 0x7f0d7b688e70>>
    readonly constant static "No refs in common and none specified; doing nothing.\012\000">

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6b750
    type <pointer_type 0x7f0d7b685348
        type <record_type 0x7f0d7b6852a0 FILE BLK
            size <integer_cst 0x7f0d7b672870 constant 1728>
            unit-size <integer_cst 0x7f0d7b672930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6851f8 fields <field_decl 0x7f0d7b686a18 _flags> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b685348>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b688bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f0d7b6936a8>
 <ssa_name 0x7f0d7bb6b750
    type <pointer_type 0x7f0d7b685348
        type <record_type 0x7f0d7b6852a0 FILE BLK
            size <integer_cst 0x7f0d7b672870 constant 1728>
            unit-size <integer_cst 0x7f0d7b672930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6851f8 fields <field_decl 0x7f0d7b686a18 _flags> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b685348>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b688bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f0d7b6936a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6b750
    type <pointer_type 0x7f0d7b685348
        type <record_type 0x7f0d7b6852a0 FILE BLK
            size <integer_cst 0x7f0d7b672870 constant 1728>
            unit-size <integer_cst 0x7f0d7b672930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6851f8 fields <field_decl 0x7f0d7b686a18 _flags> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b685348>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b688bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f0d7b6936a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6b750
    type <pointer_type 0x7f0d7b685348
        type <record_type 0x7f0d7b6852a0 FILE BLK
            size <integer_cst 0x7f0d7b672870 constant 1728>
            unit-size <integer_cst 0x7f0d7b672930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6851f8 fields <field_decl 0x7f0d7b686a18 _flags> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b685348>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b688bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f0d7b6936a8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
_7 = remote_refs;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
_3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :free_refs
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f0d7b6936c0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# VUSE <.MEM_19>
_7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# VUSE <.MEM_17>
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:match_refs========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path match_refs  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;33m =======POP node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt call this function :calloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
is Other function 

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f0d7b693540
    type <array_type 0x7f0d7b683e70
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        QI size <integer_cst 0x7f0d7bb63ca8 8> unit-size <integer_cst 0x7f0d7bb63cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f0d7b683dc8 type <integer_type 0x7f0d7bb78000 sizetype>
            DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63be8 0> max <integer_cst 0x7f0d7bb63be8 0>>
        pointer_to_this <pointer_type 0x7f0d7b688348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
return _4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_linked_ref========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:find_ref_by_name========= [0m
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6be58
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68d400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f0d7b6937c8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6be10
    type <pointer_type 0x7f0d7b683000
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f0d7b6830a8>>
    var <var_decl 0x7f0d7b697000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f0d7b6937b0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>

 ================== pre trace ptable ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
is Other function find_ref_by_name
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f0d7b6937e0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6bee8
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f0d7b6937f8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>

 ================== pre trace ptable ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :889========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :890========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
is Other function make_linked_ref
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6bf30
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f0d7b693810>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6bc60
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f0d7b693750>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7bb6bc18
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f0d7b693738>
 <ssa_name 0x7f0d7bb6bc18
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f0d7b693738>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7bb6bc18
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f0d7b693738>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7bb6bc18
    type <pointer_type 0x7f0d7b6885e8
        type <array_type 0x7f0d7b683540 type <integer_type 0x7f0d7bb78348 unsigned char>
            BLK
            size <integer_cst 0x7f0d7b672840 constant 160>
            unit-size <integer_cst 0x7f0d7b672828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b683498>
            pointer_to_this <pointer_type 0x7f0d7b6885e8>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f0d7b693738>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:match_refs========= [0m
[40;44m =======node_fun:make_linked_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt call this function :calloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
is Other function 

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f0d7b693540
    type <array_type 0x7f0d7b683e70
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        QI size <integer_cst 0x7f0d7bb63ca8 8> unit-size <integer_cst 0x7f0d7bb63cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f0d7b683dc8 type <integer_type 0x7f0d7bb78000 sizetype>
            DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63be8 0> max <integer_cst 0x7f0d7bb63be8 0>>
        pointer_to_this <pointer_type 0x7f0d7b688348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
return _4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b2d0
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693840>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b318
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b6973f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f0d7b693858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b360
    type <pointer_type 0x7f0d7b6883f0
        type <pointer_type 0x7f0d7b683738 type <pointer_type 0x7f0d7b683690>
            public unsigned DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7b6883f0>>
        public unsigned DI size <integer_cst 0x7f0d7bb63bb8 64> unit-size <integer_cst 0x7f0d7bb63bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f0d7b68d780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f0d7b693870>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_linked_ref========= [0m
[40;44m =======node_fun:tail_link_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;44m =======node_fun:alloc_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt call this function :calloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
is Other function 

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f0d7b693540
    type <array_type 0x7f0d7b683e70
        type <integer_type 0x7f0d7b67bbd0 char public QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b683000>>
        QI size <integer_cst 0x7f0d7bb63ca8 8> unit-size <integer_cst 0x7f0d7bb63cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f0d7b683dc8 type <integer_type 0x7f0d7bb78000 sizetype>
            DI
            size <integer_cst 0x7f0d7bb63bb8 constant 64>
            unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63be8 0> max <integer_cst 0x7f0d7bb63be8 0>>
        pointer_to_this <pointer_type 0x7f0d7b688348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b750
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f0d7b693930>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
return _4;
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b798
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f0d7b693948>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;44m =======node_fun:alloc_ref_with_prefix========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b9d8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68da80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b6939a8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69ba20
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f0d7b6977e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt call this function :calloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bab0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <var_decl 0x7f0d7b697750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f0d7b6939c0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b900
    type <pointer_type 0x7f0d7b688000
        type <array_type 0x7f0d7b6832a0 type <integer_type 0x7f0d7b67bbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b688000>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f0d7b693960>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69baf8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68d980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f0d7b6939d8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69ba68
    type <integer_type 0x7f0d7b67b348 size_t public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f0d7b68da00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69b990
    type <pointer_type 0x7f0d7bb7f000
        type <void_type 0x7f0d7bb78f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f0d7bb7f000>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7bb849d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f0d7b693990>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69b8b8
    type <integer_type 0x7f0d7bb787e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb78738 precision:64 min <integer_cst 0x7f0d7bb63e88 0> max <integer_cst 0x7f0d7bb64500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f0d7bb847e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
is Other function 

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======node_fun:find_ref_by_name========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bc60
    type <pointer_type 0x7f0d7b685c78
        type <array_type 0x7f0d7b685bd0 type <integer_type 0x7f0d7b67bc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f0d7b6831f8>
            pointer_to_this <pointer_type 0x7f0d7b685c78>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f0d7b6939f0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bdc8
    type <pointer_type 0x7f0d7b67bd20
        type <integer_type 0x7f0d7b67bc78 char readonly QI
            size <integer_cst 0x7f0d7bb63ca8 constant 8>
            unit-size <integer_cst 0x7f0d7bb63cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb783f0 precision:8 min <integer_cst 0x7f0d7b672738 -128> max <integer_cst 0x7f0d7b672720 127>
            pointer_to_this <pointer_type 0x7f0d7b67bd20>>
        unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b67b888>>
    var <parm_decl 0x7f0d7b68dc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f0d7b693a50>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bca8
    type <integer_type 0x7f0d7bb785e8 int public SI
        size <integer_cst 0x7f0d7bb63df8 constant 32>
        unit-size <integer_cst 0x7f0d7bb63e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7bb785e8 precision:32 min <integer_cst 0x7f0d7bb63db0 -2147483648> max <integer_cst 0x7f0d7bb63dc8 2147483647>
        pointer_to_this <pointer_type 0x7f0d7bb7f9d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:find_ref_by_name========= [0m
[40;44m =======node_fun:free_refs========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path free_refs  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:free_ref========= [0m
[40;42m =======pre_check_funciton:free_refs========= [0m
[40;42m =======start_check_funciton:free_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_5 = ref_1->next;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b69bea0
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
    var <parm_decl 0x7f0d7b68dc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f0d7b693a80>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: free in this location
   73 |                 free_ref(ref);
      |                 ^

===== possiable asias =====
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:free_refs========= [0m
[40;44m =======node_fun:free_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f0d7b6a5090
    type <pointer_type 0x7f0d7b683690
        type <record_type 0x7f0d7b6835e8 ref BLK
            size <integer_cst 0x7f0d7bc380a8 constant 640>
            unit-size <integer_cst 0x7f0d7b672768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f0d7b6835e8 fields <field_decl 0x7f0d7b67e850 next> context <translation_unit_decl 0x7f0d7bb6e168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f0d7b683690>>
        public unsigned DI
        size <integer_cst 0x7f0d7bb63bb8 constant 64>
        unit-size <integer_cst 0x7f0d7bb63bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f0d7b683738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f0d7b693ac8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:free_ref========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = get_local_heads ();
_2 = (long int) _1;
local_refs_12 = (struct ref *) _2;
remote_tail = &remote_refs;
_3 = remote_refs;
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
if (_4 != 0)
  goto <bb 3>; [34.00%]
else
  goto <bb 4>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 365072224]:
// predicted unlikely by goto predictor.
goto <bb 6>; [100.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 708669601]:
_5 = remote_refs;
if (_5 == 0B)
  goto <bb 5>; [9.81%]
else
  goto <bb 6>; [90.19%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 69520487]:
_6 = stderr;
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
// predicted unlikely by goto predictor.

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 1073741824]:
cleanup:
free_refs (local_refs_12);
_7 = remote_refs;
free_refs (_7);
return 0;

=======Mapping node_fun:match_refs=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 15>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
dst_name_18 = &src_9->name;
_1 = src_9->peer_ref;
if (_1 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
// predicted unlikely by continue predictor.
goto <bb 14>; [100.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 286689065]:
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
if (dst_peer_20 != 0B)
  goto <bb 6>; [70.00%]
else
  goto <bb 8>; [30.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 200682346]:
_2 = dst_peer_20->peer_ref;
if (_2 != 0B)
  goto <bb 7>; [54.59%]
else
  goto <bb 12>; [45.41%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 109552493]:
// predicted unlikely by goto predictor.
goto <bb 13>; [100.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 86006719]:
_3 = BIT_FIELD_REF <MEM[(const struct refspec *)0B], 8, 0>;
_4 = _3 & 4;
if (_4 != 0)
  goto <bb 9>; [67.00%]
else
  goto <bb 11>; [33.00%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 57624502]:
_5 = flags_15(D) & 3;
if (_5 == 0)
  goto <bb 10>; [34.00%]
else
  goto <bb 11>; [66.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 19592331]:
// predicted unlikely by goto predictor.
goto <bb 13>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 66414388]:
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
_6 = &src_9->new_sha1;
_7 = &dst_peer_23->new_sha1;
hashcpy (_7, _6);

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 157544241]:
# dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_10->peer_ref = src_9;
_8 = MEM[(const struct refspec *)0B].force;
dst_peer_10->force = _8;

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 286689065]:
free_name:
free (dst_name_18);

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 955630227]:
src_28 = src_9->next;

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 1073741824]:
# src_9 = PHI <src_16(D)(2), src_28(14)>
if (src_9 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 16>; [11.00%]

=======is loop:0=========

 bb index 16 
<bb 16> [local count: 118111600]:
return 0;

=======Mapping node_fun:make_linked_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
return ret_4;

=======Mapping node_fun:tail_link_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
_1 = *tail_6(D);
*_1 = ref_7(D);
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
ref_10 = ref_4->next;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ref_4 = PHI <ref_7(D)(2), ref_10(3)>
_2 = ref_4->next;
if (_2 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
_3 = &ref_4->next;
*tail_6(D) = _3;
return;

=======Mapping node_fun:alloc_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
return _4;

=======Mapping node_fun:alloc_ref_with_prefix=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
len_8 = strlen (name_7(D));
_1 = len_8 + prefixlen_9(D);
_2 = _1 + 81;
ref_11 = calloc (1, _2);
_3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
_4 = &ref_11->name;
_5 = _4 + prefixlen_9(D);
memcpy (_5, name_7(D), len_8);
return ref_11;

=======Mapping node_fun:find_ref_by_name=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 114863530]:
goto <bb 5>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1014686026]:
_1 = &list_3->name;
_2 = strcmp (_1, name_7(D));
if (_2 == 0)
  goto <bb 6>; [5.50%]
else
  goto <bb 4>; [94.50%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 958878296]:
list_8 = list_3->next;

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 1073741824]:
# list_3 = PHI <list_5(D)(2), list_8(4)>
if (list_3 != 0B)
  goto <bb 3>; [94.50%]
else
  goto <bb 6>; [5.50%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 114863531]:
# _4 = PHI <list_3(3), 0B(5)>
return _4;

=======Mapping node_fun:free_refs=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
next_5 = ref_1->next;
free_ref (ref_1);

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ref_1 = PHI <ref_3(D)(2), next_5(3)>
if (ref_1 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
return;

=======Mapping node_fun:free_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (ref_5(D) == 0B)
  goto <bb 4>; [30.95%]
else
  goto <bb 3>; [69.05%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 741418729]:
_1 = ref_5(D)->peer_ref;
free_ref (_1);
_2 = ref_5(D)->remote_status;
free (_2);
_3 = ref_5(D)->symref;
free (_3);
free (ref_5(D));

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 1 [0m
[40;34m    gimple free   count : 4 [0m
[40;34m    all ptable point : 40 [0m
[40;34m    analyzable ptable point : 34 [0m
[40;34m    used_stmt array stack totalsize of : 0.003056 mb[0m
[40;34m    collect time: : 0.011194 s [0m
[40;34m    algorithm time: 0.332867 s [0m
[40;34m    gimple stmt count : : 87 [0m
[40;34m    this report analysis in Fri Feb 18 12:19:07 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (  3%)  2157k ( 76%)
 phase opt and generate             :   0.18 (100%)   0.19 (100%)   0.37 ( 97%)   626k ( 22%)
 callgraph functions expansion      :   0.03 ( 17%)   0.01 (  5%)   0.03 (  8%)   521k ( 18%)
 tree SSA uncprop                   :   0.00 (  0%)   0.00 (  0%)   0.01 (  3%)     0  (  0%)
 expand                             :   0.01 (  6%)   0.00 (  0%)   0.00 (  0%)    53k (  2%)
 integrated RA                      :   0.00 (  0%)   0.00 (  0%)   0.01 (  3%)   220k (  8%)
 plugin execution                   :   0.15 ( 83%)   0.18 ( 95%)   0.34 ( 89%)  1728  (  0%)
 initialize rtl                     :   0.01 (  6%)   0.01 (  5%)   0.00 (  0%)    12k (  0%)
 rest of compilation                :   0.01 (  6%)   0.00 (  0%)   0.01 (  3%)    29k (  1%)
 TOTAL                              :   0.18          0.19          0.38         2845k
/usr/bin/ld: /tmp/cciBQ7cM.ltrans0.ltrans.o: in function `match_refs':
<artificial>:(.text+0x19c): undefined reference to `hashcpy'
/usr/bin/ld: /tmp/cciBQ7cM.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x21b): undefined reference to `get_local_heads'
collect2: error: ld returned 1 exit status
