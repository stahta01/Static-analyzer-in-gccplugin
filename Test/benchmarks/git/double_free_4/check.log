../Compiler/newplugin.so 11.2.0 
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: In function ‘copy_array’:
./benchmarks/git/double_free_4/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/double_free_4/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘move_array’:
./benchmarks/git/double_free_4/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/double_free_4/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: At top level:
./benchmarks/git/double_free_4/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/double_free_4/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
   81 |         if (!strcmp(list->name, name))
      |              ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:11:1: note: include ‘<string.h>’ or provide a declaration of ‘strcmp’
   10 | #include "../git.h"
  +++ |+#include <string.h>
   11 | 
./benchmarks/git/double_free_4/git_df_4.c: In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
   89 |         size_t len = strlen(name);
      |                      ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:91:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/git_df_4.c: In function ‘copy_ref’:
./benchmarks/git/double_free_4/git_df_4.c:107:15: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
  107 |         len = strlen(ref->name);
      |               ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:107:15: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:109:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  109 |         memcpy(cpy, ref, sizeof(struct ref) + len + 1);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:109:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:111:37: note: in expansion of macro ‘xstrdup’
  111 |         cpy->symref = ref->symref ? xstrdup(ref->symref) : NULL;
      |                                     ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘try_explicit_object_name’:
./benchmarks/git/double_free_4/git_df_4.c:124:17: warning: implicit declaration of function ‘hashclr’ [-Wimplicit-function-declaration]
  124 |                 hashclr(ref->new_sha1);
      |                 ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:127:13: warning: implicit declaration of function ‘get_sha1’ [-Wimplicit-function-declaration]
  127 |         if (get_sha1(name, sha1))
      |             ^~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:130:9: warning: implicit declaration of function ‘hashcpy’ [-Wimplicit-function-declaration]
  130 |         hashcpy(ref->new_sha1, sha1);
      |         ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: implicit declaration of function ‘get_local_heads’ [-Wimplicit-function-declaration]
  215 |         local_refs = get_local_heads();
      |                      ^~~~~~~~~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: assignment to ‘struct ref *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  215 |         local_refs = get_local_heads();
      |                    ^

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.01 ( 14%)   0.00 (  0%)   0.01 ( 10%)  1298k ( 50%)
 phase parsing                      :   0.04 ( 57%)   0.02 ( 67%)   0.07 ( 70%)  1109k ( 42%)
 phase opt and generate             :   0.02 ( 29%)   0.01 ( 33%)   0.02 ( 20%)   192k (  7%)
 callgraph optimization             :   0.01 ( 14%)   0.00 (  0%)   0.01 ( 10%)    16  (  0%)
 callgraph ipa passes               :   0.02 ( 29%)   0.01 ( 33%)   0.02 ( 20%)   110k (  4%)
 lto stream compression             :   0.01 ( 14%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 lto stream output                  :   0.00 (  0%)   0.00 (  0%)   0.01 ( 10%)     0  (  0%)
 ipa free lang data                 :   0.00 (  0%)   0.01 ( 33%)   0.00 (  0%)    11k (  0%)
 preprocessing                      :   0.02 ( 29%)   0.00 (  0%)   0.01 ( 10%)   325k ( 12%)
 lexical analysis                   :   0.01 ( 14%)   0.01 ( 33%)   0.03 ( 30%)     0  (  0%)
 parser (global)                    :   0.01 ( 14%)   0.00 (  0%)   0.02 ( 20%)   575k ( 22%)
 parser struct body                 :   0.00 (  0%)   0.01 ( 33%)   0.00 (  0%)    77k (  3%)
 parser inl. func. body             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 10%)    23k (  1%)
 TOTAL                              :   0.07          0.03          0.10         2609k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.01 (100%)   0.00 (  0%)   0.01 (100%)  2157k ( 97%)
 TOTAL                              :   0.01          0.00          0.01         2228k
../Compiler/newplugin.so 11.2.0 
--------plugin argument-----------
contextsentive 1
debugoutput 1
debugmod 0
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
=======node_fun:match_refs=========
=======node_fun:make_linked_ref=========
=======node_fun:tail_link_ref=========
=======node_fun:alloc_ref=========
=======node_fun:alloc_ref_with_prefix=========
=======node_fun:find_ref_by_name=========
=======node_fun:free_refs=========
=======node_fun:free_ref=========
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 39 
===============The second stage : Mapping stmt=================
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
===============The second stage : Program slicing=================
=============== *this point analyzable =================
_1 = get_local_heads ();
=============== program slcing stmt count:3=================
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
========================================================
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
========================================================
=============== *this point analyzable =================
free_refs (_7);
=============== program slcing stmt count:4=================
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
========================================================
=============== *this point analyzable =================
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
========================================================
=============== *this point analyzable =================
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
========================================================
=============== *this point analyzable =================
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
========================================================
=============== *this point analyzable =================
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
========================================================
=============== *this point analyzable =================
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
========================================================
=============== *this point analyzable =================
hashcpy (_7, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
========================================================
=============== *this point analyzable =================
hashcpy (_7, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
========================================================
=============== *this point analyzable =================
tail_link_ref (ret_4, tail_5(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
========================================================
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
=============== program slcing stmt count:6=================
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
========================================================
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
=============== program slcing stmt count:5=================
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
========================================================
=============== *this point analyzable =================
ref_11 = calloc (1, _2);
=============== program slcing stmt count:3=================
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
========================================================
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
========================================================
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
========================================================
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:6=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
========================================================
=============== *this point analyzable =================
memcpy (_5, name_7(D), len_8);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
========================================================
=============== *this point analyzable =================
free_ref (ref_1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
========================================================
=============== *this point analyzable =================
free_ref (_1);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================
=======node_fun: =========
[40;44m =======print_function_path main  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_refs========= [0m
[40;44m =======print_function_path free_refs  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
The path has a release memory in succ := 3 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:free_refs========= [0m
[40;42m =======start_check_funciton:free_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014f30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7fc27e00da68>
 <ssa_name 0x7fc27e014f30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7fc27e00da68>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014f30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7fc27e00da68>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ref_1 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e014f30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7fc27e00da68>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e014f30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7fc27e00da68>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_5 = ref_1->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 4 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 4 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 4 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 3 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 3 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 3 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 3 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;42m =======pre add _ fucntion:__builtin_fwrite========= [0m
[40;42m =======pre add _ fucntion:match_refs========= [0m
[40;44m =======print_function_path match_refs  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :4========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014b40
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011870 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7fc27e00d9a8>
 <ssa_name 0x7fc27e014b40
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011870 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7fc27e00d9a8>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

This stmt may duplicate memory requests.
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt call this function :calloc

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7fc27e00d528
    type <array_type 0x7fc27dffde70
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        QI size <integer_cst 0x7fc27e4f4ca8 8> unit-size <integer_cst 0x7fc27e4f4cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fc27dffddc8 type <integer_type 0x7fc27e509000 sizetype>
            DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4be8 0> max <integer_cst 0x7fc27e4f4be8 0>>
        pointer_to_this <pointer_type 0x7fc27e002348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014cf0
    type <pointer_type 0x7fc27dfffc78
        type <array_type 0x7fc27dfffbd0 type <integer_type 0x7fc27dff5c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27dfffc78>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7fc27e00d9d8>
 <ssa_name 0x7fc27e014cf0
    type <pointer_type 0x7fc27dfffc78
        type <array_type 0x7fc27dfffbd0 type <integer_type 0x7fc27dff5c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27dfffc78>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7fc27e00d9d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014cf0
    type <pointer_type 0x7fc27dfffc78
        type <array_type 0x7fc27dfffbd0 type <integer_type 0x7fc27dff5c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27dfffc78>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7fc27e00d9d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014e58
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007c00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00da38>
 <ssa_name 0x7fc27e014e58
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007c00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00da38>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014e58
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007c00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00da38>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014d38
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7fc27e014d38
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014d38
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_25->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_38>
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_38 = VDEF <.MEM_31>
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_25->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_38>
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_38 = VDEF <.MEM_31>
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>

 ================== pre trace ptable ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
is Other function find_ref_by_name
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_20);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_25->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_38>
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_38 = VDEF <.MEM_31>
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_22->peer_ref;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_38>
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_38 = VDEF <.MEM_31>
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>

 ================== pre trace ptable ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :889========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :889========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :890========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
is Other function make_linked_ref
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_22->peer_ref;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_25->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_38>
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_38 = VDEF <.MEM_31>
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcc60
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_25->new_sha1;
    version:7
    ptr-info 0x7fc27e00d738>
 <ssa_name 0x7fc27e4fcc60
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_25->new_sha1;
    version:7
    ptr-info 0x7fc27e00d738>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcc60
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_25->new_sha1;
    version:7
    ptr-info 0x7fc27e00d738>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcc18
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7fc27e00d720>
 <ssa_name 0x7fc27e4fcc18
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7fc27e00d720>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcc18
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7fc27e00d720>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
hashcpy (_7, _6);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre add _ fucntion:get_local_heads========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:get_local_heads 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
is Other function get_local_heads
 
 Start check Pointer Collect  

======================================================================
_2 = (long int) _1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
[40;31m  find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fc5e8
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
this stmt call this function :get_local_heads
trace fucntion name:get_local_heads 

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
[40;31m  find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_20

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_30

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fc828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27ed9ecf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7fc27e00d6d8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
[40;31m  find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_20

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_30

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e4fc678
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7fc27e00d660>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
[40;31m  find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
[40;31m  find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <var_decl 0x7fc27ed9eb40 remote_tail
    type <pointer_type 0x7fc27dffd738
        type <pointer_type 0x7fc27dffd690 type <record_type 0x7fc27dffd5e8 ref>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27dffd738>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e0023f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
[40;31m  find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_20

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_30

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e4fc7e0
    type <pointer_type 0x7fc27dffd0a8
        type <pointer_type 0x7fc27dffd000 type <integer_type 0x7fc27dff5bd0 char>
            unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd0a8>>
        unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7fc27e00d6c0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>

 ================== pre trace ptable ================== 
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :888========  [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
[40;31m  find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :889========  [0m
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :890========  [0m
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :890========  [0m
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :891========  [0m
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :889========  [0m
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
is Other function match_refs
 
 Start check Pointer Collect  

======================================================================
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
[40;31m  find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fc6c0
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7fc27e0042d0
    type <array_type 0x7fc27e002dc8
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        BLK
        size <integer_cst 0x7fc27dfec948 constant 432>
        unit-size <integer_cst 0x7fc27dfec990 constant 54>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fc27e002d20 type <integer_type 0x7fc27e509000 sizetype>
            DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4be8 0> max <integer_cst 0x7fc27dfec978 53>>
        pointer_to_this <pointer_type 0x7fc27e002e70>>
    readonly constant static "No refs in common and none specified; doing nothing.\012\000">

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fc750
    type <pointer_type 0x7fc27dfff348
        type <record_type 0x7fc27dfff2a0 FILE BLK
            size <integer_cst 0x7fc27dfec870 constant 1728>
            unit-size <integer_cst 0x7fc27dfec930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dfff1f8 fields <field_decl 0x7fc27e000a18 _flags> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dfff348>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e002bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7fc27e00d690>
 <ssa_name 0x7fc27e4fc750
    type <pointer_type 0x7fc27dfff348
        type <record_type 0x7fc27dfff2a0 FILE BLK
            size <integer_cst 0x7fc27dfec870 constant 1728>
            unit-size <integer_cst 0x7fc27dfec930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dfff1f8 fields <field_decl 0x7fc27e000a18 _flags> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dfff348>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e002bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7fc27e00d690>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fc750
    type <pointer_type 0x7fc27dfff348
        type <record_type 0x7fc27dfff2a0 FILE BLK
            size <integer_cst 0x7fc27dfec870 constant 1728>
            unit-size <integer_cst 0x7fc27dfec930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dfff1f8 fields <field_decl 0x7fc27e000a18 _flags> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dfff348>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e002bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7fc27e00d690>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 5 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 5 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
_7 = remote_refs;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
_3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
[40;31m  find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_20

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_30

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fc798
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7fc27e00d6a8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :free_refs
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_16>
_3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_17>
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:227:17: warning: use location
  227 |                 goto cleanup;
      |                 ^
gimple stmt in succ := 4 
In fucntion name:main 
branch in succ := 5 have goto

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_17>
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 4 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_17>
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 4 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:227:17: warning: use location
  227 |                 goto cleanup;
      |                 ^
gimple stmt in succ := 4 
In fucntion name:main 
branch in succ := 5 have goto

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 4 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
# VUSE <.MEM_20>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 4 
In fucntion name:main 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# VUSE <.MEM_19>
_7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# VUSE <.MEM_17>
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;44m =======print_function_path match_refs  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014b40
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011870 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7fc27e00d9a8>
 <ssa_name 0x7fc27e014b40
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011870 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7fc27e00d9a8>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

This stmt may duplicate memory requests.
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt call this function :calloc

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7fc27e00d528
    type <array_type 0x7fc27dffde70
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        QI size <integer_cst 0x7fc27e4f4ca8 8> unit-size <integer_cst 0x7fc27e4f4cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fc27dffddc8 type <integer_type 0x7fc27e509000 sizetype>
            DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4be8 0> max <integer_cst 0x7fc27e4f4be8 0>>
        pointer_to_this <pointer_type 0x7fc27e002348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014cf0
    type <pointer_type 0x7fc27dfffc78
        type <array_type 0x7fc27dfffbd0 type <integer_type 0x7fc27dff5c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27dfffc78>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7fc27e00d9d8>
 <ssa_name 0x7fc27e014cf0
    type <pointer_type 0x7fc27dfffc78
        type <array_type 0x7fc27dfffbd0 type <integer_type 0x7fc27dff5c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27dfffc78>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7fc27e00d9d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014cf0
    type <pointer_type 0x7fc27dfffc78
        type <array_type 0x7fc27dfffbd0 type <integer_type 0x7fc27dff5c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27dfffc78>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7fc27e00d9d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014e58
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007c00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00da38>
 <ssa_name 0x7fc27e014e58
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007c00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00da38>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014e58
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007c00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00da38>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014d38
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7fc27e014d38
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014d38
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
In function ‘match_refs’:
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fc27e4fcee8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007400 dst>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7fc27e00d7b0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_25->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_38>
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_38 = VDEF <.MEM_31>
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
In function ‘match_refs’:
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fc27e4fcea0
    type <pointer_type 0x7fc27dffd000
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7fc27dffd0a8>>
    var <var_decl 0x7fc27e011120 dst_name>
    def_stmt dst_name_20 = &src_9->name;
    version:20
    ptr-info 0x7fc27e00d798>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_25->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_38>
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_38 = VDEF <.MEM_31>
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>

 ================== pre trace ptable ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
is Other function find_ref_by_name
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location
this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_20);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fc27e4fcf30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
    version:22
    ptr-info 0x7fc27e00d7c8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_25->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_38>
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_38 = VDEF <.MEM_31>
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
In function ‘match_refs’:
lto1: warning: use location
this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e4fcf78
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007480 dst_tail>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7fc27e00d7e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_22->peer_ref;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_38>
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_38 = VDEF <.MEM_31>
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>

 ================== pre trace ptable ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :889========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :889========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :890========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
is Other function make_linked_ref
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
In function ‘match_refs’:
lto1: warning: use location
this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_22->peer_ref;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fc27e014000
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e0111b0 dst_peer>
    def_stmt dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
    version:25
    ptr-info 0x7fc27e00d7f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_25->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_39 = VDEF <.MEM_38>
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_38>
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_38 = VDEF <.MEM_31>
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
gimple stmt in succ := 12 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
gimple stmt in succ := 15 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
branch in succ := 4 have continue
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
dst_name_20 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
branch in succ := 10 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
gimple stmt in succ := 5 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
branch in succ := 7 have goto
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# VUSE <.MEM_34>
_2 = dst_peer_22->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
gimple stmt in succ := 6 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
_7 = &dst_peer_25->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_22(6), dst_peer_25(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_33>
src_30 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcc60
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_25->new_sha1;
    version:7
    ptr-info 0x7fc27e00d738>
 <ssa_name 0x7fc27e4fcc60
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_25->new_sha1;
    version:7
    ptr-info 0x7fc27e00d738>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcc60
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_25->new_sha1;
    version:7
    ptr-info 0x7fc27e00d738>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e4fcc18
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7fc27e00d720>
 <ssa_name 0x7fc27e4fcc18
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7fc27e00d720>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e4fcc18
    type <pointer_type 0x7fc27e0025e8
        type <array_type 0x7fc27dffd540 type <integer_type 0x7fc27e509348 unsigned char>
            BLK
            size <integer_cst 0x7fc27dfec840 constant 160>
            unit-size <integer_cst 0x7fc27dfec828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd498>
            pointer_to_this <pointer_type 0x7fc27e0025e8>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7fc27e00d720>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:match_refs 
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
gimple stmt in succ := 11 
# VUSE <.MEM_34>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
branch in succ := 16 have 
# .MEM_40 = VDEF <.MEM_32>
free (dst_name_20);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
The path has a release memory in succ := 13 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014b40
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011870 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7fc27e00d9a8>
 <ssa_name 0x7fc27e014b40
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011870 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7fc27e00d9a8>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

This stmt may duplicate memory requests.
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt call this function :calloc

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7fc27e00d528
    type <array_type 0x7fc27dffde70
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        QI size <integer_cst 0x7fc27e4f4ca8 8> unit-size <integer_cst 0x7fc27e4f4cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fc27dffddc8 type <integer_type 0x7fc27e509000 sizetype>
            DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4be8 0> max <integer_cst 0x7fc27e4f4be8 0>>
        pointer_to_this <pointer_type 0x7fc27e002348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e014360
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d828>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
return ret_4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fc27e0143a8
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011510 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7fc27e00d840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fc27e0143f0
    type <pointer_type 0x7fc27e0023f0
        type <pointer_type 0x7fc27dffd738 type <pointer_type 0x7fc27dffd690>
            public unsigned DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e0023f0>>
        public unsigned DI size <integer_cst 0x7fc27e4f4bb8 64> unit-size <integer_cst 0x7fc27e4f4bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fc27e007780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7fc27e00d858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014b40
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011870 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7fc27e00d9a8>
 <ssa_name 0x7fc27e014b40
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011870 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7fc27e00d9a8>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

This stmt may duplicate memory requests.
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt call this function :calloc

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7fc27e00d528
    type <array_type 0x7fc27dffde70
        type <integer_type 0x7fc27dff5bd0 char public QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dffd000>>
        QI size <integer_cst 0x7fc27e4f4ca8 8> unit-size <integer_cst 0x7fc27e4f4cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fc27dffddc8 type <integer_type 0x7fc27e509000 sizetype>
            DI
            size <integer_cst 0x7fc27e4f4bb8 constant 64>
            unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4be8 0> max <integer_cst 0x7fc27e4f4be8 0>>
        pointer_to_this <pointer_type 0x7fc27e002348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e0147e0
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fc27e00d918>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fc27e014828
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7fc27e00d930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014a68
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00d990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014ab0
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7fc27e011900 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014b40
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011870 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7fc27e00d9a8>
 <ssa_name 0x7fc27e014b40
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <var_decl 0x7fc27e011870 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7fc27e00d9a8>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

This stmt may duplicate memory requests.
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt call this function :calloc

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014990
    type <pointer_type 0x7fc27e002000
        type <array_type 0x7fc27dffd2a0 type <integer_type 0x7fc27dff5bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27e002000>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7fc27e00d948>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014b88
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7fc27e00d9c0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014af8
    type <integer_type 0x7fc27dff5348 size_t public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e509738 precision:64 min <integer_cst 0x7fc27e4f4e88 0> max <integer_cst 0x7fc27e4f5500 18446744073709551615> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7fc27e007a00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt call this function :calloc

This stmt may duplicate memory requests.
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^

This stmt may duplicate memory requests.
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014a20
    type <pointer_type 0x7fc27e510000
        type <void_type 0x7fc27e509f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fc27e510000>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27e5159d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7fc27e00d978>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014cf0
    type <pointer_type 0x7fc27dfffc78
        type <array_type 0x7fc27dfffbd0 type <integer_type 0x7fc27dff5c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27dfffc78>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7fc27e00d9d8>
 <ssa_name 0x7fc27e014cf0
    type <pointer_type 0x7fc27dfffc78
        type <array_type 0x7fc27dfffbd0 type <integer_type 0x7fc27dff5c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27dfffc78>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7fc27e00d9d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014cf0
    type <pointer_type 0x7fc27dfffc78
        type <array_type 0x7fc27dfffbd0 type <integer_type 0x7fc27dff5c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fc27dffd1f8>
            pointer_to_this <pointer_type 0x7fc27dfffc78>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7fc27e00d9d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014e58
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007c00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00da38>
 <ssa_name 0x7fc27e014e58
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007c00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00da38>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014e58
    type <pointer_type 0x7fc27dff5d20
        type <integer_type 0x7fc27dff5c78 char readonly QI
            size <integer_cst 0x7fc27e4f4ca8 constant 8>
            unit-size <integer_cst 0x7fc27e4f4cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5093f0 precision:8 min <integer_cst 0x7fc27dfec738 -128> max <integer_cst 0x7fc27dfec720 127>
            pointer_to_this <pointer_type 0x7fc27dff5d20>>
        unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dff5888>>
    var <parm_decl 0x7fc27e007c00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fc27e00da38>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fc27e014d38
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7fc27e014d38
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014d38
    type <integer_type 0x7fc27e5095e8 int public SI
        size <integer_cst 0x7fc27e4f4df8 constant 32>
        unit-size <integer_cst 0x7fc27e4f4e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27e5095e8 precision:32 min <integer_cst 0x7fc27e4f4db0 -2147483648> max <integer_cst 0x7fc27e4f4dc8 2147483647>
        pointer_to_this <pointer_type 0x7fc27e5109d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 
In fucntion name:find_ref_by_name 
branch in succ := 6 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;44m =======print_function_path free_refs  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
The path has a release memory in succ := 3 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:free_refs========= [0m
[40;42m =======start_check_funciton:free_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e014f30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7fc27e00da68>
 <ssa_name 0x7fc27e014f30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7fc27e00da68>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e014f30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7fc27e00da68>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ref_1 != 0B)
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e014f30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7fc27e00da68>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e014f30
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
    var <parm_decl 0x7fc27e007c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7fc27e00da68>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_5 = ref_1->next;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

=====================prebranchexit:start================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 4 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 4 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 4 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 3 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 3 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 3 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
gimple stmt in succ := 3 
In fucntion name:free_refs 
branch in succ := 5 have 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;44m =======print_function_path free_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
 <ssa_name 0x7fc27e01f120
    type <pointer_type 0x7fc27dffd690
        type <record_type 0x7fc27dffd5e8 ref BLK
            size <integer_cst 0x7fc27e5c90a8 constant 640>
            unit-size <integer_cst 0x7fc27dfec768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fc27dffd5e8 fields <field_decl 0x7fc27dff8850 next> context <translation_unit_decl 0x7fc27e4ff168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7fc27dffd690>>
        public unsigned DI
        size <integer_cst 0x7fc27e4f4bb8 constant 64>
        unit-size <integer_cst 0x7fc27e4f4bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fc27dffd738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7fc27e00dab0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
The path has a release memory in succ := 3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:free_ref 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
gimple stmt in succ := 3 
# VUSE <.MEM_6>
return;
lto1: warning: use location
branch in succ := 4 have 
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
The path has a release memory in succ := 3 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
fucntion collect path finsh

=============== The third stage : detection  End=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 1 [0m
[40;34m    gimple free   count : 4 [0m
[40;34m    all ptable point : 39 [0m
[40;34m    analyzable ptable point : 34 [0m
[40;34m    analyzable ptable point (function return heap-object): 16 [0m
[40;34m    relate stmt of analyzable ptable : 98 [0m
[40;34m    used_stmt array stack totalsize of : 0.003160 mb[0m
[40;34m    collect time: : 0.000623 s [0m
[40;34m    mapping time: : 0.002861 s [0m
[40;34m    algorithm time: 0.374997 s [0m
[40;34m    gimple stmt count : : 0 [0m
[40;34m    this report analysis in Wed Jul 20 10:24:25 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.01 (  6%)   0.00 (  0%)   0.00 (  0%)  2157k ( 76%)
 phase opt and generate             :   0.17 ( 94%)   0.24 (100%)   0.42 (100%)   625k ( 22%)
 callgraph functions expansion      :   0.03 ( 17%)   0.01 (  4%)   0.04 ( 10%)   521k ( 18%)
 df live regs                       :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)     0  (  0%)
 expand                             :   0.01 (  6%)   0.00 (  0%)   0.00 (  0%)    53k (  2%)
 integrated RA                      :   0.01 (  6%)   0.01 (  4%)   0.00 (  0%)   220k (  8%)
 thread pro- & epilogue             :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)    23k (  1%)
 plugin execution                   :   0.14 ( 78%)   0.23 ( 96%)   0.38 ( 90%)     0  (  0%)
 straight-line strength reduction   :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)     0  (  0%)
 initialize rtl                     :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)    12k (  0%)
 rest of compilation                :   0.01 (  6%)   0.00 (  0%)   0.00 (  0%)    29k (  1%)
 TOTAL                              :   0.18          0.24          0.42         2844k
/usr/bin/ld: /tmp/ccOWuKm1.ltrans0.ltrans.o: in function `match_refs':
<artificial>:(.text+0x19c): undefined reference to `hashcpy'
/usr/bin/ld: /tmp/ccOWuKm1.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x21b): undefined reference to `get_local_heads'
collect2: error: ld returned 1 exit status
