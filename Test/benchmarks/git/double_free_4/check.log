In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: In function ‘copy_array’:
./benchmarks/git/double_free_4/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/double_free_4/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘move_array’:
./benchmarks/git/double_free_4/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/double_free_4/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: At top level:
./benchmarks/git/double_free_4/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/double_free_4/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
   81 |         if (!strcmp(list->name, name))
      |              ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:11:1: note: include ‘<string.h>’ or provide a declaration of ‘strcmp’
   10 | #include "../git.h"
  +++ |+#include <string.h>
   11 | 
./benchmarks/git/double_free_4/git_df_4.c: In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
   89 |         size_t len = strlen(name);
      |                      ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:91:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/git_df_4.c: In function ‘copy_ref’:
./benchmarks/git/double_free_4/git_df_4.c:107:15: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
  107 |         len = strlen(ref->name);
      |               ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:107:15: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:109:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  109 |         memcpy(cpy, ref, sizeof(struct ref) + len + 1);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:109:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:111:37: note: in expansion of macro ‘xstrdup’
  111 |         cpy->symref = ref->symref ? xstrdup(ref->symref) : NULL;
      |                                     ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘try_explicit_object_name’:
./benchmarks/git/double_free_4/git_df_4.c:124:17: warning: implicit declaration of function ‘hashclr’ [-Wimplicit-function-declaration]
  124 |                 hashclr(ref->new_sha1);
      |                 ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:127:13: warning: implicit declaration of function ‘get_sha1’ [-Wimplicit-function-declaration]
  127 |         if (get_sha1(name, sha1))
      |             ^~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:130:9: warning: implicit declaration of function ‘hashcpy’ [-Wimplicit-function-declaration]
  130 |         hashcpy(ref->new_sha1, sha1);
      |         ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: implicit declaration of function ‘get_local_heads’ [-Wimplicit-function-declaration]
  215 |         local_refs = get_local_heads();
      |                      ^~~~~~~~~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: assignment to ‘struct ref *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  215 |         local_refs = get_local_heads();
      |                    ^
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -2.2%|          |
nothrow                          |      |      |      |      |     -2.3%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
ethread              ------------|      |      |      |      |          |          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
cddce                            |      |      |      |      |     -0.6%|          |
phiopt                           |      |      |      |      |     -0.6%|          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
=======node_fun:main=========

--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 2
succs:= 2
succs:= 3
--------GIMPLE Cond -------
succs:= 4
--------GIMPLE Cond -------
succs:= 3
succs:= 4
succs:= 5
=======node_fun:match_refs=========

--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 3
succs:= 3
succs:= 4
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 6
succs:= 5
--------GIMPLE Cond -------
succs:= 8
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 9
succs:= 8
succs:= 9
succs:= 10
succs:= 6
succs:= 7
succs:= 7
succs:= 10
succs:= 4
--------GIMPLE Cond -------
succs:= 15
=======node_fun:make_linked_ref=========

=======node_fun:tail_link_ref=========

succs:= 15
--------GIMPLE Cond -------
succs:= 4
=======node_fun:alloc_ref=========

=======node_fun:alloc_ref_with_prefix=========

=======node_fun:find_ref_by_name=========

--------GIMPLE Cond -------
succs:= 3
--------GIMPLE Cond -------
succs:= 3
succs:= 5
=======node_fun:free_refs=========

succs:= 4
succs:= 5
--------GIMPLE Cond -------
succs:= 4
=======node_fun:free_ref=========

--------GIMPLE Cond -------
succs:= 2
succs:= 2
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_refs========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path free_refs  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bdc090
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f9188bcaac8>
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:free_ref========= [0m
[40;42m =======pre_check_funciton:free_refs========= [0m
[40;42m =======start_check_funciton:free_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2ea0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <parm_decl 0x7f9188bc4c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f9188bcaa80>
ref_1 = PHI <ref_3(D)(2), next_5(3)>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
bb index := 4
# VUSE <.MEM_32>
return 0;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
bb index := 4
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
bb index := 4
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ref_1 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
if (ref_1 != 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
Cond in fucntion free_refs basic block 4
 ================== possible direct basic block ================= 
from free_refs basic block 3
 ================== possible direct basic block ================= 
from free_refs basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
free_ref (ref_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
this stmt is child function---free_ref-----

 ================== trace ================== 
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate stmt argument:ref ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate stmt argument:ref ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_5 = ref_1->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
ref_1 = PHI <ref_3(D)(2), next_5(3)>
bb index := 4
# VUSE <.MEM_32>
return 0;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ref_1 = PHI <ref_3(D)(2), next_5(3)>
bb index := 4
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ref_1 = PHI <ref_3(D)(2), next_5(3)>
bb index := 4
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ref_1 = PHI <ref_3(D)(2), next_5(3)>
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ref_1 = PHI <ref_3(D)(2), next_5(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2ea0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <parm_decl 0x7f9188bc4c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f9188bcaa80>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: Use after free error!: free location 
   73 |                 free_ref(ref);
      |                 ^
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: Use after free error!: free location 
   73 |                 free_ref(ref);
      |                 ^
ref_1 = PHI <ref_3(D)(2), next_5(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:free_refs========= [0m
[40;42m =======pre add _ fucntion:__builtin_fwrite========= [0m
[40;33m =======POP node_fun stack:__builtin_fwrite========= [0m
[40;42m =======pre add _ fucntion:match_refs========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path match_refs  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;33m =======POP node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :4========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2ab0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f9188bca9c0>
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);

 ================== trace ptable================== 
trace fucntion name:calloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---calloc-----
this Reserved word function ------calloc-----
 
 Start check Pointer Collect  

======================================================================
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt is child function---calloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2ab0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f9188bca9c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd29d8
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f9188bca9a8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt is child function---calloc-----

 ================== trace ================== 
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd29d8
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f9188bca9a8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f9188bca5b8 type <integer_type 0x7f9188bb2348 size_t> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2900
    type <pointer_type 0x7f9188bbf000
        type <array_type 0x7f9188bba2a0 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbf000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f9188bca960>
_3 = &ref_11->name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2900
    type <pointer_type 0x7f9188bbf000
        type <array_type 0x7f9188bba2a0 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbf000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f9188bca960>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2990
    type <pointer_type 0x7f91890a5000
        type <void_type 0x7f918909ef18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f91890a5000>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f91890aa9d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f9188bca990>
_5 = _4 + prefixlen_9(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2990
    type <pointer_type 0x7f91890a5000
        type <void_type 0x7f918909ef18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f91890a5000>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f91890aa9d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f9188bca990>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f9189285f60
    type <pointer_type 0x7f9188bbf348
        type <array_type 0x7f9188bbae70 type <integer_type 0x7f9188bb2bd0 char>
            QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bbadc8>
            pointer_to_this <pointer_type 0x7f9188bbf348>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f9188bca540 type <array_type 0x7f9188bbae70>
        readonly constant static "\000">
    ./benchmarks/git/double_free_4/git_df_4.c:98:31 start: ./benchmarks/git/double_free_4/git_df_4.c:98:31 finish: ./benchmarks/git/double_free_4/git_df_4.c:98:31>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd22d0
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f9188bca840>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt is child function---alloc_ref-----

 ================== trace ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt is child function---tail_link_ref-----

 ================== trace ================== 
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd22d0
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f9188bca840>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2318
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce3f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f9188bca858>
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));

 ================== trace ptable================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---alloc_ref-----
this other function ------alloc_ref-----
 
 Start check Pointer Collect  

======================================================================
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt is child function---tail_link_ref-----

 ================== trace ================== 
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
this stmt is child function---tail_link_ref-----

 ================== trace ================== 
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2318
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce3f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f9188bca858>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_linked_ref========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2c60
    type <pointer_type 0x7f9188bbcc78
        type <array_type 0x7f9188bbcbd0 type <integer_type 0x7f9188bb2c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbcc78>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f9188bca9f0>
_1 = &list_3->name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = strcmp (_1, name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt is child function---strcmp-----

 ================== trace ================== 
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
if (_2 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
Cond in fucntion find_ref_by_name basic block 3
 ================== possible direct basic block ================= 
from find_ref_by_name basic block 6
 ================== possible direct basic block ================= 
from find_ref_by_name basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2c60
    type <pointer_type 0x7f9188bbcc78
        type <array_type 0x7f9188bbcbd0 type <integer_type 0x7f9188bb2c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbcc78>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f9188bca9f0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:find_ref_by_name========= [0m
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9189091e58
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <parm_decl 0x7f9188bc4400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f9188bca7c8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt is child function---find_ref_by_name-----

 ================== trace ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_32>
return 0;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
if (src_9 != 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
Cond in fucntion match_refs basic block 15
 ================== possible direct basic block ================= 
from match_refs basic block 3
 ================== possible direct basic block ================= 
from match_refs basic block 16
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt is child function---hashcpy-----

 ================== trace ================== 
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================
_1 = ref_5(D)->peer_ref;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================
free_ref (_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt is child function---free_ref-----

 ================== trace ================== 
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt is child function---free-----

 ================== find ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt is child function---make_linked_ref-----

 ================== trace ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9189091e58
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <parm_decl 0x7f9188bc4400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f9188bca7c8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9189091e10
    type <pointer_type 0x7f9188bba000
        type <integer_type 0x7f9188bb2bd0 char public QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bba000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f9188bba0a8>>
    var <var_decl 0x7f9188bce000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f9188bca7b0>
dst_name_18 = &src_9->name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt is child function---find_ref_by_name-----

 ================== trace ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_32>
return 0;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
if (src_9 != 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
Cond in fucntion match_refs basic block 15
 ================== possible direct basic block ================= 
from match_refs basic block 3
 ================== possible direct basic block ================= 
from match_refs basic block 16
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt is child function---hashcpy-----

 ================== trace ================== 
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================
_1 = ref_5(D)->peer_ref;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================
free_ref (_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt is child function---free_ref-----

 ================== trace ================== 
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt is child function---free-----

 ================== find ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt is child function---make_linked_ref-----

 ================== trace ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9189091e10
    type <pointer_type 0x7f9188bba000
        type <integer_type 0x7f9188bb2bd0 char public QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bba000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f9188bba0a8>>
    var <var_decl 0x7f9188bce000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f9188bca7b0>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9189091c60
    type <pointer_type 0x7f9188bbf5e8
        type <array_type 0x7f9188bba540 type <integer_type 0x7f918909e348 unsigned char>
            BLK
            size <integer_cst 0x7f9188ba9840 constant 160>
            unit-size <integer_cst 0x7f9188ba9828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba498>
            pointer_to_this <pointer_type 0x7f9188bbf5e8>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f9188bca750>
_7 = &dst_peer_23->new_sha1;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt is child function---hashcpy-----

 ================== trace ================== 
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
this stmt is child function---hashcpy-----

 ================== trace ================== 
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9189091c60
    type <pointer_type 0x7f9188bbf5e8
        type <array_type 0x7f9188bba540 type <integer_type 0x7f918909e348 unsigned char>
            BLK
            size <integer_cst 0x7f9188ba9840 constant 160>
            unit-size <integer_cst 0x7f9188ba9828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba498>
            pointer_to_this <pointer_type 0x7f9188bbf5e8>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f9188bca750>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:match_refs========= [0m
[40;42m =======pre add _ fucntion:get_local_heads========= [0m
[40;33m =======POP node_fun stack:get_local_heads========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f91890915e8
    type <integer_type 0x7f918909e5e8 int public SI
        size <integer_cst 0x7f9189089df8 constant 32>
        unit-size <integer_cst 0x7f9189089e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e5e8 precision:32 min <integer_cst 0x7f9189089db0 -2147483648> max <integer_cst 0x7f9189089dc8 2147483647>
        pointer_to_this <pointer_type 0x7f91890a59d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();

 ================== trace ptable================== 
trace fucntion name:get_local_heads 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---get_local_heads-----
this other function ------get_local_heads-----
 
 Start check Pointer Collect  

======================================================================
_2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
this stmt is child function---free_refs-----

 ================== trace ================== 
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt is child function---match_refs-----

 ================== trace ================== 
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
if (_4 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
Cond in fucntion main basic block 2
 ================== possible direct basic block ================= 
from main basic block 3
 ================== possible direct basic block ================= 
from main basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
this stmt is child function---get_local_heads-----

 ================== trace ================== 
trace fucntion name:get_local_heads 

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f91890915e8
    type <integer_type 0x7f918909e5e8 int public SI
        size <integer_cst 0x7f9189089df8 constant 32>
        unit-size <integer_cst 0x7f9189089e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e5e8 precision:32 min <integer_cst 0x7f9189089db0 -2147483648> max <integer_cst 0x7f9189089dc8 2147483647>
        pointer_to_this <pointer_type 0x7f91890a59d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: Use after free error!: free location 
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: Use after free error!: free location 
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9189091828
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9189931cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f9188bca6f0>
local_refs_12 = (struct ref *) _2;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
this stmt is child function---free_refs-----

 ================== trace ================== 
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate stmt argument:local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate stmt argument:local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
this stmt is child function---match_refs-----

 ================== trace ================== 
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate stmt argument:local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate stmt argument:local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate stmt argument:local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate stmt argument:local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate stmt argument:local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate stmt argument:local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
if (_4 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
Cond in fucntion main basic block 2
 ================== possible direct basic block ================= 
from main basic block 3
 ================== possible direct basic block ================= 
from main basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9189091828
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9189931cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f9188bca6f0>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: Use after free error!: free location 
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: Use after free error!: free location 
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f9189285c40
    type <pointer_type 0x7f9188bbfe70
        type <array_type 0x7f9188bbfdc8 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            size <integer_cst 0x7f9188ba9948 constant 432>
            unit-size <integer_cst 0x7f9188ba9990 constant 54>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bbfd20>
            pointer_to_this <pointer_type 0x7f9188bbfe70>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f9188bc12d0 type <array_type 0x7f9188bbfdc8>
        readonly constant static "No refs in common and none specified; doing nothing.\012\000">
    ./benchmarks/git/double_free_4/git_df_4.c:225:19 start: ./benchmarks/git/double_free_4/git_df_4.c:225:19 finish: ./benchmarks/git/double_free_4/git_df_4.c:225:19>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9189091798
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f9188bca6c0>
# VUSE <.MEM_19>
_7 = remote_refs;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
this stmt is child function---free_refs-----

 ================== trace ================== 
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
this stmt is child function---free_refs-----

 ================== trace ================== 
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9189091798
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f9188bca6c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:match_refs========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path match_refs  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;33m =======POP node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2ab0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f9188bca9c0>
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);

 ================== trace ptable================== 
trace fucntion name:calloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---calloc-----
this Reserved word function ------calloc-----
 
 Start check Pointer Collect  

======================================================================
return ref_11;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt is child function---calloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2ab0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f9188bca9c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd29d8
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f9188bca9a8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt is child function---calloc-----

 ================== trace ================== 
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd29d8
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f9188bca9a8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f9188bca5b8 type <integer_type 0x7f9188bb2348 size_t> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2900
    type <pointer_type 0x7f9188bbf000
        type <array_type 0x7f9188bba2a0 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbf000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f9188bca960>
_3 = &ref_11->name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2900
    type <pointer_type 0x7f9188bbf000
        type <array_type 0x7f9188bba2a0 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbf000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f9188bca960>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2990
    type <pointer_type 0x7f91890a5000
        type <void_type 0x7f918909ef18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f91890a5000>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f91890aa9d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f9188bca990>
_5 = _4 + prefixlen_9(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2990
    type <pointer_type 0x7f91890a5000
        type <void_type 0x7f918909ef18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f91890a5000>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f91890aa9d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f9188bca990>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f9189285f60
    type <pointer_type 0x7f9188bbf348
        type <array_type 0x7f9188bbae70 type <integer_type 0x7f9188bb2bd0 char>
            QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bbadc8>
            pointer_to_this <pointer_type 0x7f9188bbf348>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f9188bca540 type <array_type 0x7f9188bbae70>
        readonly constant static "\000">
    ./benchmarks/git/double_free_4/git_df_4.c:98:31 start: ./benchmarks/git/double_free_4/git_df_4.c:98:31 finish: ./benchmarks/git/double_free_4/git_df_4.c:98:31>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd22d0
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f9188bca840>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt is child function---alloc_ref-----

 ================== trace ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt is child function---tail_link_ref-----

 ================== trace ================== 
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd22d0
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f9188bca840>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2318
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce3f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f9188bca858>
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));

 ================== trace ptable================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---alloc_ref-----
this other function ------alloc_ref-----
 
 Start check Pointer Collect  

======================================================================
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt is child function---tail_link_ref-----

 ================== trace ================== 
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
this stmt is child function---tail_link_ref-----

 ================== trace ================== 
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2318
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce3f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f9188bca858>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_linked_ref========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2c60
    type <pointer_type 0x7f9188bbcc78
        type <array_type 0x7f9188bbcbd0 type <integer_type 0x7f9188bb2c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbcc78>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f9188bca9f0>
_1 = &list_3->name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = strcmp (_1, name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt is child function---strcmp-----

 ================== trace ================== 
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
if (_2 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
Cond in fucntion find_ref_by_name basic block 3
 ================== possible direct basic block ================= 
from find_ref_by_name basic block 6
 ================== possible direct basic block ================= 
from find_ref_by_name basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2c60
    type <pointer_type 0x7f9188bbcc78
        type <array_type 0x7f9188bbcbd0 type <integer_type 0x7f9188bb2c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbcc78>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f9188bca9f0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:find_ref_by_name========= [0m
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9189091e58
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <parm_decl 0x7f9188bc4400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f9188bca7c8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt is child function---find_ref_by_name-----

 ================== trace ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
if (src_9 != 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
Cond in fucntion match_refs basic block 15
 ================== possible direct basic block ================= 
from match_refs basic block 3
 ================== possible direct basic block ================= 
from match_refs basic block 16
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt is child function---hashcpy-----

 ================== trace ================== 
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt is child function---free_ref-----

 ================== trace ================== 
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt is child function---free-----

 ================== find ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt is child function---make_linked_ref-----

 ================== trace ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate stmt argument:dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9189091e58
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <parm_decl 0x7f9188bc4400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f9188bca7c8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9189091e10
    type <pointer_type 0x7f9188bba000
        type <integer_type 0x7f9188bb2bd0 char public QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bba000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f9188bba0a8>>
    var <var_decl 0x7f9188bce000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f9188bca7b0>
dst_name_18 = &src_9->name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
this stmt is child function---find_ref_by_name-----

 ================== trace ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (src_9 != 0B)
bb index := 15
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 15 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
if (src_9 != 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
Cond in fucntion match_refs basic block 15
 ================== possible direct basic block ================= 
from match_refs basic block 3
 ================== possible direct basic block ================= 
from match_refs basic block 16
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt is child function---hashcpy-----

 ================== trace ================== 
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_32>
_1 = src_9->peer_ref;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
this stmt is child function---free_ref-----

 ================== trace ================== 
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
dst_name_18 = &src_9->name;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
this stmt is child function---free-----

 ================== find ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
this stmt is child function---make_linked_ref-----

 ================== trace ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate stmt argument:dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9189091e10
    type <pointer_type 0x7f9188bba000
        type <integer_type 0x7f9188bb2bd0 char public QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bba000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f9188bba0a8>>
    var <var_decl 0x7f9188bce000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f9188bca7b0>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: Use after free error!: free location 
  192 |                 free(dst_name);
      |                 ^
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:174:33: warning: use location
  174 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 6
if (_2 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:172:28: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                            ^
	relate logic:= 1
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_4/git_df_4.c:183:33: warning: use location
  183 |                                 goto free_name;
      |                                 ^
	relate logic:= 1
succs:= 9
if (_5 == 0)
./benchmarks/git/double_free_4/git_df_4.c:177:43: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                                           ^
	relate logic:= 1
succs:= 8
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:177:28: warning: use location
  177 |                         if (pat->matching && !(send_all || send_mirror))
      |                            ^
	relate logic:= 0
succs:= 5
if (dst_peer_20 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:171:20: warning: use location
  171 |                 if (dst_peer) {
      |                    ^
	relate logic:= 0
succs:= 4
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
  167 |                 if (src->peer_ref)
      |                    ^
	relate logic:= 1
succs:= 3
if (_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:167:20: warning: use location
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9189091c60
    type <pointer_type 0x7f9188bbf5e8
        type <array_type 0x7f9188bba540 type <integer_type 0x7f918909e348 unsigned char>
            BLK
            size <integer_cst 0x7f9188ba9840 constant 160>
            unit-size <integer_cst 0x7f9188ba9828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba498>
            pointer_to_this <pointer_type 0x7f9188bbf5e8>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f9188bca750>
_7 = &dst_peer_23->new_sha1;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
this stmt is child function---hashcpy-----

 ================== trace ================== 
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
this stmt is child function---hashcpy-----

 ================== trace ================== 
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9189091c60
    type <pointer_type 0x7f9188bbf5e8
        type <array_type 0x7f9188bba540 type <integer_type 0x7f918909e348 unsigned char>
            BLK
            size <integer_cst 0x7f9188ba9840 constant 160>
            unit-size <integer_cst 0x7f9188ba9828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba498>
            pointer_to_this <pointer_type 0x7f9188bbf5e8>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f9188bca750>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:match_refs========= [0m
[40;44m =======node_fun:make_linked_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2ab0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f9188bca9c0>
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);

 ================== trace ptable================== 
trace fucntion name:calloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---calloc-----
this Reserved word function ------calloc-----
 
 Start check Pointer Collect  

======================================================================
return ref_11;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt is child function---calloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2ab0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f9188bca9c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd29d8
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f9188bca9a8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt is child function---calloc-----

 ================== trace ================== 
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd29d8
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f9188bca9a8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f9188bca5b8 type <integer_type 0x7f9188bb2348 size_t> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2900
    type <pointer_type 0x7f9188bbf000
        type <array_type 0x7f9188bba2a0 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbf000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f9188bca960>
_3 = &ref_11->name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2900
    type <pointer_type 0x7f9188bbf000
        type <array_type 0x7f9188bba2a0 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbf000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f9188bca960>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2990
    type <pointer_type 0x7f91890a5000
        type <void_type 0x7f918909ef18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f91890a5000>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f91890aa9d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f9188bca990>
_5 = _4 + prefixlen_9(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2990
    type <pointer_type 0x7f91890a5000
        type <void_type 0x7f918909ef18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f91890a5000>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f91890aa9d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f9188bca990>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f9189285f60
    type <pointer_type 0x7f9188bbf348
        type <array_type 0x7f9188bbae70 type <integer_type 0x7f9188bb2bd0 char>
            QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bbadc8>
            pointer_to_this <pointer_type 0x7f9188bbf348>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f9188bca540 type <array_type 0x7f9188bbae70>
        readonly constant static "\000">
    ./benchmarks/git/double_free_4/git_df_4.c:98:31 start: ./benchmarks/git/double_free_4/git_df_4.c:98:31 finish: ./benchmarks/git/double_free_4/git_df_4.c:98:31>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd22d0
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f9188bca840>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
this stmt is child function---alloc_ref-----

 ================== trace ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt is child function---tail_link_ref-----

 ================== trace ================== 
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd22d0
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f9188bca840>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2318
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce3f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f9188bca858>
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));

 ================== trace ptable================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---alloc_ref-----
this other function ------alloc_ref-----
 
 Start check Pointer Collect  

======================================================================
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
this stmt is child function---tail_link_ref-----

 ================== trace ================== 
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
this stmt is child function---tail_link_ref-----

 ================== trace ================== 
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate stmt argument:ret ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2318
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce3f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f9188bca858>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_linked_ref========= [0m
[40;44m =======node_fun:tail_link_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;44m =======node_fun:alloc_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2ab0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f9188bca9c0>
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);

 ================== trace ptable================== 
trace fucntion name:calloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---calloc-----
this Reserved word function ------calloc-----
 
 Start check Pointer Collect  

======================================================================
return ref_11;
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt is child function---calloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2ab0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f9188bca9c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd29d8
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f9188bca9a8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt is child function---calloc-----

 ================== trace ================== 
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd29d8
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f9188bca9a8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f9188bca5b8 type <integer_type 0x7f9188bb2348 size_t> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2900
    type <pointer_type 0x7f9188bbf000
        type <array_type 0x7f9188bba2a0 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbf000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f9188bca960>
_3 = &ref_11->name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2900
    type <pointer_type 0x7f9188bbf000
        type <array_type 0x7f9188bba2a0 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbf000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f9188bca960>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2990
    type <pointer_type 0x7f91890a5000
        type <void_type 0x7f918909ef18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f91890a5000>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f91890aa9d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f9188bca990>
_5 = _4 + prefixlen_9(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2990
    type <pointer_type 0x7f91890a5000
        type <void_type 0x7f918909ef18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f91890a5000>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f91890aa9d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f9188bca990>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f9189285f60
    type <pointer_type 0x7f9188bbf348
        type <array_type 0x7f9188bbae70 type <integer_type 0x7f9188bb2bd0 char>
            QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bbadc8>
            pointer_to_this <pointer_type 0x7f9188bbf348>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f9188bca540 type <array_type 0x7f9188bbae70>
        readonly constant static "\000">
    ./benchmarks/git/double_free_4/git_df_4.c:98:31 start: ./benchmarks/git/double_free_4/git_df_4.c:98:31 finish: ./benchmarks/git/double_free_4/git_df_4.c:98:31>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;44m =======node_fun:alloc_ref_with_prefix========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2ab0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f9188bca9c0>
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);

 ================== trace ptable================== 
trace fucntion name:calloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---calloc-----
this Reserved word function ------calloc-----
 
 Start check Pointer Collect  

======================================================================
return ref_11;
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
this stmt is child function---calloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2ab0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <var_decl 0x7f9188bce750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f9188bca9c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd29d8
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f9188bca9a8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
this stmt is child function---calloc-----

 ================== trace ================== 
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd29d8
    type <pointer_type 0x7f9188bb2d20
        type <integer_type 0x7f9188bb2c78 char readonly QI
            size <integer_cst 0x7f9189089ca8 constant 8>
            unit-size <integer_cst 0x7f9189089cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f918909e3f0 precision:8 min <integer_cst 0x7f9188ba9738 -128> max <integer_cst 0x7f9188ba9720 127>
            pointer_to_this <pointer_type 0x7f9188bb2d20>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bb2888>>
    var <parm_decl 0x7f9188bc4a80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f9188bca9a8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f9188bca5b8 type <integer_type 0x7f9188bb2348 size_t> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2900
    type <pointer_type 0x7f9188bbf000
        type <array_type 0x7f9188bba2a0 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbf000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f9188bca960>
_3 = &ref_11->name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2900
    type <pointer_type 0x7f9188bbf000
        type <array_type 0x7f9188bba2a0 type <integer_type 0x7f9188bb2bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbf000>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f9188bca960>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2990
    type <pointer_type 0x7f91890a5000
        type <void_type 0x7f918909ef18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f91890a5000>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f91890aa9d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f9188bca990>
_5 = _4 + prefixlen_9(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2990
    type <pointer_type 0x7f91890a5000
        type <void_type 0x7f918909ef18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f91890a5000>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f91890aa9d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f9188bca990>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======node_fun:find_ref_by_name========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2c60
    type <pointer_type 0x7f9188bbcc78
        type <array_type 0x7f9188bbcbd0 type <integer_type 0x7f9188bb2c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbcc78>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f9188bca9f0>
_1 = &list_3->name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_32>
return 0;
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
this stmt is child function---strcmp-----

 ================== trace ================== 
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
if (_2 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
Cond in fucntion find_ref_by_name basic block 3
 ================== possible direct basic block ================= 
from find_ref_by_name basic block 6
 ================== possible direct basic block ================= 
from find_ref_by_name basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2c60
    type <pointer_type 0x7f9188bbcc78
        type <array_type 0x7f9188bbcbd0 type <integer_type 0x7f9188bb2c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f9188bba1f8>
            pointer_to_this <pointer_type 0x7f9188bbcc78>>
        unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f9188bca9f0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:find_ref_by_name========= [0m
[40;44m =======node_fun:free_refs========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path free_refs  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bdc090
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f9188bcaac8>
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:free_ref========= [0m
[40;42m =======pre_check_funciton:free_refs========= [0m
[40;42m =======start_check_funciton:free_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bd2ea0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <parm_decl 0x7f9188bc4c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f9188bcaa80>
ref_1 = PHI <ref_3(D)(2), next_5(3)>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
bb index := 4
# VUSE <.MEM_32>
return 0;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
bb index := 4
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
bb index := 4
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ref_1 != 0B)
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
if (ref_1 != 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
Cond in fucntion free_refs basic block 4
 ================== possible direct basic block ================= 
from free_refs basic block 3
 ================== possible direct basic block ================= 
from free_refs basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
this stmt is child function---free_ref-----

 ================== trace ================== 
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate stmt argument:ref ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate stmt argument:ref ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
bb index := 3
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
bb index := 3
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
bb index := 3
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6>
next_5 = ref_1->next;
bb index := 3
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
ref_1 = PHI <ref_3(D)(2), next_5(3)>
bb index := 4
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
  194 |         return 0;
      |                ^
beacuse in succ := 16 have return or exit
# VUSE <.MEM_32>
return 0;
./benchmarks/git/double_free_4/git_df_4.c:194:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ref_1 = PHI <ref_3(D)(2), next_5(3)>
bb index := 4
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
  140 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_13>
return;
./benchmarks/git/double_free_4/git_df_4.c:140:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ref_1 = PHI <ref_3(D)(2), next_5(3)>
bb index := 4
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ref_1 = PHI <ref_3(D)(2), next_5(3)>
bb index := 4
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
   76 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_6>
return;
./benchmarks/git/double_free_4/git_df_4.c:76:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ref_1 = PHI <ref_3(D)(2), next_5(3)>
lto1: warning: use location
this stmt have mutiple branch --------

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f9188bd2ea0
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
    var <parm_decl 0x7f9188bc4c80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f9188bcaa80>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: Use after free error!: free location 
   73 |                 free_ref(ref);
      |                 ^
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: Use after free error!: free location 
   73 |                 free_ref(ref);
      |                 ^
ref_1 = PHI <ref_3(D)(2), next_5(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:free_refs========= [0m
[40;44m =======node_fun:free_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f9188bdc090
    type <pointer_type 0x7f9188bba690
        type <record_type 0x7f9188bba5e8 ref BLK
            size <integer_cst 0x7f918915e0a8 constant 640>
            unit-size <integer_cst 0x7f9188ba9768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f9188bba5e8 fields <field_decl 0x7f9188bb5850 next> context <translation_unit_decl 0x7f9189094168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f9188bba690>>
        public unsigned DI
        size <integer_cst 0x7f9189089bb8 constant 64>
        unit-size <integer_cst 0x7f9189089bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f9188bba738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f9188bcaac8>
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:free_ref========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = get_local_heads ();
_2 = (long int) _1;
local_refs_12 = (struct ref *) _2;
remote_tail = &remote_refs;
_3 = remote_refs;
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
if (_4 != 0)
  goto <bb 3>; [34.00%]
else
  goto <bb 4>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 365072224]:
// predicted unlikely by goto predictor.
goto <bb 6>; [100.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 708669601]:
_5 = remote_refs;
if (_5 == 0B)
  goto <bb 5>; [9.81%]
else
  goto <bb 6>; [90.19%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 69520487]:
_6 = stderr;
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
// predicted unlikely by goto predictor.

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 1073741824]:
cleanup:
free_refs (local_refs_12);
_7 = remote_refs;
free_refs (_7);
return 0;

=======Mapping node_fun:match_refs=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 15>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
dst_name_18 = &src_9->name;
_1 = src_9->peer_ref;
if (_1 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
// predicted unlikely by continue predictor.
goto <bb 14>; [100.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 286689065]:
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
if (dst_peer_20 != 0B)
  goto <bb 6>; [70.00%]
else
  goto <bb 8>; [30.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 200682346]:
_2 = dst_peer_20->peer_ref;
if (_2 != 0B)
  goto <bb 7>; [54.59%]
else
  goto <bb 12>; [45.41%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 109552493]:
// predicted unlikely by goto predictor.
goto <bb 13>; [100.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 86006719]:
_3 = BIT_FIELD_REF <MEM[(const struct refspec *)0B], 8, 0>;
_4 = _3 & 4;
if (_4 != 0)
  goto <bb 9>; [67.00%]
else
  goto <bb 11>; [33.00%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 57624502]:
_5 = flags_15(D) & 3;
if (_5 == 0)
  goto <bb 10>; [34.00%]
else
  goto <bb 11>; [66.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 19592331]:
// predicted unlikely by goto predictor.
goto <bb 13>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 66414388]:
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
_6 = &src_9->new_sha1;
_7 = &dst_peer_23->new_sha1;
hashcpy (_7, _6);

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 157544241]:
# dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_10->peer_ref = src_9;
_8 = MEM[(const struct refspec *)0B].force;
dst_peer_10->force = _8;

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 286689065]:
free_name:
free (dst_name_18);

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 955630227]:
src_28 = src_9->next;

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 1073741824]:
# src_9 = PHI <src_16(D)(2), src_28(14)>
if (src_9 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 16>; [11.00%]

=======is loop:0=========

 bb index 16 
<bb 16> [local count: 118111600]:
return 0;

=======Mapping node_fun:make_linked_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
return ret_4;

=======Mapping node_fun:tail_link_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
_1 = *tail_6(D);
*_1 = ref_7(D);
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
ref_10 = ref_4->next;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ref_4 = PHI <ref_7(D)(2), ref_10(3)>
_2 = ref_4->next;
if (_2 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
_3 = &ref_4->next;
*tail_6(D) = _3;
return;

=======Mapping node_fun:alloc_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
return _4;

=======Mapping node_fun:alloc_ref_with_prefix=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
len_8 = strlen (name_7(D));
_1 = len_8 + prefixlen_9(D);
_2 = _1 + 81;
ref_11 = calloc (1, _2);
_3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
_4 = &ref_11->name;
_5 = _4 + prefixlen_9(D);
memcpy (_5, name_7(D), len_8);
return ref_11;

=======Mapping node_fun:find_ref_by_name=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 114863530]:
goto <bb 5>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1014686026]:
_1 = &list_3->name;
_2 = strcmp (_1, name_7(D));
if (_2 == 0)
  goto <bb 6>; [5.50%]
else
  goto <bb 4>; [94.50%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 958878296]:
list_8 = list_3->next;

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 1073741824]:
# list_3 = PHI <list_5(D)(2), list_8(4)>
if (list_3 != 0B)
  goto <bb 3>; [94.50%]
else
  goto <bb 6>; [5.50%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 114863531]:
# _4 = PHI <list_3(3), 0B(5)>
return _4;

=======Mapping node_fun:free_refs=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
next_5 = ref_1->next;
free_ref (ref_1);

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ref_1 = PHI <ref_3(D)(2), next_5(3)>
if (ref_1 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
return;

=======Mapping node_fun:free_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (ref_5(D) == 0B)
  goto <bb 4>; [30.95%]
else
  goto <bb 3>; [69.05%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 741418729]:
_1 = ref_5(D)->peer_ref;
free_ref (_1);
_2 = ref_5(D)->remote_status;
free (_2);
_3 = ref_5(D)->symref;
free (_3);
free (ref_5(D));

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 1 [0m
[40;34m    gimple free   count : 4 [0m
[40;34m    find Entry point : 14 [0m
[40;34m    used_stmt array stack totalsize of : 0.001968 mb[0m
[40;34m    collect time: : 0.000187 s [0m
[40;34m    algorithm time: 0.069843 s [0m
[40;34m    gimple stmt count : : 87 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
stdarg               ------------|      |      |      |      |          |          |
cdce                 ------------|      |      |      |      |          |          |
cselim               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
ifcombine            ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ch                               |      |      |      |      |     +3.4%|     +0.0%|
cplxlower                        |      |      |      |      |     +3.2%|     +0.0%|
sra                  ------------|      |      |      |      |          |          |
dom                  ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
reassoc              ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
sincos               ------------|      |      |      |      |          |          |
laddress             ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
walloca              ------------|      |      |      |      |          |          |
sink                 ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
fix_loops            ------------|      |      |      |      |          |          |
loop                 ------------|      |      |      |      |          |          |
loopinit                         |      |      |      |      |    -52.4%|    -79.4%|
sccp                 ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
ivcanon              ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
cunroll              ------------|      |      |      |      |          |          |
ivopts               ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
loopdone             ------------|      |      |      |      |          |          |
no_loop                          |      |      |      |      |   +110.3%|   +385.9%|
veclower2            ------------|      |      |      |      |          |          |
switchlower          ------------|      |      |      |      |          |          |
reassoc              ------------|      |      |      |      |          |          |
slsr                 ------------|      |      |      |      |          |          |
dom                  ------------|      |      |      |      |          |          |
strlen               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
wrestrict            ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
fab                  ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
crited               ------------|      |      |      |      |          |          |
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |      |      |      |----------|----------|
vregs                            |      |      |      |      |    +74.0%|    +40.6%|
into_cfglayout                   |      |      |      |      |     -0.6%|     -0.0%|
jump                             |      |      |      |      |     -2.3%|     -2.2%|
subreg1                          |      |      |      |      |     -1.7%|     -2.2%|
dfinit               ------------|      |      |      |      |          |          |
cse1                 ------------|      |      |      |      |          |          |
fwprop1                          |      |      |      |      |     -2.6%|     -3.7%|
ce1                              |      |      |      |      |     -2.7%|     -3.8%|
reginfo              ------------|      |      |      |      |          |          |
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant                  |      |      |      |      |     +0.2%|     +0.0%|
loop2_done                       |      |      |      |      |     +0.2%|     +0.0%|
dse1                 ------------|      |      |      |      |          |          |
fwprop2                          |      |      |      |      |     -0.7%|     -0.1%|
init-regs                        |      |      |      |      |     -0.7%|     -0.1%|
combine                          |      |      |      |      |     +5.0%|     +4.9%|
ce2                              |      |      |      |      |     +4.8%|     +4.6%|
outof_cfglayout                  |      |      |      |      |     +0.6%|     +0.0%|
split1                           |      |      |      |      |     +0.6%|     +0.0%|
subreg3              ------------|      |      |      |      |          |          |
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                  ------------|      |      |      |      |          |          |
reload                           |      |      |      |      |     -9.0%|     -9.8%|
postreload                       |      |      |      |      |     -9.9%|    -10.9%|
split2               ------------|      |      |      |      |          |          |
cmpelim              ------------|      |      |      |      |          |          |
pro_and_epilogue                 |      |      |      |      |    +18.6%|    +18.9%|
dse2                             |      |      |      |      |    +15.7%|    +15.9%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                  ------------|      |      |      |      |          |          |
cprop_hardreg        ------------|      |      |      |      |          |          |
rtl_dce              ------------|      |      |      |      |          |          |
bbro                             |      |      |      |      |     +0.4%|     +0.1%|
split4                           |      |      |      |      |     +0.4%|     +0.1%|
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
/usr/bin/ld: /tmp/ccNslUnF.ltrans0.ltrans.o: in function `match_refs':
<artificial>:(.text+0x19c): undefined reference to `hashcpy'
/usr/bin/ld: /tmp/ccNslUnF.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x21b): undefined reference to `get_local_heads'
collect2: error: ld returned 1 exit status
