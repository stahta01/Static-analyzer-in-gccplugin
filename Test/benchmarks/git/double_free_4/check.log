../Compiler/newplugin.so 11.2.0 
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: In function ‘copy_array’:
./benchmarks/git/double_free_4/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/double_free_4/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘move_array’:
./benchmarks/git/double_free_4/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/double_free_4/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: At top level:
./benchmarks/git/double_free_4/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/double_free_4/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
   81 |         if (!strcmp(list->name, name))
      |              ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:11:1: note: include ‘<string.h>’ or provide a declaration of ‘strcmp’
   10 | #include "../git.h"
  +++ |+#include <string.h>
   11 | 
./benchmarks/git/double_free_4/git_df_4.c: In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
   89 |         size_t len = strlen(name);
      |                      ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:91:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/git_df_4.c: In function ‘copy_ref’:
./benchmarks/git/double_free_4/git_df_4.c:107:15: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
  107 |         len = strlen(ref->name);
      |               ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:107:15: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:109:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  109 |         memcpy(cpy, ref, sizeof(struct ref) + len + 1);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:109:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:111:37: note: in expansion of macro ‘xstrdup’
  111 |         cpy->symref = ref->symref ? xstrdup(ref->symref) : NULL;
      |                                     ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘try_explicit_object_name’:
./benchmarks/git/double_free_4/git_df_4.c:124:17: warning: implicit declaration of function ‘hashclr’ [-Wimplicit-function-declaration]
  124 |                 hashclr(ref->new_sha1);
      |                 ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:127:13: warning: implicit declaration of function ‘get_sha1’ [-Wimplicit-function-declaration]
  127 |         if (get_sha1(name, sha1))
      |             ^~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:130:9: warning: implicit declaration of function ‘hashcpy’ [-Wimplicit-function-declaration]
  130 |         hashcpy(ref->new_sha1, sha1);
      |         ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: implicit declaration of function ‘get_local_heads’ [-Wimplicit-function-declaration]
  215 |         local_refs = get_local_heads();
      |                      ^~~~~~~~~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: assignment to ‘struct ref *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  215 |         local_refs = get_local_heads();
      |                    ^

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.01 ( 20%)   0.00 (  0%)   0.00 (  0%)  1298k ( 50%)
 phase parsing                      :   0.03 ( 60%)   0.02 (100%)   0.05 ( 83%)  1109k ( 42%)
 phase opt and generate             :   0.01 ( 20%)   0.00 (  0%)   0.01 ( 17%)   192k (  7%)
 callgraph ipa passes               :   0.01 ( 20%)   0.00 (  0%)   0.01 ( 17%)   110k (  4%)
 ipa lto gimple out                 :   0.01 ( 20%)   0.00 (  0%)   0.00 (  0%)  1872  (  0%)
 preprocessing                      :   0.01 ( 20%)   0.00 (  0%)   0.04 ( 67%)   325k ( 12%)
 lexical analysis                   :   0.02 ( 40%)   0.01 ( 50%)   0.01 ( 17%)     0  (  0%)
 parser function body               :   0.00 (  0%)   0.01 ( 50%)   0.00 (  0%)    97k (  4%)
 plugin execution                   :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)     0  (  0%)
 TOTAL                              :   0.05          0.02          0.06         2609k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)  2157k ( 97%)
 phase stream in                    :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)    69k (  3%)
 ipa lto decl in                    :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)    54k (  2%)
 TOTAL                              :   0.01          0.00          0.01         2228k
../Compiler/newplugin.so 11.2.0 
--------plugin argument-----------
contextsentive 1
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
=======node_fun:match_refs=========
=======node_fun:make_linked_ref=========
=======node_fun:tail_link_ref=========
=======node_fun:alloc_ref=========
=======node_fun:alloc_ref_with_prefix=========
=======node_fun:find_ref_by_name=========
=======node_fun:free_refs=========
=======node_fun:free_ref=========
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 39 
===============The second stage : Mapping stmt=================
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
# VUSE <.MEM_34>
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
# .MEM_36 = VDEF <.MEM_34>
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
# .MEM_37 = VDEF <.MEM_36>
hashcpy (_7, _6);
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
===============The second stage : Program slicing=================
=============== *this point analyzable =================
_1 = get_local_heads ();
=============== program slcing stmt count:3=================
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
========================================================
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
========================================================
=============== *this point analyzable =================
free_refs (_7);
=============== program slcing stmt count:4=================
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
========================================================
=============== *this point analyzable =================
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
========================================================
=============== *this point analyzable =================
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
========================================================
=============== *this point analyzable =================
dst_peer_22 = find_ref_by_name (dst_21(D), dst_name_20);
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
========================================================
=============== *this point analyzable =================
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
========================================================
=============== *this point analyzable =================
dst_peer_25 = make_linked_ref (dst_name_20, dst_tail_23(D));
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
========================================================
=============== *this point analyzable =================
hashcpy (_7, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
========================================================
=============== *this point analyzable =================
hashcpy (_7, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
========================================================
=============== *this point analyzable =================
tail_link_ref (ret_4, tail_5(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
========================================================
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
=============== program slcing stmt count:6=================
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
========================================================
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
=============== program slcing stmt count:5=================
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
========================================================
=============== *this point analyzable =================
ref_11 = calloc (1, _2);
=============== program slcing stmt count:3=================
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
========================================================
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
========================================================
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
========================================================
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:6=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
========================================================
=============== *this point analyzable =================
memcpy (_5, name_7(D), len_8);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
========================================================
=============== *this point analyzable =================
free_ref (ref_1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
========================================================
=============== *this point analyzable =================
free_ref (_1);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================

=============== The third stage : detection  End=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 1 [0m
[40;34m    gimple free   count : 4 [0m
[40;34m    all ptable point : 39 [0m
[40;34m    analyzable ptable point : 34 [0m
[40;34m    analyzable ptable all point stmt : 98 [0m
[40;34m    used_stmt array stack totalsize of : 0.003160 mb[0m
[40;34m    collect time: : 0.002730 s [0m
[40;34m    algorithm time: 0.011848 s [0m
[40;34m    gimple stmt count : : 0 [0m
[40;34m    this report analysis in Tue Jun  7 21:52:13 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.01 ( 25%)   0.00 (  0%)   0.00 (  0%)  2157k ( 76%)
 phase opt and generate             :   0.03 ( 75%)   0.01 (100%)   0.05 (100%)   625k ( 22%)
 callgraph functions expansion      :   0.02 ( 50%)   0.01 (100%)   0.03 ( 60%)   521k ( 18%)
 tree CFG cleanup                   :   0.00 (  0%)   0.00 (  0%)   0.02 ( 40%)     0  (  0%)
 tree operand scan                  :   0.00 (  0%)   0.01 (100%)   0.00 (  0%)    13k (  0%)
 dominance computation              :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)     0  (  0%)
 dead store elim1                   :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)  1968  (  0%)
 plugin execution                   :   0.01 ( 25%)   0.00 (  0%)   0.01 ( 20%)     0  (  0%)
 initialize rtl                     :   0.01 ( 25%)   0.00 (  0%)   0.00 (  0%)    12k (  0%)
 rest of compilation                :   0.01 ( 25%)   0.00 (  0%)   0.00 (  0%)    29k (  1%)
 TOTAL                              :   0.04          0.01          0.05         2844k
/usr/bin/ld: /tmp/ccg5PkBQ.ltrans0.ltrans.o: in function `match_refs':
<artificial>:(.text+0x19c): undefined reference to `hashcpy'
/usr/bin/ld: /tmp/ccg5PkBQ.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x21b): undefined reference to `get_local_heads'
collect2: error: ld returned 1 exit status
