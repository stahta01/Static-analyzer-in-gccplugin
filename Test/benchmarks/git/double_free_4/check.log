../Compiler/newplugin.so 11.2.0 
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: In function ‘copy_array’:
./benchmarks/git/double_free_4/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/double_free_4/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘move_array’:
./benchmarks/git/double_free_4/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/double_free_4/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: At top level:
./benchmarks/git/double_free_4/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/double_free_4/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
   81 |         if (!strcmp(list->name, name))
      |              ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:11:1: note: include ‘<string.h>’ or provide a declaration of ‘strcmp’
   10 | #include "../git.h"
  +++ |+#include <string.h>
   11 | 
./benchmarks/git/double_free_4/git_df_4.c: In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
   89 |         size_t len = strlen(name);
      |                      ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:91:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/git_df_4.c: In function ‘copy_ref’:
./benchmarks/git/double_free_4/git_df_4.c:107:15: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
  107 |         len = strlen(ref->name);
      |               ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:107:15: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:109:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  109 |         memcpy(cpy, ref, sizeof(struct ref) + len + 1);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:109:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:111:37: note: in expansion of macro ‘xstrdup’
  111 |         cpy->symref = ref->symref ? xstrdup(ref->symref) : NULL;
      |                                     ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘try_explicit_object_name’:
./benchmarks/git/double_free_4/git_df_4.c:124:17: warning: implicit declaration of function ‘hashclr’ [-Wimplicit-function-declaration]
  124 |                 hashclr(ref->new_sha1);
      |                 ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:127:13: warning: implicit declaration of function ‘get_sha1’ [-Wimplicit-function-declaration]
  127 |         if (get_sha1(name, sha1))
      |             ^~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:130:9: warning: implicit declaration of function ‘hashcpy’ [-Wimplicit-function-declaration]
  130 |         hashcpy(ref->new_sha1, sha1);
      |         ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: implicit declaration of function ‘get_local_heads’ [-Wimplicit-function-declaration]
  215 |         local_refs = get_local_heads();
      |                      ^~~~~~~~~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: assignment to ‘struct ref *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  215 |         local_refs = get_local_heads();
      |                    ^

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 50%)
 phase parsing                      :   0.04 ( 80%)   0.00 (  0%)   0.04 ( 80%)  1109k ( 42%)
 phase opt and generate             :   0.01 ( 20%)   0.00 (  0%)   0.01 ( 20%)   192k (  7%)
 callgraph ipa passes               :   0.01 ( 20%)   0.00 (  0%)   0.01 ( 20%)   110k (  4%)
 ipa free lang data                 :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)    11k (  0%)
 preprocessing                      :   0.02 ( 40%)   0.00 (  0%)   0.01 ( 20%)   325k ( 12%)
 lexical analysis                   :   0.01 ( 20%)   0.00 (  0%)   0.01 ( 20%)     0  (  0%)
 parser (global)                    :   0.01 ( 20%)   0.00 (  0%)   0.02 ( 40%)   575k ( 22%)
 tree CCP                           :   0.01 ( 20%)   0.00 (  0%)   0.00 (  0%)   784  (  0%)
 TOTAL                              :   0.05          0.00          0.05         2609k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 97%)
 phase stream out                   :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 ipa lto decl out                   :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 TOTAL                              :   0.01          0.00          0.00         2228k
../Compiler/newplugin.so 11.2.0 
--------plugin argument-----------
contextsentive 1
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
node:= 2 
 	next_branch :=3
	next_branch :=4
node:= 3 
 	next_branch :=6
node:= 4 
 	next_branch :=5
	next_branch :=6
node:= 5 
 	next_branch :=6
=======node_fun:match_refs=========
node:= 2 
 	next_branch :=15
node:= 3 
 	next_branch :=4
	next_branch :=5
node:= 4 
 	next_branch :=14
node:= 5 
 	next_branch :=6
	next_branch :=8
node:= 6 
 	next_branch :=7
	next_branch :=12
node:= 7 
 	next_branch :=13
node:= 8 
 	next_branch :=9
	next_branch :=11
node:= 9 
 	next_branch :=10
	next_branch :=11
node:= 10 
 	next_branch :=13
node:= 11 
 	next_branch :=12
node:= 12 
 	next_branch :=13
node:= 13 
 	next_branch :=14
node:= 14 
 	next_branch :=15
node:= 15 
 	next_branch :=3
	next_branch :=16
=======node_fun:make_linked_ref=========
=======node_fun:tail_link_ref=========
node:= 2 
 	next_branch :=4
node:= 3 
 	next_branch :=4
node:= 4 
 	next_branch :=3
	next_branch :=5
=======node_fun:alloc_ref=========
=======node_fun:alloc_ref_with_prefix=========
=======node_fun:find_ref_by_name=========
node:= 2 
 	next_branch :=5
node:= 3 
 	next_branch :=6
	next_branch :=4
node:= 4 
 	next_branch :=5
node:= 5 
 	next_branch :=3
	next_branch :=6
=======node_fun:free_refs=========
node:= 2 
 	next_branch :=4
node:= 3 
 	next_branch :=4
node:= 4 
 	next_branch :=3
	next_branch :=5
=======node_fun:free_ref=========
node:= 2 
 	next_branch :=4
	next_branch :=3
node:= 3 
 	next_branch :=4
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 39 
===============The second stage : Mapping stmt=================
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
===============The second stage : Program slicing=================
local_refs_12 = (struct ref *) _2;
=============== *this point analyzable =================
_1 = get_local_heads ();
=============== program slcing stmt count:3=================
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
========================================================
 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
========================================================
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
========================================================
 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
# VUSE <.MEM_16>
_3 = remote_refs;
# VUSE <.MEM_17>
_5 = remote_refs;
# VUSE <.MEM_19>
_7 = remote_refs;
=============== *this point analyzable =================
free_refs (_7);
=============== program slcing stmt count:4=================
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
========================================================
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
dst_name_18 = &src_9->name;
=============== *this point analyzable =================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
========================================================
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
dst_name_18 = &src_9->name;
=============== *this point analyzable =================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
========================================================
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
dst_name_18 = &src_9->name;
=============== *this point analyzable =================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
========================================================
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
dst_name_18 = &src_9->name;
=============== *this point analyzable =================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
========================================================
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
dst_name_18 = &src_9->name;
=============== *this point analyzable =================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
========================================================
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
=============== *this point analyzable =================
hashcpy (_7, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
========================================================
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
=============== *this point analyzable =================
hashcpy (_7, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
========================================================
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
=============== *this point analyzable =================
tail_link_ref (ret_4, tail_5(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
========================================================
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
_1 = len_8 + prefixlen_9(D);
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
=============== program slcing stmt count:6=================
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
========================================================
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
_1 = len_8 + prefixlen_9(D);
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
=============== program slcing stmt count:5=================
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
========================================================
=============== *this point analyzable =================
ref_11 = calloc (1, _2);
=============== program slcing stmt count:3=================
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
========================================================
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
========================================================
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
========================================================
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:6=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
========================================================
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
=============== *this point analyzable =================
memcpy (_5, name_7(D), len_8);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
========================================================
 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>
# VUSE <.MEM_6>
next_5 = ref_1->next;
# VUSE <.MEM_6>
next_5 = ref_1->next;
=============== *this point analyzable =================
free_ref (ref_1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================
[40;44m =======print_function_path main  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_refs========= [0m
[40;44m =======print_function_path free_refs  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m
[40;42m =======pre_check_funciton:free_refs========= [0m
[40;42m =======start_check_funciton:free_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>
 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
if (ref_1 != 0B)
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
[40;31m    branch possiable have return in bb:4 [0m
gimple stmt in succ := 4 
beacuse in succ := 5 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry free_refs
dot graph target entry end

if (ref_1 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
dot graph target loc start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 4: if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph stmt start if (ref_1 != 0B)
free_ref (ref_1);
dot graph stmt end

dot graph stmt start if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
dot graph entry free_refs
dot graph target entry end

free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (ref_1);
free_ref (ref_1);
dot graph stmt end

dot graph stmt start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1863578657
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 366207166 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 366207166 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1863578657
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 531618532 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 531618532 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1863578657
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 938947062 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 938947062 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1863578657
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 31896891 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1863578657
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1355478483 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1863578657
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1085910558 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1732516094
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 414577796 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 414577796 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1732516094
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1293299406 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1293299406 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1732516094
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 809530563 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 809530563 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1732516094
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 7018387 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1732516094
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1974412628 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1732516094
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1037557590 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry free_refs
dot graph target entry end

next_5 = ref_1->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target loc start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 3: next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start next_5 = ref_1->next;
free_ref (ref_1);
dot graph stmt end

dot graph stmt start next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph stmt end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_786292222 dot graph subgraph  if (ref_1 != 0B)
ref_1 = PHI <ref_3(D)(2), next_5(3)>
dot graph subgrapend

dot graph start relate for1ID : 1863578657
from free_ref basic block 3dot graph end relate end

subgraph cluster_378153888 dot graph subgraph  start ID : 1085910558 stmt(relate) ， Tree ID : 1863578657 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1732516094
from free_ref basic block 3dot graph end relate end

subgraph cluster_1441933531 dot graph subgraph  start ID : 1037557590 stmt(relate) ， Tree ID : 1732516094 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;42m =======pre add _ fucntion:__builtin_fwrite========= [0m
[40;42m =======pre add _ fucntion:match_refs========= [0m
[40;44m =======print_function_path match_refs  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :4========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_455160001 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_391752480 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1979043253 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1250797319 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_307109473 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1501868792 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1500901130 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1703942071 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1629766720 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2115542926 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1054154932 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_994283542 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1878847839 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1535686386 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_710378551 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_97571357 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daab0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f3d842d29c0>
 <ssa_name 0x7f3d842daab0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f3d842d29c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2067304918 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1649325614 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_129468248 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1275299754 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_587752524 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1861984342 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1689877550 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1881051930 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_524031257 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1696895937 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1707980910 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1561588847 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_335704511 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2086134798 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_856038730 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_790864513 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_330403630 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_687598336 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2041661832 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_637513104 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f3d842d2540
    type <array_type 0x7f3d842c2e70
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        QI size <integer_cst 0x7f3d847b6ca8 8> unit-size <integer_cst 0x7f3d847b6cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f3d842c2dc8 type <integer_type 0x7f3d847cb000 sizetype>
            DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6be8 0> max <integer_cst 0x7f3d847b6be8 0>>
        pointer_to_this <pointer_type 0x7f3d842c7348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 41983480
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1395079314 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 41983480
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 193971527 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 41983480
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1671750200 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 41983480
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1363138592 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 41983480
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1248126460 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 518550094
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1094502783 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 518550094
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 636329198 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 518550094
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1228928645 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 518550094
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1192074140 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 518550094
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 556150469 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_730770611 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1321542388 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 41983480
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1831450223 dot graph subgraph  start ID : 1248126460 stmt(relate) ， Tree ID : 41983480 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 518550094
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1318523135 dot graph subgraph  start ID : 556150469 stmt(relate) ， Tree ID : 518550094 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1373844125
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1052091417 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1373844125
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1560074340 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1373844125
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 923256415 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1373844125
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 612588679 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1373844125
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 974179540 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1258960926 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_551239830 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1373844125
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1830218270 dot graph subgraph  start ID : 974179540 stmt(relate) ， Tree ID : 1373844125 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 881643460
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 370332958 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 881643460
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1944003623 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 881643460
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1519156564 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 881643460
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 412316438 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 881643460
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1191599289 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1713128092
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 2084066638 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1713128092
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 407254233 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1713128092
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 813770904 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1713128092
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 455133084 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1713128092
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1501757016 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1713128092
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1450100102 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1684061730 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_546347508 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 881643460
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2006250571 dot graph subgraph  start ID : 1191599289 stmt(relate) ， Tree ID : 881643460 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1713128092
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_267348693 dot graph subgraph  start ID : 1450100102 stmt(relate) ， Tree ID : 1713128092 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1585871829 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 756449332 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 916577624 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 490479598 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 169040024 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1839834039
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1103068278 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1839834039
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1143219564 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1839834039
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 951311317 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1839834039
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1654308108 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1839834039
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 825954187 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1839834039
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 853653109 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 650173084 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1907624485 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1608603584 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1841772374 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1473268929 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1545186574 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_101542959 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_139556185 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2000319659 dot graph subgraph  start ID : 169040024 stmt(relate) ， Tree ID : 1690217146 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1839834039
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1603299976 dot graph subgraph  start ID : 853653109 stmt(relate) ， Tree ID : 1839834039 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1589656287 dot graph subgraph  start ID : 1473268929 stmt(relate) ， Tree ID : 1196287145 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 2163836
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1448423211 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 2163836
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1804246434 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2163836
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1870053733 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2163836
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 991156709 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2163836
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1242634615 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 479019417
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1907734333 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 479019417
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1733114214 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 479019417
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 648059442 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 479019417
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1600084724 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 479019417
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 688698844 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 479019417
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1791279006 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 195523304
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 469749545 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 195523304
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1257565503 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 195523304
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 583991224 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 195523304
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1666036691 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 195523304
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1907738587 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_344132061 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1127156627 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1602027313 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1817400990 dot graph subgraph  start ID : 169040024 stmt(relate) ， Tree ID : 1690217146 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1839834039
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_524859553 dot graph subgraph  start ID : 853653109 stmt(relate) ， Tree ID : 1839834039 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1703570273 dot graph subgraph  start ID : 1473268929 stmt(relate) ， Tree ID : 1196287145 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 2163836
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1956957175 dot graph subgraph  start ID : 1242634615 stmt(relate) ， Tree ID : 2163836 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 479019417
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_377695564 dot graph subgraph  start ID : 1791279006 stmt(relate) ， Tree ID : 479019417 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 195523304
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1159386601 dot graph subgraph  start ID : 1907738587 stmt(relate) ， Tree ID : 195523304 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^

dot graph START

======================================================================
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1399129815
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1914593305 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1399129815
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1161550437 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1399129815
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 700069378 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1399129815
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1571356092 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1399129815
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 884120523 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1691226087
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 666507059 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1691226087
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1363139940 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1691226087
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1451476773 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1691226087
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 252137625 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1691226087
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2011199382 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_904077849 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_940836469 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 1399129815
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1654994741 dot graph subgraph  start ID : 884120523 stmt(relate) ， Tree ID : 1399129815 : *tail_6(D) = _3;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1691226087
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1307990243 dot graph subgraph  start ID : 2011199382 stmt(relate) ， Tree ID : 1691226087 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842dac60
    type <pointer_type 0x7f3d842c4c78
        type <array_type 0x7f3d842c4bd0 type <integer_type 0x7f3d842bac78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c4c78>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f3d842d29f0>
 <ssa_name 0x7f3d842dac60
    type <pointer_type 0x7f3d842c4c78
        type <array_type 0x7f3d842c4bd0 type <integer_type 0x7f3d842bac78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c4c78>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f3d842d29f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842dac60
    type <pointer_type 0x7f3d842c4c78
        type <array_type 0x7f3d842c4bd0 type <integer_type 0x7f3d842bac78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c4c78>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f3d842d29f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1136359773 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_1 = &list_3->name;
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_2124744286 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842dadc8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842ccc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d2a50>
 <ssa_name 0x7f3d842dadc8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842ccc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d2a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842dadc8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842ccc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d2a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_418072098 dot graph subgraph  _2 = strcmp (_1, name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1720350998 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daca8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f3d842daca8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daca8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1643297329 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_178327038 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2064483059
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 622970308 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 2064483059
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 1780354351 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 2064483059
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1734400402 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
gimple stmt in succ := 15 
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 1147829862
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 1336440976 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1543873929
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1525525426 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1543873929
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 348343929 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1543873929
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 795520096 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1543873929
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1292635084 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1543873929
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1509894367 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1543873929
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1495589474 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 246531242
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1039331914 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 246531242
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1383014587 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 246531242
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1609671182 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 246531242
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 343325039 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 246531242
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1635152213 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1473386917 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph start relate for1ID : 2064483059
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1247402888 dot graph subgraph  start ID : 1734400402 stmt(relate) ， Tree ID : 2064483059 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1147829862
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_428505034 dot graph subgraph  start ID : 1336440976 stmt(relate) ， Tree ID : 1147829862 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1543873929
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_980898010 dot graph subgraph  start ID : 1495589474 stmt(relate) ， Tree ID : 1543873929 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 246531242
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_407909484 dot graph subgraph  start ID : 1635152213 stmt(relate) ， Tree ID : 246531242 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1564864808
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 958158648 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1564864808
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 825981582 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1564864808
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1137732158 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
gimple stmt in succ := 15 
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
dot graph arrowdot graph start relate for1ID : 453972330
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 1004308620 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1054731569
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1076942638 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1054731569
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 637179324 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1054731569
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 641648323 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1054731569
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 77288852 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1054731569
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1973620300 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1054731569
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 38038605 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
dot graph arrowdot graph start relate for1ID : 174480582
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 833558701 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 174480582
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 747965715 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 174480582
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1684374949 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 174480582
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 181664528 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 174480582
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1464473243 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1930906191 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph start relate for1ID : 1564864808
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1220996442 dot graph subgraph  start ID : 1137732158 stmt(relate) ， Tree ID : 1564864808 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 453972330
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_700004182 dot graph subgraph  start ID : 1004308620 stmt(relate) ， Tree ID : 453972330 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1054731569
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1393093725 dot graph subgraph  start ID : 38038605 stmt(relate) ， Tree ID : 1054731569 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 174480582
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1564321481 dot graph subgraph  start ID : 1464473243 stmt(relate) ， Tree ID : 174480582 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>

 ================== pre trace ptable ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :888========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
is Other function find_ref_by_name
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
gimple stmt in succ := 15 
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 718996994
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 664240721 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 718996994
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 616177782 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 718996994
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1699895004 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1072150205
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 33558942 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 510570005
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1898131788 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 510570005
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1171291100 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 510570005
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 964542335 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 510570005
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 754956760 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 510570005
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 78539021 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 510570005
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2041484973 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 720187345
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 2118773826 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 720187345
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1218272737 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 720187345
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 758225950 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 720187345
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1574104457 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 720187345
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1392753319 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1591784651 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph start relate for1ID : 718996994
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_174586524 dot graph subgraph  start ID : 1699895004 stmt(relate) ， Tree ID : 718996994 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1072150205
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_929644620 dot graph subgraph  start ID : 33558942 stmt(relate) ， Tree ID : 1072150205 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 510570005
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1773449179 dot graph subgraph  start ID : 2041484973 stmt(relate) ， Tree ID : 510570005 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 720187345
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1639059767 dot graph subgraph  start ID : 1392753319 stmt(relate) ， Tree ID : 720187345 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 713067163
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 846961973 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 191580301
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 2106160888 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 191580301
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 263799806 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 191580301
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 379253049 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 191580301
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 677674235 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 191580301
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 928040528 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 230085591
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 2000190733 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 230085591
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1028989773 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 230085591
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 740655596 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 230085591
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1750838873 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 230085591
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 52797225 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
gimple stmt in succ := 15 
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1705197931
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 358311986 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1705197931
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 131336246 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1705197931
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1599199257 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1750448070 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph start relate for1ID : 713067163
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_851523591 dot graph subgraph  start ID : 846961973 stmt(relate) ， Tree ID : 713067163 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 191580301
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1570489435 dot graph subgraph  start ID : 928040528 stmt(relate) ， Tree ID : 191580301 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 230085591
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_821237159 dot graph subgraph  start ID : 52797225 stmt(relate) ， Tree ID : 230085591 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1705197931
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1609749541 dot graph subgraph  start ID : 1599199257 stmt(relate) ， Tree ID : 1705197931 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>

 ================== pre trace ptable ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :888========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :889========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 66506830
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1054050545 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 66506830
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1171696768 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 66506830
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 996151450 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 66506830
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 680016076 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 66506830
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 663272887 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 66506830
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1709218613 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :890========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 854853188
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1667895854 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 854853188
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1790777856 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 854853188
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1234106237 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 854853188
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 198086441 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 854853188
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 571334736 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
is Other function make_linked_ref
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
gimple stmt in succ := 15 
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 82053420
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 428172032 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 82053420
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 424041822 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 82053420
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1111043193 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1168827629
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 27397047 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1163840418
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 726541912 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1163840418
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 385709033 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1163840418
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1295176665 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1163840418
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 178257521 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1163840418
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2136157104 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1163840418
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2146700256 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 809910615
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1608966150 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 809910615
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 598373552 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 809910615
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 876417446 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 809910615
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 515533047 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 809910615
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1770070320 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1872568896 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph start relate for1ID : 66506830
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1195549123 dot graph subgraph  start ID : 1709218613 stmt(relate) ， Tree ID : 66506830 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 854853188
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_285859559 dot graph subgraph  start ID : 571334736 stmt(relate) ， Tree ID : 854853188 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 82053420
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1434303862 dot graph subgraph  start ID : 1111043193 stmt(relate) ， Tree ID : 82053420 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1168827629
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_575043525 dot graph subgraph  start ID : 27397047 stmt(relate) ， Tree ID : 1168827629 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1163840418
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1140712748 dot graph subgraph  start ID : 2146700256 stmt(relate) ， Tree ID : 1163840418 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 809910615
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_954716068 dot graph subgraph  start ID : 1770070320 stmt(relate) ， Tree ID : 809910615 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_218337734 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_227335337 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847bec18
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f3d842d2738>
 <ssa_name 0x7f3d847bec18
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f3d842d2738>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847bec18
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f3d842d2738>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1152802509 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_789672470 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;42m =======pre add _ fucntion:get_local_heads========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:get_local_heads 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
is Other function get_local_heads
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc start _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _2 = (long int) _1;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph target loc start _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start local_refs_12 = (struct ref *) _2;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 6 
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
dot graph target loc start _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1580974541
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1213714292 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1213714292 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1580974541
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1420431951 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1420431951 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1580974541
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 602318522 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 602318522 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1241111340
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 436788722 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 436788722 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847be5e8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph entry main
dot graph target entry end

if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
dot graph entry main
dot graph target entry end

_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc start _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _1 = get_local_heads ();
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph stmt end

this stmt call this function :get_local_heads
trace fucntion name:get_local_heads 

 ================== trace ================== 
trace fucntion free:4 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_1731181995 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 6 
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 1108381265
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 277920797 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1192664497
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1706754817 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1706754817 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1192664497
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1154338243 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1154338243 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1192664497
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1708197544 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1708197544 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1192664497
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1329341490 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1192664497
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 879423491 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1192664497
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 756263020 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1615201049
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 166243705 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 166243705 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 1615201049
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 1331306545 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1615201049
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 608430149 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1615201049
from match_refs basic block 5dot graph end relate end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph relate stmt start ID : 1120959773 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1615201049
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1549644279 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1615201049
from match_refs basic block 11dot graph end relate end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph relate stmt start ID : 835765487 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1615201049
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 126278634 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1615201049
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 191833102 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 1615201049
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 1145154245 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
dot graph arrowdot graph start relate for1ID : 1707253176
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 1405547394 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 418102548
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 162088050 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 418102548
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 499175086 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 418102548
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 854891270 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 418102548
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1490948485 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 418102548
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2125995460 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 418102548
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 439373009 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
dot graph arrowdot graph start relate for1ID : 1594005641
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 23071357 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1594005641
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1958964059 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1594005641
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1871926438 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1594005641
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1215735854 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1594005641
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1518235228 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847be828
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d85060cf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f3d842d26f0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 878781033
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 776449751 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 878781033
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 700093070 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 878781033
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1758204525 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_1532712771 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend

dot graph start relate for1ID : 1108381265
from free_refs basic block 3dot graph end relate end

subgraph cluster_167810472 dot graph subgraph  start ID : 277920797 stmt(relate) ， Tree ID : 1108381265 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 1192664497
from free_ref basic block 3dot graph end relate end

subgraph cluster_1924448230 dot graph subgraph  start ID : 756263020 stmt(relate) ， Tree ID : 1192664497 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1615201049
from match_refs basic block 14dot graph end relate end

subgraph cluster_716535668 dot graph subgraph  start ID : 1145154245 stmt(relate) ， Tree ID : 1615201049 : src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 1707253176
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_776240621 dot graph subgraph  start ID : 1405547394 stmt(relate) ， Tree ID : 1707253176 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 418102548
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_897924356 dot graph subgraph  start ID : 439373009 stmt(relate) ， Tree ID : 418102548 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1594005641
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_118696300 dot graph subgraph  start ID : 1518235228 stmt(relate) ， Tree ID : 1594005641 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 878781033
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1612006108 dot graph subgraph  start ID : 1758204525 stmt(relate) ， Tree ID : 878781033 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>
 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1024202990
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 310529402 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 310529402 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 1024202990
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 609676705 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1024202990
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 583972518 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1024202990
from match_refs basic block 5dot graph end relate end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph relate stmt start ID : 1716076796 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1024202990
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1027779254 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1024202990
from match_refs basic block 11dot graph end relate end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph relate stmt start ID : 746060569 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1024202990
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 67768235 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1024202990
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 1882670524 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 1024202990
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 89525406 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 46280047
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 174559886 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 940108200
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1640285688 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 940108200
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 197631243 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 940108200
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 751588611 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 940108200
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1364728479 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 940108200
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1413367097 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 940108200
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 122340192 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 42333200
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 822433262 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 42333200
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1854230389 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 42333200
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1575045971 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 42333200
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 990243734 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 42333200
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1631194972 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 144097992
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1766484356 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 144097992
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 381635680 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 144097992
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 262794292 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 6 
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 1231006816
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 1405838670 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 573323694
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1840683522 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1840683522 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 573323694
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1989811189 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1989811189 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 573323694
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 141916842 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 141916842 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be678
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f3d842d2678>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 573323694
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 720979128 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 573323694
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 588388110 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 573323694
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 209685077 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_456166004 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend

dot graph start relate for1ID : 1024202990
from match_refs basic block 14dot graph end relate end

subgraph cluster_677913516 dot graph subgraph  start ID : 89525406 stmt(relate) ， Tree ID : 1024202990 : src_28 = src_9->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 46280047
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_255965124 dot graph subgraph  start ID : 174559886 stmt(relate) ， Tree ID : 46280047 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 940108200
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_630725890 dot graph subgraph  start ID : 122340192 stmt(relate) ， Tree ID : 940108200 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 42333200
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1618021717 dot graph subgraph  start ID : 1631194972 stmt(relate) ， Tree ID : 42333200 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 144097992
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1896250813 dot graph subgraph  start ID : 262794292 stmt(relate) ， Tree ID : 144097992 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1231006816
from free_refs basic block 3dot graph end relate end

subgraph cluster_828357133 dot graph subgraph  start ID : 1405838670 stmt(relate) ， Tree ID : 1231006816 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 573323694
from free_ref basic block 3dot graph end relate end

subgraph cluster_222126680 dot graph subgraph  start ID : 209685077 stmt(relate) ， Tree ID : 573323694 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^

dot graph START

======================================================================
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1113495644
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 94240583 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 94240583 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1711619755
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 9660221 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 9660221 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <var_decl 0x7f3d85060b40 remote_tail
    type <pointer_type 0x7f3d842c2738
        type <pointer_type 0x7f3d842c2690 type <record_type 0x7f3d842c25e8 ref>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c2738>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c73f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:2 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_859667746 dot graph subgraph  _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_39970276 dot graph subgraph  _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location

dot graph START

======================================================================
 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>
 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 544352085
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 552867620 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 552867620 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 544352085
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 2029781465 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 544352085
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 686268927 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 544352085
from match_refs basic block 5dot graph end relate end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph relate stmt start ID : 1273846748 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 544352085
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 470685927 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 544352085
from match_refs basic block 11dot graph end relate end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph relate stmt start ID : 895954005 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 544352085
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 1730012752 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 544352085
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 1148599444 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 544352085
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 1151919129 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
dot graph arrowdot graph start relate for1ID : 213254995
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 619137513 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 900686294
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1041612128 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 900686294
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 841264193 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 900686294
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 2014181938 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 900686294
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1135852711 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 900686294
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1185731066 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 900686294
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1076219799 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
dot graph arrowdot graph start relate for1ID : 205147553
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1992488049 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 205147553
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 836562602 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 205147553
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 214807774 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 205147553
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 244983975 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 205147553
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 544796701 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1990952352
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1026599229 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1990952352
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 515825092 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1990952352
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 703136450 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 6 
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 1066569505
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 1060177177 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1256004070
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 948867323 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 948867323 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1256004070
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1746446104 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1746446104 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1256004070
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 382367170 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 382367170 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be7e0
    type <pointer_type 0x7f3d842c20a8
        type <pointer_type 0x7f3d842c2000 type <integer_type 0x7f3d842babd0 char>
            unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c20a8>>
        unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f3d842d26d8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1256004070
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1419553250 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1256004070
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 494916461 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1256004070
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 2112379922 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_420669046 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend

dot graph start relate for1ID : 544352085
from match_refs basic block 14dot graph end relate end

subgraph cluster_1646835591 dot graph subgraph  start ID : 1151919129 stmt(relate) ， Tree ID : 544352085 : src_28 = src_9->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 213254995
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_178151269 dot graph subgraph  start ID : 619137513 stmt(relate) ， Tree ID : 213254995 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 900686294
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1039806559 dot graph subgraph  start ID : 1076219799 stmt(relate) ， Tree ID : 900686294 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 205147553
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_400038237 dot graph subgraph  start ID : 544796701 stmt(relate) ， Tree ID : 205147553 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1990952352
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1219763398 dot graph subgraph  start ID : 703136450 stmt(relate) ， Tree ID : 1990952352 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1066569505
from free_refs basic block 3dot graph end relate end

subgraph cluster_1881070753 dot graph subgraph  start ID : 1060177177 stmt(relate) ， Tree ID : 1066569505 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 1256004070
from free_ref basic block 3dot graph end relate end

subgraph cluster_266736528 dot graph subgraph  start ID : 2112379922 stmt(relate) ， Tree ID : 1256004070 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location

dot graph START

======================================================================
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>

 ================== pre trace ptable ================== 
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :888========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 208132461
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 919318171 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 919318171 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :889========  [0m
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :890========  [0m
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :890========  [0m
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :891========  [0m
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
is Other function match_refs
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1339273498
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1432944703 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1432944703 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847be6c0
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1378629789 dot graph subgraph  if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_142953232 dot graph subgraph  _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f3d842c92d0
    type <array_type 0x7f3d842c7dc8
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        BLK
        size <integer_cst 0x7f3d842b1948 constant 432>
        unit-size <integer_cst 0x7f3d842b1990 constant 54>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f3d842c7d20 type <integer_type 0x7f3d847cb000 sizetype>
            DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6be8 0> max <integer_cst 0x7f3d842b1978 53>>
        pointer_to_this <pointer_type 0x7f3d842c7e70>>
    readonly constant static "No refs in common and none specified; doing nothing.\012\000">

dot graph START

======================================================================
 <ssa_name 0x7f3d847be750
    type <pointer_type 0x7f3d842c4348
        type <record_type 0x7f3d842c42a0 FILE BLK
            size <integer_cst 0x7f3d842b1870 constant 1728>
            unit-size <integer_cst 0x7f3d842b1930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c41f8 fields <field_decl 0x7f3d842c5a18 _flags> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c4348>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c7bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f3d842d26a8>
 <ssa_name 0x7f3d847be750
    type <pointer_type 0x7f3d842c4348
        type <record_type 0x7f3d842c42a0 FILE BLK
            size <integer_cst 0x7f3d842b1870 constant 1728>
            unit-size <integer_cst 0x7f3d842b1930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c41f8 fields <field_decl 0x7f3d842c5a18 _flags> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c4348>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c7bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f3d842d26a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847be750
    type <pointer_type 0x7f3d842c4348
        type <record_type 0x7f3d842c42a0 FILE BLK
            size <integer_cst 0x7f3d842b1870 constant 1728>
            unit-size <integer_cst 0x7f3d842b1930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c41f8 fields <field_decl 0x7f3d842c5a18 _flags> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c4348>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c7bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f3d842d26a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m    branch possiable have return in bb:5 [0m
gimple stmt in succ := 5 
beacuse in succ := 6 have return 

======================================================================
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph entry main
dot graph target entry end

__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph stmt end

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph stmt end

this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
[40;31m    branch possiable have return in bb:5 [0m
gimple stmt in succ := 5 
beacuse in succ := 6 have return 

======================================================================
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph entry main
dot graph target entry end

__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph stmt end

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph stmt end

this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_994399074 dot graph subgraph  __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
_6 = stderr;
dot graph subgrapend

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_180013464 dot graph subgraph  __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
_6 = stderr;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^

dot graph START

======================================================================
 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 6 
beacuse in succ := 6 have return 

======================================================================
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
dot graph entry main
dot graph target entry end

free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc start free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (_7);
free_refs (_7);
dot graph stmt end

dot graph stmt start free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 1889399337
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 1376766244 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1599566715
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 236832150 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 236832150 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1599566715
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1341662519 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1341662519 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1599566715
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2020235761 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2020235761 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1599566715
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1883667741 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1599566715
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1519813788 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1599566715
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 912558673 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_19>
_7 = remote_refs;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 6 
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

_7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc start free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 6: _7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _7 = remote_refs;
free_refs (_7);
dot graph stmt end

dot graph stmt start _7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _3 = remote_refs;
free_refs (_7);
dot graph stmt end

dot graph stmt start _3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc start free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
free_refs (_7);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 136222331
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 592093538 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 592093538 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 136222331
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 646145778 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 136222331
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 402958859 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 136222331
from match_refs basic block 5dot graph end relate end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph relate stmt start ID : 800226000 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 136222331
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1565463949 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 136222331
from match_refs basic block 11dot graph end relate end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph relate stmt start ID : 1745915186 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 136222331
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 133301308 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 136222331
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 542446025 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 136222331
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 786392266 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 302939219
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 1881719523 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 71853321
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1017373830 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 71853321
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 916978078 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 71853321
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 383913605 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 71853321
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 100149886 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 71853321
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 655373082 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 71853321
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1762543394 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1649772157
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1942556859 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1649772157
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 2132502455 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1649772157
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 879054753 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1649772157
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1394639926 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1649772157
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 221850958 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847be798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f3d842d26c0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 73233624
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1267392039 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 73233624
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 2105518699 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 73233624
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1593047413 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
free_refs (_7);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 6 
beacuse in succ := 6 have return 

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :free_refs
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_17>
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
[40;31m    branch possiable have return in bb:4 [0m
gimple stmt in succ := 4 
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
dot graph target loc start free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 4: _5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _5 = remote_refs;
free_refs (_7);
dot graph stmt end

dot graph stmt start _5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
[40;31m    branch possiable have return in bb:4 [0m
gimple stmt in succ := 4 
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
dot graph target loc start free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 4: if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start if (_5 == 0B)
free_refs (_7);
dot graph stmt end

dot graph stmt start if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
dot graph stmt end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_32467064 dot graph subgraph  free_refs (_7);
_7 = remote_refs;
dot graph subgrapend

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_94257382 dot graph subgraph  _7 = remote_refs;
_7 = remote_refs;
dot graph subgrapend

dot graph start relate for1ID : 1889399337
from free_refs basic block 3dot graph end relate end

subgraph cluster_37657303 dot graph subgraph  start ID : 1376766244 stmt(relate) ， Tree ID : 1889399337 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 1599566715
from free_ref basic block 3dot graph end relate end

subgraph cluster_678612842 dot graph subgraph  start ID : 912558673 stmt(relate) ， Tree ID : 1599566715 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 136222331
from match_refs basic block 14dot graph end relate end

subgraph cluster_497216241 dot graph subgraph  start ID : 786392266 stmt(relate) ， Tree ID : 136222331 : src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 302939219
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_837883303 dot graph subgraph  start ID : 1881719523 stmt(relate) ， Tree ID : 302939219 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 71853321
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_96593143 dot graph subgraph  start ID : 1762543394 stmt(relate) ， Tree ID : 71853321 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1649772157
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_95647779 dot graph subgraph  start ID : 221850958 stmt(relate) ， Tree ID : 1649772157 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 73233624
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_971184612 dot graph subgraph  start ID : 1593047413 stmt(relate) ， Tree ID : 73233624 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# VUSE <.MEM_19>
_7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# VUSE <.MEM_17>
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;44m =======print_function_path match_refs  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_639039168 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_882040045 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1274123831 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_373275044 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_953893366 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_144014013 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1290253122 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1337806971 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_244163899 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1945626204 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_952866718 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_487267018 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1447914713 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_747939929 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_472285825 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_179485819 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daab0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f3d842d29c0>
 <ssa_name 0x7f3d842daab0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f3d842d29c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2142579855 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_694136783 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_252719443 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1262488246 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_652171835 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1845766856 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1294955311 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_746429217 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1883424160 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1973568153 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1243645459 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_573823815 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2070161297 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1339293238 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1545008427 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_561716817 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_73849636 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_671648610 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_934991861 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1027743002 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f3d842d2540
    type <array_type 0x7f3d842c2e70
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        QI size <integer_cst 0x7f3d847b6ca8 8> unit-size <integer_cst 0x7f3d847b6cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f3d842c2dc8 type <integer_type 0x7f3d847cb000 sizetype>
            DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6be8 0> max <integer_cst 0x7f3d847b6be8 0>>
        pointer_to_this <pointer_type 0x7f3d842c7348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 815662624
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 77761335 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 815662624
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 218066326 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 815662624
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1059826523 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 815662624
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2023387540 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 815662624
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1170933044 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1547093541
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1323818605 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1547093541
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1918872973 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1547093541
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 2019379367 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1547093541
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1503304424 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1547093541
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1913969180 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_566032502 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1756023868 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 41983480
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1028973778 dot graph subgraph  start ID : 1248126460 stmt(relate) ， Tree ID : 41983480 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 518550094
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1218204337 dot graph subgraph  start ID : 556150469 stmt(relate) ， Tree ID : 518550094 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 815662624
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1454307076 dot graph subgraph  start ID : 1170933044 stmt(relate) ， Tree ID : 815662624 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1547093541
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_176445441 dot graph subgraph  start ID : 1913969180 stmt(relate) ， Tree ID : 1547093541 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1190247588
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 2529947 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1190247588
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1060795366 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1190247588
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1764071404 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1190247588
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2072691244 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1190247588
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 252604956 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1161596183 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_486924413 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1373844125
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_326454592 dot graph subgraph  start ID : 974179540 stmt(relate) ， Tree ID : 1373844125 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1190247588
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1833244794 dot graph subgraph  start ID : 252604956 stmt(relate) ， Tree ID : 1190247588 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1354197595
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 501423770 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1354197595
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1499677610 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1354197595
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1572263921 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1354197595
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1561250293 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1354197595
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1375581502 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 595713317
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 960860187 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 595713317
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 551916460 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 595713317
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 367102642 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 595713317
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 832755906 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 595713317
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2055220884 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 595713317
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 133588174 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1398788408 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1663761104 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 881643460
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1162561952 dot graph subgraph  start ID : 1191599289 stmt(relate) ， Tree ID : 881643460 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1713128092
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_469509098 dot graph subgraph  start ID : 1450100102 stmt(relate) ， Tree ID : 1713128092 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1354197595
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_970584533 dot graph subgraph  start ID : 1375581502 stmt(relate) ， Tree ID : 1354197595 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 595713317
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1339007394 dot graph subgraph  start ID : 133588174 stmt(relate) ， Tree ID : 595713317 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 13348473
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1341537341 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 13348473
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1347454371 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 13348473
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1777419877 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 13348473
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1266744937 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 13348473
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1600059327 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 791532413
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1753669350 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 791532413
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1926513920 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 791532413
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 477293559 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 791532413
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1028101977 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 791532413
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1133227867 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 791532413
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 978717329 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 558008140
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 392483974 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 558008140
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1755877442 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 558008140
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1153721457 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 558008140
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1353344161 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 558008140
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 160310254 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1520824099 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_38616419 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_68047491 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1654412273 dot graph subgraph  start ID : 169040024 stmt(relate) ， Tree ID : 1690217146 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1839834039
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1437404828 dot graph subgraph  start ID : 853653109 stmt(relate) ， Tree ID : 1839834039 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1731808595 dot graph subgraph  start ID : 1473268929 stmt(relate) ， Tree ID : 1196287145 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 2163836
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_669490577 dot graph subgraph  start ID : 1242634615 stmt(relate) ， Tree ID : 2163836 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 479019417
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1906913926 dot graph subgraph  start ID : 1791279006 stmt(relate) ， Tree ID : 479019417 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 195523304
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_554909480 dot graph subgraph  start ID : 1907738587 stmt(relate) ， Tree ID : 195523304 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 13348473
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2008497971 dot graph subgraph  start ID : 1600059327 stmt(relate) ， Tree ID : 13348473 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 791532413
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_46089283 dot graph subgraph  start ID : 978717329 stmt(relate) ， Tree ID : 791532413 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 558008140
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_568257954 dot graph subgraph  start ID : 160310254 stmt(relate) ， Tree ID : 558008140 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1393543654
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 198194183 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1393543654
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 321812953 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1393543654
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 846119333 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1393543654
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 989726596 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1393543654
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 2075482304 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 625149605
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1467020155 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 625149605
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 956100633 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 625149605
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1758377472 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 625149605
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 298253836 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 625149605
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1336396573 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 625149605
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 168901964 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 944790368
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1322623421 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 944790368
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 2044081972 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 944790368
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1105100622 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 944790368
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 695963872 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 944790368
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 2082698392 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1173148113 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_202892497 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1372619572 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_757473061 dot graph subgraph  start ID : 169040024 stmt(relate) ， Tree ID : 1690217146 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1839834039
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_872383075 dot graph subgraph  start ID : 853653109 stmt(relate) ， Tree ID : 1839834039 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1132049850 dot graph subgraph  start ID : 1473268929 stmt(relate) ， Tree ID : 1196287145 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 2163836
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1312382541 dot graph subgraph  start ID : 1242634615 stmt(relate) ， Tree ID : 2163836 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 479019417
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_733397398 dot graph subgraph  start ID : 1791279006 stmt(relate) ， Tree ID : 479019417 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 195523304
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1178139133 dot graph subgraph  start ID : 1907738587 stmt(relate) ， Tree ID : 195523304 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 13348473
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1880640495 dot graph subgraph  start ID : 1600059327 stmt(relate) ， Tree ID : 13348473 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 791532413
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1935949063 dot graph subgraph  start ID : 978717329 stmt(relate) ， Tree ID : 791532413 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 558008140
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_424199139 dot graph subgraph  start ID : 160310254 stmt(relate) ， Tree ID : 558008140 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1393543654
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2078834679 dot graph subgraph  start ID : 2075482304 stmt(relate) ， Tree ID : 1393543654 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 625149605
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_110278368 dot graph subgraph  start ID : 168901964 stmt(relate) ， Tree ID : 625149605 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 944790368
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1270318472 dot graph subgraph  start ID : 2082698392 stmt(relate) ， Tree ID : 944790368 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^

dot graph START

======================================================================
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 921077627
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 38277024 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 921077627
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1895468078 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 921077627
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 240614135 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 921077627
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 994377658 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 921077627
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1506361902 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 538867971
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 183290583 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 538867971
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1675263867 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 538867971
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1229605782 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 538867971
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1128080951 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 538867971
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 850403640 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1126204107 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_85697926 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 1399129815
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1546367513 dot graph subgraph  start ID : 884120523 stmt(relate) ， Tree ID : 1399129815 : *tail_6(D) = _3;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1691226087
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1061418851 dot graph subgraph  start ID : 2011199382 stmt(relate) ， Tree ID : 1691226087 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 921077627
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1258846039 dot graph subgraph  start ID : 1506361902 stmt(relate) ， Tree ID : 921077627 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 538867971
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1749260010 dot graph subgraph  start ID : 850403640 stmt(relate) ， Tree ID : 538867971 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842dac60
    type <pointer_type 0x7f3d842c4c78
        type <array_type 0x7f3d842c4bd0 type <integer_type 0x7f3d842bac78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c4c78>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f3d842d29f0>
 <ssa_name 0x7f3d842dac60
    type <pointer_type 0x7f3d842c4c78
        type <array_type 0x7f3d842c4bd0 type <integer_type 0x7f3d842bac78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c4c78>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f3d842d29f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842dac60
    type <pointer_type 0x7f3d842c4c78
        type <array_type 0x7f3d842c4bd0 type <integer_type 0x7f3d842bac78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c4c78>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f3d842d29f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_286554775 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_1 = &list_3->name;
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_2016319100 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842dadc8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842ccc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d2a50>
 <ssa_name 0x7f3d842dadc8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842ccc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d2a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842dadc8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842ccc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d2a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_474159437 dot graph subgraph  _2 = strcmp (_1, name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1418604625 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daca8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f3d842daca8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daca8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1181217994 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1207556836 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 449260110
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 914374841 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 449260110
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 996022251 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 449260110
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 873459249 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
gimple stmt in succ := 15 
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 845725872
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 1106300619 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2143777721
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1766803500 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2143777721
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1144577644 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 2143777721
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1891762151 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2143777721
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 2007417635 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2143777721
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2138955302 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2143777721
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1250640406 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f3d847bee58
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842cc400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f3d842d27c8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 174762237
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 778420625 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 174762237
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1628407741 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 174762237
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1302843189 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 174762237
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1628824265 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 174762237
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 607128200 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1388541115 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph start relate for1ID : 2064483059
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1027708130 dot graph subgraph  start ID : 1734400402 stmt(relate) ， Tree ID : 2064483059 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1147829862
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1668547051 dot graph subgraph  start ID : 1336440976 stmt(relate) ， Tree ID : 1147829862 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1543873929
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_499903506 dot graph subgraph  start ID : 1495589474 stmt(relate) ， Tree ID : 1543873929 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 246531242
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_629484493 dot graph subgraph  start ID : 1635152213 stmt(relate) ， Tree ID : 246531242 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 449260110
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1955101826 dot graph subgraph  start ID : 873459249 stmt(relate) ， Tree ID : 449260110 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 845725872
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_368738959 dot graph subgraph  start ID : 1106300619 stmt(relate) ， Tree ID : 845725872 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 2143777721
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1103643930 dot graph subgraph  start ID : 1250640406 stmt(relate) ， Tree ID : 2143777721 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 174762237
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1226222803 dot graph subgraph  start ID : 607128200 stmt(relate) ， Tree ID : 174762237 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1549956953
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 163717118 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1549956953
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 1675482913 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1549956953
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 316848146 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
gimple stmt in succ := 15 
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
dot graph arrowdot graph start relate for1ID : 1159739369
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 401458514 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1162574019
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 118556341 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1162574019
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 397752587 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1162574019
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 781893871 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1162574019
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1263133985 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1162574019
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 142031091 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1162574019
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 641827858 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f3d847bee10
    type <pointer_type 0x7f3d842c2000
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f3d842c20a8>>
    var <var_decl 0x7f3d842d6000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f3d842d27b0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
dot graph arrowdot graph start relate for1ID : 1392671497
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1040629816 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1392671497
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1429367876 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1392671497
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 23608474 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1392671497
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 521553909 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1392671497
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 584727417 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1652432739 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph start relate for1ID : 1564864808
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1128682109 dot graph subgraph  start ID : 1137732158 stmt(relate) ， Tree ID : 1564864808 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 453972330
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1973268532 dot graph subgraph  start ID : 1004308620 stmt(relate) ， Tree ID : 453972330 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1054731569
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_532657222 dot graph subgraph  start ID : 38038605 stmt(relate) ， Tree ID : 1054731569 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 174480582
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_649745512 dot graph subgraph  start ID : 1464473243 stmt(relate) ， Tree ID : 174480582 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1549956953
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_325688391 dot graph subgraph  start ID : 316848146 stmt(relate) ， Tree ID : 1549956953 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1159739369
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1162141715 dot graph subgraph  start ID : 401458514 stmt(relate) ， Tree ID : 1159739369 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1162574019
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_457363690 dot graph subgraph  start ID : 641827858 stmt(relate) ， Tree ID : 1162574019 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1392671497
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_694427350 dot graph subgraph  start ID : 584727417 stmt(relate) ， Tree ID : 1392671497 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>

 ================== pre trace ptable ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :888========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
is Other function find_ref_by_name
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
gimple stmt in succ := 15 
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1683586493
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 96900655 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1683586493
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 282019116 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1683586493
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1211585758 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 413748801
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 1441758485 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1613044272
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1576322820 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1613044272
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1560314826 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1613044272
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 2010796860 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1613044272
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 210733043 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1613044272
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 675965163 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1613044272
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 5344303 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f3d847beea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f3d842d27e0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1930570802
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1398015800 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1930570802
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1893190718 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1930570802
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1212455031 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1930570802
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1421624274 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1930570802
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 267260979 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1797182448 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph start relate for1ID : 718996994
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_926573365 dot graph subgraph  start ID : 1699895004 stmt(relate) ， Tree ID : 718996994 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1072150205
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1395943089 dot graph subgraph  start ID : 33558942 stmt(relate) ， Tree ID : 1072150205 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 510570005
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1622967333 dot graph subgraph  start ID : 2041484973 stmt(relate) ， Tree ID : 510570005 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 720187345
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1459230587 dot graph subgraph  start ID : 1392753319 stmt(relate) ， Tree ID : 720187345 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1683586493
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_2045688601 dot graph subgraph  start ID : 1211585758 stmt(relate) ， Tree ID : 1683586493 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 413748801
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1948655724 dot graph subgraph  start ID : 1441758485 stmt(relate) ， Tree ID : 413748801 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1613044272
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_473888654 dot graph subgraph  start ID : 5344303 stmt(relate) ， Tree ID : 1613044272 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1930570802
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_355568644 dot graph subgraph  start ID : 267260979 stmt(relate) ， Tree ID : 1930570802 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 495599426
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 592190652 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2039155137
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 592500081 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 2039155137
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 874209768 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2039155137
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1103257248 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2039155137
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1006248882 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2039155137
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 168484605 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 435088055
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1728799432 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 435088055
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 432131084 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 435088055
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 645821098 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 435088055
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 257280947 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 435088055
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 437475387 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
gimple stmt in succ := 15 
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847beee8
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f3d842d27f8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1498382000
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 40368102 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1498382000
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 1835491187 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1498382000
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1244089070 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1252823133 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph start relate for1ID : 713067163
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1109631813 dot graph subgraph  start ID : 846961973 stmt(relate) ， Tree ID : 713067163 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 191580301
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1511350049 dot graph subgraph  start ID : 928040528 stmt(relate) ， Tree ID : 191580301 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 230085591
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_902521933 dot graph subgraph  start ID : 52797225 stmt(relate) ， Tree ID : 230085591 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1705197931
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_2036205179 dot graph subgraph  start ID : 1599199257 stmt(relate) ， Tree ID : 1705197931 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 495599426
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_759809490 dot graph subgraph  start ID : 592190652 stmt(relate) ， Tree ID : 495599426 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 2039155137
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_378005618 dot graph subgraph  start ID : 168484605 stmt(relate) ， Tree ID : 2039155137 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 435088055
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1347952118 dot graph subgraph  start ID : 437475387 stmt(relate) ， Tree ID : 435088055 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1498382000
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_658014444 dot graph subgraph  start ID : 1244089070 stmt(relate) ， Tree ID : 1498382000 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>

 ================== pre trace ptable ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :888========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :889========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1821840773
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1013583088 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1821840773
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 674777120 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1821840773
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 266547777 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1821840773
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 905254577 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1821840773
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1267277201 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1821840773
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1140757545 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :890========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 126042436
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1309242150 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 126042436
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 429846050 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 126042436
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 561130491 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 126042436
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 890557934 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 126042436
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 861977134 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
is Other function make_linked_ref
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
gimple stmt in succ := 15 
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1206951589
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1147838882 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1206951589
from find_ref_by_name basic block 3dot graph end relate end

_2 = strcmp (_1, name_7(D));
dot graph relate stmt start ID : 1299452522 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1206951589
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 557849941 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1188206984
from make_linked_ref basic block 2dot graph end relate end

ret_4 = alloc_ref (name_2(D));
dot graph relate stmt start ID : 987460061 stmt(call) :In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1801939011
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 293546469 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1801939011
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 2097091875 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1801939011
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1165805413 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1801939011
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1196068402 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1801939011
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1985813406 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1801939011
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1925614903 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f3d847bef30
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f3d842d2810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1186281876
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 436145699 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1186281876
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1753251715 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1186281876
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 860639001 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1186281876
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1449728787 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1186281876
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 280545188 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1127186778 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph start relate for1ID : 66506830
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_207499717 dot graph subgraph  start ID : 1709218613 stmt(relate) ， Tree ID : 66506830 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 854853188
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1547822389 dot graph subgraph  start ID : 571334736 stmt(relate) ， Tree ID : 854853188 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 82053420
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_120460675 dot graph subgraph  start ID : 1111043193 stmt(relate) ， Tree ID : 82053420 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1168827629
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_68527894 dot graph subgraph  start ID : 27397047 stmt(relate) ， Tree ID : 1168827629 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1163840418
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1673864825 dot graph subgraph  start ID : 2146700256 stmt(relate) ， Tree ID : 1163840418 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 809910615
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1429702826 dot graph subgraph  start ID : 1770070320 stmt(relate) ， Tree ID : 809910615 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1821840773
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_498373944 dot graph subgraph  start ID : 1140757545 stmt(relate) ， Tree ID : 1821840773 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 126042436
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_87511668 dot graph subgraph  start ID : 861977134 stmt(relate) ， Tree ID : 126042436 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1206951589
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_172777112 dot graph subgraph  start ID : 557849941 stmt(relate) ， Tree ID : 1206951589 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1188206984
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1360351079 dot graph subgraph  start ID : 987460061 stmt(relate) ， Tree ID : 1188206984 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1801939011
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1294463258 dot graph subgraph  start ID : 1925614903 stmt(relate) ， Tree ID : 1801939011 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1186281876
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1320615994 dot graph subgraph  start ID : 280545188 stmt(relate) ， Tree ID : 1186281876 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847bec60
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f3d842d2750>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_512319953 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1852313199 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d847bec18
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f3d842d2738>
 <ssa_name 0x7f3d847bec18
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f3d842d2738>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d847bec18
    type <pointer_type 0x7f3d842c75e8
        type <array_type 0x7f3d842c2540 type <integer_type 0x7f3d847cb348 unsigned char>
            BLK
            size <integer_cst 0x7f3d842b1840 constant 160>
            unit-size <integer_cst 0x7f3d842b1828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c2498>
            pointer_to_this <pointer_type 0x7f3d842c75e8>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f3d842d2738>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_361339330 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1499780014 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1506768563 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_654885799 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1449388241 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_525090328 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1850954202 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1287717999 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_303221583 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1277544575 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_326516228 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_739367283 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_883312642 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1187155229 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_41612422 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1163857830 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_166858360 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_249112139 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daab0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f3d842d29c0>
 <ssa_name 0x7f3d842daab0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f3d842d29c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_564196572 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_287319035 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_317640034 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_90577749 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1717021861 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_816013978 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_178089418 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1889798974 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_28881409 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1472552676 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1062931320 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_541201362 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1177382227 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1424270651 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2040981377 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_536667142 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2079156450 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1342885970 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1061757470 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1782627004 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f3d842d2540
    type <array_type 0x7f3d842c2e70
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        QI size <integer_cst 0x7f3d847b6ca8 8> unit-size <integer_cst 0x7f3d847b6cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f3d842c2dc8 type <integer_type 0x7f3d847cb000 sizetype>
            DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6be8 0> max <integer_cst 0x7f3d847b6be8 0>>
        pointer_to_this <pointer_type 0x7f3d842c7348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 483120322
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1364979054 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 483120322
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 912687931 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 483120322
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 809636550 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 483120322
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2104346337 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 483120322
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1796000574 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1996791779
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 2145958759 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1996791779
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 812374756 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1996791779
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 16166491 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1996791779
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 247587251 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1996791779
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1376571328 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_303485527 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_565227285 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 41983480
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1467149078 dot graph subgraph  start ID : 1248126460 stmt(relate) ， Tree ID : 41983480 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 518550094
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2020507388 dot graph subgraph  start ID : 556150469 stmt(relate) ， Tree ID : 518550094 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 815662624
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1381241263 dot graph subgraph  start ID : 1170933044 stmt(relate) ， Tree ID : 815662624 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1547093541
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1645238496 dot graph subgraph  start ID : 1913969180 stmt(relate) ， Tree ID : 1547093541 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 483120322
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1762822714 dot graph subgraph  start ID : 1796000574 stmt(relate) ， Tree ID : 483120322 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1996791779
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1410122673 dot graph subgraph  start ID : 1376571328 stmt(relate) ， Tree ID : 1996791779 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 678270387
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1951324035 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 678270387
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 206103 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 678270387
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 2102541038 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 678270387
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1844821764 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 678270387
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 536873246 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2034213840 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1040224087 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1373844125
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1598630716 dot graph subgraph  start ID : 974179540 stmt(relate) ， Tree ID : 1373844125 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1190247588
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1669357197 dot graph subgraph  start ID : 252604956 stmt(relate) ， Tree ID : 1190247588 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 678270387
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1523344409 dot graph subgraph  start ID : 536873246 stmt(relate) ， Tree ID : 678270387 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 434561480
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 185497311 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 434561480
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 772988811 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 434561480
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 83078406 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 434561480
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 34805442 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 434561480
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 771463923 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da2d0
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 895453163
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 50971934 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 895453163
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1019051174 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 895453163
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 124540843 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 895453163
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 354457461 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 895453163
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1584278459 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 895453163
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1591689921 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_227481201 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_818036074 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 881643460
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1089444769 dot graph subgraph  start ID : 1191599289 stmt(relate) ， Tree ID : 881643460 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1713128092
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1990303916 dot graph subgraph  start ID : 1450100102 stmt(relate) ， Tree ID : 1713128092 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1354197595
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_80675099 dot graph subgraph  start ID : 1375581502 stmt(relate) ， Tree ID : 1354197595 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 595713317
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_2059752293 dot graph subgraph  start ID : 133588174 stmt(relate) ， Tree ID : 595713317 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 434561480
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_521090655 dot graph subgraph  start ID : 771463923 stmt(relate) ， Tree ID : 434561480 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 895453163
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_2031999135 dot graph subgraph  start ID : 1591689921 stmt(relate) ， Tree ID : 895453163 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 476148045
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1729337251 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 476148045
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 449347995 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 476148045
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 362878237 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 476148045
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 622077690 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 476148045
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 2047978711 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2032235434
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 2145422099 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2032235434
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 716621186 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 2032235434
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 319313267 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2032235434
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 183435762 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2032235434
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1489609997 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2032235434
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 402391673 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 113590272
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1297844836 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 113590272
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 269213139 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 113590272
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1132641446 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 113590272
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1422385680 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 113590272
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 623670600 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_569436257 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_866591953 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_851151801 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1387472332 dot graph subgraph  start ID : 169040024 stmt(relate) ， Tree ID : 1690217146 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1839834039
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1956036723 dot graph subgraph  start ID : 853653109 stmt(relate) ， Tree ID : 1839834039 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_693972069 dot graph subgraph  start ID : 1473268929 stmt(relate) ， Tree ID : 1196287145 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 2163836
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1468147431 dot graph subgraph  start ID : 1242634615 stmt(relate) ， Tree ID : 2163836 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 479019417
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1868305368 dot graph subgraph  start ID : 1791279006 stmt(relate) ， Tree ID : 479019417 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 195523304
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1215062724 dot graph subgraph  start ID : 1907738587 stmt(relate) ， Tree ID : 195523304 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 13348473
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1352662918 dot graph subgraph  start ID : 1600059327 stmt(relate) ， Tree ID : 13348473 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 791532413
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1780780117 dot graph subgraph  start ID : 978717329 stmt(relate) ， Tree ID : 791532413 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 558008140
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1691210769 dot graph subgraph  start ID : 160310254 stmt(relate) ， Tree ID : 558008140 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1393543654
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_934516522 dot graph subgraph  start ID : 2075482304 stmt(relate) ， Tree ID : 1393543654 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 625149605
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_82644464 dot graph subgraph  start ID : 168901964 stmt(relate) ， Tree ID : 625149605 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 944790368
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2054089007 dot graph subgraph  start ID : 2082698392 stmt(relate) ， Tree ID : 944790368 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 476148045
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1556594212 dot graph subgraph  start ID : 2047978711 stmt(relate) ， Tree ID : 476148045 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2032235434
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_2130623176 dot graph subgraph  start ID : 402391673 stmt(relate) ， Tree ID : 2032235434 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 113590272
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1938840793 dot graph subgraph  start ID : 623670600 stmt(relate) ， Tree ID : 113590272 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 699760714
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 110670412 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 699760714
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1737968426 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 699760714
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 41887063 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 699760714
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 513062086 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 699760714
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1956209631 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 155477336
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1810906922 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 155477336
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 77939122 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 155477336
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1288118782 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 155477336
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1085808954 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 155477336
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 701609722 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 155477336
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1857555040 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f3d842da318
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d63f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f3d842d2858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1552761524
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1097543724 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1552761524
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1760953983 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1552761524
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 99249945 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1552761524
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 418207507 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1552761524
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1481775703 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1314312670 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1770870426 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1115072173 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1690217146
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_858039791 dot graph subgraph  start ID : 169040024 stmt(relate) ， Tree ID : 1690217146 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1839834039
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_557903300 dot graph subgraph  start ID : 853653109 stmt(relate) ， Tree ID : 1839834039 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1196287145
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1197716637 dot graph subgraph  start ID : 1473268929 stmt(relate) ， Tree ID : 1196287145 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 2163836
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_764645150 dot graph subgraph  start ID : 1242634615 stmt(relate) ， Tree ID : 2163836 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 479019417
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_2114497512 dot graph subgraph  start ID : 1791279006 stmt(relate) ， Tree ID : 479019417 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 195523304
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1180856165 dot graph subgraph  start ID : 1907738587 stmt(relate) ， Tree ID : 195523304 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 13348473
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_556002296 dot graph subgraph  start ID : 1600059327 stmt(relate) ， Tree ID : 13348473 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 791532413
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1521546528 dot graph subgraph  start ID : 978717329 stmt(relate) ， Tree ID : 791532413 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 558008140
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1880616879 dot graph subgraph  start ID : 160310254 stmt(relate) ， Tree ID : 558008140 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1393543654
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_666672708 dot graph subgraph  start ID : 2075482304 stmt(relate) ， Tree ID : 1393543654 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 625149605
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1112031307 dot graph subgraph  start ID : 168901964 stmt(relate) ， Tree ID : 625149605 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 944790368
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1922503943 dot graph subgraph  start ID : 2082698392 stmt(relate) ， Tree ID : 944790368 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 476148045
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1179734794 dot graph subgraph  start ID : 2047978711 stmt(relate) ， Tree ID : 476148045 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2032235434
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_920757290 dot graph subgraph  start ID : 402391673 stmt(relate) ， Tree ID : 2032235434 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 113590272
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2077981279 dot graph subgraph  start ID : 623670600 stmt(relate) ， Tree ID : 113590272 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 699760714
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_843158069 dot graph subgraph  start ID : 1956209631 stmt(relate) ， Tree ID : 699760714 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 155477336
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_998696413 dot graph subgraph  start ID : 1857555040 stmt(relate) ， Tree ID : 155477336 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1552761524
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1218616413 dot graph subgraph  start ID : 1481775703 stmt(relate) ， Tree ID : 1552761524 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^

dot graph START

======================================================================
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1928967023
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1700306135 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1928967023
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 928687805 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1928967023
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1733884283 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1928967023
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1105584011 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1928967023
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2026231529 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f3d842da360
    type <pointer_type 0x7f3d842c73f0
        type <pointer_type 0x7f3d842c2738 type <pointer_type 0x7f3d842c2690>
            public unsigned DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d842c73f0>>
        public unsigned DI size <integer_cst 0x7f3d847b6bb8 64> unit-size <integer_cst 0x7f3d847b6bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f3d842cc780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f3d842d2870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1347354618
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1204833957 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1347354618
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 296955389 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1347354618
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 681646674 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1347354618
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 371662979 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1347354618
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2067825815 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1796718847 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1229702770 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 1399129815
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_478245467 dot graph subgraph  start ID : 884120523 stmt(relate) ， Tree ID : 1399129815 : *tail_6(D) = _3;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1691226087
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_846951836 dot graph subgraph  start ID : 2011199382 stmt(relate) ， Tree ID : 1691226087 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 921077627
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1994347921 dot graph subgraph  start ID : 1506361902 stmt(relate) ， Tree ID : 921077627 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 538867971
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_445259331 dot graph subgraph  start ID : 850403640 stmt(relate) ， Tree ID : 538867971 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1928967023
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_2027808002 dot graph subgraph  start ID : 2026231529 stmt(relate) ， Tree ID : 1928967023 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1347354618
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_402866569 dot graph subgraph  start ID : 2067825815 stmt(relate) ， Tree ID : 1347354618 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1966805860 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1760941233 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1069539277 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_931353519 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1535961528 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_101790424 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1852110809 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1466459159 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_944948493 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_703323574 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_537591925 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_726431868 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_256146062 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1466279730 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_312832504 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1361730073 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daab0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f3d842d29c0>
 <ssa_name 0x7f3d842daab0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f3d842d29c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1345027612 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1660187122 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_419080382 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1641983001 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_194350148 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_790743361 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1562325168 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1991068995 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2020446132 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2040570635 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_690537184 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1867310405 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_338346318 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_570861538 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_122693326 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_157668530 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_184319123 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1192232603 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1089022049 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1720280652 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f3d842d2540
    type <array_type 0x7f3d842c2e70
        type <integer_type 0x7f3d842babd0 char public QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842c2000>>
        QI size <integer_cst 0x7f3d847b6ca8 8> unit-size <integer_cst 0x7f3d847b6cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f3d842c2dc8 type <integer_type 0x7f3d847cb000 sizetype>
            DI
            size <integer_cst 0x7f3d847b6bb8 constant 64>
            unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6be8 0> max <integer_cst 0x7f3d847b6be8 0>>
        pointer_to_this <pointer_type 0x7f3d842c7348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1294023027
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 793649211 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1294023027
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1039256163 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1294023027
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 91487872 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1294023027
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1496972785 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1294023027
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1576848088 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da750
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f3d842d2930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 817919741
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1753118847 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 817919741
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 895644171 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 817919741
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1130752245 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 817919741
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 967365273 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 817919741
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 93188135 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_643455719 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1386445655 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 41983480
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1735171136 dot graph subgraph  start ID : 1248126460 stmt(relate) ， Tree ID : 41983480 : _5 = _4 + prefixlen_9(D);
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 518550094
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_837805868 dot graph subgraph  start ID : 556150469 stmt(relate) ， Tree ID : 518550094 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 815662624
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_29705369 dot graph subgraph  start ID : 1170933044 stmt(relate) ， Tree ID : 815662624 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1547093541
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1150012656 dot graph subgraph  start ID : 1913969180 stmt(relate) ， Tree ID : 1547093541 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 483120322
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_681391215 dot graph subgraph  start ID : 1796000574 stmt(relate) ， Tree ID : 483120322 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1996791779
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2050151501 dot graph subgraph  start ID : 1376571328 stmt(relate) ， Tree ID : 1996791779 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1294023027
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1043099643 dot graph subgraph  start ID : 1576848088 stmt(relate) ， Tree ID : 1294023027 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 817919741
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1371928399 dot graph subgraph  start ID : 93188135 stmt(relate) ， Tree ID : 817919741 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f3d842da798
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f3d842d2948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1381445961
from alloc_ref_with_prefix basic block 2dot graph end relate end

len_8 = strlen (name_7(D));
dot graph relate stmt start ID : 1942789937 stmt(call) :In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1381445961
from alloc_ref_with_prefix basic block 2dot graph end relate end

ref_11 = calloc (1, _2);
dot graph relate stmt start ID : 1892671584 stmt(call) :./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1381445961
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1539114492 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1381445961
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2127109061 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1381445961
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 937420539 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_480652893 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1699906065 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1373844125
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_83959919 dot graph subgraph  start ID : 974179540 stmt(relate) ， Tree ID : 1373844125 : _5 = _4 + prefixlen_9(D);
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1190247588
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1274302104 dot graph subgraph  start ID : 252604956 stmt(relate) ， Tree ID : 1190247588 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 678270387
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_591678580 dot graph subgraph  start ID : 536873246 stmt(relate) ， Tree ID : 678270387 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1381445961
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_175447791 dot graph subgraph  start ID : 937420539 stmt(relate) ， Tree ID : 1381445961 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da9d8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cca80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d29a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_623791242 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_21043021 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_993367532 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_229426441 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_916687192 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2124119777 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1196791714 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1009875327 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daa20
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f3d842d67e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_620091849 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_435753722 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_597562815 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1457897717 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_465459091 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1747575471 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2139288932 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_368126944 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daab0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f3d842d29c0>
 <ssa_name 0x7f3d842daab0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <var_decl 0x7f3d842d6750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f3d842d29c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_643191466 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1363733684 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2138105202 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2024637427 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1159039973 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1883293138 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1416268271 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da900
    type <pointer_type 0x7f3d842c7000
        type <array_type 0x7f3d842c22a0 type <integer_type 0x7f3d842babd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c7000>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f3d842d2960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1138665386 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_673230029 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daaf8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842cc980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f3d842d29d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1896921165 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_691087803 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daa68
    type <integer_type 0x7f3d842ba348 size_t public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb738 precision:64 min <integer_cst 0x7f3d847b6e88 0> max <integer_cst 0x7f3d847b7500 18446744073709551615> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f3d842cca00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_757189948 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1023739621 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1282766384 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_932637740 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1647530863 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1303809405 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1926005272 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842da990
    type <pointer_type 0x7f3d847d2000
        type <void_type 0x7f3d847cbf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f3d847d2000>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d847d79d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f3d842d2990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1876957305 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_73012949 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842dac60
    type <pointer_type 0x7f3d842c4c78
        type <array_type 0x7f3d842c4bd0 type <integer_type 0x7f3d842bac78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c4c78>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f3d842d29f0>
 <ssa_name 0x7f3d842dac60
    type <pointer_type 0x7f3d842c4c78
        type <array_type 0x7f3d842c4bd0 type <integer_type 0x7f3d842bac78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c4c78>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f3d842d29f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842dac60
    type <pointer_type 0x7f3d842c4c78
        type <array_type 0x7f3d842c4bd0 type <integer_type 0x7f3d842bac78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f3d842c21f8>
            pointer_to_this <pointer_type 0x7f3d842c4c78>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f3d842d29f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1902641402 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_1 = &list_3->name;
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_926265371 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842dadc8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842ccc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d2a50>
 <ssa_name 0x7f3d842dadc8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842ccc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d2a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842dadc8
    type <pointer_type 0x7f3d842bad20
        type <integer_type 0x7f3d842bac78 char readonly QI
            size <integer_cst 0x7f3d847b6ca8 constant 8>
            unit-size <integer_cst 0x7f3d847b6cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb3f0 precision:8 min <integer_cst 0x7f3d842b1738 -128> max <integer_cst 0x7f3d842b1720 127>
            pointer_to_this <pointer_type 0x7f3d842bad20>>
        unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842ba888>>
    var <parm_decl 0x7f3d842ccc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f3d842d2a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1082888276 dot graph subgraph  _2 = strcmp (_1, name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_375249603 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f3d842daca8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f3d842daca8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daca8
    type <integer_type 0x7f3d847cb5e8 int public SI
        size <integer_cst 0x7f3d847b6df8 constant 32>
        unit-size <integer_cst 0x7f3d847b6e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d847cb5e8 precision:32 min <integer_cst 0x7f3d847b6db0 -2147483648> max <integer_cst 0x7f3d847b6dc8 2147483647>
        pointer_to_this <pointer_type 0x7f3d847d29d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
gimple stmt in succ := 3 
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1362019093 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1680451091 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;44m =======print_function_path free_refs  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m
[40;42m =======pre_check_funciton:free_refs========= [0m
[40;42m =======start_check_funciton:free_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>
 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
if (ref_1 != 0B)
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
[40;31m    branch possiable have return in bb:4 [0m
gimple stmt in succ := 4 
beacuse in succ := 5 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry free_refs
dot graph target entry end

if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
dot graph target loc start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 4: if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph stmt start if (ref_1 != 0B)
free_ref (ref_1);
dot graph stmt end

dot graph stmt start if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
dot graph entry free_refs
dot graph target entry end

free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (ref_1);
free_ref (ref_1);
dot graph stmt end

dot graph stmt start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1833147320
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1827478184 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1827478184 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1833147320
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1280542914 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1280542914 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1833147320
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1824952604 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1824952604 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1833147320
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 48121480 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1833147320
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1923734380 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1833147320
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1041202640 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 38743034
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1800888159 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1800888159 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 38743034
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 52758966 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 52758966 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 38743034
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1922036172 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1922036172 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f3d842daea0
    type <pointer_type 0x7f3d842c2690
        type <record_type 0x7f3d842c25e8 ref BLK
            size <integer_cst 0x7f3d8488b0a8 constant 640>
            unit-size <integer_cst 0x7f3d842b1768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f3d842c25e8 fields <field_decl 0x7f3d842bd850 next> context <translation_unit_decl 0x7f3d847c1168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f3d842c2690>>
        public unsigned DI
        size <integer_cst 0x7f3d847b6bb8 constant 64>
        unit-size <integer_cst 0x7f3d847b6bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f3d842c2738>>
    var <parm_decl 0x7f3d842ccc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f3d842d2a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 38743034
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1069672783 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 38743034
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1191424352 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 38743034
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 447782554 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry free_refs
dot graph target entry end

next_5 = ref_1->next;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target loc start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 3: next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start next_5 = ref_1->next;
free_ref (ref_1);
dot graph stmt end

dot graph stmt start next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph stmt end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_819110300 dot graph subgraph  if (ref_1 != 0B)
ref_1 = PHI <ref_3(D)(2), next_5(3)>
dot graph subgrapend

dot graph start relate for1ID : 1863578657
from free_ref basic block 3dot graph end relate end

subgraph cluster_1882512156 dot graph subgraph  start ID : 1085910558 stmt(relate) ， Tree ID : 1863578657 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1732516094
from free_ref basic block 3dot graph end relate end

subgraph cluster_1204972502 dot graph subgraph  start ID : 1037557590 stmt(relate) ， Tree ID : 1732516094 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1833147320
from free_ref basic block 3dot graph end relate end

subgraph cluster_1842849921 dot graph subgraph  start ID : 1041202640 stmt(relate) ， Tree ID : 1833147320 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 38743034
from free_ref basic block 3dot graph end relate end

subgraph cluster_1017794892 dot graph subgraph  start ID : 447782554 stmt(relate) ， Tree ID : 38743034 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;44m =======print_function_path free_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = get_local_heads ();
_2 = (long int) _1;
local_refs_12 = (struct ref *) _2;
remote_tail = &remote_refs;
_3 = remote_refs;
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
if (_4 != 0)
  goto <bb 3>; [34.00%]
else
  goto <bb 4>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 365072224]:
// predicted unlikely by goto predictor.
goto <bb 6>; [100.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 708669601]:
_5 = remote_refs;
if (_5 == 0B)
  goto <bb 5>; [9.81%]
else
  goto <bb 6>; [90.19%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 69520487]:
_6 = stderr;
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
// predicted unlikely by goto predictor.

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 1073741824]:
cleanup:
free_refs (local_refs_12);
_7 = remote_refs;
free_refs (_7);
return 0;

=======Mapping node_fun:match_refs=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 15>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
dst_name_18 = &src_9->name;
_1 = src_9->peer_ref;
if (_1 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
// predicted unlikely by continue predictor.
goto <bb 14>; [100.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 286689065]:
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
if (dst_peer_20 != 0B)
  goto <bb 6>; [70.00%]
else
  goto <bb 8>; [30.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 200682346]:
_2 = dst_peer_20->peer_ref;
if (_2 != 0B)
  goto <bb 7>; [54.59%]
else
  goto <bb 12>; [45.41%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 109552493]:
// predicted unlikely by goto predictor.
goto <bb 13>; [100.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 86006719]:
_3 = BIT_FIELD_REF <MEM[(const struct refspec *)0B], 8, 0>;
_4 = _3 & 4;
if (_4 != 0)
  goto <bb 9>; [67.00%]
else
  goto <bb 11>; [33.00%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 57624502]:
_5 = flags_15(D) & 3;
if (_5 == 0)
  goto <bb 10>; [34.00%]
else
  goto <bb 11>; [66.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 19592331]:
// predicted unlikely by goto predictor.
goto <bb 13>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 66414388]:
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
_6 = &src_9->new_sha1;
_7 = &dst_peer_23->new_sha1;
hashcpy (_7, _6);

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 157544241]:
# dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_10->peer_ref = src_9;
_8 = MEM[(const struct refspec *)0B].force;
dst_peer_10->force = _8;

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 286689065]:
free_name:
free (dst_name_18);

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 955630227]:
src_28 = src_9->next;

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 1073741824]:
# src_9 = PHI <src_16(D)(2), src_28(14)>
if (src_9 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 16>; [11.00%]

=======is loop:0=========

 bb index 16 
<bb 16> [local count: 118111600]:
return 0;

=======Mapping node_fun:make_linked_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
return ret_4;

=======Mapping node_fun:tail_link_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
_1 = *tail_6(D);
*_1 = ref_7(D);
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
ref_10 = ref_4->next;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ref_4 = PHI <ref_7(D)(2), ref_10(3)>
_2 = ref_4->next;
if (_2 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
_3 = &ref_4->next;
*tail_6(D) = _3;
return;

=======Mapping node_fun:alloc_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
return _4;

=======Mapping node_fun:alloc_ref_with_prefix=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
len_8 = strlen (name_7(D));
_1 = len_8 + prefixlen_9(D);
_2 = _1 + 81;
ref_11 = calloc (1, _2);
_3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
_4 = &ref_11->name;
_5 = _4 + prefixlen_9(D);
memcpy (_5, name_7(D), len_8);
return ref_11;

=======Mapping node_fun:find_ref_by_name=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 114863530]:
goto <bb 5>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1014686026]:
_1 = &list_3->name;
_2 = strcmp (_1, name_7(D));
if (_2 == 0)
  goto <bb 6>; [5.50%]
else
  goto <bb 4>; [94.50%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 958878296]:
list_8 = list_3->next;

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 1073741824]:
# list_3 = PHI <list_5(D)(2), list_8(4)>
if (list_3 != 0B)
  goto <bb 3>; [94.50%]
else
  goto <bb 6>; [5.50%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 114863531]:
# _4 = PHI <list_3(3), 0B(5)>
return _4;

=======Mapping node_fun:free_refs=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
next_5 = ref_1->next;
free_ref (ref_1);

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ref_1 = PHI <ref_3(D)(2), next_5(3)>
if (ref_1 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
return;

=======Mapping node_fun:free_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (ref_5(D) == 0B)
  goto <bb 4>; [30.95%]
else
  goto <bb 3>; [69.05%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 741418729]:
_1 = ref_5(D)->peer_ref;
free_ref (_1);
_2 = ref_5(D)->remote_status;
free (_2);
_3 = ref_5(D)->symref;
free (_3);
free (ref_5(D));

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 1 [0m
[40;34m    gimple free   count : 4 [0m
[40;34m    all ptable point : 39 [0m
[40;34m    analyzable ptable point : 33 [0m
[40;34m    analyzable ptable all point stmt : 98 [0m
[40;34m    used_stmt array stack totalsize of : 0.003144 mb[0m
[40;34m    collect time: : 0.009073 s [0m
[40;34m    algorithm time: 0.343659 s [0m
[40;34m    gimple stmt count : : 87 [0m
[40;34m    this report analysis in Tue May 17 22:42:50 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 76%)
 phase opt and generate             :   0.10 (100%)   0.28 (100%)   0.39 (100%)   626k ( 22%)
 dump files                         :   0.01 ( 10%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 callgraph functions expansion      :   0.03 ( 30%)   0.00 (  0%)   0.04 ( 10%)   521k ( 18%)
 ipa lto gimple in                  :   0.00 (  0%)   0.00 (  0%)   0.01 (  3%)    78k (  3%)
 ipa points-to                      :   0.01 ( 10%)   0.00 (  0%)   0.00 (  0%)  5056  (  0%)
 df live regs                       :   0.00 (  0%)   0.00 (  0%)   0.01 (  3%)     0  (  0%)
 tree strlen optimization           :   0.01 ( 10%)   0.00 (  0%)   0.00 (  0%)    10k (  0%)
 dead store elim1                   :   0.00 (  0%)   0.00 (  0%)   0.01 (  3%)  1968  (  0%)
 plugin execution                   :   0.06 ( 60%)   0.28 (100%)   0.34 ( 87%)  1728  (  0%)
 initialize rtl                     :   0.00 (  0%)   0.00 (  0%)   0.01 (  3%)    12k (  0%)
 rest of compilation                :   0.01 ( 10%)   0.00 (  0%)   0.01 (  3%)    29k (  1%)
 TOTAL                              :   0.10          0.28          0.39         2845k
/usr/bin/ld: /tmp/ccz5v5h4.ltrans0.ltrans.o: in function `match_refs':
<artificial>:(.text+0x19c): undefined reference to `hashcpy'
/usr/bin/ld: /tmp/ccz5v5h4.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x21b): undefined reference to `get_local_heads'
collect2: error: ld returned 1 exit status
